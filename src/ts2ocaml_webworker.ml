[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Ts2ocaml_min
open Ts2ocaml_es
module DOMHighResTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> Ojs.float_of_js x2
    and t_to_js : t -> Ojs.t = fun (x1 : float) -> Ojs.float_to_js x1
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4 : Ojs.t) -> t_of_js x4
    and t_0_to_js : t_0 -> Ojs.t = fun (x3 : t) -> t_to_js x3
  end
module PerformanceMeasureOptions =
  struct
    type t = [ `PerformanceMeasureOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6 : Ojs.t) -> t_of_js x6
    and t_0_to_js : t_0 -> Ojs.t = fun (x5 : t) -> t_to_js x5
    type tags = [ `PerformanceMeasureOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMeasureOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9 : Ojs.t) -> intf_of_js __tags_of_js x9
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7 : __tags intf) -> intf_to_js __tags_to_js x7
    let (get_detail : 'tags this -> any) =
      fun (x11 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x13 : 'tags this) ->
        fun (x14 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13) "detail"
            (any_to_js x14)
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x16 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x16) "duration")
    let (set_duration : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x18 : 'tags this) ->
        fun (x19 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x18) "duration"
            (DOMHighResTimeStamp.t_to_js x19)
    let (get_end : 'tags this -> DOMHighResTimeStamp.t or_string) =
      fun (x21 : 'tags this) ->
        or_string_of_js DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x21) "end")
    let (set_end : 'tags this -> DOMHighResTimeStamp.t or_string -> unit) =
      fun (x24 : 'tags this) ->
        fun (x25 : DOMHighResTimeStamp.t or_string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x24) "end"
            (or_string_to_js DOMHighResTimeStamp.t_to_js x25)
    let (get_start : 'tags this -> DOMHighResTimeStamp.t or_string) =
      fun (x28 : 'tags this) ->
        or_string_of_js DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x28) "start")
    let (set_start : 'tags this -> DOMHighResTimeStamp.t or_string -> unit) =
      fun (x31 : 'tags this) ->
        fun (x32 : DOMHighResTimeStamp.t or_string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x31) "start"
            (or_string_to_js DOMHighResTimeStamp.t_to_js x32)
    let cast_from = Obj.magic
  end
module PerformanceEntry =
  struct
    type t = [ `PerformanceEntry ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x36 : Ojs.t) -> t_of_js x36
    and t_0_to_js : t_0 -> Ojs.t = fun (x35 : t) -> t_to_js x35
    type tags = [ `PerformanceEntry ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEntry ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x39 : Ojs.t) -> intf_of_js __tags_of_js x39
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x37 : __tags intf) -> intf_to_js __tags_to_js x37
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x41 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x41) "duration")
    let (get_entryType : 'tags this -> string) =
      fun (x43 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x43) "entryType")
    let (get_name : 'tags this -> string) =
      fun (x45 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x45) "name")
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x47 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x47) "startTime")
    let (toJSON : 'tags this -> any) =
      fun (x49 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x49) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceEntry") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceEntry")
             [||])
  end
module PerformanceMeasure =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMeasure ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x52 : Ojs.t) -> t_of_js x52
    and t_0_to_js : t_0 -> Ojs.t = fun (x51 : t) -> t_to_js x51
    type tags = [ `PerformanceEntry  | `PerformanceMeasure ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMeasure ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x55 : Ojs.t) -> intf_of_js __tags_of_js x55
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x53 : __tags intf) -> intf_to_js __tags_to_js x53
    let (get_detail : 'tags this -> any) =
      fun (x57 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x57) "detail")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceMeasure")
             [||])
  end
module PerformanceMarkOptions =
  struct
    type t = [ `PerformanceMarkOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x60 : Ojs.t) -> t_of_js x60
    and t_0_to_js : t_0 -> Ojs.t = fun (x59 : t) -> t_to_js x59
    type tags = [ `PerformanceMarkOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceMarkOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x63 : Ojs.t) -> intf_of_js __tags_of_js x63
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x61 : __tags intf) -> intf_to_js __tags_to_js x61
    let (get_detail : 'tags this -> any) =
      fun (x65 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x65) "detail")
    let (set_detail : 'tags this -> any -> unit) =
      fun (x67 : 'tags this) ->
        fun (x68 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x67) "detail"
            (any_to_js x68)
    let (get_startTime : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x70 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x70) "startTime")
    let (set_startTime : 'tags this -> DOMHighResTimeStamp.t -> unit) =
      fun (x72 : 'tags this) ->
        fun (x73 : DOMHighResTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x72) "startTime"
            (DOMHighResTimeStamp.t_to_js x73)
    let cast_from = Obj.magic
  end
module PerformanceMark =
  struct
    type t = [ `PerformanceEntry  | `PerformanceMark ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x76 : Ojs.t) -> t_of_js x76
    and t_0_to_js : t_0 -> Ojs.t = fun (x75 : t) -> t_to_js x75
    type tags = [ `PerformanceEntry  | `PerformanceMark ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceMark ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x79 : Ojs.t) -> intf_of_js __tags_of_js x79
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x77 : __tags intf) -> intf_to_js __tags_to_js x77
    let (get_detail : 'tags this -> any) =
      fun (x81 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x81) "detail")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceMark") "prototype")
    let (create :
      markName:string -> ?markOptions:PerformanceMarkOptions.t -> unit -> t)
      =
      fun ~markName:(x83 : string) ->
        fun ?markOptions:(x84 : PerformanceMarkOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "PerformanceMark")
                 (let x85 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x85 "push" [|(Ojs.string_to_js x83)|]);
                  (match x84 with
                   | Some x86 ->
                       ignore
                         (Ojs.call x85 "push"
                            [|(PerformanceMarkOptions.t_to_js x86)|])
                   | None -> ());
                  x85))
  end
module PerformanceEntryList =
  struct
    type t = PerformanceEntry.t list
    let rec t_of_js : Ojs.t -> t =
      fun (x89 : Ojs.t) -> Ojs.list_of_js PerformanceEntry.t_of_js x89
    and t_to_js : t -> Ojs.t =
      fun (x87 : PerformanceEntry.t list) ->
        Ojs.list_to_js PerformanceEntry.t_to_js x87
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x92 : Ojs.t) -> t_of_js x92
    and t_0_to_js : t_0 -> Ojs.t = fun (x91 : t) -> t_to_js x91
  end
module EventInit =
  struct
    type t = [ `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x94 : Ojs.t) -> t_of_js x94
    and t_0_to_js : t_0 -> Ojs.t = fun (x93 : t) -> t_to_js x93
    type tags = [ `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x97 : Ojs.t) -> intf_of_js __tags_of_js x97
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x95 : __tags intf) -> intf_to_js __tags_to_js x95
    let (get_bubbles : 'tags this -> bool) =
      fun (x99 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x99) "bubbles")
    let (set_bubbles : 'tags this -> bool -> unit) =
      fun (x101 : 'tags this) ->
        fun (x102 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x101) "bubbles"
            (Ojs.bool_to_js x102)
    let (get_cancelable : 'tags this -> bool) =
      fun (x104 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x104) "cancelable")
    let (set_cancelable : 'tags this -> bool -> unit) =
      fun (x106 : 'tags this) ->
        fun (x107 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x106) "cancelable"
            (Ojs.bool_to_js x107)
    let (get_composed : 'tags this -> bool) =
      fun (x109 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x109) "composed")
    let (set_composed : 'tags this -> bool -> unit) =
      fun (x111 : 'tags this) ->
        fun (x112 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x111) "composed"
            (Ojs.bool_to_js x112)
    let cast_from = Obj.magic
  end
module EventListenerOptions =
  struct
    type t = [ `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x115 : Ojs.t) -> t_of_js x115
    and t_0_to_js : t_0 -> Ojs.t = fun (x114 : t) -> t_to_js x114
    type tags = [ `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x118 : Ojs.t) -> intf_of_js __tags_of_js x118
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x116 : __tags intf) -> intf_to_js __tags_to_js x116
    let (get_capture : 'tags this -> bool) =
      fun (x120 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x120) "capture")
    let (set_capture : 'tags this -> bool -> unit) =
      fun (x122 : 'tags this) ->
        fun (x123 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x122) "capture"
            (Ojs.bool_to_js x123)
    let cast_from = Obj.magic
  end
module rec
  AbortSignal:sig
                type t = [ `AbortSignal  | `EventTarget ] intf
                type t_0 = t
                [@@@js.stop ]
                type tags = [ `AbortSignal  | `EventTarget ]
                type tags_0 = tags
                [@@@js.start ]
                [@@@js.implem
                  type tags = [ `AbortSignal  | `EventTarget ]
                  type tags_0 = tags]
                type 'tags this =
                  'tags intf constraint 'tags = [> `AbortSignal ]
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
                val get_aborted : 'tags this -> bool
                val get_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null
                val set_onabort :
                  'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit
                val addEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val addEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:AddEventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener :
                  'tags this ->
                    type_:'K ->
                      listener:(this:t -> ev:any -> any) ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val removeEventListener' :
                  'tags this ->
                    type_:string ->
                      listener:EventListenerOrEventListenerObject.t ->
                        ?options:EventListenerOptions.t or_boolean ->
                          unit -> unit
                val cast_from : 'tags this -> t
                val prototype : unit -> t
                val create : unit -> t
              end =
  struct
    type t = [ `AbortSignal  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x126 : Ojs.t) -> t_of_js x126
    and t_0_to_js : t_0 -> Ojs.t = fun (x125 : t) -> t_to_js x125
    type tags = [ `AbortSignal  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignal ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x129 : Ojs.t) -> intf_of_js __tags_of_js x129
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x127 : __tags intf) -> intf_to_js __tags_to_js x127
    let (get_aborted : 'tags this -> bool) =
      fun (x131 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x131) "aborted")
    let (get_onabort : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x133 : 'tags this) ->
        or_null_of_js
          (fun (x135 : Ojs.t) ->
             fun ~this:(x136 : t) ->
               fun ~ev:(x137 : Event.t) ->
                 any_of_js
                   (Ojs.apply x135 [|(t_to_js x136);(Event.t_to_js x137)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x133) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x138 : 'tags this) ->
        fun (x139 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x138) "onabort"
            (or_null_to_js
               (fun (x140 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x141 : Ojs.t) ->
                       fun (x142 : Ojs.t) ->
                         any_to_js
                           (x140 ~this:(t_of_js x141)
                              ~ev:(Event.t_of_js x142)))) x139)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x152 : 'tags this) ->
        fun ~type_:(x144 : 'K) ->
          fun ~listener:(x145 : this:t -> ev:any -> any) ->
            fun ?options:(x146 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x154 = this_to_js Obj.magic x152 in
                   Ojs.call (Ojs.get_prop_ascii x154 "addEventListener")
                     "apply"
                     [|x154;((let x147 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x147 "push" [|(Obj.magic x144)|]);
                              ignore
                                (Ojs.call x147 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x150 : Ojs.t) ->
                                           fun (x151 : Ojs.t) ->
                                             any_to_js
                                               (x145 ~this:(t_of_js x150)
                                                  ~ev:(any_of_js x151))))|]);
                              (match x146 with
                               | Some x148 ->
                                   ignore
                                     (Ojs.call x147 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x148)|])
                               | None -> ());
                              x147))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x161 : 'tags this) ->
        fun ~type_:(x155 : string) ->
          fun ~listener:(x156 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x157 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x163 = this_to_js Obj.magic x161 in
                   Ojs.call (Ojs.get_prop_ascii x163 "addEventListener")
                     "apply"
                     [|x163;((let x158 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x158 "push"
                                   [|(Ojs.string_to_js x155)|]);
                              ignore
                                (Ojs.call x158 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x156)|]);
                              (match x157 with
                               | Some x159 ->
                                   ignore
                                     (Ojs.call x158 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x159)|])
                               | None -> ());
                              x158))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x172 : 'tags this) ->
        fun ~type_:(x164 : 'K) ->
          fun ~listener:(x165 : this:t -> ev:any -> any) ->
            fun ?options:(x166 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x174 = this_to_js Obj.magic x172 in
                   Ojs.call (Ojs.get_prop_ascii x174 "removeEventListener")
                     "apply"
                     [|x174;((let x167 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x167 "push" [|(Obj.magic x164)|]);
                              ignore
                                (Ojs.call x167 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x170 : Ojs.t) ->
                                           fun (x171 : Ojs.t) ->
                                             any_to_js
                                               (x165 ~this:(t_of_js x170)
                                                  ~ev:(any_of_js x171))))|]);
                              (match x166 with
                               | Some x168 ->
                                   ignore
                                     (Ojs.call x167 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x168)|])
                               | None -> ());
                              x167))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x181 : 'tags this) ->
        fun ~type_:(x175 : string) ->
          fun ~listener:(x176 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x177 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x183 = this_to_js Obj.magic x181 in
                   Ojs.call (Ojs.get_prop_ascii x183 "removeEventListener")
                     "apply"
                     [|x183;((let x178 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x178 "push"
                                   [|(Ojs.string_to_js x175)|]);
                              ignore
                                (Ojs.call x178 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x176)|]);
                              (match x177 with
                               | Some x179 ->
                                   ignore
                                     (Ojs.call x178 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x179)|])
                               | None -> ());
                              x178))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "AbortSignal")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortSignal") [||])
  end
 and
  AddEventListenerOptions:sig
                            type t =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags =
                              [ `AddEventListenerOptions 
                              | `EventListenerOptions ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags =
                                [ `AddEventListenerOptions 
                                | `EventListenerOptions ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `AddEventListenerOptions ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val get_once : 'tags this -> bool
                            val set_once : 'tags this -> bool -> unit
                            val get_passive : 'tags this -> bool
                            val set_passive : 'tags this -> bool -> unit
                            val get_signal : 'tags this -> AbortSignal.t
                            val set_signal :
                              'tags this -> AbortSignal.t -> unit
                            val cast_from : 'tags this -> t
                          end =
  struct
    type t = [ `AddEventListenerOptions  | `EventListenerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x185 : Ojs.t) -> t_of_js x185
    and t_0_to_js : t_0 -> Ojs.t = fun (x184 : t) -> t_to_js x184
    type tags = [ `AddEventListenerOptions  | `EventListenerOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AddEventListenerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x188 : Ojs.t) -> intf_of_js __tags_of_js x188
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x186 : __tags intf) -> intf_to_js __tags_to_js x186
    let (get_once : 'tags this -> bool) =
      fun (x190 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x190) "once")
    let (set_once : 'tags this -> bool -> unit) =
      fun (x192 : 'tags this) ->
        fun (x193 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x192) "once"
            (Ojs.bool_to_js x193)
    let (get_passive : 'tags this -> bool) =
      fun (x195 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x195) "passive")
    let (set_passive : 'tags this -> bool -> unit) =
      fun (x197 : 'tags this) ->
        fun (x198 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x197) "passive"
            (Ojs.bool_to_js x198)
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x200 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x200) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x202 : 'tags this) ->
        fun (x203 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x202) "signal"
            (AbortSignal.t_to_js x203)
    let cast_from = Obj.magic
  end and
       Event:sig
               type t = [ `Event ] intf
               type t_0 = t
               [@@@js.stop ]
               type tags = [ `Event ]
               type tags_0 = tags
               [@@@js.start ]
               [@@@js.implem type tags = [ `Event ]
                 type tags_0 = tags]
               type 'tags this = 'tags intf constraint 'tags = [> `Event ]
               val t_to_js : t -> Ojs.t
               val t_of_js : Ojs.t -> t
               val t_0_to_js : t_0 -> Ojs.t
               val t_0_of_js : Ojs.t -> t_0
               val get_bubbles : 'tags this -> bool
               val get_cancelBubble : 'tags this -> bool
               val set_cancelBubble : 'tags this -> bool -> unit
               val get_cancelable : 'tags this -> bool
               val get_composed : 'tags this -> bool
               val get_currentTarget : 'tags this -> EventTarget.t or_null
               val get_defaultPrevented : 'tags this -> bool
               val get_eventPhase : 'tags this -> float
               val get_isTrusted : 'tags this -> bool
               val get_returnValue : 'tags this -> bool
               val set_returnValue : 'tags this -> bool -> unit
               val get_srcElement : 'tags this -> EventTarget.t or_null
               val get_target : 'tags this -> EventTarget.t or_null
               val get_timeStamp : 'tags this -> DOMHighResTimeStamp.t
               val get_type : 'tags this -> string
               val composedPath : 'tags this -> EventTarget.t list
               val initEvent :
                 'tags this ->
                   type_:string ->
                     ?bubbles:bool -> ?cancelable:bool -> unit -> unit
               val preventDefault : 'tags this -> unit
               val stopImmediatePropagation : 'tags this -> unit
               val stopPropagation : 'tags this -> unit
               val get_AT_TARGET : 'tags this -> float
               val get_BUBBLING_PHASE : 'tags this -> float
               val get_CAPTURING_PHASE : 'tags this -> float
               val get_NONE : 'tags this -> float
               val cast_from : 'tags this -> t
               val prototype : unit -> t
               val create :
                 type_:string -> ?eventInitDict:EventInit.t -> unit -> t
               val at_target : unit -> float
               val bubbling_phase : unit -> float
               val capturing_phase : unit -> float
               val none : unit -> float
             end =
       struct
         type t = [ `Event ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x206 : Ojs.t) -> t_of_js x206
         and t_0_to_js : t_0 -> Ojs.t = fun (x205 : t) -> t_to_js x205
         type tags = [ `Event ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `Event ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x209 : Ojs.t) -> intf_of_js __tags_of_js x209
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x207 : __tags intf) -> intf_to_js __tags_to_js x207
         let (get_bubbles : 'tags this -> bool) =
           fun (x211 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x211) "bubbles")
         let (get_cancelBubble : 'tags this -> bool) =
           fun (x213 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x213) "cancelBubble")
         let (set_cancelBubble : 'tags this -> bool -> unit) =
           fun (x215 : 'tags this) ->
             fun (x216 : bool) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x215) "cancelBubble"
                 (Ojs.bool_to_js x216)
         let (get_cancelable : 'tags this -> bool) =
           fun (x218 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x218) "cancelable")
         let (get_composed : 'tags this -> bool) =
           fun (x220 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x220) "composed")
         let (get_currentTarget : 'tags this -> EventTarget.t or_null) =
           fun (x222 : 'tags this) ->
             or_null_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x222)
                  "currentTarget")
         let (get_defaultPrevented : 'tags this -> bool) =
           fun (x225 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x225)
                  "defaultPrevented")
         let (get_eventPhase : 'tags this -> float) =
           fun (x227 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x227) "eventPhase")
         let (get_isTrusted : 'tags this -> bool) =
           fun (x229 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x229) "isTrusted")
         let (get_returnValue : 'tags this -> bool) =
           fun (x231 : 'tags this) ->
             Ojs.bool_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x231) "returnValue")
         let (set_returnValue : 'tags this -> bool -> unit) =
           fun (x233 : 'tags this) ->
             fun (x234 : bool) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x233) "returnValue"
                 (Ojs.bool_to_js x234)
         let (get_srcElement : 'tags this -> EventTarget.t or_null) =
           fun (x236 : 'tags this) ->
             or_null_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x236) "srcElement")
         let (get_target : 'tags this -> EventTarget.t or_null) =
           fun (x239 : 'tags this) ->
             or_null_of_js EventTarget.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x239) "target")
         let (get_timeStamp : 'tags this -> DOMHighResTimeStamp.t) =
           fun (x242 : 'tags this) ->
             DOMHighResTimeStamp.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x242) "timeStamp")
         let (get_type : 'tags this -> string) =
           fun (x244 : 'tags this) ->
             Ojs.string_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x244) "type")
         let (composedPath : 'tags this -> EventTarget.t list) =
           fun (x246 : 'tags this) ->
             Ojs.list_of_js EventTarget.t_of_js
               (Ojs.call (this_to_js Obj.magic x246) "composedPath" [||])
         let (initEvent :
           'tags this ->
             type_:string ->
               ?bubbles:bool -> ?cancelable:bool -> unit -> unit)
           =
           fun (x255 : 'tags this) ->
             fun ~type_:(x249 : string) ->
               fun ?bubbles:(x250 : bool option) ->
                 fun ?cancelable:(x251 : bool option) ->
                   fun () ->
                     ignore
                       (let x257 = this_to_js Obj.magic x255 in
                        Ojs.call (Ojs.get_prop_ascii x257 "initEvent")
                          "apply"
                          [|x257;((let x252 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x252 "push"
                                        [|(Ojs.string_to_js x249)|]);
                                   (match x250 with
                                    | Some x254 ->
                                        ignore
                                          (Ojs.call x252 "push"
                                             [|(Ojs.bool_to_js x254)|])
                                    | None -> ());
                                   (match x251 with
                                    | Some x253 ->
                                        ignore
                                          (Ojs.call x252 "push"
                                             [|(Ojs.bool_to_js x253)|])
                                    | None -> ());
                                   x252))|])
         let (preventDefault : 'tags this -> unit) =
           fun (x258 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x258) "preventDefault" [||])
         let (stopImmediatePropagation : 'tags this -> unit) =
           fun (x260 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x260)
                  "stopImmediatePropagation" [||])
         let (stopPropagation : 'tags this -> unit) =
           fun (x262 : 'tags this) ->
             ignore
               (Ojs.call (this_to_js Obj.magic x262) "stopPropagation" [||])
         let (get_AT_TARGET : 'tags this -> float) =
           fun (x264 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x264) "AT_TARGET")
         let (get_BUBBLING_PHASE : 'tags this -> float) =
           fun (x266 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x266)
                  "BUBBLING_PHASE")
         let (get_CAPTURING_PHASE : 'tags this -> float) =
           fun (x268 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x268)
                  "CAPTURING_PHASE")
         let (get_NONE : 'tags this -> float) =
           fun (x270 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x270) "NONE")
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "prototype")
         let (create :
           type_:string -> ?eventInitDict:EventInit.t -> unit -> t) =
           fun ~type_:(x272 : string) ->
             fun ?eventInitDict:(x273 : EventInit.t option) ->
               fun () ->
                 t_of_js
                   (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Event")
                      (let x274 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       ignore
                         (Ojs.call x274 "push" [|(Ojs.string_to_js x272)|]);
                       (match x273 with
                        | Some x275 ->
                            ignore
                              (Ojs.call x274 "push"
                                 [|(EventInit.t_to_js x275)|])
                        | None -> ());
                       x274))
         let (at_target : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "AT_TARGET")
         let (bubbling_phase : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "BUBBLING_PHASE")
         let (capturing_phase : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "CAPTURING_PHASE")
         let (none : unit -> float) =
           fun () ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Event")
                  "NONE")
       end and
            EventListener:sig
                            type t = [ `EventListener ] intf
                            type t_0 = t
                            [@@@js.stop ]
                            type tags = [ `EventListener ]
                            type tags_0 = tags
                            [@@@js.start ]
                            [@@@js.implem
                              type tags = [ `EventListener ]
                              type tags_0 = tags]
                            type 'tags this =
                              'tags intf constraint 'tags =
                                          [> `EventListener ]
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                            val apply : 'tags this -> evt:Event.t -> unit
                            val cast_from : 'tags this -> t
                          end =
            struct
              type t = [ `EventListener ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x277 : Ojs.t) -> t_of_js x277
              and t_0_to_js : t_0 -> Ojs.t = fun (x276 : t) -> t_to_js x276
              type tags = [ `EventListener ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `EventListener ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x280 : Ojs.t) -> intf_of_js __tags_of_js x280
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x278 : __tags intf) -> intf_to_js __tags_to_js x278
              let (apply : 'tags this -> evt:Event.t -> unit) =
                fun (x283 : 'tags this) ->
                  fun ~evt:(x282 : Event.t) ->
                    ignore
                      (Ojs.apply (this_to_js Obj.magic x283)
                         [|(Event.t_to_js x282)|])
              let cast_from = Obj.magic
            end and
                 EventListenerObject:sig
                                       type t = [ `EventListenerObject ] intf
                                       type t_0 = t
                                       [@@@js.stop ]
                                       type tags = [ `EventListenerObject ]
                                       type tags_0 = tags
                                       [@@@js.start ]
                                       [@@@js.implem
                                         type tags = [ `EventListenerObject ]
                                         type tags_0 = tags]
                                       type 'tags this =
                                         'tags intf constraint 'tags =
                                                     [>
                                                       `EventListenerObject ]
                                       val t_to_js : t -> Ojs.t
                                       val t_of_js : Ojs.t -> t
                                       val t_0_to_js : t_0 -> Ojs.t
                                       val t_0_of_js : Ojs.t -> t_0
                                       val handleEvent :
                                         'tags this ->
                                           object_:Event.t -> unit
                                       val cast_from : 'tags this -> t
                                     end =
                 struct
                   type t = [ `EventListenerObject ] intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x286 : Ojs.t) -> t_of_js x286
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x285 : t) -> t_to_js x285
                   type tags = [ `EventListenerObject ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `EventListenerObject ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun
                     (type __tags) ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (x289 : Ojs.t) -> intf_of_js __tags_of_js x289
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
                     (type __tags) ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (x287 : __tags intf) ->
                         intf_to_js __tags_to_js x287
                   let (handleEvent : 'tags this -> object_:Event.t -> unit)
                     =
                     fun (x292 : 'tags this) ->
                       fun ~object_:(x291 : Event.t) ->
                         ignore
                           (Ojs.call (this_to_js Obj.magic x292)
                              "handleEvent" [|(Event.t_to_js x291)|])
                   let cast_from = Obj.magic
                 end and
                      EventListenerOrEventListenerObject:sig
                                                           type t =
                                                             (EventListener.t,
                                                               EventListenerObject.t)
                                                               union2
                                                           type t_0 = t
                                                           val t_to_js :
                                                             t -> Ojs.t
                                                           val t_of_js :
                                                             Ojs.t -> t
                                                           val t_0_to_js :
                                                             t_0 -> Ojs.t
                                                           val t_0_of_js :
                                                             Ojs.t -> t_0
                                                         end =
                      struct
                        type t =
                          (EventListener.t, EventListenerObject.t) union2
                        let rec t_of_js : Ojs.t -> t =
                          fun (x297 : Ojs.t) ->
                            union2_of_js EventListener.t_of_js
                              EventListenerObject.t_of_js x297
                        and t_to_js : t -> Ojs.t =
                          fun
                            (x294 :
                              (EventListener.t, EventListenerObject.t) union2)
                            ->
                            union2_to_js EventListener.t_to_js
                              EventListenerObject.t_to_js x294
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x301 : Ojs.t) -> t_of_js x301
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x300 : t) -> t_to_js x300
                      end and
                           EventTarget:sig
                                         type t = [ `EventTarget ] intf
                                         type t_0 = t
                                         [@@@js.stop ]
                                         type tags = [ `EventTarget ]
                                         type tags_0 = tags
                                         [@@@js.start ]
                                         [@@@js.implem
                                           type tags = [ `EventTarget ]
                                           type tags_0 = tags]
                                         type 'tags this =
                                           'tags intf constraint 'tags =
                                                       [> `EventTarget ]
                                         val t_to_js : t -> Ojs.t
                                         val t_of_js : Ojs.t -> t
                                         val t_0_to_js : t_0 -> Ojs.t
                                         val t_0_of_js : Ojs.t -> t_0
                                         val addEventListener :
                                           'tags this ->
                                             type_:string ->
                                               callback:EventListenerOrEventListenerObject.t
                                                 or_null ->
                                                 ?options:AddEventListenerOptions.t
                                                   or_boolean -> unit -> unit
                                         val dispatchEvent :
                                           'tags this ->
                                             event:Event.t -> bool
                                         val removeEventListener :
                                           'tags this ->
                                             type_:string ->
                                               callback:EventListenerOrEventListenerObject.t
                                                 or_null ->
                                                 ?options:EventListenerOptions.t
                                                   or_boolean -> unit -> unit
                                         val cast_from : 'tags this -> t
                                         val prototype : unit -> t
                                         val create : unit -> t
                                       end =
                           struct
                             type t = [ `EventTarget ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x303 : Ojs.t) -> t_of_js x303
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x302 : t) -> t_to_js x302
                             type tags = [ `EventTarget ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `EventTarget ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               = fun (type __tags) ->
                               fun (__tags_of_js : Ojs.t -> __tags) ->
                                 fun (x306 : Ojs.t) ->
                                   intf_of_js __tags_of_js x306
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               = fun (type __tags) ->
                               fun (__tags_to_js : __tags -> Ojs.t) ->
                                 fun (x304 : __tags intf) ->
                                   intf_to_js __tags_to_js x304
                             let (addEventListener :
                               'tags this ->
                                 type_:string ->
                                   callback:EventListenerOrEventListenerObject.t
                                     or_null ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x315 : 'tags this) ->
                                 fun ~type_:(x308 : string) ->
                                   fun
                                     ~callback:(x309 :
                                                 EventListenerOrEventListenerObject.t
                                                   or_null)
                                     ->
                                     fun
                                       ?options:(x310 :
                                                  AddEventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x317 =
                                              this_to_js Obj.magic x315 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x317
                                                 "addEventListener") "apply"
                                              [|x317;((let x311 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       ignore
                                                         (Ojs.call x311
                                                            "push"
                                                            [|(Ojs.string_to_js
                                                                 x308)|]);
                                                       ignore
                                                         (Ojs.call x311
                                                            "push"
                                                            [|(or_null_to_js
                                                                 EventListenerOrEventListenerObject.t_to_js
                                                                 x309)|]);
                                                       (match x310 with
                                                        | Some x312 ->
                                                            ignore
                                                              (Ojs.call x311
                                                                 "push"
                                                                 [|(or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x312)|])
                                                        | None -> ());
                                                       x311))|])
                             let (dispatchEvent :
                               'tags this -> event:Event.t -> bool) =
                               fun (x319 : 'tags this) ->
                                 fun ~event:(x318 : Event.t) ->
                                   Ojs.bool_of_js
                                     (Ojs.call (this_to_js Obj.magic x319)
                                        "dispatchEvent"
                                        [|(Event.t_to_js x318)|])
                             let (removeEventListener :
                               'tags this ->
                                 type_:string ->
                                   callback:EventListenerOrEventListenerObject.t
                                     or_null ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x328 : 'tags this) ->
                                 fun ~type_:(x321 : string) ->
                                   fun
                                     ~callback:(x322 :
                                                 EventListenerOrEventListenerObject.t
                                                   or_null)
                                     ->
                                     fun
                                       ?options:(x323 :
                                                  EventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x330 =
                                              this_to_js Obj.magic x328 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x330
                                                 "removeEventListener")
                                              "apply"
                                              [|x330;((let x324 =
                                                         Ojs.new_obj
                                                           (Ojs.get_prop_ascii
                                                              Ojs.global
                                                              "Array") 
                                                           [||] in
                                                       ignore
                                                         (Ojs.call x324
                                                            "push"
                                                            [|(Ojs.string_to_js
                                                                 x321)|]);
                                                       ignore
                                                         (Ojs.call x324
                                                            "push"
                                                            [|(or_null_to_js
                                                                 EventListenerOrEventListenerObject.t_to_js
                                                                 x322)|]);
                                                       (match x323 with
                                                        | Some x325 ->
                                                            ignore
                                                              (Ojs.call x324
                                                                 "push"
                                                                 [|(or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x325)|])
                                                        | None -> ());
                                                       x324))|])
                             let cast_from = Obj.magic
                             let (prototype : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.get_prop_ascii
                                      (Ojs.get_prop_ascii Ojs.global
                                         "EventTarget") "prototype")
                             let (create : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global
                                         "EventTarget") [||])
                           end
module Performance =
  struct
    type t = [ `EventTarget  | `Performance ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x332 : Ojs.t) -> t_of_js x332
    and t_0_to_js : t_0 -> Ojs.t = fun (x331 : t) -> t_to_js x331
    type tags = [ `EventTarget  | `Performance ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Performance ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x335 : Ojs.t) -> intf_of_js __tags_of_js x335
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x333 : __tags intf) -> intf_to_js __tags_to_js x333
    let (get_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x337 : 'tags this) ->
        or_null_of_js
          (fun (x339 : Ojs.t) ->
             fun ~this:(x340 : t) ->
               fun ~ev:(x341 : Event.t) ->
                 any_of_js
                   (Ojs.apply x339 [|(t_to_js x340);(Event.t_to_js x341)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x337)
             "onresourcetimingbufferfull")
    let (set_onresourcetimingbufferfull :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x342 : 'tags this) ->
        fun (x343 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x342)
            "onresourcetimingbufferfull"
            (or_null_to_js
               (fun (x344 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x345 : Ojs.t) ->
                       fun (x346 : Ojs.t) ->
                         any_to_js
                           (x344 ~this:(t_of_js x345)
                              ~ev:(Event.t_of_js x346)))) x343)
    let (get_timeOrigin : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x348 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x348) "timeOrigin")
    let (clearMarks : 'tags this -> ?markName:string -> unit -> unit) =
      fun (x353 : 'tags this) ->
        fun ?markName:(x350 : string option) ->
          fun () ->
            ignore
              (let x355 = this_to_js Obj.magic x353 in
               Ojs.call (Ojs.get_prop_ascii x355 "clearMarks") "apply"
                 [|x355;((let x351 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x350 with
                           | Some x352 ->
                               ignore
                                 (Ojs.call x351 "push"
                                    [|(Ojs.string_to_js x352)|])
                           | None -> ());
                          x351))|])
    let (clearMeasures : 'tags this -> ?measureName:string -> unit -> unit) =
      fun (x359 : 'tags this) ->
        fun ?measureName:(x356 : string option) ->
          fun () ->
            ignore
              (let x361 = this_to_js Obj.magic x359 in
               Ojs.call (Ojs.get_prop_ascii x361 "clearMeasures") "apply"
                 [|x361;((let x357 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x356 with
                           | Some x358 ->
                               ignore
                                 (Ojs.call x357 "push"
                                    [|(Ojs.string_to_js x358)|])
                           | None -> ());
                          x357))|])
    let (clearResourceTimings : 'tags this -> unit) =
      fun (x362 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x362) "clearResourceTimings" [||])
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x364 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x364) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x370 : 'tags this) ->
        fun ~name:(x366 : string) ->
          fun ?type_:(x367 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x372 = this_to_js Obj.magic x370 in
                 Ojs.call (Ojs.get_prop_ascii x372 "getEntriesByName")
                   "apply"
                   [|x372;((let x368 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x368 "push"
                                 [|(Ojs.string_to_js x366)|]);
                            (match x367 with
                             | Some x369 ->
                                 ignore
                                   (Ojs.call x368 "push"
                                      [|(Ojs.string_to_js x369)|])
                             | None -> ());
                            x368))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x374 : 'tags this) ->
        fun ~type_:(x373 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x374) "getEntriesByType"
               [|(Ojs.string_to_js x373)|])
    let (mark :
      'tags this ->
        markName:string ->
          ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun (x380 : 'tags this) ->
        fun ~markName:(x376 : string) ->
          fun ?markOptions:(x377 : PerformanceMarkOptions.t option) ->
            fun () ->
              PerformanceMark.t_of_js
                (let x382 = this_to_js Obj.magic x380 in
                 Ojs.call (Ojs.get_prop_ascii x382 "mark") "apply"
                   [|x382;((let x378 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x378 "push"
                                 [|(Ojs.string_to_js x376)|]);
                            (match x377 with
                             | Some x379 ->
                                 ignore
                                   (Ojs.call x378 "push"
                                      [|(PerformanceMarkOptions.t_to_js x379)|])
                             | None -> ());
                            x378))|])
    let (measure :
      'tags this ->
        measureName:string ->
          ?startOrMeasureOptions:PerformanceMeasureOptions.t or_string ->
            ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun (x390 : 'tags this) ->
        fun ~measureName:(x383 : string) ->
          fun
            ?startOrMeasureOptions:(x384 :
                                     PerformanceMeasureOptions.t or_string
                                       option)
            ->
            fun ?endMark:(x385 : string option) ->
              fun () ->
                PerformanceMeasure.t_of_js
                  (let x392 = this_to_js Obj.magic x390 in
                   Ojs.call (Ojs.get_prop_ascii x392 "measure") "apply"
                     [|x392;((let x386 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x386 "push"
                                   [|(Ojs.string_to_js x383)|]);
                              (match x384 with
                               | Some x388 ->
                                   ignore
                                     (Ojs.call x386 "push"
                                        [|(or_string_to_js
                                             PerformanceMeasureOptions.t_to_js
                                             x388)|])
                               | None -> ());
                              (match x385 with
                               | Some x387 ->
                                   ignore
                                     (Ojs.call x386 "push"
                                        [|(Ojs.string_to_js x387)|])
                               | None -> ());
                              x386))|])
    let (now : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x393 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (this_to_js Obj.magic x393) "now" [||])
    let (setResourceTimingBufferSize : 'tags this -> maxSize:float -> unit) =
      fun (x396 : 'tags this) ->
        fun ~maxSize:(x395 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x396)
               "setResourceTimingBufferSize" [|(Ojs.float_to_js x395)|])
    let (toJSON : 'tags this -> any) =
      fun (x398 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x398) "toJSON" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x408 : 'tags this) ->
        fun ~type_:(x400 : 'K) ->
          fun ~listener:(x401 : this:t -> ev:any -> any) ->
            fun ?options:(x402 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x410 = this_to_js Obj.magic x408 in
                   Ojs.call (Ojs.get_prop_ascii x410 "addEventListener")
                     "apply"
                     [|x410;((let x403 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x403 "push" [|(Obj.magic x400)|]);
                              ignore
                                (Ojs.call x403 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x406 : Ojs.t) ->
                                           fun (x407 : Ojs.t) ->
                                             any_to_js
                                               (x401 ~this:(t_of_js x406)
                                                  ~ev:(any_of_js x407))))|]);
                              (match x402 with
                               | Some x404 ->
                                   ignore
                                     (Ojs.call x403 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x404)|])
                               | None -> ());
                              x403))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x417 : 'tags this) ->
        fun ~type_:(x411 : string) ->
          fun ~listener:(x412 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x413 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x419 = this_to_js Obj.magic x417 in
                   Ojs.call (Ojs.get_prop_ascii x419 "addEventListener")
                     "apply"
                     [|x419;((let x414 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x414 "push"
                                   [|(Ojs.string_to_js x411)|]);
                              ignore
                                (Ojs.call x414 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x412)|]);
                              (match x413 with
                               | Some x415 ->
                                   ignore
                                     (Ojs.call x414 "push"
                                        [|(or_boolean_to_js
                                             AddEventListenerOptions.t_to_js
                                             x415)|])
                               | None -> ());
                              x414))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x428 : 'tags this) ->
        fun ~type_:(x420 : 'K) ->
          fun ~listener:(x421 : this:t -> ev:any -> any) ->
            fun ?options:(x422 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x430 = this_to_js Obj.magic x428 in
                   Ojs.call (Ojs.get_prop_ascii x430 "removeEventListener")
                     "apply"
                     [|x430;((let x423 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x423 "push" [|(Obj.magic x420)|]);
                              ignore
                                (Ojs.call x423 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x426 : Ojs.t) ->
                                           fun (x427 : Ojs.t) ->
                                             any_to_js
                                               (x421 ~this:(t_of_js x426)
                                                  ~ev:(any_of_js x427))))|]);
                              (match x422 with
                               | Some x424 ->
                                   ignore
                                     (Ojs.call x423 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x424)|])
                               | None -> ());
                              x423))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x437 : 'tags this) ->
        fun ~type_:(x431 : string) ->
          fun ~listener:(x432 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x433 : EventListenerOptions.t or_boolean option) ->
              fun () ->
                ignore
                  (let x439 = this_to_js Obj.magic x437 in
                   Ojs.call (Ojs.get_prop_ascii x439 "removeEventListener")
                     "apply"
                     [|x439;((let x434 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x434 "push"
                                   [|(Ojs.string_to_js x431)|]);
                              ignore
                                (Ojs.call x434 "push"
                                   [|(EventListenerOrEventListenerObject.t_to_js
                                        x432)|]);
                              (match x433 with
                               | Some x435 ->
                                   ignore
                                     (Ojs.call x434 "push"
                                        [|(or_boolean_to_js
                                             EventListenerOptions.t_to_js
                                             x435)|])
                               | None -> ());
                              x434))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Performance")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Performance") [||])
  end
module PerformanceStatic =
  struct
    let (onresourcetimingbufferfull :
      unit -> (this:Performance.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x440 : Ojs.t) ->
             fun ~this:(x441 : Performance.t) ->
               fun ~ev:(x442 : Event.t) ->
                 any_of_js
                   (Ojs.apply x440
                      [|(Performance.t_to_js x441);(Event.t_to_js x442)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "onresourcetimingbufferfull")
    let (timeOrigin : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "performance")
             "timeOrigin")
    let (clearMarks : ?markName:string -> unit -> unit) =
      fun ?markName:(x443 : string option) ->
        fun () ->
          ignore
            (let x446 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x446 "clearMarks") "apply"
               [|x446;((let x444 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x443 with
                         | Some x445 ->
                             ignore
                               (Ojs.call x444 "push"
                                  [|(Ojs.string_to_js x445)|])
                         | None -> ());
                        x444))|])
    let (clearMeasures : ?measureName:string -> unit -> unit) =
      fun ?measureName:(x447 : string option) ->
        fun () ->
          ignore
            (let x450 = Ojs.get_prop_ascii Ojs.global "performance" in
             Ojs.call (Ojs.get_prop_ascii x450 "clearMeasures") "apply"
               [|x450;((let x448 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x447 with
                         | Some x449 ->
                             ignore
                               (Ojs.call x448 "push"
                                  [|(Ojs.string_to_js x449)|])
                         | None -> ());
                        x448))|])
    let (clearResourceTimings : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "clearResourceTimings" [||])
    let (getEntries : unit -> PerformanceEntryList.t) =
      fun () ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntries" [||])
    let (getEntriesByName :
      name:string -> ?type_:string -> unit -> PerformanceEntryList.t) =
      fun ~name:(x451 : string) ->
        fun ?type_:(x452 : string option) ->
          fun () ->
            PerformanceEntryList.t_of_js
              (let x455 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x455 "getEntriesByName") "apply"
                 [|x455;((let x453 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x453 "push" [|(Ojs.string_to_js x451)|]);
                          (match x452 with
                           | Some x454 ->
                               ignore
                                 (Ojs.call x453 "push"
                                    [|(Ojs.string_to_js x454)|])
                           | None -> ());
                          x453))|])
    let (getEntriesByType : string -> PerformanceEntryList.t) =
      fun (x456 : string) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "getEntriesByType" [|(Ojs.string_to_js x456)|])
    let (mark :
      markName:string ->
        ?markOptions:PerformanceMarkOptions.t -> unit -> PerformanceMark.t)
      =
      fun ~markName:(x457 : string) ->
        fun ?markOptions:(x458 : PerformanceMarkOptions.t option) ->
          fun () ->
            PerformanceMark.t_of_js
              (let x461 = Ojs.get_prop_ascii Ojs.global "performance" in
               Ojs.call (Ojs.get_prop_ascii x461 "mark") "apply"
                 [|x461;((let x459 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x459 "push" [|(Ojs.string_to_js x457)|]);
                          (match x458 with
                           | Some x460 ->
                               ignore
                                 (Ojs.call x459 "push"
                                    [|(PerformanceMarkOptions.t_to_js x460)|])
                           | None -> ());
                          x459))|])
    let (measure :
      measureName:string ->
        ?startOrMeasureOptions:PerformanceMeasureOptions.t or_string ->
          ?endMark:string -> unit -> PerformanceMeasure.t)
      =
      fun ~measureName:(x462 : string) ->
        fun
          ?startOrMeasureOptions:(x463 :
                                   PerformanceMeasureOptions.t or_string
                                     option)
          ->
          fun ?endMark:(x464 : string option) ->
            fun () ->
              PerformanceMeasure.t_of_js
                (let x469 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x469 "measure") "apply"
                   [|x469;((let x465 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x465 "push"
                                 [|(Ojs.string_to_js x462)|]);
                            (match x463 with
                             | Some x467 ->
                                 ignore
                                   (Ojs.call x465 "push"
                                      [|(or_string_to_js
                                           PerformanceMeasureOptions.t_to_js
                                           x467)|])
                             | None -> ());
                            (match x464 with
                             | Some x466 ->
                                 ignore
                                   (Ojs.call x465 "push"
                                      [|(Ojs.string_to_js x466)|])
                             | None -> ());
                            x465))|])
    let (now : unit -> DOMHighResTimeStamp.t) =
      fun () ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "now" [||])
    let (setResourceTimingBufferSize : float -> unit) =
      fun (x470 : float) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance")
             "setResourceTimingBufferSize" [|(Ojs.float_to_js x470)|])
    let (toJSON : unit -> any) =
      fun () ->
        any_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "performance") "toJSON"
             [||])
    let (addEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x471 : 'K) ->
        fun ~listener:(x472 : this:Performance.t -> ev:any -> any) ->
          fun ?options:(x473 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x479 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x479 "addEventListener")
                   "apply"
                   [|x479;((let x474 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x474 "push" [|(Obj.magic x471)|]);
                            ignore
                              (Ojs.call x474 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x477 : Ojs.t) ->
                                         fun (x478 : Ojs.t) ->
                                           any_to_js
                                             (x472
                                                ~this:(Performance.t_of_js
                                                         x477)
                                                ~ev:(any_of_js x478))))|]);
                            (match x473 with
                             | Some x475 ->
                                 ignore
                                   (Ojs.call x474 "push"
                                      [|(or_boolean_to_js
                                           AddEventListenerOptions.t_to_js
                                           x475)|])
                             | None -> ());
                            x474))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x480 : string) ->
        fun ~listener:(x481 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x482 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x486 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x486 "addEventListener")
                   "apply"
                   [|x486;((let x483 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x483 "push"
                                 [|(Ojs.string_to_js x480)|]);
                            ignore
                              (Ojs.call x483 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x481)|]);
                            (match x482 with
                             | Some x484 ->
                                 ignore
                                   (Ojs.call x483 "push"
                                      [|(or_boolean_to_js
                                           AddEventListenerOptions.t_to_js
                                           x484)|])
                             | None -> ());
                            x483))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:Performance.t -> ev:any -> any) ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x487 : 'K) ->
        fun ~listener:(x488 : this:Performance.t -> ev:any -> any) ->
          fun ?options:(x489 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x495 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x495 "removeEventListener")
                   "apply"
                   [|x495;((let x490 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x490 "push" [|(Obj.magic x487)|]);
                            ignore
                              (Ojs.call x490 "push"
                                 [|(Ojs.fun_to_js 2
                                      (fun (x493 : Ojs.t) ->
                                         fun (x494 : Ojs.t) ->
                                           any_to_js
                                             (x488
                                                ~this:(Performance.t_of_js
                                                         x493)
                                                ~ev:(any_of_js x494))))|]);
                            (match x489 with
                             | Some x491 ->
                                 ignore
                                   (Ojs.call x490 "push"
                                      [|(or_boolean_to_js
                                           EventListenerOptions.t_to_js x491)|])
                             | None -> ());
                            x490))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x496 : string) ->
        fun ~listener:(x497 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x498 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x502 = Ojs.get_prop_ascii Ojs.global "performance" in
                 Ojs.call (Ojs.get_prop_ascii x502 "removeEventListener")
                   "apply"
                   [|x502;((let x499 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x499 "push"
                                 [|(Ojs.string_to_js x496)|]);
                            ignore
                              (Ojs.call x499 "push"
                                 [|(EventListenerOrEventListenerObject.t_to_js
                                      x497)|]);
                            (match x498 with
                             | Some x500 ->
                                 ignore
                                   (Ojs.call x499 "push"
                                      [|(or_boolean_to_js
                                           EventListenerOptions.t_to_js x500)|])
                             | None -> ());
                            x499))|])
  end
module StorageEstimate =
  struct
    type t = [ `StorageEstimate ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x504 : Ojs.t) -> t_of_js x504
    and t_0_to_js : t_0 -> Ojs.t = fun (x503 : t) -> t_to_js x503
    type tags = [ `StorageEstimate ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageEstimate ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x507 : Ojs.t) -> intf_of_js __tags_of_js x507
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x505 : __tags intf) -> intf_to_js __tags_to_js x505
    let (get_quota : 'tags this -> float) =
      fun (x509 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x509) "quota")
    let (set_quota : 'tags this -> float -> unit) =
      fun (x511 : 'tags this) ->
        fun (x512 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x511) "quota"
            (Ojs.float_to_js x512)
    let (get_usage : 'tags this -> float) =
      fun (x514 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x514) "usage")
    let (set_usage : 'tags this -> float -> unit) =
      fun (x516 : 'tags this) ->
        fun (x517 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x516) "usage"
            (Ojs.float_to_js x517)
    let cast_from = Obj.magic
  end
module StorageManager =
  struct
    type t = [ `StorageManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x520 : Ojs.t) -> t_of_js x520
    and t_0_to_js : t_0 -> Ojs.t = fun (x519 : t) -> t_to_js x519
    type tags = [ `StorageManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StorageManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x523 : Ojs.t) -> intf_of_js __tags_of_js x523
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x521 : __tags intf) -> intf_to_js __tags_to_js x521
    let (estimate : 'tags this -> StorageEstimate.t Promise.t_1) =
      fun (x525 : 'tags this) ->
        Promise.t_1_of_js StorageEstimate.t_of_js
          (Ojs.call (this_to_js Obj.magic x525) "estimate" [||])
    let (persisted : 'tags this -> bool Promise.t_1) =
      fun (x528 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x528) "persisted" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "StorageManager") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "StorageManager") [||])
  end
module NavigatorStorage =
  struct
    type t = [ `NavigatorStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x532 : Ojs.t) -> t_of_js x532
    and t_0_to_js : t_0 -> Ojs.t = fun (x531 : t) -> t_to_js x531
    type tags = [ `NavigatorStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x535 : Ojs.t) -> intf_of_js __tags_of_js x535
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x533 : __tags intf) -> intf_to_js __tags_to_js x533
    let (get_storage : 'tags this -> StorageManager.t) =
      fun (x537 : 'tags this) ->
        StorageManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x537) "storage")
    let cast_from = Obj.magic
  end
module NavigatorOnLine =
  struct
    type t = [ `NavigatorOnLine ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x540 : Ojs.t) -> t_of_js x540
    and t_0_to_js : t_0 -> Ojs.t = fun (x539 : t) -> t_to_js x539
    type tags = [ `NavigatorOnLine ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorOnLine ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x543 : Ojs.t) -> intf_of_js __tags_of_js x543
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x541 : __tags intf) -> intf_to_js __tags_to_js x541
    let (get_onLine : 'tags this -> bool) =
      fun (x545 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x545) "onLine")
    let cast_from = Obj.magic
  end
module ConnectionType =
  struct
    type t =
      [ `L_s116_mixed  | `L_s128_none  | `L_s142_other  | `L_s196_unknown 
      | `L_s207_wifi  | `L_s46_bluetooth  | `L_s47_cellular 
      | `L_s68_ethernet ]
    let rec t_of_js : Ojs.t -> t =
      fun (x548 : Ojs.t) ->
        let x549 = x548 in
        match Ojs.string_of_js x549 with
        | "mixed" -> `L_s116_mixed
        | "none" -> `L_s128_none
        | "other" -> `L_s142_other
        | "unknown" -> `L_s196_unknown
        | "wifi" -> `L_s207_wifi
        | "bluetooth" -> `L_s46_bluetooth
        | "cellular" -> `L_s47_cellular
        | "ethernet" -> `L_s68_ethernet
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x547 :
          [ `L_s116_mixed  | `L_s128_none  | `L_s142_other 
          | `L_s196_unknown  | `L_s207_wifi  | `L_s46_bluetooth 
          | `L_s47_cellular  | `L_s68_ethernet ])
        ->
        match x547 with
        | `L_s116_mixed -> Ojs.string_to_js "mixed"
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s142_other -> Ojs.string_to_js "other"
        | `L_s196_unknown -> Ojs.string_to_js "unknown"
        | `L_s207_wifi -> Ojs.string_to_js "wifi"
        | `L_s46_bluetooth -> Ojs.string_to_js "bluetooth"
        | `L_s47_cellular -> Ojs.string_to_js "cellular"
        | `L_s68_ethernet -> Ojs.string_to_js "ethernet"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x551 : Ojs.t) -> t_of_js x551
    and t_0_to_js : t_0 -> Ojs.t = fun (x550 : t) -> t_to_js x550
  end
module NetworkInformation =
  struct
    type t = [ `EventTarget  | `NetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x553 : Ojs.t) -> t_of_js x553
    and t_0_to_js : t_0 -> Ojs.t = fun (x552 : t) -> t_to_js x552
    type tags = [ `EventTarget  | `NetworkInformation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x556 : Ojs.t) -> intf_of_js __tags_of_js x556
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x554 : __tags intf) -> intf_to_js __tags_to_js x554
    let (get_type : 'tags this -> ConnectionType.t) =
      fun (x558 : 'tags this) ->
        ConnectionType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x558) "type")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NetworkInformation") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NetworkInformation")
             [||])
  end
module NavigatorNetworkInformation =
  struct
    type t = [ `NavigatorNetworkInformation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x561 : Ojs.t) -> t_of_js x561
    and t_0_to_js : t_0 -> Ojs.t = fun (x560 : t) -> t_to_js x560
    type tags = [ `NavigatorNetworkInformation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorNetworkInformation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x564 : Ojs.t) -> intf_of_js __tags_of_js x564
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x562 : __tags intf) -> intf_to_js __tags_to_js x562
    let (get_connection : 'tags this -> NetworkInformation.t) =
      fun (x566 : 'tags this) ->
        NetworkInformation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x566) "connection")
    let cast_from = Obj.magic
  end
module NavigatorLanguage =
  struct
    type t = [ `NavigatorLanguage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x569 : Ojs.t) -> t_of_js x569
    and t_0_to_js : t_0 -> Ojs.t = fun (x568 : t) -> t_to_js x568
    type tags = [ `NavigatorLanguage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorLanguage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x572 : Ojs.t) -> intf_of_js __tags_of_js x572
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x570 : __tags intf) -> intf_to_js __tags_to_js x570
    let (get_language : 'tags this -> string) =
      fun (x574 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x574) "language")
    let (get_languages : 'tags this -> string list) =
      fun (x576 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x576) "languages")
    let cast_from = Obj.magic
  end
module NavigatorID =
  struct
    type t = [ `NavigatorID ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x580 : Ojs.t) -> t_of_js x580
    and t_0_to_js : t_0 -> Ojs.t = fun (x579 : t) -> t_to_js x579
    type tags = [ `NavigatorID ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NavigatorID ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x583 : Ojs.t) -> intf_of_js __tags_of_js x583
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x581 : __tags intf) -> intf_to_js __tags_to_js x581
    let (get_appCodeName : 'tags this -> string) =
      fun (x585 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x585) "appCodeName")
    let (get_appName : 'tags this -> string) =
      fun (x587 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x587) "appName")
    let (get_appVersion : 'tags this -> string) =
      fun (x589 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x589) "appVersion")
    let (get_platform : 'tags this -> string) =
      fun (x591 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x591) "platform")
    let (get_product : 'tags this -> string) =
      fun (x593 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x593) "product")
    let (get_userAgent : 'tags this -> string) =
      fun (x595 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x595) "userAgent")
    let cast_from = Obj.magic
  end
module NavigatorConcurrentHardware =
  struct
    type t = [ `NavigatorConcurrentHardware ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x598 : Ojs.t) -> t_of_js x598
    and t_0_to_js : t_0 -> Ojs.t = fun (x597 : t) -> t_to_js x597
    type tags = [ `NavigatorConcurrentHardware ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NavigatorConcurrentHardware ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x601 : Ojs.t) -> intf_of_js __tags_of_js x601
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x599 : __tags intf) -> intf_to_js __tags_to_js x599
    let (get_hardwareConcurrency : 'tags this -> float) =
      fun (x603 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x603)
             "hardwareConcurrency")
    let cast_from = Obj.magic
  end
module MediaEncodingType =
  struct
    type t = [ `L_s165_record  | `L_s206_webrtc ]
    let rec t_of_js : Ojs.t -> t =
      fun (x606 : Ojs.t) ->
        let x607 = x606 in
        match Ojs.string_of_js x607 with
        | "record" -> `L_s165_record
        | "webrtc" -> `L_s206_webrtc
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x605 : [ `L_s165_record  | `L_s206_webrtc ]) ->
        match x605 with
        | `L_s165_record -> Ojs.string_to_js "record"
        | `L_s206_webrtc -> Ojs.string_to_js "webrtc"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x609 : Ojs.t) -> t_of_js x609
    and t_0_to_js : t_0 -> Ojs.t = fun (x608 : t) -> t_to_js x608
  end
module TransferFunction =
  struct
    type t = [ `L_s151_pq  | `L_s183_srgb  | `L_s86_hlg ]
    let rec t_of_js : Ojs.t -> t =
      fun (x611 : Ojs.t) ->
        let x612 = x611 in
        match Ojs.string_of_js x612 with
        | "pq" -> `L_s151_pq
        | "srgb" -> `L_s183_srgb
        | "hlg" -> `L_s86_hlg
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x610 : [ `L_s151_pq  | `L_s183_srgb  | `L_s86_hlg ]) ->
        match x610 with
        | `L_s151_pq -> Ojs.string_to_js "pq"
        | `L_s183_srgb -> Ojs.string_to_js "srgb"
        | `L_s86_hlg -> Ojs.string_to_js "hlg"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x614 : Ojs.t) -> t_of_js x614
    and t_0_to_js : t_0 -> Ojs.t = fun (x613 : t) -> t_to_js x613
  end
module HdrMetadataType =
  struct
    type t =
      [ `L_s179_smpteSt2086  | `L_s180_smpteSt2094_10 
      | `L_s181_smpteSt2094_40 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x616 : Ojs.t) ->
        let x617 = x616 in
        match Ojs.string_of_js x617 with
        | "smpteSt2086" -> `L_s179_smpteSt2086
        | "smpteSt2094-10" -> `L_s180_smpteSt2094_10
        | "smpteSt2094-40" -> `L_s181_smpteSt2094_40
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x615 :
          [ `L_s179_smpteSt2086  | `L_s180_smpteSt2094_10 
          | `L_s181_smpteSt2094_40 ])
        ->
        match x615 with
        | `L_s179_smpteSt2086 -> Ojs.string_to_js "smpteSt2086"
        | `L_s180_smpteSt2094_10 -> Ojs.string_to_js "smpteSt2094-10"
        | `L_s181_smpteSt2094_40 -> Ojs.string_to_js "smpteSt2094-40"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x619 : Ojs.t) -> t_of_js x619
    and t_0_to_js : t_0 -> Ojs.t = fun (x618 : t) -> t_to_js x618
  end
module ColorGamut =
  struct
    type t = [ `L_s144_p3  | `L_s164_rec2020  | `L_s183_srgb ]
    let rec t_of_js : Ojs.t -> t =
      fun (x621 : Ojs.t) ->
        let x622 = x621 in
        match Ojs.string_of_js x622 with
        | "p3" -> `L_s144_p3
        | "rec2020" -> `L_s164_rec2020
        | "srgb" -> `L_s183_srgb
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x620 : [ `L_s144_p3  | `L_s164_rec2020  | `L_s183_srgb ]) ->
        match x620 with
        | `L_s144_p3 -> Ojs.string_to_js "p3"
        | `L_s164_rec2020 -> Ojs.string_to_js "rec2020"
        | `L_s183_srgb -> Ojs.string_to_js "srgb"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x624 : Ojs.t) -> t_of_js x624
    and t_0_to_js : t_0 -> Ojs.t = fun (x623 : t) -> t_to_js x623
  end
module VideoConfiguration =
  struct
    type t = [ `VideoConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x626 : Ojs.t) -> t_of_js x626
    and t_0_to_js : t_0 -> Ojs.t = fun (x625 : t) -> t_to_js x625
    type tags = [ `VideoConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VideoConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x629 : Ojs.t) -> intf_of_js __tags_of_js x629
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x627 : __tags intf) -> intf_to_js __tags_to_js x627
    let (get_bitrate : 'tags this -> float) =
      fun (x631 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x631) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x633 : 'tags this) ->
        fun (x634 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x633) "bitrate"
            (Ojs.float_to_js x634)
    let (get_colorGamut : 'tags this -> ColorGamut.t) =
      fun (x636 : 'tags this) ->
        ColorGamut.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x636) "colorGamut")
    let (set_colorGamut : 'tags this -> ColorGamut.t -> unit) =
      fun (x638 : 'tags this) ->
        fun (x639 : ColorGamut.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x638) "colorGamut"
            (ColorGamut.t_to_js x639)
    let (get_contentType : 'tags this -> string) =
      fun (x641 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x641) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x643 : 'tags this) ->
        fun (x644 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x643) "contentType"
            (Ojs.string_to_js x644)
    let (get_framerate : 'tags this -> float) =
      fun (x646 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x646) "framerate")
    let (set_framerate : 'tags this -> float -> unit) =
      fun (x648 : 'tags this) ->
        fun (x649 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x648) "framerate"
            (Ojs.float_to_js x649)
    let (get_hdrMetadataType : 'tags this -> HdrMetadataType.t) =
      fun (x651 : 'tags this) ->
        HdrMetadataType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x651) "hdrMetadataType")
    let (set_hdrMetadataType : 'tags this -> HdrMetadataType.t -> unit) =
      fun (x653 : 'tags this) ->
        fun (x654 : HdrMetadataType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x653) "hdrMetadataType"
            (HdrMetadataType.t_to_js x654)
    let (get_height : 'tags this -> float) =
      fun (x656 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x656) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x658 : 'tags this) ->
        fun (x659 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x658) "height"
            (Ojs.float_to_js x659)
    let (get_scalabilityMode : 'tags this -> string) =
      fun (x661 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x661) "scalabilityMode")
    let (set_scalabilityMode : 'tags this -> string -> unit) =
      fun (x663 : 'tags this) ->
        fun (x664 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x663) "scalabilityMode"
            (Ojs.string_to_js x664)
    let (get_transferFunction : 'tags this -> TransferFunction.t) =
      fun (x666 : 'tags this) ->
        TransferFunction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x666) "transferFunction")
    let (set_transferFunction : 'tags this -> TransferFunction.t -> unit) =
      fun (x668 : 'tags this) ->
        fun (x669 : TransferFunction.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x668) "transferFunction"
            (TransferFunction.t_to_js x669)
    let (get_width : 'tags this -> float) =
      fun (x671 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x671) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x673 : 'tags this) ->
        fun (x674 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x673) "width"
            (Ojs.float_to_js x674)
    let cast_from = Obj.magic
  end
module AudioConfiguration =
  struct
    type t = [ `AudioConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x677 : Ojs.t) -> t_of_js x677
    and t_0_to_js : t_0 -> Ojs.t = fun (x676 : t) -> t_to_js x676
    type tags = [ `AudioConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AudioConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x680 : Ojs.t) -> intf_of_js __tags_of_js x680
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x678 : __tags intf) -> intf_to_js __tags_to_js x678
    let (get_bitrate : 'tags this -> float) =
      fun (x682 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x682) "bitrate")
    let (set_bitrate : 'tags this -> float -> unit) =
      fun (x684 : 'tags this) ->
        fun (x685 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x684) "bitrate"
            (Ojs.float_to_js x685)
    let (get_channels : 'tags this -> string) =
      fun (x687 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x687) "channels")
    let (set_channels : 'tags this -> string -> unit) =
      fun (x689 : 'tags this) ->
        fun (x690 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x689) "channels"
            (Ojs.string_to_js x690)
    let (get_contentType : 'tags this -> string) =
      fun (x692 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x692) "contentType")
    let (set_contentType : 'tags this -> string -> unit) =
      fun (x694 : 'tags this) ->
        fun (x695 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x694) "contentType"
            (Ojs.string_to_js x695)
    let (get_samplerate : 'tags this -> float) =
      fun (x697 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x697) "samplerate")
    let (set_samplerate : 'tags this -> float -> unit) =
      fun (x699 : 'tags this) ->
        fun (x700 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x699) "samplerate"
            (Ojs.float_to_js x700)
    let (get_spatialRendering : 'tags this -> bool) =
      fun (x702 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x702) "spatialRendering")
    let (set_spatialRendering : 'tags this -> bool -> unit) =
      fun (x704 : 'tags this) ->
        fun (x705 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x704) "spatialRendering"
            (Ojs.bool_to_js x705)
    let cast_from = Obj.magic
  end
module MediaConfiguration =
  struct
    type t = [ `MediaConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x708 : Ojs.t) -> t_of_js x708
    and t_0_to_js : t_0 -> Ojs.t = fun (x707 : t) -> t_to_js x707
    type tags = [ `MediaConfiguration ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x711 : Ojs.t) -> intf_of_js __tags_of_js x711
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x709 : __tags intf) -> intf_to_js __tags_to_js x709
    let (get_audio : 'tags this -> AudioConfiguration.t) =
      fun (x713 : 'tags this) ->
        AudioConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x713) "audio")
    let (set_audio : 'tags this -> AudioConfiguration.t -> unit) =
      fun (x715 : 'tags this) ->
        fun (x716 : AudioConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x715) "audio"
            (AudioConfiguration.t_to_js x716)
    let (get_video : 'tags this -> VideoConfiguration.t) =
      fun (x718 : 'tags this) ->
        VideoConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x718) "video")
    let (set_video : 'tags this -> VideoConfiguration.t -> unit) =
      fun (x720 : 'tags this) ->
        fun (x721 : VideoConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x720) "video"
            (VideoConfiguration.t_to_js x721)
    let cast_from = Obj.magic
  end
module MediaEncodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaEncodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x724 : Ojs.t) -> t_of_js x724
    and t_0_to_js : t_0 -> Ojs.t = fun (x723 : t) -> t_to_js x723
    type tags = [ `MediaConfiguration  | `MediaEncodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaEncodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x727 : Ojs.t) -> intf_of_js __tags_of_js x727
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x725 : __tags intf) -> intf_to_js __tags_to_js x725
    let (get_type : 'tags this -> MediaEncodingType.t) =
      fun (x729 : 'tags this) ->
        MediaEncodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x729) "type")
    let (set_type : 'tags this -> MediaEncodingType.t -> unit) =
      fun (x731 : 'tags this) ->
        fun (x732 : MediaEncodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x731) "type"
            (MediaEncodingType.t_to_js x732)
    let cast_from = Obj.magic
  end
module MediaCapabilitiesInfo =
  struct
    type t = [ `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x735 : Ojs.t) -> t_of_js x735
    and t_0_to_js : t_0 -> Ojs.t = fun (x734 : t) -> t_to_js x734
    type tags = [ `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x738 : Ojs.t) -> intf_of_js __tags_of_js x738
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x736 : __tags intf) -> intf_to_js __tags_to_js x736
    let (get_powerEfficient : 'tags this -> bool) =
      fun (x740 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x740) "powerEfficient")
    let (set_powerEfficient : 'tags this -> bool -> unit) =
      fun (x742 : 'tags this) ->
        fun (x743 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x742) "powerEfficient"
            (Ojs.bool_to_js x743)
    let (get_smooth : 'tags this -> bool) =
      fun (x745 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x745) "smooth")
    let (set_smooth : 'tags this -> bool -> unit) =
      fun (x747 : 'tags this) ->
        fun (x748 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x747) "smooth"
            (Ojs.bool_to_js x748)
    let (get_supported : 'tags this -> bool) =
      fun (x750 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x750) "supported")
    let (set_supported : 'tags this -> bool -> unit) =
      fun (x752 : 'tags this) ->
        fun (x753 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x752) "supported"
            (Ojs.bool_to_js x753)
    let cast_from = Obj.magic
  end
module MediaCapabilitiesEncodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x756 : Ojs.t) -> t_of_js x756
    and t_0_to_js : t_0 -> Ojs.t = fun (x755 : t) -> t_to_js x755
    type tags = [ `MediaCapabilitiesEncodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesEncodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x759 : Ojs.t) -> intf_of_js __tags_of_js x759
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x757 : __tags intf) -> intf_to_js __tags_to_js x757
    let (get_configuration : 'tags this -> MediaEncodingConfiguration.t) =
      fun (x761 : 'tags this) ->
        MediaEncodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x761) "configuration")
    let (set_configuration :
      'tags this -> MediaEncodingConfiguration.t -> unit) =
      fun (x763 : 'tags this) ->
        fun (x764 : MediaEncodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x763) "configuration"
            (MediaEncodingConfiguration.t_to_js x764)
    let cast_from = Obj.magic
  end
module MediaDecodingType =
  struct
    type t = [ `L_s111_media_source  | `L_s206_webrtc  | `L_s73_file ]
    let rec t_of_js : Ojs.t -> t =
      fun (x767 : Ojs.t) ->
        let x768 = x767 in
        match Ojs.string_of_js x768 with
        | "media-source" -> `L_s111_media_source
        | "webrtc" -> `L_s206_webrtc
        | "file" -> `L_s73_file
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x766 : [ `L_s111_media_source  | `L_s206_webrtc  | `L_s73_file ])
        ->
        match x766 with
        | `L_s111_media_source -> Ojs.string_to_js "media-source"
        | `L_s206_webrtc -> Ojs.string_to_js "webrtc"
        | `L_s73_file -> Ojs.string_to_js "file"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x770 : Ojs.t) -> t_of_js x770
    and t_0_to_js : t_0 -> Ojs.t = fun (x769 : t) -> t_to_js x769
  end
module MediaDecodingConfiguration =
  struct
    type t = [ `MediaConfiguration  | `MediaDecodingConfiguration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x772 : Ojs.t) -> t_of_js x772
    and t_0_to_js : t_0 -> Ojs.t = fun (x771 : t) -> t_to_js x771
    type tags = [ `MediaConfiguration  | `MediaDecodingConfiguration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaDecodingConfiguration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x775 : Ojs.t) -> intf_of_js __tags_of_js x775
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x773 : __tags intf) -> intf_to_js __tags_to_js x773
    let (get_type : 'tags this -> MediaDecodingType.t) =
      fun (x777 : 'tags this) ->
        MediaDecodingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x777) "type")
    let (set_type : 'tags this -> MediaDecodingType.t -> unit) =
      fun (x779 : 'tags this) ->
        fun (x780 : MediaDecodingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x779) "type"
            (MediaDecodingType.t_to_js x780)
    let cast_from = Obj.magic
  end
module MediaCapabilitiesDecodingInfo =
  struct
    type t =
      [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x783 : Ojs.t) -> t_of_js x783
    and t_0_to_js : t_0 -> Ojs.t = fun (x782 : t) -> t_to_js x782
    type tags = [ `MediaCapabilitiesDecodingInfo  | `MediaCapabilitiesInfo ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MediaCapabilitiesDecodingInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x786 : Ojs.t) -> intf_of_js __tags_of_js x786
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x784 : __tags intf) -> intf_to_js __tags_to_js x784
    let (get_configuration : 'tags this -> MediaDecodingConfiguration.t) =
      fun (x788 : 'tags this) ->
        MediaDecodingConfiguration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x788) "configuration")
    let (set_configuration :
      'tags this -> MediaDecodingConfiguration.t -> unit) =
      fun (x790 : 'tags this) ->
        fun (x791 : MediaDecodingConfiguration.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x790) "configuration"
            (MediaDecodingConfiguration.t_to_js x791)
    let cast_from = Obj.magic
  end
module MediaCapabilities =
  struct
    type t = [ `MediaCapabilities ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x794 : Ojs.t) -> t_of_js x794
    and t_0_to_js : t_0 -> Ojs.t = fun (x793 : t) -> t_to_js x793
    type tags = [ `MediaCapabilities ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MediaCapabilities ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x797 : Ojs.t) -> intf_of_js __tags_of_js x797
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x795 : __tags intf) -> intf_to_js __tags_to_js x795
    let (decodingInfo :
      'tags this ->
        configuration:MediaDecodingConfiguration.t ->
          MediaCapabilitiesDecodingInfo.t Promise.t_1)
      =
      fun (x800 : 'tags this) ->
        fun ~configuration:(x799 : MediaDecodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesDecodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x800) "decodingInfo"
               [|(MediaDecodingConfiguration.t_to_js x799)|])
    let (encodingInfo :
      'tags this ->
        configuration:MediaEncodingConfiguration.t ->
          MediaCapabilitiesEncodingInfo.t Promise.t_1)
      =
      fun (x804 : 'tags this) ->
        fun ~configuration:(x803 : MediaEncodingConfiguration.t) ->
          Promise.t_1_of_js MediaCapabilitiesEncodingInfo.t_of_js
            (Ojs.call (this_to_js Obj.magic x804) "encodingInfo"
               [|(MediaEncodingConfiguration.t_to_js x803)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MediaCapabilities") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MediaCapabilities")
             [||])
  end
module NavigatorStatic =
  struct
    let (mediaCapabilities : unit -> MediaCapabilities.t) =
      fun () ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "navigator")
             "mediaCapabilities")
  end
module LocationStatic =
  struct
    let (hash : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hash")
    let (host : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "host")
    let (hostname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "hostname")
    let (href : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "href")
    let (toString : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "location") "toString"
             [||])
    let (origin : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "origin")
    let (pathname : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "pathname")
    let (port : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "port")
    let (protocol : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "protocol")
    let (search : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "location")
             "search")
  end
module IDBVersionChangeEventInit =
  struct
    type t = [ `EventInit  | `IDBVersionChangeEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x808 : Ojs.t) -> t_of_js x808
    and t_0_to_js : t_0 -> Ojs.t = fun (x807 : t) -> t_to_js x807
    type tags = [ `EventInit  | `IDBVersionChangeEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x811 : Ojs.t) -> intf_of_js __tags_of_js x811
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x809 : __tags intf) -> intf_to_js __tags_to_js x809
    let (get_newVersion : 'tags this -> float or_null) =
      fun (x813 : 'tags this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x813) "newVersion")
    let (set_newVersion : 'tags this -> float or_null -> unit) =
      fun (x816 : 'tags this) ->
        fun (x817 : float or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x816) "newVersion"
            (or_null_to_js Ojs.float_to_js x817)
    let (get_oldVersion : 'tags this -> float) =
      fun (x820 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x820) "oldVersion")
    let (set_oldVersion : 'tags this -> float -> unit) =
      fun (x822 : 'tags this) ->
        fun (x823 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x822) "oldVersion"
            (Ojs.float_to_js x823)
    let cast_from = Obj.magic
  end
module IDBVersionChangeEvent =
  struct
    type t = [ `Event  | `IDBVersionChangeEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x826 : Ojs.t) -> t_of_js x826
    and t_0_to_js : t_0 -> Ojs.t = fun (x825 : t) -> t_to_js x825
    type tags = [ `Event  | `IDBVersionChangeEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBVersionChangeEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x829 : Ojs.t) -> intf_of_js __tags_of_js x829
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x827 : __tags intf) -> intf_to_js __tags_to_js x827
    let (get_newVersion : 'tags this -> float or_null) =
      fun (x831 : 'tags this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x831) "newVersion")
    let (get_oldVersion : 'tags this -> float) =
      fun (x834 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x834) "oldVersion")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:IDBVersionChangeEventInit.t -> unit -> t)
      =
      fun ~type_:(x836 : string) ->
        fun ?eventInitDict:(x837 : IDBVersionChangeEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "IDBVersionChangeEvent")
                 (let x838 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x838 "push" [|(Ojs.string_to_js x836)|]);
                  (match x837 with
                   | Some x839 ->
                       ignore
                         (Ojs.call x838 "push"
                            [|(IDBVersionChangeEventInit.t_to_js x839)|])
                   | None -> ());
                  x838))
  end
module IDBObjectStoreParameters =
  struct
    type t = [ `IDBObjectStoreParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x841 : Ojs.t) -> t_of_js x841
    and t_0_to_js : t_0 -> Ojs.t = fun (x840 : t) -> t_to_js x840
    type tags = [ `IDBObjectStoreParameters ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBObjectStoreParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x844 : Ojs.t) -> intf_of_js __tags_of_js x844
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x842 : __tags intf) -> intf_to_js __tags_to_js x842
    let (get_autoIncrement : 'tags this -> bool) =
      fun (x846 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x846) "autoIncrement")
    let (set_autoIncrement : 'tags this -> bool -> unit) =
      fun (x848 : 'tags this) ->
        fun (x849 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x848) "autoIncrement"
            (Ojs.bool_to_js x849)
    let (get_keyPath : 'tags this -> string list or_string or_null) =
      fun (x851 : 'tags this) ->
        or_null_of_js
          (fun (x853 : Ojs.t) ->
             or_string_of_js
               (fun (x854 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x854)
               x853)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x851) "keyPath")
    let (set_keyPath : 'tags this -> string list or_string or_null -> unit) =
      fun (x856 : 'tags this) ->
        fun (x857 : string list or_string or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x856) "keyPath"
            (or_null_to_js
               (fun (x858 : string list or_string) ->
                  or_string_to_js
                    (fun (x859 : string list) ->
                       Ojs.list_to_js Ojs.string_to_js x859) x858) x857)
    let cast_from = Obj.magic
  end
module IDBIndexParameters =
  struct
    type t = [ `IDBIndexParameters ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x863 : Ojs.t) -> t_of_js x863
    and t_0_to_js : t_0 -> Ojs.t = fun (x862 : t) -> t_to_js x862
    type tags = [ `IDBIndexParameters ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBIndexParameters ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x866 : Ojs.t) -> intf_of_js __tags_of_js x866
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x864 : __tags intf) -> intf_to_js __tags_to_js x864
    let (get_multiEntry : 'tags this -> bool) =
      fun (x868 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x868) "multiEntry")
    let (set_multiEntry : 'tags this -> bool -> unit) =
      fun (x870 : 'tags this) ->
        fun (x871 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x870) "multiEntry"
            (Ojs.bool_to_js x871)
    let (get_unique : 'tags this -> bool) =
      fun (x873 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x873) "unique")
    let (set_unique : 'tags this -> bool -> unit) =
      fun (x875 : 'tags this) ->
        fun (x876 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x875) "unique"
            (Ojs.bool_to_js x876)
    let cast_from = Obj.magic
  end
module BufferSource =
  struct
    type t = never
    let rec t_of_js : Ojs.t -> t = fun (x879 : Ojs.t) -> never_of_js x879
    and t_to_js : t -> Ojs.t = fun (x878 : never) -> never_to_js x878
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x881 : Ojs.t) -> t_of_js x881
    and t_0_to_js : t_0 -> Ojs.t = fun (x880 : t) -> t_to_js x880
  end
module IDBValidKey =
  struct
    type t = t list or_string or_number
    let rec t_of_js : Ojs.t -> t =
      fun (x886 : Ojs.t) ->
        or_number_of_js
          (fun (x887 : Ojs.t) ->
             or_string_of_js
               (fun (x888 : Ojs.t) -> Ojs.list_of_js t_of_js x888) x887) x886
    and t_to_js : t -> Ojs.t =
      fun (x882 : t list or_string or_number) ->
        or_number_to_js
          (fun (x883 : t list or_string) ->
             or_string_to_js
               (fun (x884 : t list) -> Ojs.list_to_js t_to_js x884) x883)
          x882
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x891 : Ojs.t) -> t_of_js x891
    and t_0_to_js : t_0 -> Ojs.t = fun (x890 : t) -> t_to_js x890
  end
module IDBTransactionMode =
  struct
    type t =
      [ `L_s161_readonly  | `L_s162_readwrite  | `L_s203_versionchange ]
    let rec t_of_js : Ojs.t -> t =
      fun (x893 : Ojs.t) ->
        let x894 = x893 in
        match Ojs.string_of_js x894 with
        | "readonly" -> `L_s161_readonly
        | "readwrite" -> `L_s162_readwrite
        | "versionchange" -> `L_s203_versionchange
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x892 :
          [ `L_s161_readonly  | `L_s162_readwrite  | `L_s203_versionchange ])
        ->
        match x892 with
        | `L_s161_readonly -> Ojs.string_to_js "readonly"
        | `L_s162_readwrite -> Ojs.string_to_js "readwrite"
        | `L_s203_versionchange -> Ojs.string_to_js "versionchange"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x896 : Ojs.t) -> t_of_js x896
    and t_0_to_js : t_0 -> Ojs.t = fun (x895 : t) -> t_to_js x895
  end
module IDBRequestReadyState =
  struct
    type t = [ `L_s147_pending  | `L_s63_done ]
    let rec t_of_js : Ojs.t -> t =
      fun (x898 : Ojs.t) ->
        let x899 = x898 in
        match Ojs.string_of_js x899 with
        | "pending" -> `L_s147_pending
        | "done" -> `L_s63_done
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x897 : [ `L_s147_pending  | `L_s63_done ]) ->
        match x897 with
        | `L_s147_pending -> Ojs.string_to_js "pending"
        | `L_s63_done -> Ojs.string_to_js "done"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x901 : Ojs.t) -> t_of_js x901
    and t_0_to_js : t_0 -> Ojs.t = fun (x900 : t) -> t_to_js x900
  end
module IDBKeyRange =
  struct
    type t = [ `IDBKeyRange ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x903 : Ojs.t) -> t_of_js x903
    and t_0_to_js : t_0 -> Ojs.t = fun (x902 : t) -> t_to_js x902
    type tags = [ `IDBKeyRange ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBKeyRange ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x906 : Ojs.t) -> intf_of_js __tags_of_js x906
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x904 : __tags intf) -> intf_to_js __tags_to_js x904
    let (get_lower : 'tags this -> any) =
      fun (x908 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x908) "lower")
    let (get_lowerOpen : 'tags this -> bool) =
      fun (x910 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x910) "lowerOpen")
    let (get_upper : 'tags this -> any) =
      fun (x912 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x912) "upper")
    let (get_upperOpen : 'tags this -> bool) =
      fun (x914 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x914) "upperOpen")
    let (includes : 'tags this -> key:any -> bool) =
      fun (x917 : 'tags this) ->
        fun ~key:(x916 : any) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x917) "includes"
               [|(any_to_js x916)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBKeyRange")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") [||])
    let (bound :
      lower:any ->
        upper:any -> ?lowerOpen:bool -> ?upperOpen:bool -> unit -> t)
      =
      fun ~lower:(x919 : any) ->
        fun ~upper:(x920 : any) ->
          fun ?lowerOpen:(x921 : bool option) ->
            fun ?upperOpen:(x922 : bool option) ->
              fun () ->
                t_of_js
                  (let x926 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
                   Ojs.call (Ojs.get_prop_ascii x926 "bound") "apply"
                     [|x926;((let x923 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x923 "push" [|(any_to_js x919)|]);
                              ignore
                                (Ojs.call x923 "push" [|(any_to_js x920)|]);
                              (match x921 with
                               | Some x925 ->
                                   ignore
                                     (Ojs.call x923 "push"
                                        [|(Ojs.bool_to_js x925)|])
                               | None -> ());
                              (match x922 with
                               | Some x924 ->
                                   ignore
                                     (Ojs.call x923 "push"
                                        [|(Ojs.bool_to_js x924)|])
                               | None -> ());
                              x923))|])
    let (lowerBound : lower:any -> ?open_:bool -> unit -> t) =
      fun ~lower:(x927 : any) ->
        fun ?open_:(x928 : bool option) ->
          fun () ->
            t_of_js
              (let x931 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x931 "lowerBound") "apply"
                 [|x931;((let x929 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore (Ojs.call x929 "push" [|(any_to_js x927)|]);
                          (match x928 with
                           | Some x930 ->
                               ignore
                                 (Ojs.call x929 "push"
                                    [|(Ojs.bool_to_js x930)|])
                           | None -> ());
                          x929))|])
    let (only : any -> t) =
      fun (x932 : any) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "IDBKeyRange") "only"
             [|(any_to_js x932)|])
    let (upperBound : upper:any -> ?open_:bool -> unit -> t) =
      fun ~upper:(x933 : any) ->
        fun ?open_:(x934 : bool option) ->
          fun () ->
            t_of_js
              (let x937 = Ojs.get_prop_ascii Ojs.global "IDBKeyRange" in
               Ojs.call (Ojs.get_prop_ascii x937 "upperBound") "apply"
                 [|x937;((let x935 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore (Ojs.call x935 "push" [|(any_to_js x933)|]);
                          (match x934 with
                           | Some x936 ->
                               ignore
                                 (Ojs.call x935 "push"
                                    [|(Ojs.bool_to_js x936)|])
                           | None -> ());
                          x935))|])
  end
module IDBCursorDirection =
  struct
    type t =
      [ `L_s121_next  | `L_s122_nextunique  | `L_s153_prev 
      | `L_s154_prevunique ]
    let rec t_of_js : Ojs.t -> t =
      fun (x939 : Ojs.t) ->
        let x940 = x939 in
        match Ojs.string_of_js x940 with
        | "next" -> `L_s121_next
        | "nextunique" -> `L_s122_nextunique
        | "prev" -> `L_s153_prev
        | "prevunique" -> `L_s154_prevunique
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x938 :
          [ `L_s121_next  | `L_s122_nextunique  | `L_s153_prev 
          | `L_s154_prevunique ])
        ->
        match x938 with
        | `L_s121_next -> Ojs.string_to_js "next"
        | `L_s122_nextunique -> Ojs.string_to_js "nextunique"
        | `L_s153_prev -> Ojs.string_to_js "prev"
        | `L_s154_prevunique -> Ojs.string_to_js "prevunique"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x942 : Ojs.t) -> t_of_js x942
    and t_0_to_js : t_0 -> Ojs.t = fun (x941 : t) -> t_to_js x941
  end
module DOMStringList =
  struct
    type t =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x944 : Ojs.t) -> t_of_js x944
    and t_0_to_js : t_0 -> Ojs.t = fun (x943 : t) -> t_to_js x943
    type tags =
      [ `DOMStringList  | string ArrayLike.tags_1
      | string IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMStringList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x947 : Ojs.t) -> intf_of_js __tags_of_js x947
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x945 : __tags intf) -> intf_to_js __tags_to_js x945
    let (get_length : 'tags this -> float) =
      fun (x949 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x949) "length")
    let (contains : 'tags this -> string:string -> bool) =
      fun (x952 : 'tags this) ->
        fun ~string:(x951 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x952) "contains"
               [|(Ojs.string_to_js x951)|])
    let (item : 'tags this -> index:float -> string or_null) =
      fun (x955 : 'tags this) ->
        fun ~index:(x954 : float) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x955) "item"
               [|(Ojs.float_to_js x954)|])
    let (get : 'tags this -> float -> string) =
      fun (x958 : 'tags this) ->
        fun (x960 : float) ->
          Ojs.string_of_js
            (Ojs.get_prop (this_to_js Obj.magic x958) (Ojs.float_to_js x960))
    let (set : 'tags this -> float -> string -> unit) =
      fun (x961 : 'tags this) ->
        fun (x963 : float) ->
          fun (x964 : string) ->
            Ojs.set_prop (this_to_js Obj.magic x961) (Ojs.float_to_js x963)
              (Ojs.string_to_js x964)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMStringList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "DOMStringList") [||])
  end
module DOMException =
  struct
    type t = [ `DOMException ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x966 : Ojs.t) -> t_of_js x966
    and t_0_to_js : t_0 -> Ojs.t = fun (x965 : t) -> t_to_js x965
    type tags = [ `DOMException ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMException ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x969 : Ojs.t) -> intf_of_js __tags_of_js x969
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x967 : __tags intf) -> intf_to_js __tags_to_js x967
    let (get_code : 'tags this -> float) =
      fun (x971 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x971) "code")
    let (get_message : 'tags this -> string) =
      fun (x973 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x973) "message")
    let (get_name : 'tags this -> string) =
      fun (x975 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x975) "name")
    let (get_ABORT_ERR : 'tags this -> float) =
      fun (x977 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x977) "ABORT_ERR")
    let (get_DATA_CLONE_ERR : 'tags this -> float) =
      fun (x979 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x979) "DATA_CLONE_ERR")
    let (get_DOMSTRING_SIZE_ERR : 'tags this -> float) =
      fun (x981 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x981)
             "DOMSTRING_SIZE_ERR")
    let (get_HIERARCHY_REQUEST_ERR : 'tags this -> float) =
      fun (x983 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x983)
             "HIERARCHY_REQUEST_ERR")
    let (get_INDEX_SIZE_ERR : 'tags this -> float) =
      fun (x985 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x985) "INDEX_SIZE_ERR")
    let (get_INUSE_ATTRIBUTE_ERR : 'tags this -> float) =
      fun (x987 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x987)
             "INUSE_ATTRIBUTE_ERR")
    let (get_INVALID_ACCESS_ERR : 'tags this -> float) =
      fun (x989 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x989)
             "INVALID_ACCESS_ERR")
    let (get_INVALID_CHARACTER_ERR : 'tags this -> float) =
      fun (x991 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x991)
             "INVALID_CHARACTER_ERR")
    let (get_INVALID_MODIFICATION_ERR : 'tags this -> float) =
      fun (x993 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x993)
             "INVALID_MODIFICATION_ERR")
    let (get_INVALID_NODE_TYPE_ERR : 'tags this -> float) =
      fun (x995 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x995)
             "INVALID_NODE_TYPE_ERR")
    let (get_INVALID_STATE_ERR : 'tags this -> float) =
      fun (x997 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x997) "INVALID_STATE_ERR")
    let (get_NAMESPACE_ERR : 'tags this -> float) =
      fun (x999 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x999) "NAMESPACE_ERR")
    let (get_NETWORK_ERR : 'tags this -> float) =
      fun (x1001 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1001) "NETWORK_ERR")
    let (get_NOT_FOUND_ERR : 'tags this -> float) =
      fun (x1003 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1003) "NOT_FOUND_ERR")
    let (get_NOT_SUPPORTED_ERR : 'tags this -> float) =
      fun (x1005 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1005)
             "NOT_SUPPORTED_ERR")
    let (get_NO_DATA_ALLOWED_ERR : 'tags this -> float) =
      fun (x1007 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1007)
             "NO_DATA_ALLOWED_ERR")
    let (get_NO_MODIFICATION_ALLOWED_ERR : 'tags this -> float) =
      fun (x1009 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1009)
             "NO_MODIFICATION_ALLOWED_ERR")
    let (get_QUOTA_EXCEEDED_ERR : 'tags this -> float) =
      fun (x1011 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1011)
             "QUOTA_EXCEEDED_ERR")
    let (get_SECURITY_ERR : 'tags this -> float) =
      fun (x1013 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1013) "SECURITY_ERR")
    let (get_SYNTAX_ERR : 'tags this -> float) =
      fun (x1015 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1015) "SYNTAX_ERR")
    let (get_TIMEOUT_ERR : 'tags this -> float) =
      fun (x1017 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1017) "TIMEOUT_ERR")
    let (get_TYPE_MISMATCH_ERR : 'tags this -> float) =
      fun (x1019 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1019)
             "TYPE_MISMATCH_ERR")
    let (get_URL_MISMATCH_ERR : 'tags this -> float) =
      fun (x1021 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1021) "URL_MISMATCH_ERR")
    let (get_VALIDATION_ERR : 'tags this -> float) =
      fun (x1023 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1023) "VALIDATION_ERR")
    let (get_WRONG_DOCUMENT_ERR : 'tags this -> float) =
      fun (x1025 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1025)
             "WRONG_DOCUMENT_ERR")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "prototype")
    let (create : ?message:string -> ?name:string -> unit -> t) =
      fun ?message:(x1027 : string option) ->
        fun ?name:(x1028 : string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMException")
                 (let x1029 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x1027 with
                   | Some x1031 ->
                       ignore
                         (Ojs.call x1029 "push" [|(Ojs.string_to_js x1031)|])
                   | None -> ());
                  (match x1028 with
                   | Some x1030 ->
                       ignore
                         (Ojs.call x1029 "push" [|(Ojs.string_to_js x1030)|])
                   | None -> ());
                  x1029))
    let (abort_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "ABORT_ERR")
    let (data_clone_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DATA_CLONE_ERR")
    let (domstring_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "DOMSTRING_SIZE_ERR")
    let (hierarchy_request_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "HIERARCHY_REQUEST_ERR")
    let (index_size_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INDEX_SIZE_ERR")
    let (inuse_attribute_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INUSE_ATTRIBUTE_ERR")
    let (invalid_access_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_ACCESS_ERR")
    let (invalid_character_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_CHARACTER_ERR")
    let (invalid_modification_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_MODIFICATION_ERR")
    let (invalid_node_type_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_NODE_TYPE_ERR")
    let (invalid_state_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "INVALID_STATE_ERR")
    let (namespace_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NAMESPACE_ERR")
    let (network_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NETWORK_ERR")
    let (not_found_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_FOUND_ERR")
    let (not_supported_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NOT_SUPPORTED_ERR")
    let (no_data_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_DATA_ALLOWED_ERR")
    let (no_modification_allowed_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "NO_MODIFICATION_ALLOWED_ERR")
    let (quota_exceeded_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "QUOTA_EXCEEDED_ERR")
    let (security_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SECURITY_ERR")
    let (syntax_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "SYNTAX_ERR")
    let (timeout_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TIMEOUT_ERR")
    let (type_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "TYPE_MISMATCH_ERR")
    let (url_mismatch_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "URL_MISMATCH_ERR")
    let (validation_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "VALIDATION_ERR")
    let (wrong_document_err : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMException")
             "WRONG_DOCUMENT_ERR")
  end
module rec
  IDBCursor:sig
              type t = [ `IDBCursor ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `IDBCursor ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem type tags = [ `IDBCursor ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `IDBCursor ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_direction : 'tags this -> IDBCursorDirection.t
              val get_key : 'tags this -> IDBValidKey.t
              val get_primaryKey : 'tags this -> IDBValidKey.t
              val get_request : 'tags this -> IDBRequest.t_0
              val get_source :
                'tags this -> (IDBIndex.t, IDBObjectStore.t) union2
              val advance : 'tags this -> count:float -> unit
              val continue : 'tags this -> ?key:IDBValidKey.t -> unit -> unit
              val continuePrimaryKey :
                'tags this ->
                  key:IDBValidKey.t -> primaryKey:IDBValidKey.t -> unit
              val delete : 'tags this -> never or_undefined IDBRequest.t
              val update :
                'tags this -> value:any -> IDBValidKey.t IDBRequest.t
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create : unit -> t
            end =
  struct
    type t = [ `IDBCursor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1033 : Ojs.t) -> t_of_js x1033
    and t_0_to_js : t_0 -> Ojs.t = fun (x1032 : t) -> t_to_js x1032
    type tags = [ `IDBCursor ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBCursor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1036 : Ojs.t) -> intf_of_js __tags_of_js x1036
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1034 : __tags intf) -> intf_to_js __tags_to_js x1034
    let (get_direction : 'tags this -> IDBCursorDirection.t) =
      fun (x1038 : 'tags this) ->
        IDBCursorDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1038) "direction")
    let (get_key : 'tags this -> IDBValidKey.t) =
      fun (x1040 : 'tags this) ->
        IDBValidKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1040) "key")
    let (get_primaryKey : 'tags this -> IDBValidKey.t) =
      fun (x1042 : 'tags this) ->
        IDBValidKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1042) "primaryKey")
    let (get_request : 'tags this -> IDBRequest.t_0) =
      fun (x1044 : 'tags this) ->
        IDBRequest.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1044) "request")
    let (get_source : 'tags this -> (IDBIndex.t, IDBObjectStore.t) union2) =
      fun (x1046 : 'tags this) ->
        union2_of_js IDBIndex.t_of_js IDBObjectStore.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1046) "source")
    let (advance : 'tags this -> count:float -> unit) =
      fun (x1051 : 'tags this) ->
        fun ~count:(x1050 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x1051) "advance"
               [|(Ojs.float_to_js x1050)|])
    let (continue : 'tags this -> ?key:IDBValidKey.t -> unit -> unit) =
      fun (x1056 : 'tags this) ->
        fun ?key:(x1053 : IDBValidKey.t option) ->
          fun () ->
            ignore
              (let x1058 = this_to_js Obj.magic x1056 in
               Ojs.call (Ojs.get_prop_ascii x1058 "continue") "apply"
                 [|x1058;((let x1054 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x1053 with
                            | Some x1055 ->
                                ignore
                                  (Ojs.call x1054 "push"
                                     [|(IDBValidKey.t_to_js x1055)|])
                            | None -> ());
                           x1054))|])
    let (continuePrimaryKey :
      'tags this -> key:IDBValidKey.t -> primaryKey:IDBValidKey.t -> unit) =
      fun (x1061 : 'tags this) ->
        fun ~key:(x1059 : IDBValidKey.t) ->
          fun ~primaryKey:(x1060 : IDBValidKey.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x1061) "continuePrimaryKey"
                 [|(IDBValidKey.t_to_js x1059);(IDBValidKey.t_to_js x1060)|])
    let (delete : 'tags this -> never or_undefined IDBRequest.t) =
      fun (x1063 : 'tags this) ->
        IDBRequest.t_of_js
          (fun (x1065 : Ojs.t) -> or_undefined_of_js never_of_js x1065)
          (Ojs.call (this_to_js Obj.magic x1063) "delete" [||])
    let (update : 'tags this -> value:any -> IDBValidKey.t IDBRequest.t) =
      fun (x1068 : 'tags this) ->
        fun ~value:(x1067 : any) ->
          IDBRequest.t_of_js IDBValidKey.t_of_js
            (Ojs.call (this_to_js Obj.magic x1068) "update"
               [|(any_to_js x1067)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBCursor")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBCursor") [||])
  end
 and
  IDBCursorWithValue:sig
                       type t = [ `IDBCursor  | `IDBCursorWithValue ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags = [ `IDBCursor  | `IDBCursorWithValue ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags = [ `IDBCursor  | `IDBCursorWithValue ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags =
                                     [> `IDBCursorWithValue ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_value : 'tags this -> any
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create : unit -> t
                     end =
  struct
    type t = [ `IDBCursor  | `IDBCursorWithValue ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1072 : Ojs.t) -> t_of_js x1072
    and t_0_to_js : t_0 -> Ojs.t = fun (x1071 : t) -> t_to_js x1071
    type tags = [ `IDBCursor  | `IDBCursorWithValue ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBCursorWithValue ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1075 : Ojs.t) -> intf_of_js __tags_of_js x1075
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1073 : __tags intf) -> intf_to_js __tags_to_js x1073
    let (get_value : 'tags this -> any) =
      fun (x1077 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x1077) "value")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBCursorWithValue") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBCursorWithValue")
             [||])
  end and
       IDBDatabase:sig
                     type t = [ `EventTarget  | `IDBDatabase ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `EventTarget  | `IDBDatabase ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `EventTarget  | `IDBDatabase ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `IDBDatabase ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_name : 'tags this -> string
                     val get_objectStoreNames : 'tags this -> DOMStringList.t
                     val get_onabort :
                       'tags this -> (this:t -> ev:Event.t -> any) or_null
                     val set_onabort :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) or_null -> unit
                     val get_onclose :
                       'tags this -> (this:t -> ev:Event.t -> any) or_null
                     val set_onclose :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) or_null -> unit
                     val get_onerror :
                       'tags this -> (this:t -> ev:Event.t -> any) or_null
                     val set_onerror :
                       'tags this ->
                         (this:t -> ev:Event.t -> any) or_null -> unit
                     val get_onversionchange :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any)
                           or_null
                     val set_onversionchange :
                       'tags this ->
                         (this:t -> ev:IDBVersionChangeEvent.t -> any)
                           or_null -> unit
                     val get_version : 'tags this -> float
                     val close : 'tags this -> unit
                     val createObjectStore :
                       'tags this ->
                         name:string ->
                           ?options:IDBObjectStoreParameters.t ->
                             unit -> IDBObjectStore.t
                     val deleteObjectStore :
                       'tags this -> name:string -> unit
                     val transaction :
                       'tags this ->
                         storeNames:string list or_string ->
                           ?mode:IDBTransactionMode.t ->
                             unit -> IDBTransaction.t
                     val addEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val addEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:AddEventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener :
                       'tags this ->
                         type_:'K ->
                           listener:(this:t -> ev:any -> any) ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val removeEventListener' :
                       'tags this ->
                         type_:string ->
                           listener:EventListenerOrEventListenerObject.t ->
                             ?options:EventListenerOptions.t or_boolean ->
                               unit -> unit
                     val transaction' :
                       'tags this ->
                         storeNames:string Iterable.t_1 or_string ->
                           ?mode:IDBTransactionMode.t ->
                             unit -> IDBTransaction.t
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create : unit -> t
                   end =
       struct
         type t = [ `EventTarget  | `IDBDatabase ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x1080 : Ojs.t) -> t_of_js x1080
         and t_0_to_js : t_0 -> Ojs.t = fun (x1079 : t) -> t_to_js x1079
         type tags = [ `EventTarget  | `IDBDatabase ]
         type tags_0 = tags
         type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabase ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x1083 : Ojs.t) -> intf_of_js __tags_of_js x1083
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x1081 : __tags intf) -> intf_to_js __tags_to_js x1081
         let (get_name : 'tags this -> string) =
           fun (x1085 : 'tags this) ->
             Ojs.string_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1085) "name")
         let (get_objectStoreNames : 'tags this -> DOMStringList.t) =
           fun (x1087 : 'tags this) ->
             DOMStringList.t_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1087)
                  "objectStoreNames")
         let (get_onabort :
           'tags this -> (this:t -> ev:Event.t -> any) or_null) =
           fun (x1089 : 'tags this) ->
             or_null_of_js
               (fun (x1091 : Ojs.t) ->
                  fun ~this:(x1092 : t) ->
                    fun ~ev:(x1093 : Event.t) ->
                      any_of_js
                        (Ojs.apply x1091
                           [|(t_to_js x1092);(Event.t_to_js x1093)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1089) "onabort")
         let (set_onabort :
           'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
           fun (x1094 : 'tags this) ->
             fun (x1095 : (this:t -> ev:Event.t -> any) or_null) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x1094) "onabort"
                 (or_null_to_js
                    (fun (x1096 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x1097 : Ojs.t) ->
                            fun (x1098 : Ojs.t) ->
                              any_to_js
                                (x1096 ~this:(t_of_js x1097)
                                   ~ev:(Event.t_of_js x1098)))) x1095)
         let (get_onclose :
           'tags this -> (this:t -> ev:Event.t -> any) or_null) =
           fun (x1100 : 'tags this) ->
             or_null_of_js
               (fun (x1102 : Ojs.t) ->
                  fun ~this:(x1103 : t) ->
                    fun ~ev:(x1104 : Event.t) ->
                      any_of_js
                        (Ojs.apply x1102
                           [|(t_to_js x1103);(Event.t_to_js x1104)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1100) "onclose")
         let (set_onclose :
           'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
           fun (x1105 : 'tags this) ->
             fun (x1106 : (this:t -> ev:Event.t -> any) or_null) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x1105) "onclose"
                 (or_null_to_js
                    (fun (x1107 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x1108 : Ojs.t) ->
                            fun (x1109 : Ojs.t) ->
                              any_to_js
                                (x1107 ~this:(t_of_js x1108)
                                   ~ev:(Event.t_of_js x1109)))) x1106)
         let (get_onerror :
           'tags this -> (this:t -> ev:Event.t -> any) or_null) =
           fun (x1111 : 'tags this) ->
             or_null_of_js
               (fun (x1113 : Ojs.t) ->
                  fun ~this:(x1114 : t) ->
                    fun ~ev:(x1115 : Event.t) ->
                      any_of_js
                        (Ojs.apply x1113
                           [|(t_to_js x1114);(Event.t_to_js x1115)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1111) "onerror")
         let (set_onerror :
           'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
           fun (x1116 : 'tags this) ->
             fun (x1117 : (this:t -> ev:Event.t -> any) or_null) ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x1116) "onerror"
                 (or_null_to_js
                    (fun (x1118 : this:t -> ev:Event.t -> any) ->
                       Ojs.fun_to_js 2
                         (fun (x1119 : Ojs.t) ->
                            fun (x1120 : Ojs.t) ->
                              any_to_js
                                (x1118 ~this:(t_of_js x1119)
                                   ~ev:(Event.t_of_js x1120)))) x1117)
         let (get_onversionchange :
           'tags this ->
             (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null)
           =
           fun (x1122 : 'tags this) ->
             or_null_of_js
               (fun (x1124 : Ojs.t) ->
                  fun ~this:(x1125 : t) ->
                    fun ~ev:(x1126 : IDBVersionChangeEvent.t) ->
                      any_of_js
                        (Ojs.apply x1124
                           [|(t_to_js x1125);(IDBVersionChangeEvent.t_to_js
                                                x1126)|]))
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1122)
                  "onversionchange")
         let (set_onversionchange :
           'tags this ->
             (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null -> unit)
           =
           fun (x1127 : 'tags this) ->
             fun
               (x1128 :
                 (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null)
               ->
               Ojs.set_prop_ascii (this_to_js Obj.magic x1127)
                 "onversionchange"
                 (or_null_to_js
                    (fun
                       (x1129 : this:t -> ev:IDBVersionChangeEvent.t -> any)
                       ->
                       Ojs.fun_to_js 2
                         (fun (x1130 : Ojs.t) ->
                            fun (x1131 : Ojs.t) ->
                              any_to_js
                                (x1129 ~this:(t_of_js x1130)
                                   ~ev:(IDBVersionChangeEvent.t_of_js x1131))))
                    x1128)
         let (get_version : 'tags this -> float) =
           fun (x1133 : 'tags this) ->
             Ojs.float_of_js
               (Ojs.get_prop_ascii (this_to_js Obj.magic x1133) "version")
         let (close : 'tags this -> unit) =
           fun (x1135 : 'tags this) ->
             ignore (Ojs.call (this_to_js Obj.magic x1135) "close" [||])
         let (createObjectStore :
           'tags this ->
             name:string ->
               ?options:IDBObjectStoreParameters.t ->
                 unit -> IDBObjectStore.t)
           =
           fun (x1141 : 'tags this) ->
             fun ~name:(x1137 : string) ->
               fun ?options:(x1138 : IDBObjectStoreParameters.t option) ->
                 fun () ->
                   IDBObjectStore.t_of_js
                     (let x1143 = this_to_js Obj.magic x1141 in
                      Ojs.call (Ojs.get_prop_ascii x1143 "createObjectStore")
                        "apply"
                        [|x1143;((let x1139 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x1139 "push"
                                       [|(Ojs.string_to_js x1137)|]);
                                  (match x1138 with
                                   | Some x1140 ->
                                       ignore
                                         (Ojs.call x1139 "push"
                                            [|(IDBObjectStoreParameters.t_to_js
                                                 x1140)|])
                                   | None -> ());
                                  x1139))|])
         let (deleteObjectStore : 'tags this -> name:string -> unit) =
           fun (x1145 : 'tags this) ->
             fun ~name:(x1144 : string) ->
               ignore
                 (Ojs.call (this_to_js Obj.magic x1145) "deleteObjectStore"
                    [|(Ojs.string_to_js x1144)|])
         let (transaction :
           'tags this ->
             storeNames:string list or_string ->
               ?mode:IDBTransactionMode.t -> unit -> IDBTransaction.t)
           =
           fun (x1153 : 'tags this) ->
             fun ~storeNames:(x1147 : string list or_string) ->
               fun ?mode:(x1148 : IDBTransactionMode.t option) ->
                 fun () ->
                   IDBTransaction.t_of_js
                     (let x1155 = this_to_js Obj.magic x1153 in
                      Ojs.call (Ojs.get_prop_ascii x1155 "transaction")
                        "apply"
                        [|x1155;((let x1149 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x1149 "push"
                                       [|(or_string_to_js
                                            (fun (x1151 : string list) ->
                                               Ojs.list_to_js
                                                 Ojs.string_to_js x1151)
                                            x1147)|]);
                                  (match x1148 with
                                   | Some x1150 ->
                                       ignore
                                         (Ojs.call x1149 "push"
                                            [|(IDBTransactionMode.t_to_js
                                                 x1150)|])
                                   | None -> ());
                                  x1149))|])
         let (addEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:AddEventListenerOptions.t or_boolean ->
                   unit -> unit)
           =
           fun (x1164 : 'tags this) ->
             fun ~type_:(x1156 : 'K) ->
               fun ~listener:(x1157 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x1158 :
                              AddEventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x1166 = this_to_js Obj.magic x1164 in
                        Ojs.call
                          (Ojs.get_prop_ascii x1166 "addEventListener")
                          "apply"
                          [|x1166;((let x1159 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x1159 "push"
                                         [|(Obj.magic x1156)|]);
                                    ignore
                                      (Ojs.call x1159 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x1162 : Ojs.t) ->
                                                 fun (x1163 : Ojs.t) ->
                                                   any_to_js
                                                     (x1157
                                                        ~this:(t_of_js x1162)
                                                        ~ev:(any_of_js x1163))))|]);
                                    (match x1158 with
                                     | Some x1160 ->
                                         ignore
                                           (Ojs.call x1159 "push"
                                              [|(or_boolean_to_js
                                                   AddEventListenerOptions.t_to_js
                                                   x1160)|])
                                     | None -> ());
                                    x1159))|])
         let (addEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:AddEventListenerOptions.t or_boolean ->
                   unit -> unit)
           =
           fun (x1173 : 'tags this) ->
             fun ~type_:(x1167 : string) ->
               fun ~listener:(x1168 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x1169 :
                              AddEventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x1175 = this_to_js Obj.magic x1173 in
                        Ojs.call
                          (Ojs.get_prop_ascii x1175 "addEventListener")
                          "apply"
                          [|x1175;((let x1170 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x1170 "push"
                                         [|(Ojs.string_to_js x1167)|]);
                                    ignore
                                      (Ojs.call x1170 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x1168)|]);
                                    (match x1169 with
                                     | Some x1171 ->
                                         ignore
                                           (Ojs.call x1170 "push"
                                              [|(or_boolean_to_js
                                                   AddEventListenerOptions.t_to_js
                                                   x1171)|])
                                     | None -> ());
                                    x1170))|])
         let (removeEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:EventListenerOptions.t or_boolean -> unit -> unit)
           =
           fun (x1184 : 'tags this) ->
             fun ~type_:(x1176 : 'K) ->
               fun ~listener:(x1177 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x1178 :
                              EventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x1186 = this_to_js Obj.magic x1184 in
                        Ojs.call
                          (Ojs.get_prop_ascii x1186 "removeEventListener")
                          "apply"
                          [|x1186;((let x1179 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x1179 "push"
                                         [|(Obj.magic x1176)|]);
                                    ignore
                                      (Ojs.call x1179 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x1182 : Ojs.t) ->
                                                 fun (x1183 : Ojs.t) ->
                                                   any_to_js
                                                     (x1177
                                                        ~this:(t_of_js x1182)
                                                        ~ev:(any_of_js x1183))))|]);
                                    (match x1178 with
                                     | Some x1180 ->
                                         ignore
                                           (Ojs.call x1179 "push"
                                              [|(or_boolean_to_js
                                                   EventListenerOptions.t_to_js
                                                   x1180)|])
                                     | None -> ());
                                    x1179))|])
         let (removeEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:EventListenerOptions.t or_boolean -> unit -> unit)
           =
           fun (x1193 : 'tags this) ->
             fun ~type_:(x1187 : string) ->
               fun ~listener:(x1188 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x1189 :
                              EventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x1195 = this_to_js Obj.magic x1193 in
                        Ojs.call
                          (Ojs.get_prop_ascii x1195 "removeEventListener")
                          "apply"
                          [|x1195;((let x1190 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x1190 "push"
                                         [|(Ojs.string_to_js x1187)|]);
                                    ignore
                                      (Ojs.call x1190 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x1188)|]);
                                    (match x1189 with
                                     | Some x1191 ->
                                         ignore
                                           (Ojs.call x1190 "push"
                                              [|(or_boolean_to_js
                                                   EventListenerOptions.t_to_js
                                                   x1191)|])
                                     | None -> ());
                                    x1190))|])
         let (transaction' :
           'tags this ->
             storeNames:string Iterable.t_1 or_string ->
               ?mode:IDBTransactionMode.t -> unit -> IDBTransaction.t)
           =
           fun (x1202 : 'tags this) ->
             fun ~storeNames:(x1196 : string Iterable.t_1 or_string) ->
               fun ?mode:(x1197 : IDBTransactionMode.t option) ->
                 fun () ->
                   IDBTransaction.t_of_js
                     (let x1204 = this_to_js Obj.magic x1202 in
                      Ojs.call (Ojs.get_prop_ascii x1204 "transaction")
                        "apply"
                        [|x1204;((let x1198 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x1198 "push"
                                       [|(or_string_to_js
                                            (fun
                                               (x1200 : string Iterable.t_1)
                                               ->
                                               Iterable.t_1_to_js
                                                 Ojs.string_to_js x1200)
                                            x1196)|]);
                                  (match x1197 with
                                   | Some x1199 ->
                                       ignore
                                         (Ojs.call x1198 "push"
                                            [|(IDBTransactionMode.t_to_js
                                                 x1199)|])
                                   | None -> ());
                                  x1198))|])
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "IDBDatabase") "prototype")
         let (create : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBDatabase")
                  [||])
       end and
            IDBIndex:sig
                       type t = [ `IDBIndex ] intf
                       type t_0 = t
                       [@@@js.stop ]
                       type tags = [ `IDBIndex ]
                       type tags_0 = tags
                       [@@@js.start ]
                       [@@@js.implem
                         type tags = [ `IDBIndex ]
                         type tags_0 = tags]
                       type 'tags this =
                         'tags intf constraint 'tags = [> `IDBIndex ]
                       val t_to_js : t -> Ojs.t
                       val t_of_js : Ojs.t -> t
                       val t_0_to_js : t_0 -> Ojs.t
                       val t_0_of_js : Ojs.t -> t_0
                       val get_keyPath : 'tags this -> string list or_string
                       val get_multiEntry : 'tags this -> bool
                       val get_name : 'tags this -> string
                       val set_name : 'tags this -> string -> unit
                       val get_objectStore : 'tags this -> IDBObjectStore.t
                       val get_unique : 'tags this -> bool
                       val count :
                         'tags this ->
                           ?query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                             unit -> float IDBRequest.t
                       val get_ :
                         'tags this ->
                           query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                             any IDBRequest.t
                       val getAll :
                         'tags this ->
                           ?query:(IDBKeyRange.t, IDBValidKey.t) union2
                             or_null ->
                             ?count:float -> unit -> any list IDBRequest.t
                       val getAllKeys :
                         'tags this ->
                           ?query:(IDBKeyRange.t, IDBValidKey.t) union2
                             or_null ->
                             ?count:float ->
                               unit -> IDBValidKey.t list IDBRequest.t
                       val getKey :
                         'tags this ->
                           query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                             IDBValidKey.t or_undefined IDBRequest.t
                       val openCursor :
                         'tags this ->
                           ?query:(IDBKeyRange.t, IDBValidKey.t) union2
                             or_null ->
                             ?direction:IDBCursorDirection.t ->
                               unit ->
                                 IDBCursorWithValue.t or_null IDBRequest.t
                       val openKeyCursor :
                         'tags this ->
                           ?query:(IDBKeyRange.t, IDBValidKey.t) union2
                             or_null ->
                             ?direction:IDBCursorDirection.t ->
                               unit -> IDBCursor.t or_null IDBRequest.t
                       val cast_from : 'tags this -> t
                       val prototype : unit -> t
                       val create : unit -> t
                     end =
            struct
              type t = [ `IDBIndex ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x1206 : Ojs.t) -> t_of_js x1206
              and t_0_to_js : t_0 -> Ojs.t = fun (x1205 : t) -> t_to_js x1205
              type tags = [ `IDBIndex ]
              type tags_0 = tags
              type 'tags this = 'tags intf constraint 'tags = [> `IDBIndex ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x1209 : Ojs.t) -> intf_of_js __tags_of_js x1209
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x1207 : __tags intf) -> intf_to_js __tags_to_js x1207
              let (get_keyPath : 'tags this -> string list or_string) =
                fun (x1211 : 'tags this) ->
                  or_string_of_js
                    (fun (x1213 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x1213)
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1211)
                       "keyPath")
              let (get_multiEntry : 'tags this -> bool) =
                fun (x1215 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1215)
                       "multiEntry")
              let (get_name : 'tags this -> string) =
                fun (x1217 : 'tags this) ->
                  Ojs.string_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1217) "name")
              let (set_name : 'tags this -> string -> unit) =
                fun (x1219 : 'tags this) ->
                  fun (x1220 : string) ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x1219) "name"
                      (Ojs.string_to_js x1220)
              let (get_objectStore : 'tags this -> IDBObjectStore.t) =
                fun (x1222 : 'tags this) ->
                  IDBObjectStore.t_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1222)
                       "objectStore")
              let (get_unique : 'tags this -> bool) =
                fun (x1224 : 'tags this) ->
                  Ojs.bool_of_js
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x1224) "unique")
              let (count :
                'tags this ->
                  ?query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                    unit -> float IDBRequest.t)
                =
                fun (x1231 : 'tags this) ->
                  fun
                    ?query:(x1226 :
                             (IDBKeyRange.t, IDBValidKey.t) union2 option)
                    ->
                    fun () ->
                      IDBRequest.t_of_js Ojs.float_of_js
                        (let x1233 = this_to_js Obj.magic x1231 in
                         Ojs.call (Ojs.get_prop_ascii x1233 "count") "apply"
                           [|x1233;((let x1227 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     (match x1226 with
                                      | Some x1228 ->
                                          ignore
                                            (Ojs.call x1227 "push"
                                               [|(union2_to_js
                                                    IDBKeyRange.t_to_js
                                                    IDBValidKey.t_to_js x1228)|])
                                      | None -> ());
                                     x1227))|])
              let (get_ :
                'tags this ->
                  query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                    any IDBRequest.t)
                =
                fun (x1238 : 'tags this) ->
                  fun ~query:(x1235 : (IDBKeyRange.t, IDBValidKey.t) union2)
                    ->
                    IDBRequest.t_of_js any_of_js
                      (Ojs.call (this_to_js Obj.magic x1238) "get"
                         [|(union2_to_js IDBKeyRange.t_to_js
                              IDBValidKey.t_to_js x1235)|])
              let (getAll :
                'tags this ->
                  ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null ->
                    ?count:float -> unit -> any list IDBRequest.t)
                =
                fun (x1249 : 'tags this) ->
                  fun
                    ?query:(x1241 :
                             (IDBKeyRange.t, IDBValidKey.t) union2 or_null
                               option)
                    ->
                    fun ?count:(x1242 : float option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x1252 : Ojs.t) ->
                             Ojs.list_of_js any_of_js x1252)
                          (let x1251 = this_to_js Obj.magic x1249 in
                           Ojs.call (Ojs.get_prop_ascii x1251 "getAll")
                             "apply"
                             [|x1251;((let x1243 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x1241 with
                                        | Some x1245 ->
                                            ignore
                                              (Ojs.call x1243 "push"
                                                 [|(or_null_to_js
                                                      (fun
                                                         (x1246 :
                                                           (IDBKeyRange.t,
                                                             IDBValidKey.t)
                                                             union2)
                                                         ->
                                                         union2_to_js
                                                           IDBKeyRange.t_to_js
                                                           IDBValidKey.t_to_js
                                                           x1246) x1245)|])
                                        | None -> ());
                                       (match x1242 with
                                        | Some x1244 ->
                                            ignore
                                              (Ojs.call x1243 "push"
                                                 [|(Ojs.float_to_js x1244)|])
                                        | None -> ());
                                       x1243))|])
              let (getAllKeys :
                'tags this ->
                  ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null ->
                    ?count:float -> unit -> IDBValidKey.t list IDBRequest.t)
                =
                fun (x1262 : 'tags this) ->
                  fun
                    ?query:(x1254 :
                             (IDBKeyRange.t, IDBValidKey.t) union2 or_null
                               option)
                    ->
                    fun ?count:(x1255 : float option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x1265 : Ojs.t) ->
                             Ojs.list_of_js IDBValidKey.t_of_js x1265)
                          (let x1264 = this_to_js Obj.magic x1262 in
                           Ojs.call (Ojs.get_prop_ascii x1264 "getAllKeys")
                             "apply"
                             [|x1264;((let x1256 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x1254 with
                                        | Some x1258 ->
                                            ignore
                                              (Ojs.call x1256 "push"
                                                 [|(or_null_to_js
                                                      (fun
                                                         (x1259 :
                                                           (IDBKeyRange.t,
                                                             IDBValidKey.t)
                                                             union2)
                                                         ->
                                                         union2_to_js
                                                           IDBKeyRange.t_to_js
                                                           IDBValidKey.t_to_js
                                                           x1259) x1258)|])
                                        | None -> ());
                                       (match x1255 with
                                        | Some x1257 ->
                                            ignore
                                              (Ojs.call x1256 "push"
                                                 [|(Ojs.float_to_js x1257)|])
                                        | None -> ());
                                       x1256))|])
              let (getKey :
                'tags this ->
                  query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                    IDBValidKey.t or_undefined IDBRequest.t)
                =
                fun (x1270 : 'tags this) ->
                  fun ~query:(x1267 : (IDBKeyRange.t, IDBValidKey.t) union2)
                    ->
                    IDBRequest.t_of_js
                      (fun (x1272 : Ojs.t) ->
                         or_undefined_of_js IDBValidKey.t_of_js x1272)
                      (Ojs.call (this_to_js Obj.magic x1270) "getKey"
                         [|(union2_to_js IDBKeyRange.t_to_js
                              IDBValidKey.t_to_js x1267)|])
              let (openCursor :
                'tags this ->
                  ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null ->
                    ?direction:IDBCursorDirection.t ->
                      unit -> IDBCursorWithValue.t or_null IDBRequest.t)
                =
                fun (x1282 : 'tags this) ->
                  fun
                    ?query:(x1274 :
                             (IDBKeyRange.t, IDBValidKey.t) union2 or_null
                               option)
                    ->
                    fun ?direction:(x1275 : IDBCursorDirection.t option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x1285 : Ojs.t) ->
                             or_null_of_js IDBCursorWithValue.t_of_js x1285)
                          (let x1284 = this_to_js Obj.magic x1282 in
                           Ojs.call (Ojs.get_prop_ascii x1284 "openCursor")
                             "apply"
                             [|x1284;((let x1276 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x1274 with
                                        | Some x1278 ->
                                            ignore
                                              (Ojs.call x1276 "push"
                                                 [|(or_null_to_js
                                                      (fun
                                                         (x1279 :
                                                           (IDBKeyRange.t,
                                                             IDBValidKey.t)
                                                             union2)
                                                         ->
                                                         union2_to_js
                                                           IDBKeyRange.t_to_js
                                                           IDBValidKey.t_to_js
                                                           x1279) x1278)|])
                                        | None -> ());
                                       (match x1275 with
                                        | Some x1277 ->
                                            ignore
                                              (Ojs.call x1276 "push"
                                                 [|(IDBCursorDirection.t_to_js
                                                      x1277)|])
                                        | None -> ());
                                       x1276))|])
              let (openKeyCursor :
                'tags this ->
                  ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null ->
                    ?direction:IDBCursorDirection.t ->
                      unit -> IDBCursor.t or_null IDBRequest.t)
                =
                fun (x1295 : 'tags this) ->
                  fun
                    ?query:(x1287 :
                             (IDBKeyRange.t, IDBValidKey.t) union2 or_null
                               option)
                    ->
                    fun ?direction:(x1288 : IDBCursorDirection.t option) ->
                      fun () ->
                        IDBRequest.t_of_js
                          (fun (x1298 : Ojs.t) ->
                             or_null_of_js IDBCursor.t_of_js x1298)
                          (let x1297 = this_to_js Obj.magic x1295 in
                           Ojs.call
                             (Ojs.get_prop_ascii x1297 "openKeyCursor")
                             "apply"
                             [|x1297;((let x1289 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x1287 with
                                        | Some x1291 ->
                                            ignore
                                              (Ojs.call x1289 "push"
                                                 [|(or_null_to_js
                                                      (fun
                                                         (x1292 :
                                                           (IDBKeyRange.t,
                                                             IDBValidKey.t)
                                                             union2)
                                                         ->
                                                         union2_to_js
                                                           IDBKeyRange.t_to_js
                                                           IDBValidKey.t_to_js
                                                           x1292) x1291)|])
                                        | None -> ());
                                       (match x1288 with
                                        | Some x1290 ->
                                            ignore
                                              (Ojs.call x1289 "push"
                                                 [|(IDBCursorDirection.t_to_js
                                                      x1290)|])
                                        | None -> ());
                                       x1289))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "IDBIndex") "prototype")
              let (create : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBIndex")
                       [||])
            end and
                 IDBObjectStore:sig
                                  type t = [ `IDBObjectStore ] intf
                                  type t_0 = t
                                  [@@@js.stop ]
                                  type tags = [ `IDBObjectStore ]
                                  type tags_0 = tags
                                  [@@@js.start ]
                                  [@@@js.implem
                                    type tags = [ `IDBObjectStore ]
                                    type tags_0 = tags]
                                  type 'tags this =
                                    'tags intf constraint 'tags =
                                                [> `IDBObjectStore ]
                                  val t_to_js : t -> Ojs.t
                                  val t_of_js : Ojs.t -> t
                                  val t_0_to_js : t_0 -> Ojs.t
                                  val t_0_of_js : Ojs.t -> t_0
                                  val get_autoIncrement : 'tags this -> bool
                                  val get_indexNames :
                                    'tags this -> DOMStringList.t
                                  val get_keyPath :
                                    'tags this -> string list or_string
                                  val get_name : 'tags this -> string
                                  val set_name : 'tags this -> string -> unit
                                  val get_transaction :
                                    'tags this -> IDBTransaction.t
                                  val add :
                                    'tags this ->
                                      value:any ->
                                        ?key:IDBValidKey.t ->
                                          unit -> IDBValidKey.t IDBRequest.t
                                  val clear :
                                    'tags this ->
                                      never or_undefined IDBRequest.t
                                  val count :
                                    'tags this ->
                                      ?query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 -> unit -> float IDBRequest.t
                                  val createIndex :
                                    'tags this ->
                                      name:string ->
                                        keyPath:string list or_string ->
                                          ?options:IDBIndexParameters.t ->
                                            unit -> IDBIndex.t
                                  val delete :
                                    'tags this ->
                                      query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 ->
                                        never or_undefined IDBRequest.t
                                  val deleteIndex :
                                    'tags this -> name:string -> unit
                                  val get_ :
                                    'tags this ->
                                      query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 -> any IDBRequest.t
                                  val getAll :
                                    'tags this ->
                                      ?query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 or_null ->
                                        ?count:float ->
                                          unit -> any list IDBRequest.t
                                  val getAllKeys :
                                    'tags this ->
                                      ?query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 or_null ->
                                        ?count:float ->
                                          unit ->
                                            IDBValidKey.t list IDBRequest.t
                                  val getKey :
                                    'tags this ->
                                      query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 ->
                                        IDBValidKey.t or_undefined
                                          IDBRequest.t
                                  val index :
                                    'tags this -> name:string -> IDBIndex.t
                                  val openCursor :
                                    'tags this ->
                                      ?query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 or_null ->
                                        ?direction:IDBCursorDirection.t ->
                                          unit ->
                                            IDBCursorWithValue.t or_null
                                              IDBRequest.t
                                  val openKeyCursor :
                                    'tags this ->
                                      ?query:(IDBKeyRange.t, IDBValidKey.t)
                                        union2 or_null ->
                                        ?direction:IDBCursorDirection.t ->
                                          unit ->
                                            IDBCursor.t or_null IDBRequest.t
                                  val put :
                                    'tags this ->
                                      value:any ->
                                        ?key:IDBValidKey.t ->
                                          unit -> IDBValidKey.t IDBRequest.t
                                  val createIndex' :
                                    'tags this ->
                                      name:string ->
                                        keyPath:string Iterable.t_1 or_string
                                          ->
                                          ?options:IDBIndexParameters.t ->
                                            unit -> IDBIndex.t
                                  val cast_from : 'tags this -> t
                                  val prototype : unit -> t
                                  val create : unit -> t
                                end =
                 struct
                   type t = [ `IDBObjectStore ] intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x1301 : Ojs.t) -> t_of_js x1301
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x1300 : t) -> t_to_js x1300
                   type tags = [ `IDBObjectStore ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `IDBObjectStore ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun
                     (type __tags) ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (x1304 : Ojs.t) -> intf_of_js __tags_of_js x1304
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
                     (type __tags) ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (x1302 : __tags intf) ->
                         intf_to_js __tags_to_js x1302
                   let (get_autoIncrement : 'tags this -> bool) =
                     fun (x1306 : 'tags this) ->
                       Ojs.bool_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1306)
                            "autoIncrement")
                   let (get_indexNames : 'tags this -> DOMStringList.t) =
                     fun (x1308 : 'tags this) ->
                       DOMStringList.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1308)
                            "indexNames")
                   let (get_keyPath : 'tags this -> string list or_string) =
                     fun (x1310 : 'tags this) ->
                       or_string_of_js
                         (fun (x1312 : Ojs.t) ->
                            Ojs.list_of_js Ojs.string_of_js x1312)
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1310)
                            "keyPath")
                   let (get_name : 'tags this -> string) =
                     fun (x1314 : 'tags this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1314)
                            "name")
                   let (set_name : 'tags this -> string -> unit) =
                     fun (x1316 : 'tags this) ->
                       fun (x1317 : string) ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x1316)
                           "name" (Ojs.string_to_js x1317)
                   let (get_transaction : 'tags this -> IDBTransaction.t) =
                     fun (x1319 : 'tags this) ->
                       IDBTransaction.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x1319)
                            "transaction")
                   let (add :
                     'tags this ->
                       value:any ->
                         ?key:IDBValidKey.t ->
                           unit -> IDBValidKey.t IDBRequest.t)
                     =
                     fun (x1325 : 'tags this) ->
                       fun ~value:(x1321 : any) ->
                         fun ?key:(x1322 : IDBValidKey.t option) ->
                           fun () ->
                             IDBRequest.t_of_js IDBValidKey.t_of_js
                               (let x1327 = this_to_js Obj.magic x1325 in
                                Ojs.call (Ojs.get_prop_ascii x1327 "add")
                                  "apply"
                                  [|x1327;((let x1323 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x1323 "push"
                                                 [|(any_to_js x1321)|]);
                                            (match x1322 with
                                             | Some x1324 ->
                                                 ignore
                                                   (Ojs.call x1323 "push"
                                                      [|(IDBValidKey.t_to_js
                                                           x1324)|])
                                             | None -> ());
                                            x1323))|])
                   let (clear :
                     'tags this -> never or_undefined IDBRequest.t) =
                     fun (x1329 : 'tags this) ->
                       IDBRequest.t_of_js
                         (fun (x1331 : Ojs.t) ->
                            or_undefined_of_js never_of_js x1331)
                         (Ojs.call (this_to_js Obj.magic x1329) "clear" [||])
                   let (count :
                     'tags this ->
                       ?query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                         unit -> float IDBRequest.t)
                     =
                     fun (x1338 : 'tags this) ->
                       fun
                         ?query:(x1333 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2
                                    option)
                         ->
                         fun () ->
                           IDBRequest.t_of_js Ojs.float_of_js
                             (let x1340 = this_to_js Obj.magic x1338 in
                              Ojs.call (Ojs.get_prop_ascii x1340 "count")
                                "apply"
                                [|x1340;((let x1334 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          (match x1333 with
                                           | Some x1335 ->
                                               ignore
                                                 (Ojs.call x1334 "push"
                                                    [|(union2_to_js
                                                         IDBKeyRange.t_to_js
                                                         IDBValidKey.t_to_js
                                                         x1335)|])
                                           | None -> ());
                                          x1334))|])
                   let (createIndex :
                     'tags this ->
                       name:string ->
                         keyPath:string list or_string ->
                           ?options:IDBIndexParameters.t ->
                             unit -> IDBIndex.t)
                     =
                     fun (x1349 : 'tags this) ->
                       fun ~name:(x1342 : string) ->
                         fun ~keyPath:(x1343 : string list or_string) ->
                           fun ?options:(x1344 : IDBIndexParameters.t option)
                             ->
                             fun () ->
                               IDBIndex.t_of_js
                                 (let x1351 = this_to_js Obj.magic x1349 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x1351 "createIndex")
                                    "apply"
                                    [|x1351;((let x1345 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x1345 "push"
                                                   [|(Ojs.string_to_js x1342)|]);
                                              ignore
                                                (Ojs.call x1345 "push"
                                                   [|(or_string_to_js
                                                        (fun
                                                           (x1347 :
                                                             string list)
                                                           ->
                                                           Ojs.list_to_js
                                                             Ojs.string_to_js
                                                             x1347) x1343)|]);
                                              (match x1344 with
                                               | Some x1346 ->
                                                   ignore
                                                     (Ojs.call x1345 "push"
                                                        [|(IDBIndexParameters.t_to_js
                                                             x1346)|])
                                               | None -> ());
                                              x1345))|])
                   let (delete :
                     'tags this ->
                       query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                         never or_undefined IDBRequest.t)
                     =
                     fun (x1355 : 'tags this) ->
                       fun
                         ~query:(x1352 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2)
                         ->
                         IDBRequest.t_of_js
                           (fun (x1357 : Ojs.t) ->
                              or_undefined_of_js never_of_js x1357)
                           (Ojs.call (this_to_js Obj.magic x1355) "delete"
                              [|(union2_to_js IDBKeyRange.t_to_js
                                   IDBValidKey.t_to_js x1352)|])
                   let (deleteIndex : 'tags this -> name:string -> unit) =
                     fun (x1360 : 'tags this) ->
                       fun ~name:(x1359 : string) ->
                         ignore
                           (Ojs.call (this_to_js Obj.magic x1360)
                              "deleteIndex" [|(Ojs.string_to_js x1359)|])
                   let (get_ :
                     'tags this ->
                       query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                         any IDBRequest.t)
                     =
                     fun (x1365 : 'tags this) ->
                       fun
                         ~query:(x1362 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2)
                         ->
                         IDBRequest.t_of_js any_of_js
                           (Ojs.call (this_to_js Obj.magic x1365) "get"
                              [|(union2_to_js IDBKeyRange.t_to_js
                                   IDBValidKey.t_to_js x1362)|])
                   let (getAll :
                     'tags this ->
                       ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null
                         -> ?count:float -> unit -> any list IDBRequest.t)
                     =
                     fun (x1376 : 'tags this) ->
                       fun
                         ?query:(x1368 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2
                                    or_null option)
                         ->
                         fun ?count:(x1369 : float option) ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x1379 : Ojs.t) ->
                                  Ojs.list_of_js any_of_js x1379)
                               (let x1378 = this_to_js Obj.magic x1376 in
                                Ojs.call (Ojs.get_prop_ascii x1378 "getAll")
                                  "apply"
                                  [|x1378;((let x1370 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x1368 with
                                             | Some x1372 ->
                                                 ignore
                                                   (Ojs.call x1370 "push"
                                                      [|(or_null_to_js
                                                           (fun
                                                              (x1373 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2)
                                                              ->
                                                              union2_to_js
                                                                IDBKeyRange.t_to_js
                                                                IDBValidKey.t_to_js
                                                                x1373) x1372)|])
                                             | None -> ());
                                            (match x1369 with
                                             | Some x1371 ->
                                                 ignore
                                                   (Ojs.call x1370 "push"
                                                      [|(Ojs.float_to_js
                                                           x1371)|])
                                             | None -> ());
                                            x1370))|])
                   let (getAllKeys :
                     'tags this ->
                       ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null
                         ->
                         ?count:float ->
                           unit -> IDBValidKey.t list IDBRequest.t)
                     =
                     fun (x1389 : 'tags this) ->
                       fun
                         ?query:(x1381 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2
                                    or_null option)
                         ->
                         fun ?count:(x1382 : float option) ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x1392 : Ojs.t) ->
                                  Ojs.list_of_js IDBValidKey.t_of_js x1392)
                               (let x1391 = this_to_js Obj.magic x1389 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x1391 "getAllKeys")
                                  "apply"
                                  [|x1391;((let x1383 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x1381 with
                                             | Some x1385 ->
                                                 ignore
                                                   (Ojs.call x1383 "push"
                                                      [|(or_null_to_js
                                                           (fun
                                                              (x1386 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2)
                                                              ->
                                                              union2_to_js
                                                                IDBKeyRange.t_to_js
                                                                IDBValidKey.t_to_js
                                                                x1386) x1385)|])
                                             | None -> ());
                                            (match x1382 with
                                             | Some x1384 ->
                                                 ignore
                                                   (Ojs.call x1383 "push"
                                                      [|(Ojs.float_to_js
                                                           x1384)|])
                                             | None -> ());
                                            x1383))|])
                   let (getKey :
                     'tags this ->
                       query:(IDBKeyRange.t, IDBValidKey.t) union2 ->
                         IDBValidKey.t or_undefined IDBRequest.t)
                     =
                     fun (x1397 : 'tags this) ->
                       fun
                         ~query:(x1394 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2)
                         ->
                         IDBRequest.t_of_js
                           (fun (x1399 : Ojs.t) ->
                              or_undefined_of_js IDBValidKey.t_of_js x1399)
                           (Ojs.call (this_to_js Obj.magic x1397) "getKey"
                              [|(union2_to_js IDBKeyRange.t_to_js
                                   IDBValidKey.t_to_js x1394)|])
                   let (index : 'tags this -> name:string -> IDBIndex.t) =
                     fun (x1402 : 'tags this) ->
                       fun ~name:(x1401 : string) ->
                         IDBIndex.t_of_js
                           (Ojs.call (this_to_js Obj.magic x1402) "index"
                              [|(Ojs.string_to_js x1401)|])
                   let (openCursor :
                     'tags this ->
                       ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null
                         ->
                         ?direction:IDBCursorDirection.t ->
                           unit -> IDBCursorWithValue.t or_null IDBRequest.t)
                     =
                     fun (x1412 : 'tags this) ->
                       fun
                         ?query:(x1404 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2
                                    or_null option)
                         ->
                         fun ?direction:(x1405 : IDBCursorDirection.t option)
                           ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x1415 : Ojs.t) ->
                                  or_null_of_js IDBCursorWithValue.t_of_js
                                    x1415)
                               (let x1414 = this_to_js Obj.magic x1412 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x1414 "openCursor")
                                  "apply"
                                  [|x1414;((let x1406 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x1404 with
                                             | Some x1408 ->
                                                 ignore
                                                   (Ojs.call x1406 "push"
                                                      [|(or_null_to_js
                                                           (fun
                                                              (x1409 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2)
                                                              ->
                                                              union2_to_js
                                                                IDBKeyRange.t_to_js
                                                                IDBValidKey.t_to_js
                                                                x1409) x1408)|])
                                             | None -> ());
                                            (match x1405 with
                                             | Some x1407 ->
                                                 ignore
                                                   (Ojs.call x1406 "push"
                                                      [|(IDBCursorDirection.t_to_js
                                                           x1407)|])
                                             | None -> ());
                                            x1406))|])
                   let (openKeyCursor :
                     'tags this ->
                       ?query:(IDBKeyRange.t, IDBValidKey.t) union2 or_null
                         ->
                         ?direction:IDBCursorDirection.t ->
                           unit -> IDBCursor.t or_null IDBRequest.t)
                     =
                     fun (x1425 : 'tags this) ->
                       fun
                         ?query:(x1417 :
                                  (IDBKeyRange.t, IDBValidKey.t) union2
                                    or_null option)
                         ->
                         fun ?direction:(x1418 : IDBCursorDirection.t option)
                           ->
                           fun () ->
                             IDBRequest.t_of_js
                               (fun (x1428 : Ojs.t) ->
                                  or_null_of_js IDBCursor.t_of_js x1428)
                               (let x1427 = this_to_js Obj.magic x1425 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x1427 "openKeyCursor")
                                  "apply"
                                  [|x1427;((let x1419 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            (match x1417 with
                                             | Some x1421 ->
                                                 ignore
                                                   (Ojs.call x1419 "push"
                                                      [|(or_null_to_js
                                                           (fun
                                                              (x1422 :
                                                                (IDBKeyRange.t,
                                                                  IDBValidKey.t)
                                                                  union2)
                                                              ->
                                                              union2_to_js
                                                                IDBKeyRange.t_to_js
                                                                IDBValidKey.t_to_js
                                                                x1422) x1421)|])
                                             | None -> ());
                                            (match x1418 with
                                             | Some x1420 ->
                                                 ignore
                                                   (Ojs.call x1419 "push"
                                                      [|(IDBCursorDirection.t_to_js
                                                           x1420)|])
                                             | None -> ());
                                            x1419))|])
                   let (put :
                     'tags this ->
                       value:any ->
                         ?key:IDBValidKey.t ->
                           unit -> IDBValidKey.t IDBRequest.t)
                     =
                     fun (x1434 : 'tags this) ->
                       fun ~value:(x1430 : any) ->
                         fun ?key:(x1431 : IDBValidKey.t option) ->
                           fun () ->
                             IDBRequest.t_of_js IDBValidKey.t_of_js
                               (let x1436 = this_to_js Obj.magic x1434 in
                                Ojs.call (Ojs.get_prop_ascii x1436 "put")
                                  "apply"
                                  [|x1436;((let x1432 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x1432 "push"
                                                 [|(any_to_js x1430)|]);
                                            (match x1431 with
                                             | Some x1433 ->
                                                 ignore
                                                   (Ojs.call x1432 "push"
                                                      [|(IDBValidKey.t_to_js
                                                           x1433)|])
                                             | None -> ());
                                            x1432))|])
                   let (createIndex' :
                     'tags this ->
                       name:string ->
                         keyPath:string Iterable.t_1 or_string ->
                           ?options:IDBIndexParameters.t ->
                             unit -> IDBIndex.t)
                     =
                     fun (x1445 : 'tags this) ->
                       fun ~name:(x1438 : string) ->
                         fun ~keyPath:(x1439 : string Iterable.t_1 or_string)
                           ->
                           fun ?options:(x1440 : IDBIndexParameters.t option)
                             ->
                             fun () ->
                               IDBIndex.t_of_js
                                 (let x1447 = this_to_js Obj.magic x1445 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x1447 "createIndex")
                                    "apply"
                                    [|x1447;((let x1441 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x1441 "push"
                                                   [|(Ojs.string_to_js x1438)|]);
                                              ignore
                                                (Ojs.call x1441 "push"
                                                   [|(or_string_to_js
                                                        (fun
                                                           (x1443 :
                                                             string
                                                               Iterable.t_1)
                                                           ->
                                                           Iterable.t_1_to_js
                                                             Ojs.string_to_js
                                                             x1443) x1439)|]);
                                              (match x1440 with
                                               | Some x1442 ->
                                                   ignore
                                                     (Ojs.call x1441 "push"
                                                        [|(IDBIndexParameters.t_to_js
                                                             x1442)|])
                                               | None -> ());
                                              x1441))|])
                   let cast_from = Obj.magic
                   let (prototype : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global "IDBObjectStore")
                            "prototype")
                   let (create : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.new_obj
                            (Ojs.get_prop_ascii Ojs.global "IDBObjectStore")
                            [||])
                 end and
                      IDBRequest:sig
                                   type 'T t =
                                     [ `EventTarget  | `IDBRequest of 'T ]
                                       intf
                                   type 'T t_1 = 'T t
                                   type t_0 = any t
                                   [@@@js.stop ]
                                   type 'T tags =
                                     [ `EventTarget  | `IDBRequest of 'T ]
                                   type 'T tags_1 = 'T tags
                                   type tags_0 = any tags
                                   [@@@js.start ]
                                   [@@@js.implem
                                     type 'T tags =
                                       [ `EventTarget  | `IDBRequest of 'T ]
                                     type 'T tags_1 = 'T tags
                                     type tags_0 = any tags]
                                   type ('tags, 'T) this =
                                     'tags intf constraint 'tags =
                                                 [> `IDBRequest of 'T ]
                                   val t_to_js :
                                     ('T -> Ojs.t) -> 'T t -> Ojs.t
                                   val t_of_js :
                                     (Ojs.t -> 'T) -> Ojs.t -> 'T t
                                   val t_1_to_js :
                                     ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                                   val t_1_of_js :
                                     (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                                   val t_0_to_js : t_0 -> Ojs.t
                                   val t_0_of_js : Ojs.t -> t_0
                                   val get_error :
                                     ('tags, 'T) this ->
                                       DOMException.t or_null
                                   val get_onerror :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         or_null
                                   val set_onerror :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         or_null -> unit
                                   val get_onsuccess :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         or_null
                                   val set_onsuccess :
                                     ('tags, 'T) this ->
                                       (this:'T t -> ev:Event.t -> any)
                                         or_null -> unit
                                   val get_readyState :
                                     ('tags, 'T) this ->
                                       IDBRequestReadyState.t
                                   val get_result : ('tags, 'T) this -> 'T
                                   val get_source :
                                     ('tags, 'T) this ->
                                       (IDBCursor.t, IDBIndex.t,
                                         IDBObjectStore.t) union3
                                   val get_transaction :
                                     ('tags, 'T) this ->
                                       IDBTransaction.t or_null
                                   val addEventListener :
                                     ('tags, 'T) this ->
                                       type_:'K ->
                                         listener:(this:'T t -> ev:any -> any)
                                           ->
                                           ?options:AddEventListenerOptions.t
                                             or_boolean -> unit -> unit
                                   val addEventListener' :
                                     ('tags, 'T) this ->
                                       type_:string ->
                                         listener:EventListenerOrEventListenerObject.t
                                           ->
                                           ?options:AddEventListenerOptions.t
                                             or_boolean -> unit -> unit
                                   val removeEventListener :
                                     ('tags, 'T) this ->
                                       type_:'K ->
                                         listener:(this:'T t -> ev:any -> any)
                                           ->
                                           ?options:EventListenerOptions.t
                                             or_boolean -> unit -> unit
                                   val removeEventListener' :
                                     ('tags, 'T) this ->
                                       type_:string ->
                                         listener:EventListenerOrEventListenerObject.t
                                           ->
                                           ?options:EventListenerOptions.t
                                             or_boolean -> unit -> unit
                                   val cast_from : ('tags, 'T) this -> 'T t
                                   val prototype : unit -> t_0
                                   val create : unit -> t_0
                                 end =
                      struct
                        type 'T t =
                          [ `EventTarget  | `IDBRequest of 'T ] intf
                        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t
                          = fun _T -> Obj.magic
                        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t =
                          fun _T -> Obj.magic
                        type 'T t_1 = 'T t
                        let rec t_1_of_js :
                          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
                          __T) ->
                          fun (__T_of_js : Ojs.t -> __T) ->
                            fun (x1450 : Ojs.t) -> t_of_js __T_of_js x1450
                        and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                          = fun (type __T) ->
                          fun (__T_to_js : __T -> Ojs.t) ->
                            fun (x1448 : __T t) -> t_to_js __T_to_js x1448
                        type t_0 = any t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x1454 : Ojs.t) -> t_of_js any_of_js x1454
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x1452 : any t) -> t_to_js any_to_js x1452
                        type 'T tags = [ `EventTarget  | `IDBRequest of 'T ]
                        type 'T tags_1 = 'T tags
                        type tags_0 = any tags
                        type ('tags, 'T) this =
                          'tags intf constraint 'tags =
                                      [> `IDBRequest of 'T ]
                        let rec this_of_js :
                          'tags 'T .
                            (Ojs.t -> 'tags) ->
                              (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
                          = fun (type __tags) -> fun (type __T) ->
                          fun (__tags_of_js : Ojs.t -> __tags) ->
                            fun (__T_of_js : Ojs.t -> __T) ->
                              fun (x1458 : Ojs.t) ->
                                intf_of_js __tags_of_js x1458
                        and this_to_js :
                          'tags 'T .
                            ('tags -> Ojs.t) ->
                              ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
                          = fun (type __tags) -> fun (type __T) ->
                          fun (__tags_to_js : __tags -> Ojs.t) ->
                            fun (__T_to_js : __T -> Ojs.t) ->
                              fun (x1456 : __tags intf) ->
                                intf_to_js __tags_to_js x1456
                        let (get_error :
                          ('tags, 'T) this -> DOMException.t or_null) =
                          fun (x1460 : ('tags, 'T) this) ->
                            or_null_of_js DOMException.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1460)
                                 "error")
                        let (get_onerror :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) or_null)
                          =
                          fun (x1464 : ('tags, 'T) this) ->
                            or_null_of_js
                              (fun (x1467 : Ojs.t) ->
                                 fun ~this:(x1468 : 'T t) ->
                                   fun ~ev:(x1470 : Event.t) ->
                                     any_of_js
                                       (Ojs.apply x1467
                                          [|(t_to_js Obj.magic x1468);(
                                            Event.t_to_js x1470)|]))
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1464)
                                 "onerror")
                        let (set_onerror :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) or_null -> unit)
                          =
                          fun (x1471 : ('tags, 'T) this) ->
                            fun
                              (x1472 :
                                (this:'T t -> ev:Event.t -> any) or_null)
                              ->
                              Ojs.set_prop_ascii
                                (this_to_js Obj.magic Obj.magic x1471)
                                "onerror"
                                (or_null_to_js
                                   (fun
                                      (x1473 :
                                        this:'T t -> ev:Event.t -> any)
                                      ->
                                      Ojs.fun_to_js 2
                                        (fun (x1474 : Ojs.t) ->
                                           fun (x1476 : Ojs.t) ->
                                             any_to_js
                                               (x1473
                                                  ~this:(t_of_js Obj.magic
                                                           x1474)
                                                  ~ev:(Event.t_of_js x1476))))
                                   x1472)
                        let (get_onsuccess :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) or_null)
                          =
                          fun (x1479 : ('tags, 'T) this) ->
                            or_null_of_js
                              (fun (x1482 : Ojs.t) ->
                                 fun ~this:(x1483 : 'T t) ->
                                   fun ~ev:(x1485 : Event.t) ->
                                     any_of_js
                                       (Ojs.apply x1482
                                          [|(t_to_js Obj.magic x1483);(
                                            Event.t_to_js x1485)|]))
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1479)
                                 "onsuccess")
                        let (set_onsuccess :
                          ('tags, 'T) this ->
                            (this:'T t -> ev:Event.t -> any) or_null -> unit)
                          =
                          fun (x1486 : ('tags, 'T) this) ->
                            fun
                              (x1487 :
                                (this:'T t -> ev:Event.t -> any) or_null)
                              ->
                              Ojs.set_prop_ascii
                                (this_to_js Obj.magic Obj.magic x1486)
                                "onsuccess"
                                (or_null_to_js
                                   (fun
                                      (x1488 :
                                        this:'T t -> ev:Event.t -> any)
                                      ->
                                      Ojs.fun_to_js 2
                                        (fun (x1489 : Ojs.t) ->
                                           fun (x1491 : Ojs.t) ->
                                             any_to_js
                                               (x1488
                                                  ~this:(t_of_js Obj.magic
                                                           x1489)
                                                  ~ev:(Event.t_of_js x1491))))
                                   x1487)
                        let (get_readyState :
                          ('tags, 'T) this -> IDBRequestReadyState.t) =
                          fun (x1494 : ('tags, 'T) this) ->
                            IDBRequestReadyState.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1494)
                                 "readyState")
                        let (get_result : ('tags, 'T) this -> 'T) =
                          fun (x1497 : ('tags, 'T) this) ->
                            Obj.magic
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1497)
                                 "result")
                        let (get_source :
                          ('tags, 'T) this ->
                            (IDBCursor.t, IDBIndex.t, IDBObjectStore.t)
                              union3)
                          =
                          fun (x1500 : ('tags, 'T) this) ->
                            union3_of_js IDBCursor.t_of_js IDBIndex.t_of_js
                              IDBObjectStore.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1500)
                                 "source")
                        let (get_transaction :
                          ('tags, 'T) this -> IDBTransaction.t or_null) =
                          fun (x1506 : ('tags, 'T) this) ->
                            or_null_of_js IDBTransaction.t_of_js
                              (Ojs.get_prop_ascii
                                 (this_to_js Obj.magic Obj.magic x1506)
                                 "transaction")
                        let (addEventListener :
                          ('tags, 'T) this ->
                            type_:'K ->
                              listener:(this:'T t -> ev:any -> any) ->
                                ?options:AddEventListenerOptions.t or_boolean
                                  -> unit -> unit)
                          =
                          fun (x1519 : ('tags, 'T) this) ->
                            fun ~type_:(x1510 : 'K) ->
                              fun
                                ~listener:(x1511 :
                                            this:'T t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x1512 :
                                             AddEventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x1522 =
                                         this_to_js Obj.magic Obj.magic x1519 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x1522
                                            "addEventListener") "apply"
                                         [|x1522;((let x1513 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x1513 "push"
                                                        [|(Obj.magic x1510)|]);
                                                   ignore
                                                     (Ojs.call x1513 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x1516 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x1518 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x1511
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x1516)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1518))))|]);
                                                   (match x1512 with
                                                    | Some x1514 ->
                                                        ignore
                                                          (Ojs.call x1513
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  AddEventListenerOptions.t_to_js
                                                                  x1514)|])
                                                    | None -> ());
                                                   x1513))|])
                        let (addEventListener' :
                          ('tags, 'T) this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:AddEventListenerOptions.t or_boolean
                                  -> unit -> unit)
                          =
                          fun (x1529 : ('tags, 'T) this) ->
                            fun ~type_:(x1523 : string) ->
                              fun
                                ~listener:(x1524 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x1525 :
                                             AddEventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x1532 =
                                         this_to_js Obj.magic Obj.magic x1529 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x1532
                                            "addEventListener") "apply"
                                         [|x1532;((let x1526 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x1526 "push"
                                                        [|(Ojs.string_to_js
                                                             x1523)|]);
                                                   ignore
                                                     (Ojs.call x1526 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x1524)|]);
                                                   (match x1525 with
                                                    | Some x1527 ->
                                                        ignore
                                                          (Ojs.call x1526
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  AddEventListenerOptions.t_to_js
                                                                  x1527)|])
                                                    | None -> ());
                                                   x1526))|])
                        let (removeEventListener :
                          ('tags, 'T) this ->
                            type_:'K ->
                              listener:(this:'T t -> ev:any -> any) ->
                                ?options:EventListenerOptions.t or_boolean ->
                                  unit -> unit)
                          =
                          fun (x1542 : ('tags, 'T) this) ->
                            fun ~type_:(x1533 : 'K) ->
                              fun
                                ~listener:(x1534 :
                                            this:'T t -> ev:any -> any)
                                ->
                                fun
                                  ?options:(x1535 :
                                             EventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x1545 =
                                         this_to_js Obj.magic Obj.magic x1542 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x1545
                                            "removeEventListener") "apply"
                                         [|x1545;((let x1536 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x1536 "push"
                                                        [|(Obj.magic x1533)|]);
                                                   ignore
                                                     (Ojs.call x1536 "push"
                                                        [|(Ojs.fun_to_js 2
                                                             (fun
                                                                (x1539 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x1541 :
                                                                    Ojs.t)
                                                                  ->
                                                                  any_to_js
                                                                    (
                                                                    x1534
                                                                    ~this:(
                                                                    t_of_js
                                                                    Obj.magic
                                                                    x1539)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1541))))|]);
                                                   (match x1535 with
                                                    | Some x1537 ->
                                                        ignore
                                                          (Ojs.call x1536
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  EventListenerOptions.t_to_js
                                                                  x1537)|])
                                                    | None -> ());
                                                   x1536))|])
                        let (removeEventListener' :
                          ('tags, 'T) this ->
                            type_:string ->
                              listener:EventListenerOrEventListenerObject.t
                                ->
                                ?options:EventListenerOptions.t or_boolean ->
                                  unit -> unit)
                          =
                          fun (x1552 : ('tags, 'T) this) ->
                            fun ~type_:(x1546 : string) ->
                              fun
                                ~listener:(x1547 :
                                            EventListenerOrEventListenerObject.t)
                                ->
                                fun
                                  ?options:(x1548 :
                                             EventListenerOptions.t
                                               or_boolean option)
                                  ->
                                  fun () ->
                                    ignore
                                      (let x1555 =
                                         this_to_js Obj.magic Obj.magic x1552 in
                                       Ojs.call
                                         (Ojs.get_prop_ascii x1555
                                            "removeEventListener") "apply"
                                         [|x1555;((let x1549 =
                                                     Ojs.new_obj
                                                       (Ojs.get_prop_ascii
                                                          Ojs.global "Array")
                                                       [||] in
                                                   ignore
                                                     (Ojs.call x1549 "push"
                                                        [|(Ojs.string_to_js
                                                             x1546)|]);
                                                   ignore
                                                     (Ojs.call x1549 "push"
                                                        [|(EventListenerOrEventListenerObject.t_to_js
                                                             x1547)|]);
                                                   (match x1548 with
                                                    | Some x1550 ->
                                                        ignore
                                                          (Ojs.call x1549
                                                             "push"
                                                             [|(or_boolean_to_js
                                                                  EventListenerOptions.t_to_js
                                                                  x1550)|])
                                                    | None -> ());
                                                   x1549))|])
                        let cast_from = Obj.magic
                        let (prototype : unit -> t_0) =
                          fun () ->
                            t_0_of_js
                              (Ojs.get_prop_ascii
                                 (Ojs.get_prop_ascii Ojs.global "IDBRequest")
                                 "prototype")
                        let (create : unit -> t_0) =
                          fun () ->
                            t_0_of_js
                              (Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "IDBRequest")
                                 [||])
                      end and
                           IDBTransaction:sig
                                            type t =
                                              [ `EventTarget 
                                              | `IDBTransaction ] intf
                                            type t_0 = t
                                            [@@@js.stop ]
                                            type tags =
                                              [ `EventTarget 
                                              | `IDBTransaction ]
                                            type tags_0 = tags
                                            [@@@js.start ]
                                            [@@@js.implem
                                              type tags =
                                                [ `EventTarget 
                                                | `IDBTransaction ]
                                              type tags_0 = tags]
                                            type 'tags this =
                                              'tags intf constraint 'tags =
                                                          [>
                                                            `IDBTransaction ]
                                            val t_to_js : t -> Ojs.t
                                            val t_of_js : Ojs.t -> t
                                            val t_0_to_js : t_0 -> Ojs.t
                                            val t_0_of_js : Ojs.t -> t_0
                                            val get_db :
                                              'tags this -> IDBDatabase.t
                                            val get_error :
                                              'tags this ->
                                                DOMException.t or_null
                                            val get_mode :
                                              'tags this ->
                                                IDBTransactionMode.t
                                            val get_objectStoreNames :
                                              'tags this -> DOMStringList.t
                                            val get_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null
                                            val set_onabort :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null -> unit
                                            val get_oncomplete :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null
                                            val set_oncomplete :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null -> unit
                                            val get_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null
                                            val set_onerror :
                                              'tags this ->
                                                (this:t -> ev:Event.t -> any)
                                                  or_null -> unit
                                            val abort : 'tags this -> unit
                                            val commit : 'tags this -> unit
                                            val objectStore :
                                              'tags this ->
                                                name:string ->
                                                  IDBObjectStore.t
                                            val addEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:AddEventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit
                                            val addEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:AddEventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit
                                            val removeEventListener :
                                              'tags this ->
                                                type_:'K ->
                                                  listener:(this:t ->
                                                              ev:any -> any)
                                                    ->
                                                    ?options:EventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit
                                            val removeEventListener' :
                                              'tags this ->
                                                type_:string ->
                                                  listener:EventListenerOrEventListenerObject.t
                                                    ->
                                                    ?options:EventListenerOptions.t
                                                      or_boolean ->
                                                      unit -> unit
                                            val cast_from : 'tags this -> t
                                            val prototype : unit -> t
                                            val create : unit -> t
                                          end =
                           struct
                             type t =
                               [ `EventTarget  | `IDBTransaction ] intf
                             let rec t_of_js : Ojs.t -> t = Obj.magic
                             and t_to_js : t -> Ojs.t = Obj.magic
                             type t_0 = t
                             let rec t_0_of_js : Ojs.t -> t_0 =
                               fun (x1557 : Ojs.t) -> t_of_js x1557
                             and t_0_to_js : t_0 -> Ojs.t =
                               fun (x1556 : t) -> t_to_js x1556
                             type tags = [ `EventTarget  | `IDBTransaction ]
                             type tags_0 = tags
                             type 'tags this =
                               'tags intf constraint 'tags =
                                           [> `IDBTransaction ]
                             let rec this_of_js :
                               'tags .
                                 (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
                               = fun (type __tags) ->
                               fun (__tags_of_js : Ojs.t -> __tags) ->
                                 fun (x1560 : Ojs.t) ->
                                   intf_of_js __tags_of_js x1560
                             and this_to_js :
                               'tags .
                                 ('tags -> Ojs.t) -> 'tags this -> Ojs.t
                               = fun (type __tags) ->
                               fun (__tags_to_js : __tags -> Ojs.t) ->
                                 fun (x1558 : __tags intf) ->
                                   intf_to_js __tags_to_js x1558
                             let (get_db : 'tags this -> IDBDatabase.t) =
                               fun (x1562 : 'tags this) ->
                                 IDBDatabase.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1562) "db")
                             let (get_error :
                               'tags this -> DOMException.t or_null) =
                               fun (x1564 : 'tags this) ->
                                 or_null_of_js DOMException.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1564) "error")
                             let (get_mode :
                               'tags this -> IDBTransactionMode.t) =
                               fun (x1567 : 'tags this) ->
                                 IDBTransactionMode.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1567) "mode")
                             let (get_objectStoreNames :
                               'tags this -> DOMStringList.t) =
                               fun (x1569 : 'tags this) ->
                                 DOMStringList.t_of_js
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1569)
                                      "objectStoreNames")
                             let (get_onabort :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null)
                               =
                               fun (x1571 : 'tags this) ->
                                 or_null_of_js
                                   (fun (x1573 : Ojs.t) ->
                                      fun ~this:(x1574 : t) ->
                                        fun ~ev:(x1575 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x1573
                                               [|(t_to_js x1574);(Event.t_to_js
                                                                    x1575)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1571) "onabort")
                             let (set_onabort :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null ->
                                   unit)
                               =
                               fun (x1576 : 'tags this) ->
                                 fun
                                   (x1577 :
                                     (this:t -> ev:Event.t -> any) or_null)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x1576) "onabort"
                                     (or_null_to_js
                                        (fun
                                           (x1578 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x1579 : Ojs.t) ->
                                                fun (x1580 : Ojs.t) ->
                                                  any_to_js
                                                    (x1578
                                                       ~this:(t_of_js x1579)
                                                       ~ev:(Event.t_of_js
                                                              x1580)))) x1577)
                             let (get_oncomplete :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null)
                               =
                               fun (x1582 : 'tags this) ->
                                 or_null_of_js
                                   (fun (x1584 : Ojs.t) ->
                                      fun ~this:(x1585 : t) ->
                                        fun ~ev:(x1586 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x1584
                                               [|(t_to_js x1585);(Event.t_to_js
                                                                    x1586)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1582)
                                      "oncomplete")
                             let (set_oncomplete :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null ->
                                   unit)
                               =
                               fun (x1587 : 'tags this) ->
                                 fun
                                   (x1588 :
                                     (this:t -> ev:Event.t -> any) or_null)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x1587)
                                     "oncomplete"
                                     (or_null_to_js
                                        (fun
                                           (x1589 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x1590 : Ojs.t) ->
                                                fun (x1591 : Ojs.t) ->
                                                  any_to_js
                                                    (x1589
                                                       ~this:(t_of_js x1590)
                                                       ~ev:(Event.t_of_js
                                                              x1591)))) x1588)
                             let (get_onerror :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null)
                               =
                               fun (x1593 : 'tags this) ->
                                 or_null_of_js
                                   (fun (x1595 : Ojs.t) ->
                                      fun ~this:(x1596 : t) ->
                                        fun ~ev:(x1597 : Event.t) ->
                                          any_of_js
                                            (Ojs.apply x1595
                                               [|(t_to_js x1596);(Event.t_to_js
                                                                    x1597)|]))
                                   (Ojs.get_prop_ascii
                                      (this_to_js Obj.magic x1593) "onerror")
                             let (set_onerror :
                               'tags this ->
                                 (this:t -> ev:Event.t -> any) or_null ->
                                   unit)
                               =
                               fun (x1598 : 'tags this) ->
                                 fun
                                   (x1599 :
                                     (this:t -> ev:Event.t -> any) or_null)
                                   ->
                                   Ojs.set_prop_ascii
                                     (this_to_js Obj.magic x1598) "onerror"
                                     (or_null_to_js
                                        (fun
                                           (x1600 :
                                             this:t -> ev:Event.t -> any)
                                           ->
                                           Ojs.fun_to_js 2
                                             (fun (x1601 : Ojs.t) ->
                                                fun (x1602 : Ojs.t) ->
                                                  any_to_js
                                                    (x1600
                                                       ~this:(t_of_js x1601)
                                                       ~ev:(Event.t_of_js
                                                              x1602)))) x1599)
                             let (abort : 'tags this -> unit) =
                               fun (x1604 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x1604)
                                      "abort" [||])
                             let (commit : 'tags this -> unit) =
                               fun (x1606 : 'tags this) ->
                                 ignore
                                   (Ojs.call (this_to_js Obj.magic x1606)
                                      "commit" [||])
                             let (objectStore :
                               'tags this -> name:string -> IDBObjectStore.t)
                               =
                               fun (x1609 : 'tags this) ->
                                 fun ~name:(x1608 : string) ->
                                   IDBObjectStore.t_of_js
                                     (Ojs.call (this_to_js Obj.magic x1609)
                                        "objectStore"
                                        [|(Ojs.string_to_js x1608)|])
                             let (addEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x1619 : 'tags this) ->
                                 fun ~type_:(x1611 : 'K) ->
                                   fun
                                     ~listener:(x1612 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x1613 :
                                                  AddEventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x1621 =
                                              this_to_js Obj.magic x1619 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x1621
                                                 "addEventListener") "apply"
                                              [|x1621;((let x1614 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x1614
                                                             "push"
                                                             [|(Obj.magic
                                                                  x1611)|]);
                                                        ignore
                                                          (Ojs.call x1614
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x1617 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1618 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1612
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1617)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1618))))|]);
                                                        (match x1613 with
                                                         | Some x1615 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x1614
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1615)|])
                                                         | None -> ());
                                                        x1614))|])
                             let (addEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:AddEventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x1628 : 'tags this) ->
                                 fun ~type_:(x1622 : string) ->
                                   fun
                                     ~listener:(x1623 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x1624 :
                                                  AddEventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x1630 =
                                              this_to_js Obj.magic x1628 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x1630
                                                 "addEventListener") "apply"
                                              [|x1630;((let x1625 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x1625
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x1622)|]);
                                                        ignore
                                                          (Ojs.call x1625
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x1623)|]);
                                                        (match x1624 with
                                                         | Some x1626 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x1625
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    AddEventListenerOptions.t_to_js
                                                                    x1626)|])
                                                         | None -> ());
                                                        x1625))|])
                             let (removeEventListener :
                               'tags this ->
                                 type_:'K ->
                                   listener:(this:t -> ev:any -> any) ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x1639 : 'tags this) ->
                                 fun ~type_:(x1631 : 'K) ->
                                   fun
                                     ~listener:(x1632 :
                                                 this:t -> ev:any -> any)
                                     ->
                                     fun
                                       ?options:(x1633 :
                                                  EventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x1641 =
                                              this_to_js Obj.magic x1639 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x1641
                                                 "removeEventListener")
                                              "apply"
                                              [|x1641;((let x1634 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x1634
                                                             "push"
                                                             [|(Obj.magic
                                                                  x1631)|]);
                                                        ignore
                                                          (Ojs.call x1634
                                                             "push"
                                                             [|(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x1637 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1638 :
                                                                    Ojs.t) ->
                                                                    any_to_js
                                                                    (x1632
                                                                    ~this:(
                                                                    t_of_js
                                                                    x1637)
                                                                    ~ev:(
                                                                    any_of_js
                                                                    x1638))))|]);
                                                        (match x1633 with
                                                         | Some x1635 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x1634
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1635)|])
                                                         | None -> ());
                                                        x1634))|])
                             let (removeEventListener' :
                               'tags this ->
                                 type_:string ->
                                   listener:EventListenerOrEventListenerObject.t
                                     ->
                                     ?options:EventListenerOptions.t
                                       or_boolean -> unit -> unit)
                               =
                               fun (x1648 : 'tags this) ->
                                 fun ~type_:(x1642 : string) ->
                                   fun
                                     ~listener:(x1643 :
                                                 EventListenerOrEventListenerObject.t)
                                     ->
                                     fun
                                       ?options:(x1644 :
                                                  EventListenerOptions.t
                                                    or_boolean option)
                                       ->
                                       fun () ->
                                         ignore
                                           (let x1650 =
                                              this_to_js Obj.magic x1648 in
                                            Ojs.call
                                              (Ojs.get_prop_ascii x1650
                                                 "removeEventListener")
                                              "apply"
                                              [|x1650;((let x1645 =
                                                          Ojs.new_obj
                                                            (Ojs.get_prop_ascii
                                                               Ojs.global
                                                               "Array") 
                                                            [||] in
                                                        ignore
                                                          (Ojs.call x1645
                                                             "push"
                                                             [|(Ojs.string_to_js
                                                                  x1642)|]);
                                                        ignore
                                                          (Ojs.call x1645
                                                             "push"
                                                             [|(EventListenerOrEventListenerObject.t_to_js
                                                                  x1643)|]);
                                                        (match x1644 with
                                                         | Some x1646 ->
                                                             ignore
                                                               (Ojs.call
                                                                  x1645
                                                                  "push"
                                                                  [|(
                                                                    or_boolean_to_js
                                                                    EventListenerOptions.t_to_js
                                                                    x1646)|])
                                                         | None -> ());
                                                        x1645))|])
                             let cast_from = Obj.magic
                             let (prototype : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.get_prop_ascii
                                      (Ojs.get_prop_ascii Ojs.global
                                         "IDBTransaction") "prototype")
                             let (create : unit -> t) =
                               fun () ->
                                 t_of_js
                                   (Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global
                                         "IDBTransaction") [||])
                           end
module IDBOpenDBRequest =
  struct
    type t =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1652 : Ojs.t) -> t_of_js x1652
    and t_0_to_js : t_0 -> Ojs.t = fun (x1651 : t) -> t_to_js x1651
    type tags =
      [ `EventTarget  | `IDBOpenDBRequest  | `IDBRequest of IDBDatabase.t ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBOpenDBRequest ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1655 : Ojs.t) -> intf_of_js __tags_of_js x1655
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1653 : __tags intf) -> intf_to_js __tags_to_js x1653
    let (get_onblocked : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x1657 : 'tags this) ->
        or_null_of_js
          (fun (x1659 : Ojs.t) ->
             fun ~this:(x1660 : t) ->
               fun ~ev:(x1661 : Event.t) ->
                 any_of_js
                   (Ojs.apply x1659 [|(t_to_js x1660);(Event.t_to_js x1661)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1657) "onblocked")
    let (set_onblocked :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x1662 : 'tags this) ->
        fun (x1663 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1662) "onblocked"
            (or_null_to_js
               (fun (x1664 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x1665 : Ojs.t) ->
                       fun (x1666 : Ojs.t) ->
                         any_to_js
                           (x1664 ~this:(t_of_js x1665)
                              ~ev:(Event.t_of_js x1666)))) x1663)
    let (get_onupgradeneeded :
      'tags this -> (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null) =
      fun (x1668 : 'tags this) ->
        or_null_of_js
          (fun (x1670 : Ojs.t) ->
             fun ~this:(x1671 : t) ->
               fun ~ev:(x1672 : IDBVersionChangeEvent.t) ->
                 any_of_js
                   (Ojs.apply x1670
                      [|(t_to_js x1671);(IDBVersionChangeEvent.t_to_js x1672)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1668) "onupgradeneeded")
    let (set_onupgradeneeded :
      'tags this ->
        (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null -> unit)
      =
      fun (x1673 : 'tags this) ->
        fun (x1674 : (this:t -> ev:IDBVersionChangeEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1673) "onupgradeneeded"
            (or_null_to_js
               (fun (x1675 : this:t -> ev:IDBVersionChangeEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x1676 : Ojs.t) ->
                       fun (x1677 : Ojs.t) ->
                         any_to_js
                           (x1675 ~this:(t_of_js x1676)
                              ~ev:(IDBVersionChangeEvent.t_of_js x1677))))
               x1674)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1687 : 'tags this) ->
        fun ~type_:(x1679 : 'K) ->
          fun ~listener:(x1680 : this:t -> ev:any -> any) ->
            fun
              ?options:(x1681 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1689 = this_to_js Obj.magic x1687 in
                   Ojs.call (Ojs.get_prop_ascii x1689 "addEventListener")
                     "apply"
                     [|x1689;((let x1682 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1682 "push" [|(Obj.magic x1679)|]);
                               ignore
                                 (Ojs.call x1682 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x1685 : Ojs.t) ->
                                            fun (x1686 : Ojs.t) ->
                                              any_to_js
                                                (x1680 ~this:(t_of_js x1685)
                                                   ~ev:(any_of_js x1686))))|]);
                               (match x1681 with
                                | Some x1683 ->
                                    ignore
                                      (Ojs.call x1682 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x1683)|])
                                | None -> ());
                               x1682))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1696 : 'tags this) ->
        fun ~type_:(x1690 : string) ->
          fun ~listener:(x1691 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x1692 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1698 = this_to_js Obj.magic x1696 in
                   Ojs.call (Ojs.get_prop_ascii x1698 "addEventListener")
                     "apply"
                     [|x1698;((let x1693 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1693 "push"
                                    [|(Ojs.string_to_js x1690)|]);
                               ignore
                                 (Ojs.call x1693 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x1691)|]);
                               (match x1692 with
                                | Some x1694 ->
                                    ignore
                                      (Ojs.call x1693 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x1694)|])
                                | None -> ());
                               x1693))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1707 : 'tags this) ->
        fun ~type_:(x1699 : 'K) ->
          fun ~listener:(x1700 : this:t -> ev:any -> any) ->
            fun ?options:(x1701 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1709 = this_to_js Obj.magic x1707 in
                   Ojs.call (Ojs.get_prop_ascii x1709 "removeEventListener")
                     "apply"
                     [|x1709;((let x1702 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1702 "push" [|(Obj.magic x1699)|]);
                               ignore
                                 (Ojs.call x1702 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x1705 : Ojs.t) ->
                                            fun (x1706 : Ojs.t) ->
                                              any_to_js
                                                (x1700 ~this:(t_of_js x1705)
                                                   ~ev:(any_of_js x1706))))|]);
                               (match x1701 with
                                | Some x1703 ->
                                    ignore
                                      (Ojs.call x1702 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x1703)|])
                                | None -> ());
                               x1702))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1716 : 'tags this) ->
        fun ~type_:(x1710 : string) ->
          fun ~listener:(x1711 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x1712 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1718 = this_to_js Obj.magic x1716 in
                   Ojs.call (Ojs.get_prop_ascii x1718 "removeEventListener")
                     "apply"
                     [|x1718;((let x1713 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1713 "push"
                                    [|(Ojs.string_to_js x1710)|]);
                               ignore
                                 (Ojs.call x1713 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x1711)|]);
                               (match x1712 with
                                | Some x1714 ->
                                    ignore
                                      (Ojs.call x1713 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x1714)|])
                                | None -> ());
                               x1713))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBOpenDBRequest")
             [||])
  end
module IDBDatabaseInfo =
  struct
    type t = [ `IDBDatabaseInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1720 : Ojs.t) -> t_of_js x1720
    and t_0_to_js : t_0 -> Ojs.t = fun (x1719 : t) -> t_to_js x1719
    type tags = [ `IDBDatabaseInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1723 : Ojs.t) -> intf_of_js __tags_of_js x1723
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1721 : __tags intf) -> intf_to_js __tags_to_js x1721
    let (get_name : 'tags this -> string) =
      fun (x1725 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1725) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x1727 : 'tags this) ->
        fun (x1728 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1727) "name"
            (Ojs.string_to_js x1728)
    let (get_version : 'tags this -> float) =
      fun (x1730 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1730) "version")
    let (set_version : 'tags this -> float -> unit) =
      fun (x1732 : 'tags this) ->
        fun (x1733 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1732) "version"
            (Ojs.float_to_js x1733)
    let cast_from = Obj.magic
  end
module IndexedDBStatic =
  struct
    let (cmp : first:any -> second:any -> float) =
      fun ~first:(x1735 : any) ->
        fun ~second:(x1736 : any) ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "cmp"
               [|(any_to_js x1735);(any_to_js x1736)|])
    let (databases : unit -> IDBDatabaseInfo.t list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x1737 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x1737)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB") "databases"
             [||])
    let (deleteDatabase : string -> IDBOpenDBRequest.t) =
      fun (x1739 : string) ->
        IDBOpenDBRequest.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "indexedDB")
             "deleteDatabase" [|(Ojs.string_to_js x1739)|])
    let (open_ : name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun ~name:(x1740 : string) ->
        fun ?version:(x1741 : float option) ->
          fun () ->
            IDBOpenDBRequest.t_of_js
              (let x1744 = Ojs.get_prop_ascii Ojs.global "indexedDB" in
               Ojs.call (Ojs.get_prop_ascii x1744 "open") "apply"
                 [|x1744;((let x1742 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1742 "push"
                                [|(Ojs.string_to_js x1740)|]);
                           (match x1741 with
                            | Some x1743 ->
                                ignore
                                  (Ojs.call x1742 "push"
                                     [|(Ojs.float_to_js x1743)|])
                            | None -> ());
                           x1742))|])
  end
module FontFaceSetLoadStatus =
  struct
    type t = [ `L_s100_loaded  | `L_s102_loading ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1746 : Ojs.t) ->
        let x1747 = x1746 in
        match Ojs.string_of_js x1747 with
        | "loaded" -> `L_s100_loaded
        | "loading" -> `L_s102_loading
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1745 : [ `L_s100_loaded  | `L_s102_loading ]) ->
        match x1745 with
        | `L_s100_loaded -> Ojs.string_to_js "loaded"
        | `L_s102_loading -> Ojs.string_to_js "loading"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1749 : Ojs.t) -> t_of_js x1749
    and t_0_to_js : t_0 -> Ojs.t = fun (x1748 : t) -> t_to_js x1748
  end
module FontFaceLoadStatus =
  struct
    type t =
      [ `L_s100_loaded  | `L_s102_loading  | `L_s197_unloaded 
      | `L_s67_error ]
    let rec t_of_js : Ojs.t -> t =
      fun (x1751 : Ojs.t) ->
        let x1752 = x1751 in
        match Ojs.string_of_js x1752 with
        | "loaded" -> `L_s100_loaded
        | "loading" -> `L_s102_loading
        | "unloaded" -> `L_s197_unloaded
        | "error" -> `L_s67_error
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x1750 :
          [ `L_s100_loaded  | `L_s102_loading  | `L_s197_unloaded 
          | `L_s67_error ])
        ->
        match x1750 with
        | `L_s100_loaded -> Ojs.string_to_js "loaded"
        | `L_s102_loading -> Ojs.string_to_js "loading"
        | `L_s197_unloaded -> Ojs.string_to_js "unloaded"
        | `L_s67_error -> Ojs.string_to_js "error"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1754 : Ojs.t) -> t_of_js x1754
    and t_0_to_js : t_0 -> Ojs.t = fun (x1753 : t) -> t_to_js x1753
  end
module FontFaceDescriptors =
  struct
    type t = [ `FontFaceDescriptors ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1756 : Ojs.t) -> t_of_js x1756
    and t_0_to_js : t_0 -> Ojs.t = fun (x1755 : t) -> t_to_js x1755
    type tags = [ `FontFaceDescriptors ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceDescriptors ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1759 : Ojs.t) -> intf_of_js __tags_of_js x1759
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1757 : __tags intf) -> intf_to_js __tags_to_js x1757
    let (get_display : 'tags this -> string) =
      fun (x1761 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1761) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x1763 : 'tags this) ->
        fun (x1764 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1763) "display"
            (Ojs.string_to_js x1764)
    let (get_featureSettings : 'tags this -> string) =
      fun (x1766 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1766) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x1768 : 'tags this) ->
        fun (x1769 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1768) "featureSettings"
            (Ojs.string_to_js x1769)
    let (get_stretch : 'tags this -> string) =
      fun (x1771 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1771) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x1773 : 'tags this) ->
        fun (x1774 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1773) "stretch"
            (Ojs.string_to_js x1774)
    let (get_style : 'tags this -> string) =
      fun (x1776 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1776) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x1778 : 'tags this) ->
        fun (x1779 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1778) "style"
            (Ojs.string_to_js x1779)
    let (get_unicodeRange : 'tags this -> string) =
      fun (x1781 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1781) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x1783 : 'tags this) ->
        fun (x1784 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1783) "unicodeRange"
            (Ojs.string_to_js x1784)
    let (get_variant : 'tags this -> string) =
      fun (x1786 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1786) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x1788 : 'tags this) ->
        fun (x1789 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1788) "variant"
            (Ojs.string_to_js x1789)
    let (get_weight : 'tags this -> string) =
      fun (x1791 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1791) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x1793 : 'tags this) ->
        fun (x1794 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1793) "weight"
            (Ojs.string_to_js x1794)
    let cast_from = Obj.magic
  end
module BinaryData =
  struct
    type t = never
    let rec t_of_js : Ojs.t -> t = fun (x1797 : Ojs.t) -> never_of_js x1797
    and t_to_js : t -> Ojs.t = fun (x1796 : never) -> never_to_js x1796
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1799 : Ojs.t) -> t_of_js x1799
    and t_0_to_js : t_0 -> Ojs.t = fun (x1798 : t) -> t_to_js x1798
  end
module FontFace =
  struct
    type t = [ `FontFace ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1801 : Ojs.t) -> t_of_js x1801
    and t_0_to_js : t_0 -> Ojs.t = fun (x1800 : t) -> t_to_js x1800
    type tags = [ `FontFace ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFace ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1804 : Ojs.t) -> intf_of_js __tags_of_js x1804
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1802 : __tags intf) -> intf_to_js __tags_to_js x1802
    let (get_ascentOverride : 'tags this -> string) =
      fun (x1806 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1806) "ascentOverride")
    let (set_ascentOverride : 'tags this -> string -> unit) =
      fun (x1808 : 'tags this) ->
        fun (x1809 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1808) "ascentOverride"
            (Ojs.string_to_js x1809)
    let (get_descentOverride : 'tags this -> string) =
      fun (x1811 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1811) "descentOverride")
    let (set_descentOverride : 'tags this -> string -> unit) =
      fun (x1813 : 'tags this) ->
        fun (x1814 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1813) "descentOverride"
            (Ojs.string_to_js x1814)
    let (get_display : 'tags this -> string) =
      fun (x1816 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1816) "display")
    let (set_display : 'tags this -> string -> unit) =
      fun (x1818 : 'tags this) ->
        fun (x1819 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1818) "display"
            (Ojs.string_to_js x1819)
    let (get_family : 'tags this -> string) =
      fun (x1821 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1821) "family")
    let (set_family : 'tags this -> string -> unit) =
      fun (x1823 : 'tags this) ->
        fun (x1824 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1823) "family"
            (Ojs.string_to_js x1824)
    let (get_featureSettings : 'tags this -> string) =
      fun (x1826 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1826) "featureSettings")
    let (set_featureSettings : 'tags this -> string -> unit) =
      fun (x1828 : 'tags this) ->
        fun (x1829 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1828) "featureSettings"
            (Ojs.string_to_js x1829)
    let (get_lineGapOverride : 'tags this -> string) =
      fun (x1831 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1831) "lineGapOverride")
    let (set_lineGapOverride : 'tags this -> string -> unit) =
      fun (x1833 : 'tags this) ->
        fun (x1834 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1833) "lineGapOverride"
            (Ojs.string_to_js x1834)
    let (get_loaded : 'tags this -> t Promise.t_1) =
      fun (x1836 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1836) "loaded")
    let (get_status : 'tags this -> FontFaceLoadStatus.t) =
      fun (x1839 : 'tags this) ->
        FontFaceLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1839) "status")
    let (get_stretch : 'tags this -> string) =
      fun (x1841 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1841) "stretch")
    let (set_stretch : 'tags this -> string -> unit) =
      fun (x1843 : 'tags this) ->
        fun (x1844 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1843) "stretch"
            (Ojs.string_to_js x1844)
    let (get_style : 'tags this -> string) =
      fun (x1846 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1846) "style")
    let (set_style : 'tags this -> string -> unit) =
      fun (x1848 : 'tags this) ->
        fun (x1849 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1848) "style"
            (Ojs.string_to_js x1849)
    let (get_unicodeRange : 'tags this -> string) =
      fun (x1851 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1851) "unicodeRange")
    let (set_unicodeRange : 'tags this -> string -> unit) =
      fun (x1853 : 'tags this) ->
        fun (x1854 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1853) "unicodeRange"
            (Ojs.string_to_js x1854)
    let (get_variant : 'tags this -> string) =
      fun (x1856 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1856) "variant")
    let (set_variant : 'tags this -> string -> unit) =
      fun (x1858 : 'tags this) ->
        fun (x1859 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1858) "variant"
            (Ojs.string_to_js x1859)
    let (get_variationSettings : 'tags this -> string) =
      fun (x1861 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1861)
             "variationSettings")
    let (set_variationSettings : 'tags this -> string -> unit) =
      fun (x1863 : 'tags this) ->
        fun (x1864 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1863) "variationSettings"
            (Ojs.string_to_js x1864)
    let (get_weight : 'tags this -> string) =
      fun (x1866 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1866) "weight")
    let (set_weight : 'tags this -> string -> unit) =
      fun (x1868 : 'tags this) ->
        fun (x1869 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1868) "weight"
            (Ojs.string_to_js x1869)
    let (load : 'tags this -> t Promise.t_1) =
      fun (x1871 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x1871) "load" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFace")
             "prototype")
    let (create :
      family:string ->
        source:BinaryData.t or_string ->
          ?descriptors:FontFaceDescriptors.t -> unit -> t)
      =
      fun ~family:(x1874 : string) ->
        fun ~source:(x1875 : BinaryData.t or_string) ->
          fun ?descriptors:(x1876 : FontFaceDescriptors.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "FontFace")
                   (let x1877 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x1877 "push" [|(Ojs.string_to_js x1874)|]);
                    ignore
                      (Ojs.call x1877 "push"
                         [|(or_string_to_js BinaryData.t_to_js x1875)|]);
                    (match x1876 with
                     | Some x1878 ->
                         ignore
                           (Ojs.call x1877 "push"
                              [|(FontFaceDescriptors.t_to_js x1878)|])
                     | None -> ());
                    x1877))
  end
module FontFaceSet =
  struct
    type t = [ `EventTarget  | `FontFaceSet ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x1881 : Ojs.t) -> t_of_js x1881
    and t_0_to_js : t_0 -> Ojs.t = fun (x1880 : t) -> t_to_js x1880
    type tags = [ `EventTarget  | `FontFaceSet ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSet ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x1884 : Ojs.t) -> intf_of_js __tags_of_js x1884
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x1882 : __tags intf) -> intf_to_js __tags_to_js x1882
    let (get_onloading : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x1886 : 'tags this) ->
        or_null_of_js
          (fun (x1888 : Ojs.t) ->
             fun ~this:(x1889 : t) ->
               fun ~ev:(x1890 : Event.t) ->
                 any_of_js
                   (Ojs.apply x1888 [|(t_to_js x1889);(Event.t_to_js x1890)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1886) "onloading")
    let (set_onloading :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x1891 : 'tags this) ->
        fun (x1892 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1891) "onloading"
            (or_null_to_js
               (fun (x1893 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x1894 : Ojs.t) ->
                       fun (x1895 : Ojs.t) ->
                         any_to_js
                           (x1893 ~this:(t_of_js x1894)
                              ~ev:(Event.t_of_js x1895)))) x1892)
    let (get_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x1897 : 'tags this) ->
        or_null_of_js
          (fun (x1899 : Ojs.t) ->
             fun ~this:(x1900 : t) ->
               fun ~ev:(x1901 : Event.t) ->
                 any_of_js
                   (Ojs.apply x1899 [|(t_to_js x1900);(Event.t_to_js x1901)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1897) "onloadingdone")
    let (set_onloadingdone :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x1902 : 'tags this) ->
        fun (x1903 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1902) "onloadingdone"
            (or_null_to_js
               (fun (x1904 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x1905 : Ojs.t) ->
                       fun (x1906 : Ojs.t) ->
                         any_to_js
                           (x1904 ~this:(t_of_js x1905)
                              ~ev:(Event.t_of_js x1906)))) x1903)
    let (get_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x1908 : 'tags this) ->
        or_null_of_js
          (fun (x1910 : Ojs.t) ->
             fun ~this:(x1911 : t) ->
               fun ~ev:(x1912 : Event.t) ->
                 any_of_js
                   (Ojs.apply x1910 [|(t_to_js x1911);(Event.t_to_js x1912)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1908) "onloadingerror")
    let (set_onloadingerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x1913 : 'tags this) ->
        fun (x1914 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x1913) "onloadingerror"
            (or_null_to_js
               (fun (x1915 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x1916 : Ojs.t) ->
                       fun (x1917 : Ojs.t) ->
                         any_to_js
                           (x1915 ~this:(t_of_js x1916)
                              ~ev:(Event.t_of_js x1917)))) x1914)
    let (get_ready : 'tags this -> t Promise.t_1) =
      fun (x1919 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1919) "ready")
    let (get_status : 'tags this -> FontFaceSetLoadStatus.t) =
      fun (x1922 : 'tags this) ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x1922) "status")
    let (check : 'tags this -> font:string -> ?text:string -> unit -> bool) =
      fun (x1928 : 'tags this) ->
        fun ~font:(x1924 : string) ->
          fun ?text:(x1925 : string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x1930 = this_to_js Obj.magic x1928 in
                 Ojs.call (Ojs.get_prop_ascii x1930 "check") "apply"
                   [|x1930;((let x1926 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1926 "push"
                                  [|(Ojs.string_to_js x1924)|]);
                             (match x1925 with
                              | Some x1927 ->
                                  ignore
                                    (Ojs.call x1926 "push"
                                       [|(Ojs.string_to_js x1927)|])
                              | None -> ());
                             x1926))|])
    let (load :
      'tags this ->
        font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1)
      =
      fun (x1935 : 'tags this) ->
        fun ~font:(x1931 : string) ->
          fun ?text:(x1932 : string option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x1938 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x1938)
                (let x1937 = this_to_js Obj.magic x1935 in
                 Ojs.call (Ojs.get_prop_ascii x1937 "load") "apply"
                   [|x1937;((let x1933 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1933 "push"
                                  [|(Ojs.string_to_js x1931)|]);
                             (match x1932 with
                              | Some x1934 ->
                                  ignore
                                    (Ojs.call x1933 "push"
                                       [|(Ojs.string_to_js x1934)|])
                              | None -> ());
                             x1933))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FontFace.t -> key:FontFace.t -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x1947 : 'tags this) ->
        fun
          ~callbackfn:(x1940 :
                        value:FontFace.t ->
                          key:FontFace.t -> parent:t -> unit)
          ->
          fun ?thisArg:(x1941 : any option) ->
            fun () ->
              ignore
                (let x1949 = this_to_js Obj.magic x1947 in
                 Ojs.call (Ojs.get_prop_ascii x1949 "forEach") "apply"
                   [|x1949;((let x1942 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1942 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x1944 : Ojs.t) ->
                                          fun (x1945 : Ojs.t) ->
                                            fun (x1946 : Ojs.t) ->
                                              x1940
                                                ~value:(FontFace.t_of_js
                                                          x1944)
                                                ~key:(FontFace.t_of_js x1945)
                                                ~parent:(t_of_js x1946)))|]);
                             (match x1941 with
                              | Some x1943 ->
                                  ignore
                                    (Ojs.call x1942 "push"
                                       [|(any_to_js x1943)|])
                              | None -> ());
                             x1942))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1958 : 'tags this) ->
        fun ~type_:(x1950 : 'K) ->
          fun ~listener:(x1951 : this:t -> ev:any -> any) ->
            fun
              ?options:(x1952 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1960 = this_to_js Obj.magic x1958 in
                   Ojs.call (Ojs.get_prop_ascii x1960 "addEventListener")
                     "apply"
                     [|x1960;((let x1953 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1953 "push" [|(Obj.magic x1950)|]);
                               ignore
                                 (Ojs.call x1953 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x1956 : Ojs.t) ->
                                            fun (x1957 : Ojs.t) ->
                                              any_to_js
                                                (x1951 ~this:(t_of_js x1956)
                                                   ~ev:(any_of_js x1957))))|]);
                               (match x1952 with
                                | Some x1954 ->
                                    ignore
                                      (Ojs.call x1953 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x1954)|])
                                | None -> ());
                               x1953))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1967 : 'tags this) ->
        fun ~type_:(x1961 : string) ->
          fun ~listener:(x1962 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x1963 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1969 = this_to_js Obj.magic x1967 in
                   Ojs.call (Ojs.get_prop_ascii x1969 "addEventListener")
                     "apply"
                     [|x1969;((let x1964 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1964 "push"
                                    [|(Ojs.string_to_js x1961)|]);
                               ignore
                                 (Ojs.call x1964 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x1962)|]);
                               (match x1963 with
                                | Some x1965 ->
                                    ignore
                                      (Ojs.call x1964 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x1965)|])
                                | None -> ());
                               x1964))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1978 : 'tags this) ->
        fun ~type_:(x1970 : 'K) ->
          fun ~listener:(x1971 : this:t -> ev:any -> any) ->
            fun ?options:(x1972 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1980 = this_to_js Obj.magic x1978 in
                   Ojs.call (Ojs.get_prop_ascii x1980 "removeEventListener")
                     "apply"
                     [|x1980;((let x1973 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1973 "push" [|(Obj.magic x1970)|]);
                               ignore
                                 (Ojs.call x1973 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x1976 : Ojs.t) ->
                                            fun (x1977 : Ojs.t) ->
                                              any_to_js
                                                (x1971 ~this:(t_of_js x1976)
                                                   ~ev:(any_of_js x1977))))|]);
                               (match x1972 with
                                | Some x1974 ->
                                    ignore
                                      (Ojs.call x1973 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x1974)|])
                                | None -> ());
                               x1973))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x1987 : 'tags this) ->
        fun ~type_:(x1981 : string) ->
          fun ~listener:(x1982 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x1983 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x1989 = this_to_js Obj.magic x1987 in
                   Ojs.call (Ojs.get_prop_ascii x1989 "removeEventListener")
                     "apply"
                     [|x1989;((let x1984 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1984 "push"
                                    [|(Ojs.string_to_js x1981)|]);
                               ignore
                                 (Ojs.call x1984 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x1982)|]);
                               (match x1983 with
                                | Some x1985 ->
                                    ignore
                                      (Ojs.call x1984 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x1985)|])
                                | None -> ());
                               x1984))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             "prototype")
    let (create : FontFace.t list -> t) =
      fun (x1990 : FontFace.t list) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FontFaceSet")
             [|(Ojs.list_to_js FontFace.t_to_js x1990)|])
  end
module FontsStatic =
  struct
    let (onloading :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x1992 : Ojs.t) ->
             fun ~this:(x1993 : FontFaceSet.t) ->
               fun ~ev:(x1994 : Event.t) ->
                 any_of_js
                   (Ojs.apply x1992
                      [|(FontFaceSet.t_to_js x1993);(Event.t_to_js x1994)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloading")
    let (onloadingdone :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x1995 : Ojs.t) ->
             fun ~this:(x1996 : FontFaceSet.t) ->
               fun ~ev:(x1997 : Event.t) ->
                 any_of_js
                   (Ojs.apply x1995
                      [|(FontFaceSet.t_to_js x1996);(Event.t_to_js x1997)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingdone")
    let (onloadingerror :
      unit -> (this:FontFaceSet.t -> ev:Event.t -> any) or_null) =
      fun () ->
        or_null_of_js
          (fun (x1998 : Ojs.t) ->
             fun ~this:(x1999 : FontFaceSet.t) ->
               fun ~ev:(x2000 : Event.t) ->
                 any_of_js
                   (Ojs.apply x1998
                      [|(FontFaceSet.t_to_js x1999);(Event.t_to_js x2000)|]))
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "onloadingerror")
    let (ready : unit -> FontFaceSet.t Promise.t_1) =
      fun () ->
        Promise.t_1_of_js FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts") "ready")
    let (status : unit -> FontFaceSetLoadStatus.t) =
      fun () ->
        FontFaceSetLoadStatus.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "fonts")
             "status")
    let (check : font:string -> ?text:string -> unit -> bool) =
      fun ~font:(x2002 : string) ->
        fun ?text:(x2003 : string option) ->
          fun () ->
            Ojs.bool_of_js
              (let x2006 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2006 "check") "apply"
                 [|x2006;((let x2004 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2004 "push"
                                [|(Ojs.string_to_js x2002)|]);
                           (match x2003 with
                            | Some x2005 ->
                                ignore
                                  (Ojs.call x2004 "push"
                                     [|(Ojs.string_to_js x2005)|])
                            | None -> ());
                           x2004))|])
    let (load :
      font:string -> ?text:string -> unit -> FontFace.t list Promise.t_1) =
      fun ~font:(x2007 : string) ->
        fun ?text:(x2008 : string option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x2012 : Ojs.t) -> Ojs.list_of_js FontFace.t_of_js x2012)
              (let x2011 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2011 "load") "apply"
                 [|x2011;((let x2009 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2009 "push"
                                [|(Ojs.string_to_js x2007)|]);
                           (match x2008 with
                            | Some x2010 ->
                                ignore
                                  (Ojs.call x2009 "push"
                                     [|(Ojs.string_to_js x2010)|])
                            | None -> ());
                           x2009))|])
    let (forEach :
      callbackfn:(value:FontFace.t ->
                    key:FontFace.t -> parent:FontFaceSet.t -> unit)
        -> ?thisArg:any -> unit -> unit)
      =
      fun
        ~callbackfn:(x2014 :
                      value:FontFace.t ->
                        key:FontFace.t -> parent:FontFaceSet.t -> unit)
        ->
        fun ?thisArg:(x2015 : any option) ->
          fun () ->
            ignore
              (let x2021 = Ojs.get_prop_ascii Ojs.global "fonts" in
               Ojs.call (Ojs.get_prop_ascii x2021 "forEach") "apply"
                 [|x2021;((let x2016 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2016 "push"
                                [|(Ojs.fun_to_js 3
                                     (fun (x2018 : Ojs.t) ->
                                        fun (x2019 : Ojs.t) ->
                                          fun (x2020 : Ojs.t) ->
                                            x2014
                                              ~value:(FontFace.t_of_js x2018)
                                              ~key:(FontFace.t_of_js x2019)
                                              ~parent:(FontFaceSet.t_of_js
                                                         x2020)))|]);
                           (match x2015 with
                            | Some x2017 ->
                                ignore
                                  (Ojs.call x2016 "push"
                                     [|(any_to_js x2017)|])
                            | None -> ());
                           x2016))|])
    let (addEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2022 : 'K) ->
        fun ~listener:(x2023 : this:FontFaceSet.t -> ev:any -> any) ->
          fun ?options:(x2024 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x2030 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2030 "addEventListener")
                   "apply"
                   [|x2030;((let x2025 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2025 "push" [|(Obj.magic x2022)|]);
                             ignore
                               (Ojs.call x2025 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2028 : Ojs.t) ->
                                          fun (x2029 : Ojs.t) ->
                                            any_to_js
                                              (x2023
                                                 ~this:(FontFaceSet.t_of_js
                                                          x2028)
                                                 ~ev:(any_of_js x2029))))|]);
                             (match x2024 with
                              | Some x2026 ->
                                  ignore
                                    (Ojs.call x2025 "push"
                                       [|(or_boolean_to_js
                                            AddEventListenerOptions.t_to_js
                                            x2026)|])
                              | None -> ());
                             x2025))|])
    let (addEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2031 : string) ->
        fun ~listener:(x2032 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x2033 : AddEventListenerOptions.t or_boolean option)
            ->
            fun () ->
              ignore
                (let x2037 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2037 "addEventListener")
                   "apply"
                   [|x2037;((let x2034 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2034 "push"
                                  [|(Ojs.string_to_js x2031)|]);
                             ignore
                               (Ojs.call x2034 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x2032)|]);
                             (match x2033 with
                              | Some x2035 ->
                                  ignore
                                    (Ojs.call x2034 "push"
                                       [|(or_boolean_to_js
                                            AddEventListenerOptions.t_to_js
                                            x2035)|])
                              | None -> ());
                             x2034))|])
    let (removeEventListener :
      type_:'K ->
        listener:(this:FontFaceSet.t -> ev:any -> any) ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2038 : 'K) ->
        fun ~listener:(x2039 : this:FontFaceSet.t -> ev:any -> any) ->
          fun ?options:(x2040 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x2046 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2046 "removeEventListener")
                   "apply"
                   [|x2046;((let x2041 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2041 "push" [|(Obj.magic x2038)|]);
                             ignore
                               (Ojs.call x2041 "push"
                                  [|(Ojs.fun_to_js 2
                                       (fun (x2044 : Ojs.t) ->
                                          fun (x2045 : Ojs.t) ->
                                            any_to_js
                                              (x2039
                                                 ~this:(FontFaceSet.t_of_js
                                                          x2044)
                                                 ~ev:(any_of_js x2045))))|]);
                             (match x2040 with
                              | Some x2042 ->
                                  ignore
                                    (Ojs.call x2041 "push"
                                       [|(or_boolean_to_js
                                            EventListenerOptions.t_to_js
                                            x2042)|])
                              | None -> ());
                             x2041))|])
    let (removeEventListener' :
      type_:string ->
        listener:EventListenerOrEventListenerObject.t ->
          ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun ~type_:(x2047 : string) ->
        fun ~listener:(x2048 : EventListenerOrEventListenerObject.t) ->
          fun ?options:(x2049 : EventListenerOptions.t or_boolean option) ->
            fun () ->
              ignore
                (let x2053 = Ojs.get_prop_ascii Ojs.global "fonts" in
                 Ojs.call (Ojs.get_prop_ascii x2053 "removeEventListener")
                   "apply"
                   [|x2053;((let x2050 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2050 "push"
                                  [|(Ojs.string_to_js x2047)|]);
                             ignore
                               (Ojs.call x2050 "push"
                                  [|(EventListenerOrEventListenerObject.t_to_js
                                       x2048)|]);
                             (match x2049 with
                              | Some x2051 ->
                                  ignore
                                    (Ojs.call x2050 "push"
                                       [|(or_boolean_to_js
                                            EventListenerOptions.t_to_js
                                            x2051)|])
                              | None -> ());
                             x2050))|])
  end
module Algorithm =
  struct
    type t = [ `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2055 : Ojs.t) -> t_of_js x2055
    and t_0_to_js : t_0 -> Ojs.t = fun (x2054 : t) -> t_to_js x2054
    type tags = [ `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Algorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2058 : Ojs.t) -> intf_of_js __tags_of_js x2058
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2056 : __tags intf) -> intf_to_js __tags_to_js x2056
    let (get_name : 'tags this -> string) =
      fun (x2060 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2060) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x2062 : 'tags this) ->
        fun (x2063 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2062) "name"
            (Ojs.string_to_js x2063)
    let cast_from = Obj.magic
  end
module RsaPssParams =
  struct
    type t = [ `Algorithm  | `RsaPssParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2066 : Ojs.t) -> t_of_js x2066
    and t_0_to_js : t_0 -> Ojs.t = fun (x2065 : t) -> t_to_js x2065
    type tags = [ `Algorithm  | `RsaPssParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaPssParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2069 : Ojs.t) -> intf_of_js __tags_of_js x2069
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2067 : __tags intf) -> intf_to_js __tags_to_js x2067
    let (get_saltLength : 'tags this -> float) =
      fun (x2071 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2071) "saltLength")
    let (set_saltLength : 'tags this -> float -> unit) =
      fun (x2073 : 'tags this) ->
        fun (x2074 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2073) "saltLength"
            (Ojs.float_to_js x2074)
    let cast_from = Obj.magic
  end
module RsaOaepParams =
  struct
    type t = [ `Algorithm  | `RsaOaepParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2077 : Ojs.t) -> t_of_js x2077
    and t_0_to_js : t_0 -> Ojs.t = fun (x2076 : t) -> t_to_js x2076
    type tags = [ `Algorithm  | `RsaOaepParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOaepParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2080 : Ojs.t) -> intf_of_js __tags_of_js x2080
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2078 : __tags intf) -> intf_to_js __tags_to_js x2078
    let (get_label : 'tags this -> BufferSource.t) =
      fun (x2082 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2082) "label")
    let (set_label : 'tags this -> BufferSource.t -> unit) =
      fun (x2084 : 'tags this) ->
        fun (x2085 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2084) "label"
            (BufferSource.t_to_js x2085)
    let cast_from = Obj.magic
  end
module BigInteger =
  struct
    type t = Uint8Array.t_0
    let rec t_of_js : Ojs.t -> t =
      fun (x2088 : Ojs.t) -> Uint8Array.t_0_of_js x2088
    and t_to_js : t -> Ojs.t =
      fun (x2087 : Uint8Array.t_0) -> Uint8Array.t_0_to_js x2087
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2090 : Ojs.t) -> t_of_js x2090
    and t_0_to_js : t_0 -> Ojs.t = fun (x2089 : t) -> t_to_js x2089
  end
module RsaKeyGenParams =
  struct
    type t = [ `Algorithm  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2092 : Ojs.t) -> t_of_js x2092
    and t_0_to_js : t_0 -> Ojs.t = fun (x2091 : t) -> t_to_js x2091
    type tags = [ `Algorithm  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2095 : Ojs.t) -> intf_of_js __tags_of_js x2095
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2093 : __tags intf) -> intf_to_js __tags_to_js x2093
    let (get_modulusLength : 'tags this -> float) =
      fun (x2097 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2097) "modulusLength")
    let (set_modulusLength : 'tags this -> float -> unit) =
      fun (x2099 : 'tags this) ->
        fun (x2100 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2099) "modulusLength"
            (Ojs.float_to_js x2100)
    let (get_publicExponent : 'tags this -> BigInteger.t) =
      fun (x2102 : 'tags this) ->
        BigInteger.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2102) "publicExponent")
    let (set_publicExponent : 'tags this -> BigInteger.t -> unit) =
      fun (x2104 : 'tags this) ->
        fun (x2105 : BigInteger.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2104) "publicExponent"
            (BigInteger.t_to_js x2105)
    let cast_from = Obj.magic
  end
module AlgorithmIdentifier =
  struct
    type t = Algorithm.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x2109 : Ojs.t) -> or_string_of_js Algorithm.t_of_js x2109
    and t_to_js : t -> Ojs.t =
      fun (x2107 : Algorithm.t or_string) ->
        or_string_to_js Algorithm.t_to_js x2107
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2112 : Ojs.t) -> t_of_js x2112
    and t_0_to_js : t_0 -> Ojs.t = fun (x2111 : t) -> t_to_js x2111
  end
module HashAlgorithmIdentifier =
  struct
    type t = AlgorithmIdentifier.t
    let rec t_of_js : Ojs.t -> t =
      fun (x2114 : Ojs.t) -> AlgorithmIdentifier.t_of_js x2114
    and t_to_js : t -> Ojs.t =
      fun (x2113 : AlgorithmIdentifier.t) ->
        AlgorithmIdentifier.t_to_js x2113
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2116 : Ojs.t) -> t_of_js x2116
    and t_0_to_js : t_0 -> Ojs.t = fun (x2115 : t) -> t_to_js x2115
  end
module RsaHashedKeyGenParams =
  struct
    type t =
      [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2118 : Ojs.t) -> t_of_js x2118
    and t_0_to_js : t_0 -> Ojs.t = fun (x2117 : t) -> t_to_js x2117
    type tags = [ `Algorithm  | `RsaHashedKeyGenParams  | `RsaKeyGenParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2121 : Ojs.t) -> intf_of_js __tags_of_js x2121
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2119 : __tags intf) -> intf_to_js __tags_to_js x2119
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2123 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2123) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2125 : 'tags this) ->
        fun (x2126 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2125) "hash"
            (HashAlgorithmIdentifier.t_to_js x2126)
    let cast_from = Obj.magic
  end
module RsaHashedImportParams =
  struct
    type t = [ `Algorithm  | `RsaHashedImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2129 : Ojs.t) -> t_of_js x2129
    and t_0_to_js : t_0 -> Ojs.t = fun (x2128 : t) -> t_to_js x2128
    type tags = [ `Algorithm  | `RsaHashedImportParams ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `RsaHashedImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2132 : Ojs.t) -> intf_of_js __tags_of_js x2132
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2130 : __tags intf) -> intf_to_js __tags_to_js x2130
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2134 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2134) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2136 : 'tags this) ->
        fun (x2137 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2136) "hash"
            (HashAlgorithmIdentifier.t_to_js x2137)
    let cast_from = Obj.magic
  end
module Pbkdf2Params =
  struct
    type t = [ `Algorithm  | `Pbkdf2Params ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2140 : Ojs.t) -> t_of_js x2140
    and t_0_to_js : t_0 -> Ojs.t = fun (x2139 : t) -> t_to_js x2139
    type tags = [ `Algorithm  | `Pbkdf2Params ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Pbkdf2Params ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2143 : Ojs.t) -> intf_of_js __tags_of_js x2143
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2141 : __tags intf) -> intf_to_js __tags_to_js x2141
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2145 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2145) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2147 : 'tags this) ->
        fun (x2148 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2147) "hash"
            (HashAlgorithmIdentifier.t_to_js x2148)
    let (get_iterations : 'tags this -> float) =
      fun (x2150 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2150) "iterations")
    let (set_iterations : 'tags this -> float -> unit) =
      fun (x2152 : 'tags this) ->
        fun (x2153 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2152) "iterations"
            (Ojs.float_to_js x2153)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x2155 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2155) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x2157 : 'tags this) ->
        fun (x2158 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2157) "salt"
            (BufferSource.t_to_js x2158)
    let cast_from = Obj.magic
  end
module KeyFormat =
  struct
    type t = [ `L_s150_pkcs8  | `L_s160_raw  | `L_s182_spki  | `L_s97_jwk ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2161 : Ojs.t) ->
        let x2162 = x2161 in
        match Ojs.string_of_js x2162 with
        | "pkcs8" -> `L_s150_pkcs8
        | "raw" -> `L_s160_raw
        | "spki" -> `L_s182_spki
        | "jwk" -> `L_s97_jwk
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2160 :
          [ `L_s150_pkcs8  | `L_s160_raw  | `L_s182_spki  | `L_s97_jwk ])
        ->
        match x2160 with
        | `L_s150_pkcs8 -> Ojs.string_to_js "pkcs8"
        | `L_s160_raw -> Ojs.string_to_js "raw"
        | `L_s182_spki -> Ojs.string_to_js "spki"
        | `L_s97_jwk -> Ojs.string_to_js "jwk"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2164 : Ojs.t) -> t_of_js x2164
    and t_0_to_js : t_0 -> Ojs.t = fun (x2163 : t) -> t_to_js x2163
  end
module RsaOtherPrimesInfo =
  struct
    type t = [ `RsaOtherPrimesInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2166 : Ojs.t) -> t_of_js x2166
    and t_0_to_js : t_0 -> Ojs.t = fun (x2165 : t) -> t_to_js x2165
    type tags = [ `RsaOtherPrimesInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RsaOtherPrimesInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2169 : Ojs.t) -> intf_of_js __tags_of_js x2169
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2167 : __tags intf) -> intf_to_js __tags_to_js x2167
    let (get_d : 'tags this -> string) =
      fun (x2171 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2171) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x2173 : 'tags this) ->
        fun (x2174 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2173) "d"
            (Ojs.string_to_js x2174)
    let (get_r : 'tags this -> string) =
      fun (x2176 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2176) "r")
    let (set_r : 'tags this -> string -> unit) =
      fun (x2178 : 'tags this) ->
        fun (x2179 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2178) "r"
            (Ojs.string_to_js x2179)
    let (get_t : 'tags this -> string) =
      fun (x2181 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2181) "t")
    let (set_t : 'tags this -> string -> unit) =
      fun (x2183 : 'tags this) ->
        fun (x2184 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2183) "t"
            (Ojs.string_to_js x2184)
    let cast_from = Obj.magic
  end
module JsonWebKey =
  struct
    type t = [ `JsonWebKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2187 : Ojs.t) -> t_of_js x2187
    and t_0_to_js : t_0 -> Ojs.t = fun (x2186 : t) -> t_to_js x2186
    type tags = [ `JsonWebKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `JsonWebKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2190 : Ojs.t) -> intf_of_js __tags_of_js x2190
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2188 : __tags intf) -> intf_to_js __tags_to_js x2188
    let (get_alg : 'tags this -> string) =
      fun (x2192 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2192) "alg")
    let (set_alg : 'tags this -> string -> unit) =
      fun (x2194 : 'tags this) ->
        fun (x2195 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2194) "alg"
            (Ojs.string_to_js x2195)
    let (get_crv : 'tags this -> string) =
      fun (x2197 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2197) "crv")
    let (set_crv : 'tags this -> string -> unit) =
      fun (x2199 : 'tags this) ->
        fun (x2200 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2199) "crv"
            (Ojs.string_to_js x2200)
    let (get_d : 'tags this -> string) =
      fun (x2202 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2202) "d")
    let (set_d : 'tags this -> string -> unit) =
      fun (x2204 : 'tags this) ->
        fun (x2205 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2204) "d"
            (Ojs.string_to_js x2205)
    let (get_dp : 'tags this -> string) =
      fun (x2207 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2207) "dp")
    let (set_dp : 'tags this -> string -> unit) =
      fun (x2209 : 'tags this) ->
        fun (x2210 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2209) "dp"
            (Ojs.string_to_js x2210)
    let (get_dq : 'tags this -> string) =
      fun (x2212 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2212) "dq")
    let (set_dq : 'tags this -> string -> unit) =
      fun (x2214 : 'tags this) ->
        fun (x2215 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2214) "dq"
            (Ojs.string_to_js x2215)
    let (get_e : 'tags this -> string) =
      fun (x2217 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2217) "e")
    let (set_e : 'tags this -> string -> unit) =
      fun (x2219 : 'tags this) ->
        fun (x2220 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2219) "e"
            (Ojs.string_to_js x2220)
    let (get_ext : 'tags this -> bool) =
      fun (x2222 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2222) "ext")
    let (set_ext : 'tags this -> bool -> unit) =
      fun (x2224 : 'tags this) ->
        fun (x2225 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2224) "ext"
            (Ojs.bool_to_js x2225)
    let (get_k : 'tags this -> string) =
      fun (x2227 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2227) "k")
    let (set_k : 'tags this -> string -> unit) =
      fun (x2229 : 'tags this) ->
        fun (x2230 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2229) "k"
            (Ojs.string_to_js x2230)
    let (get_key_ops : 'tags this -> string list) =
      fun (x2232 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2232) "key_ops")
    let (set_key_ops : 'tags this -> string list -> unit) =
      fun (x2235 : 'tags this) ->
        fun (x2236 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2235) "key_ops"
            (Ojs.list_to_js Ojs.string_to_js x2236)
    let (get_kty : 'tags this -> string) =
      fun (x2239 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2239) "kty")
    let (set_kty : 'tags this -> string -> unit) =
      fun (x2241 : 'tags this) ->
        fun (x2242 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2241) "kty"
            (Ojs.string_to_js x2242)
    let (get_n : 'tags this -> string) =
      fun (x2244 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2244) "n")
    let (set_n : 'tags this -> string -> unit) =
      fun (x2246 : 'tags this) ->
        fun (x2247 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2246) "n"
            (Ojs.string_to_js x2247)
    let (get_oth : 'tags this -> RsaOtherPrimesInfo.t list) =
      fun (x2249 : 'tags this) ->
        Ojs.list_of_js RsaOtherPrimesInfo.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2249) "oth")
    let (set_oth : 'tags this -> RsaOtherPrimesInfo.t list -> unit) =
      fun (x2252 : 'tags this) ->
        fun (x2253 : RsaOtherPrimesInfo.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2252) "oth"
            (Ojs.list_to_js RsaOtherPrimesInfo.t_to_js x2253)
    let (get_p : 'tags this -> string) =
      fun (x2256 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2256) "p")
    let (set_p : 'tags this -> string -> unit) =
      fun (x2258 : 'tags this) ->
        fun (x2259 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2258) "p"
            (Ojs.string_to_js x2259)
    let (get_q : 'tags this -> string) =
      fun (x2261 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2261) "q")
    let (set_q : 'tags this -> string -> unit) =
      fun (x2263 : 'tags this) ->
        fun (x2264 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2263) "q"
            (Ojs.string_to_js x2264)
    let (get_qi : 'tags this -> string) =
      fun (x2266 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2266) "qi")
    let (set_qi : 'tags this -> string -> unit) =
      fun (x2268 : 'tags this) ->
        fun (x2269 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2268) "qi"
            (Ojs.string_to_js x2269)
    let (get_use : 'tags this -> string) =
      fun (x2271 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2271) "use")
    let (set_use : 'tags this -> string -> unit) =
      fun (x2273 : 'tags this) ->
        fun (x2274 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2273) "use"
            (Ojs.string_to_js x2274)
    let (get_x : 'tags this -> string) =
      fun (x2276 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2276) "x")
    let (set_x : 'tags this -> string -> unit) =
      fun (x2278 : 'tags this) ->
        fun (x2279 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2278) "x"
            (Ojs.string_to_js x2279)
    let (get_y : 'tags this -> string) =
      fun (x2281 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2281) "y")
    let (set_y : 'tags this -> string -> unit) =
      fun (x2283 : 'tags this) ->
        fun (x2284 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2283) "y"
            (Ojs.string_to_js x2284)
    let cast_from = Obj.magic
  end
module HmacKeyGenParams =
  struct
    type t = [ `Algorithm  | `HmacKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2287 : Ojs.t) -> t_of_js x2287
    and t_0_to_js : t_0 -> Ojs.t = fun (x2286 : t) -> t_to_js x2286
    type tags = [ `Algorithm  | `HmacKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2290 : Ojs.t) -> intf_of_js __tags_of_js x2290
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2288 : __tags intf) -> intf_to_js __tags_to_js x2288
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2292 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2292) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2294 : 'tags this) ->
        fun (x2295 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2294) "hash"
            (HashAlgorithmIdentifier.t_to_js x2295)
    let (get_length : 'tags this -> float) =
      fun (x2297 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2297) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2299 : 'tags this) ->
        fun (x2300 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2299) "length"
            (Ojs.float_to_js x2300)
    let cast_from = Obj.magic
  end
module HmacImportParams =
  struct
    type t = [ `Algorithm  | `HmacImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2303 : Ojs.t) -> t_of_js x2303
    and t_0_to_js : t_0 -> Ojs.t = fun (x2302 : t) -> t_to_js x2302
    type tags = [ `Algorithm  | `HmacImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HmacImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2306 : Ojs.t) -> intf_of_js __tags_of_js x2306
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2304 : __tags intf) -> intf_to_js __tags_to_js x2304
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2308 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2308) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2310 : 'tags this) ->
        fun (x2311 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2310) "hash"
            (HashAlgorithmIdentifier.t_to_js x2311)
    let (get_length : 'tags this -> float) =
      fun (x2313 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2313) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2315 : 'tags this) ->
        fun (x2316 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2315) "length"
            (Ojs.float_to_js x2316)
    let cast_from = Obj.magic
  end
module HkdfParams =
  struct
    type t = [ `Algorithm  | `HkdfParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2319 : Ojs.t) -> t_of_js x2319
    and t_0_to_js : t_0 -> Ojs.t = fun (x2318 : t) -> t_to_js x2318
    type tags = [ `Algorithm  | `HkdfParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `HkdfParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2322 : Ojs.t) -> intf_of_js __tags_of_js x2322
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2320 : __tags intf) -> intf_to_js __tags_to_js x2320
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2324 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2324) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2326 : 'tags this) ->
        fun (x2327 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2326) "hash"
            (HashAlgorithmIdentifier.t_to_js x2327)
    let (get_info : 'tags this -> BufferSource.t) =
      fun (x2329 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2329) "info")
    let (set_info : 'tags this -> BufferSource.t -> unit) =
      fun (x2331 : 'tags this) ->
        fun (x2332 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2331) "info"
            (BufferSource.t_to_js x2332)
    let (get_salt : 'tags this -> BufferSource.t) =
      fun (x2334 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2334) "salt")
    let (set_salt : 'tags this -> BufferSource.t -> unit) =
      fun (x2336 : 'tags this) ->
        fun (x2337 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2336) "salt"
            (BufferSource.t_to_js x2337)
    let cast_from = Obj.magic
  end
module EcdsaParams =
  struct
    type t = [ `Algorithm  | `EcdsaParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2340 : Ojs.t) -> t_of_js x2340
    and t_0_to_js : t_0 -> Ojs.t = fun (x2339 : t) -> t_to_js x2339
    type tags = [ `Algorithm  | `EcdsaParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdsaParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2343 : Ojs.t) -> intf_of_js __tags_of_js x2343
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2341 : __tags intf) -> intf_to_js __tags_to_js x2341
    let (get_hash : 'tags this -> HashAlgorithmIdentifier.t) =
      fun (x2345 : 'tags this) ->
        HashAlgorithmIdentifier.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2345) "hash")
    let (set_hash : 'tags this -> HashAlgorithmIdentifier.t -> unit) =
      fun (x2347 : 'tags this) ->
        fun (x2348 : HashAlgorithmIdentifier.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2347) "hash"
            (HashAlgorithmIdentifier.t_to_js x2348)
    let cast_from = Obj.magic
  end
module KeyUsage =
  struct
    type t =
      [ `L_s178_sign  | `L_s199_unwrapKey  | `L_s202_verify 
      | `L_s210_wrapKey  | `L_s56_decrypt  | `L_s59_deriveBits 
      | `L_s60_deriveKey  | `L_s65_encrypt ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2351 : Ojs.t) ->
        let x2352 = x2351 in
        match Ojs.string_of_js x2352 with
        | "sign" -> `L_s178_sign
        | "unwrapKey" -> `L_s199_unwrapKey
        | "verify" -> `L_s202_verify
        | "wrapKey" -> `L_s210_wrapKey
        | "decrypt" -> `L_s56_decrypt
        | "deriveBits" -> `L_s59_deriveBits
        | "deriveKey" -> `L_s60_deriveKey
        | "encrypt" -> `L_s65_encrypt
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x2350 :
          [ `L_s178_sign  | `L_s199_unwrapKey  | `L_s202_verify 
          | `L_s210_wrapKey  | `L_s56_decrypt  | `L_s59_deriveBits 
          | `L_s60_deriveKey  | `L_s65_encrypt ])
        ->
        match x2350 with
        | `L_s178_sign -> Ojs.string_to_js "sign"
        | `L_s199_unwrapKey -> Ojs.string_to_js "unwrapKey"
        | `L_s202_verify -> Ojs.string_to_js "verify"
        | `L_s210_wrapKey -> Ojs.string_to_js "wrapKey"
        | `L_s56_decrypt -> Ojs.string_to_js "decrypt"
        | `L_s59_deriveBits -> Ojs.string_to_js "deriveBits"
        | `L_s60_deriveKey -> Ojs.string_to_js "deriveKey"
        | `L_s65_encrypt -> Ojs.string_to_js "encrypt"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2354 : Ojs.t) -> t_of_js x2354
    and t_0_to_js : t_0 -> Ojs.t = fun (x2353 : t) -> t_to_js x2353
  end
module KeyType =
  struct
    type t = [ `L_s155_private  | `L_s158_public  | `L_s175_secret ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2356 : Ojs.t) ->
        let x2357 = x2356 in
        match Ojs.string_of_js x2357 with
        | "private" -> `L_s155_private
        | "public" -> `L_s158_public
        | "secret" -> `L_s175_secret
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x2355 : [ `L_s155_private  | `L_s158_public  | `L_s175_secret ])
        ->
        match x2355 with
        | `L_s155_private -> Ojs.string_to_js "private"
        | `L_s158_public -> Ojs.string_to_js "public"
        | `L_s175_secret -> Ojs.string_to_js "secret"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2359 : Ojs.t) -> t_of_js x2359
    and t_0_to_js : t_0 -> Ojs.t = fun (x2358 : t) -> t_to_js x2358
  end
module KeyAlgorithm =
  struct
    type t = [ `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2361 : Ojs.t) -> t_of_js x2361
    and t_0_to_js : t_0 -> Ojs.t = fun (x2360 : t) -> t_to_js x2360
    type tags = [ `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `KeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2364 : Ojs.t) -> intf_of_js __tags_of_js x2364
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2362 : __tags intf) -> intf_to_js __tags_to_js x2362
    let (get_name : 'tags this -> string) =
      fun (x2366 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2366) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x2368 : 'tags this) ->
        fun (x2369 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2368) "name"
            (Ojs.string_to_js x2369)
    let cast_from = Obj.magic
  end
module CryptoKey =
  struct
    type t = [ `CryptoKey ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2372 : Ojs.t) -> t_of_js x2372
    and t_0_to_js : t_0 -> Ojs.t = fun (x2371 : t) -> t_to_js x2371
    type tags = [ `CryptoKey ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKey ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2375 : Ojs.t) -> intf_of_js __tags_of_js x2375
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2373 : __tags intf) -> intf_to_js __tags_to_js x2373
    let (get_algorithm : 'tags this -> KeyAlgorithm.t) =
      fun (x2377 : 'tags this) ->
        KeyAlgorithm.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2377) "algorithm")
    let (get_extractable : 'tags this -> bool) =
      fun (x2379 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2379) "extractable")
    let (get_type : 'tags this -> KeyType.t) =
      fun (x2381 : 'tags this) ->
        KeyType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2381) "type")
    let (get_usages : 'tags this -> KeyUsage.t list) =
      fun (x2383 : 'tags this) ->
        Ojs.list_of_js KeyUsage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2383) "usages")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CryptoKey")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CryptoKey") [||])
  end
module EcdhKeyDeriveParams =
  struct
    type t = [ `Algorithm  | `EcdhKeyDeriveParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2387 : Ojs.t) -> t_of_js x2387
    and t_0_to_js : t_0 -> Ojs.t = fun (x2386 : t) -> t_to_js x2386
    type tags = [ `Algorithm  | `EcdhKeyDeriveParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcdhKeyDeriveParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2390 : Ojs.t) -> intf_of_js __tags_of_js x2390
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2388 : __tags intf) -> intf_to_js __tags_to_js x2388
    let (get_public : 'tags this -> CryptoKey.t) =
      fun (x2392 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2392) "public")
    let (set_public : 'tags this -> CryptoKey.t -> unit) =
      fun (x2394 : 'tags this) ->
        fun (x2395 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2394) "public"
            (CryptoKey.t_to_js x2395)
    let cast_from = Obj.magic
  end
module NamedCurve =
  struct
    type t = string
    let rec t_of_js : Ojs.t -> t =
      fun (x2398 : Ojs.t) -> Ojs.string_of_js x2398
    and t_to_js : t -> Ojs.t = fun (x2397 : string) -> Ojs.string_to_js x2397
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2400 : Ojs.t) -> t_of_js x2400
    and t_0_to_js : t_0 -> Ojs.t = fun (x2399 : t) -> t_to_js x2399
  end
module EcKeyImportParams =
  struct
    type t = [ `Algorithm  | `EcKeyImportParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2402 : Ojs.t) -> t_of_js x2402
    and t_0_to_js : t_0 -> Ojs.t = fun (x2401 : t) -> t_to_js x2401
    type tags = [ `Algorithm  | `EcKeyImportParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyImportParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2405 : Ojs.t) -> intf_of_js __tags_of_js x2405
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2403 : __tags intf) -> intf_to_js __tags_to_js x2403
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x2407 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2407) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x2409 : 'tags this) ->
        fun (x2410 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2409) "namedCurve"
            (NamedCurve.t_to_js x2410)
    let cast_from = Obj.magic
  end
module EcKeyGenParams =
  struct
    type t = [ `Algorithm  | `EcKeyGenParams ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2413 : Ojs.t) -> t_of_js x2413
    and t_0_to_js : t_0 -> Ojs.t = fun (x2412 : t) -> t_to_js x2412
    type tags = [ `Algorithm  | `EcKeyGenParams ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EcKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2416 : Ojs.t) -> intf_of_js __tags_of_js x2416
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2414 : __tags intf) -> intf_to_js __tags_to_js x2414
    let (get_namedCurve : 'tags this -> NamedCurve.t) =
      fun (x2418 : 'tags this) ->
        NamedCurve.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2418) "namedCurve")
    let (set_namedCurve : 'tags this -> NamedCurve.t -> unit) =
      fun (x2420 : 'tags this) ->
        fun (x2421 : NamedCurve.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2420) "namedCurve"
            (NamedCurve.t_to_js x2421)
    let cast_from = Obj.magic
  end
module CryptoKeyPair =
  struct
    type t = [ `CryptoKeyPair ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2424 : Ojs.t) -> t_of_js x2424
    and t_0_to_js : t_0 -> Ojs.t = fun (x2423 : t) -> t_to_js x2423
    type tags = [ `CryptoKeyPair ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CryptoKeyPair ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2427 : Ojs.t) -> intf_of_js __tags_of_js x2427
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2425 : __tags intf) -> intf_to_js __tags_to_js x2425
    let (get_privateKey : 'tags this -> CryptoKey.t) =
      fun (x2429 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2429) "privateKey")
    let (set_privateKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x2431 : 'tags this) ->
        fun (x2432 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2431) "privateKey"
            (CryptoKey.t_to_js x2432)
    let (get_publicKey : 'tags this -> CryptoKey.t) =
      fun (x2434 : 'tags this) ->
        CryptoKey.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2434) "publicKey")
    let (set_publicKey : 'tags this -> CryptoKey.t -> unit) =
      fun (x2436 : 'tags this) ->
        fun (x2437 : CryptoKey.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2436) "publicKey"
            (CryptoKey.t_to_js x2437)
    let cast_from = Obj.magic
  end
module AesKeyGenParams =
  struct
    type t = [ `AesKeyGenParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2440 : Ojs.t) -> t_of_js x2440
    and t_0_to_js : t_0 -> Ojs.t = fun (x2439 : t) -> t_to_js x2439
    type tags = [ `AesKeyGenParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyGenParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2443 : Ojs.t) -> intf_of_js __tags_of_js x2443
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2441 : __tags intf) -> intf_to_js __tags_to_js x2441
    let (get_length : 'tags this -> float) =
      fun (x2445 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2445) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2447 : 'tags this) ->
        fun (x2448 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2447) "length"
            (Ojs.float_to_js x2448)
    let cast_from = Obj.magic
  end
module AesKeyAlgorithm =
  struct
    type t = [ `AesKeyAlgorithm  | `KeyAlgorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2451 : Ojs.t) -> t_of_js x2451
    and t_0_to_js : t_0 -> Ojs.t = fun (x2450 : t) -> t_to_js x2450
    type tags = [ `AesKeyAlgorithm  | `KeyAlgorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesKeyAlgorithm ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2454 : Ojs.t) -> intf_of_js __tags_of_js x2454
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2452 : __tags intf) -> intf_to_js __tags_to_js x2452
    let (get_length : 'tags this -> float) =
      fun (x2456 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2456) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2458 : 'tags this) ->
        fun (x2459 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2458) "length"
            (Ojs.float_to_js x2459)
    let cast_from = Obj.magic
  end
module AesGcmParams =
  struct
    type t = [ `AesGcmParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2462 : Ojs.t) -> t_of_js x2462
    and t_0_to_js : t_0 -> Ojs.t = fun (x2461 : t) -> t_to_js x2461
    type tags = [ `AesGcmParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesGcmParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2465 : Ojs.t) -> intf_of_js __tags_of_js x2465
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2463 : __tags intf) -> intf_to_js __tags_to_js x2463
    let (get_additionalData : 'tags this -> BufferSource.t) =
      fun (x2467 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2467) "additionalData")
    let (set_additionalData : 'tags this -> BufferSource.t -> unit) =
      fun (x2469 : 'tags this) ->
        fun (x2470 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2469) "additionalData"
            (BufferSource.t_to_js x2470)
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x2472 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2472) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x2474 : 'tags this) ->
        fun (x2475 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2474) "iv"
            (BufferSource.t_to_js x2475)
    let (get_tagLength : 'tags this -> float) =
      fun (x2477 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2477) "tagLength")
    let (set_tagLength : 'tags this -> float -> unit) =
      fun (x2479 : 'tags this) ->
        fun (x2480 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2479) "tagLength"
            (Ojs.float_to_js x2480)
    let cast_from = Obj.magic
  end
module AesDerivedKeyParams =
  struct
    type t = [ `AesDerivedKeyParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2483 : Ojs.t) -> t_of_js x2483
    and t_0_to_js : t_0 -> Ojs.t = fun (x2482 : t) -> t_to_js x2482
    type tags = [ `AesDerivedKeyParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesDerivedKeyParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2486 : Ojs.t) -> intf_of_js __tags_of_js x2486
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2484 : __tags intf) -> intf_to_js __tags_to_js x2484
    let (get_length : 'tags this -> float) =
      fun (x2488 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2488) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2490 : 'tags this) ->
        fun (x2491 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2490) "length"
            (Ojs.float_to_js x2491)
    let cast_from = Obj.magic
  end
module AesCtrParams =
  struct
    type t = [ `AesCtrParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2494 : Ojs.t) -> t_of_js x2494
    and t_0_to_js : t_0 -> Ojs.t = fun (x2493 : t) -> t_to_js x2493
    type tags = [ `AesCtrParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCtrParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2497 : Ojs.t) -> intf_of_js __tags_of_js x2497
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2495 : __tags intf) -> intf_to_js __tags_to_js x2495
    let (get_counter : 'tags this -> BufferSource.t) =
      fun (x2499 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2499) "counter")
    let (set_counter : 'tags this -> BufferSource.t -> unit) =
      fun (x2501 : 'tags this) ->
        fun (x2502 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2501) "counter"
            (BufferSource.t_to_js x2502)
    let (get_length : 'tags this -> float) =
      fun (x2504 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2504) "length")
    let (set_length : 'tags this -> float -> unit) =
      fun (x2506 : 'tags this) ->
        fun (x2507 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2506) "length"
            (Ojs.float_to_js x2507)
    let cast_from = Obj.magic
  end
module AesCbcParams =
  struct
    type t = [ `AesCbcParams  | `Algorithm ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2510 : Ojs.t) -> t_of_js x2510
    and t_0_to_js : t_0 -> Ojs.t = fun (x2509 : t) -> t_to_js x2509
    type tags = [ `AesCbcParams  | `Algorithm ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AesCbcParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2513 : Ojs.t) -> intf_of_js __tags_of_js x2513
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2511 : __tags intf) -> intf_to_js __tags_to_js x2511
    let (get_iv : 'tags this -> BufferSource.t) =
      fun (x2515 : 'tags this) ->
        BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2515) "iv")
    let (set_iv : 'tags this -> BufferSource.t -> unit) =
      fun (x2517 : 'tags this) ->
        fun (x2518 : BufferSource.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2517) "iv"
            (BufferSource.t_to_js x2518)
    let cast_from = Obj.magic
  end
module SubtleCrypto =
  struct
    type t = [ `SubtleCrypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2521 : Ojs.t) -> t_of_js x2521
    and t_0_to_js : t_0 -> Ojs.t = fun (x2520 : t) -> t_to_js x2520
    type tags = [ `SubtleCrypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `SubtleCrypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2524 : Ojs.t) -> intf_of_js __tags_of_js x2524
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2522 : __tags intf) -> intf_to_js __tags_to_js x2522
    let (decrypt :
      'tags this ->
        algorithm:(AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
          AlgorithmIdentifier.t, RsaOaepParams.t) union5 ->
          key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x2534 : 'tags this) ->
        fun
          ~algorithm:(x2526 :
                       (AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
                         AlgorithmIdentifier.t, RsaOaepParams.t) union5)
          ->
          fun ~key:(x2532 : CryptoKey.t) ->
            fun ~data:(x2533 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x2534) "decrypt"
                   [|(union5_to_js AesCbcParams.t_to_js AesCtrParams.t_to_js
                        AesGcmParams.t_to_js AlgorithmIdentifier.t_to_js
                        RsaOaepParams.t_to_js x2526);(CryptoKey.t_to_js x2532);(
                     BufferSource.t_to_js x2533)|])
    let (deriveBits :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
          HkdfParams.t, Pbkdf2Params.t) union4 ->
          baseKey:CryptoKey.t -> length:float -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2544 : 'tags this) ->
        fun
          ~algorithm:(x2537 :
                       (AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                         HkdfParams.t, Pbkdf2Params.t) union4)
          ->
          fun ~baseKey:(x2542 : CryptoKey.t) ->
            fun ~length:(x2543 : float) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x2544) "deriveBits"
                   [|(union4_to_js AlgorithmIdentifier.t_to_js
                        EcdhKeyDeriveParams.t_to_js HkdfParams.t_to_js
                        Pbkdf2Params.t_to_js x2537);(CryptoKey.t_to_js x2542);(
                     Ojs.float_to_js x2543)|])
    let (deriveKey :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
          HkdfParams.t, Pbkdf2Params.t) union4 ->
          baseKey:CryptoKey.t ->
            derivedKeyType:(AesDerivedKeyParams.t, AlgorithmIdentifier.t,
              HkdfParams.t, HmacImportParams.t, Pbkdf2Params.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2562 : 'tags this) ->
        fun
          ~algorithm:(x2547 :
                       (AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                         HkdfParams.t, Pbkdf2Params.t) union4)
          ->
          fun ~baseKey:(x2552 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x2553 :
                                (AesDerivedKeyParams.t,
                                  AlgorithmIdentifier.t, HkdfParams.t,
                                  HmacImportParams.t, Pbkdf2Params.t) union5)
              ->
              fun ~extractable:(x2559 : bool) ->
                fun ~keyUsages:(x2560 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2562) "deriveKey"
                       [|(union4_to_js AlgorithmIdentifier.t_to_js
                            EcdhKeyDeriveParams.t_to_js HkdfParams.t_to_js
                            Pbkdf2Params.t_to_js x2547);(CryptoKey.t_to_js
                                                           x2552);(union5_to_js
                                                                    AesDerivedKeyParams.t_to_js
                                                                    AlgorithmIdentifier.t_to_js
                                                                    HkdfParams.t_to_js
                                                                    HmacImportParams.t_to_js
                                                                    Pbkdf2Params.t_to_js
                                                                    x2553);(
                         Ojs.bool_to_js x2559);(Ojs.list_to_js
                                                  KeyUsage.t_to_js x2560)|])
    let (digest :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2567 : 'tags this) ->
        fun ~algorithm:(x2565 : AlgorithmIdentifier.t) ->
          fun ~data:(x2566 : BufferSource.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x2567) "digest"
                 [|(AlgorithmIdentifier.t_to_js x2565);(BufferSource.t_to_js
                                                          x2566)|])
    let (encrypt :
      'tags this ->
        algorithm:(AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
          AlgorithmIdentifier.t, RsaOaepParams.t) union5 ->
          key:CryptoKey.t -> data:BufferSource.t -> any Promise.t_1)
      =
      fun (x2578 : 'tags this) ->
        fun
          ~algorithm:(x2570 :
                       (AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
                         AlgorithmIdentifier.t, RsaOaepParams.t) union5)
          ->
          fun ~key:(x2576 : CryptoKey.t) ->
            fun ~data:(x2577 : BufferSource.t) ->
              Promise.t_1_of_js any_of_js
                (Ojs.call (this_to_js Obj.magic x2578) "encrypt"
                   [|(union5_to_js AesCbcParams.t_to_js AesCtrParams.t_to_js
                        AesGcmParams.t_to_js AlgorithmIdentifier.t_to_js
                        RsaOaepParams.t_to_js x2570);(CryptoKey.t_to_js x2576);(
                     BufferSource.t_to_js x2577)|])
    let (exportKey :
      'tags this ->
        format:[ `L_s97_jwk ] -> key:CryptoKey.t -> JsonWebKey.t Promise.t_1)
      =
      fun (x2583 : 'tags this) ->
        fun ~format:(x2581 : [ `L_s97_jwk ]) ->
          fun ~key:(x2582 : CryptoKey.t) ->
            Promise.t_1_of_js JsonWebKey.t_of_js
              (Ojs.call (this_to_js Obj.magic x2583) "exportKey"
                 [|((match x2581 with | `L_s97_jwk -> Ojs.string_to_js "jwk"));(
                   CryptoKey.t_to_js x2582)|])
    let (exportKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
          key:CryptoKey.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2590 : 'tags this) ->
        fun ~format:(x2586 : (KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2) ->
          fun ~key:(x2589 : CryptoKey.t) ->
            Promise.t_1_of_js ArrayBuffer.t_0_of_js
              (Ojs.call (this_to_js Obj.magic x2590) "exportKey"
                 [|(Exclude.t_2_to_js KeyFormat.t_to_js
                      (fun (x2588 : [ `L_s97_jwk ]) ->
                         match x2588 with
                         | `L_s97_jwk -> Ojs.string_to_js "jwk") x2586);(
                   CryptoKey.t_to_js x2589)|])
    let (generateKey :
      'tags this ->
        algorithm:(EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x2599 : 'tags this) ->
        fun
          ~algorithm:(x2593 :
                       (EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2)
          ->
          fun ~extractable:(x2596 : bool) ->
            fun ~keyUsages:(x2597 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x2599) "generateKey"
                   [|(union2_to_js EcKeyGenParams.t_to_js
                        RsaHashedKeyGenParams.t_to_js x2593);(Ojs.bool_to_js
                                                                x2596);(
                     Ojs.list_to_js KeyUsage.t_to_js x2597)|])
    let (generateKey' :
      'tags this ->
        algorithm:(AesKeyGenParams.t, HmacKeyGenParams.t, Pbkdf2Params.t)
          union3 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2609 : 'tags this) ->
        fun
          ~algorithm:(x2602 :
                       (AesKeyGenParams.t, HmacKeyGenParams.t,
                         Pbkdf2Params.t) union3)
          ->
          fun ~extractable:(x2606 : bool) ->
            fun ~keyUsages:(x2607 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x2609) "generateKey"
                   [|(union3_to_js AesKeyGenParams.t_to_js
                        HmacKeyGenParams.t_to_js Pbkdf2Params.t_to_js x2602);(
                     Ojs.bool_to_js x2606);(Ojs.list_to_js KeyUsage.t_to_js
                                              x2607)|])
    let (generateKey'' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t list ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x2616 : 'tags this) ->
        fun ~algorithm:(x2612 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x2613 : bool) ->
            fun ~keyUsages:(x2614 : KeyUsage.t list) ->
              Promise.t_1_of_js
                (fun (x2618 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x2618)
                (Ojs.call (this_to_js Obj.magic x2616) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x2612);(Ojs.bool_to_js
                                                            x2613);(Ojs.list_to_js
                                                                    KeyUsage.t_to_js
                                                                    x2614)|])
    let (importKey :
      'tags this ->
        format:[ `L_s97_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2632 : 'tags this) ->
        fun ~format:(x2621 : [ `L_s97_jwk ]) ->
          fun ~keyData:(x2622 : JsonWebKey.t) ->
            fun
              ~algorithm:(x2623 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x2629 : bool) ->
                fun ~keyUsages:(x2630 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2632) "importKey"
                       [|((match x2621 with
                           | `L_s97_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x2622);(union5_to_js
                                                      AesKeyAlgorithm.t_to_js
                                                      AlgorithmIdentifier.t_to_js
                                                      EcKeyImportParams.t_to_js
                                                      HmacImportParams.t_to_js
                                                      RsaHashedImportParams.t_to_js
                                                      x2623);(Ojs.bool_to_js
                                                                x2629);(
                         Ojs.list_to_js KeyUsage.t_to_js x2630)|])
    let (importKey' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2648 : 'tags this) ->
        fun ~format:(x2635 : (KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x2638 : BufferSource.t) ->
            fun
              ~algorithm:(x2639 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x2645 : bool) ->
                fun ~keyUsages:(x2646 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2648) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x2637 : [ `L_s97_jwk ]) ->
                               match x2637 with
                               | `L_s97_jwk -> Ojs.string_to_js "jwk") x2635);(
                         BufferSource.t_to_js x2638);(union5_to_js
                                                        AesKeyAlgorithm.t_to_js
                                                        AlgorithmIdentifier.t_to_js
                                                        EcKeyImportParams.t_to_js
                                                        HmacImportParams.t_to_js
                                                        RsaHashedImportParams.t_to_js
                                                        x2639);(Ojs.bool_to_js
                                                                  x2645);(
                         Ojs.list_to_js KeyUsage.t_to_js x2646)|])
    let (sign :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
          union3 ->
          key:CryptoKey.t ->
            data:BufferSource.t -> ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2657 : 'tags this) ->
        fun
          ~algorithm:(x2651 :
                       (AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
                         union3)
          ->
          fun ~key:(x2655 : CryptoKey.t) ->
            fun ~data:(x2656 : BufferSource.t) ->
              Promise.t_1_of_js ArrayBuffer.t_0_of_js
                (Ojs.call (this_to_js Obj.magic x2657) "sign"
                   [|(union3_to_js AlgorithmIdentifier.t_to_js
                        EcdsaParams.t_to_js RsaPssParams.t_to_js x2651);(
                     CryptoKey.t_to_js x2655);(BufferSource.t_to_js x2656)|])
    let (unwrapKey :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:(AesCbcParams.t, AesCtrParams.t,
                AesGcmParams.t, AlgorithmIdentifier.t, RsaOaepParams.t)
                union5 ->
                unwrappedKeyAlgorithm:(AesKeyAlgorithm.t,
                  AlgorithmIdentifier.t, EcKeyImportParams.t,
                  HmacImportParams.t, RsaHashedImportParams.t) union5 ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2678 : 'tags this) ->
        fun ~format:(x2660 : KeyFormat.t) ->
          fun ~wrappedKey:(x2661 : BufferSource.t) ->
            fun ~unwrappingKey:(x2662 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x2663 :
                                   (AesCbcParams.t, AesCtrParams.t,
                                     AesGcmParams.t, AlgorithmIdentifier.t,
                                     RsaOaepParams.t) union5)
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x2669 :
                                           (AesKeyAlgorithm.t,
                                             AlgorithmIdentifier.t,
                                             EcKeyImportParams.t,
                                             HmacImportParams.t,
                                             RsaHashedImportParams.t) union5)
                  ->
                  fun ~extractable:(x2675 : bool) ->
                    fun ~keyUsages:(x2676 : KeyUsage.t list) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x2678) "unwrapKey"
                           [|(KeyFormat.t_to_js x2660);(BufferSource.t_to_js
                                                          x2661);(CryptoKey.t_to_js
                                                                    x2662);(
                             union5_to_js AesCbcParams.t_to_js
                               AesCtrParams.t_to_js AesGcmParams.t_to_js
                               AlgorithmIdentifier.t_to_js
                               RsaOaepParams.t_to_js x2663);(union5_to_js
                                                               AesKeyAlgorithm.t_to_js
                                                               AlgorithmIdentifier.t_to_js
                                                               EcKeyImportParams.t_to_js
                                                               HmacImportParams.t_to_js
                                                               RsaHashedImportParams.t_to_js
                                                               x2669);(
                             Ojs.bool_to_js x2675);(Ojs.list_to_js
                                                      KeyUsage.t_to_js x2676)|])
    let (verify :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
          union3 ->
          key:CryptoKey.t ->
            signature:BufferSource.t ->
              data:BufferSource.t -> bool Promise.t_1)
      =
      fun (x2688 : 'tags this) ->
        fun
          ~algorithm:(x2681 :
                       (AlgorithmIdentifier.t, EcdsaParams.t, RsaPssParams.t)
                         union3)
          ->
          fun ~key:(x2685 : CryptoKey.t) ->
            fun ~signature:(x2686 : BufferSource.t) ->
              fun ~data:(x2687 : BufferSource.t) ->
                Promise.t_1_of_js Ojs.bool_of_js
                  (Ojs.call (this_to_js Obj.magic x2688) "verify"
                     [|(union3_to_js AlgorithmIdentifier.t_to_js
                          EcdsaParams.t_to_js RsaPssParams.t_to_js x2681);(
                       CryptoKey.t_to_js x2685);(BufferSource.t_to_js x2686);(
                       BufferSource.t_to_js x2687)|])
    let (wrapKey :
      'tags this ->
        format:KeyFormat.t ->
          key:CryptoKey.t ->
            wrappingKey:CryptoKey.t ->
              wrapAlgorithm:(AesCbcParams.t, AesCtrParams.t, AesGcmParams.t,
                AlgorithmIdentifier.t, RsaOaepParams.t) union5 ->
                ArrayBuffer.t_0 Promise.t_1)
      =
      fun (x2700 : 'tags this) ->
        fun ~format:(x2691 : KeyFormat.t) ->
          fun ~key:(x2692 : CryptoKey.t) ->
            fun ~wrappingKey:(x2693 : CryptoKey.t) ->
              fun
                ~wrapAlgorithm:(x2694 :
                                 (AesCbcParams.t, AesCtrParams.t,
                                   AesGcmParams.t, AlgorithmIdentifier.t,
                                   RsaOaepParams.t) union5)
                ->
                Promise.t_1_of_js ArrayBuffer.t_0_of_js
                  (Ojs.call (this_to_js Obj.magic x2700) "wrapKey"
                     [|(KeyFormat.t_to_js x2691);(CryptoKey.t_to_js x2692);(
                       CryptoKey.t_to_js x2693);(union5_to_js
                                                   AesCbcParams.t_to_js
                                                   AesCtrParams.t_to_js
                                                   AesGcmParams.t_to_js
                                                   AlgorithmIdentifier.t_to_js
                                                   RsaOaepParams.t_to_js
                                                   x2694)|])
    let (deriveKey' :
      'tags this ->
        algorithm:(AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
          HkdfParams.t, Pbkdf2Params.t) union4 ->
          baseKey:CryptoKey.t ->
            derivedKeyType:(AesDerivedKeyParams.t, AlgorithmIdentifier.t,
              HkdfParams.t, HmacImportParams.t, Pbkdf2Params.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x2718 : 'tags this) ->
        fun
          ~algorithm:(x2703 :
                       (AlgorithmIdentifier.t, EcdhKeyDeriveParams.t,
                         HkdfParams.t, Pbkdf2Params.t) union4)
          ->
          fun ~baseKey:(x2708 : CryptoKey.t) ->
            fun
              ~derivedKeyType:(x2709 :
                                (AesDerivedKeyParams.t,
                                  AlgorithmIdentifier.t, HkdfParams.t,
                                  HmacImportParams.t, Pbkdf2Params.t) union5)
              ->
              fun ~extractable:(x2715 : bool) ->
                fun ~keyUsages:(x2716 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2718) "deriveKey"
                       [|(union4_to_js AlgorithmIdentifier.t_to_js
                            EcdhKeyDeriveParams.t_to_js HkdfParams.t_to_js
                            Pbkdf2Params.t_to_js x2703);(CryptoKey.t_to_js
                                                           x2708);(union5_to_js
                                                                    AesDerivedKeyParams.t_to_js
                                                                    AlgorithmIdentifier.t_to_js
                                                                    HkdfParams.t_to_js
                                                                    HmacImportParams.t_to_js
                                                                    Pbkdf2Params.t_to_js
                                                                    x2709);(
                         Ojs.bool_to_js x2715);(Iterable.t_1_to_js
                                                  KeyUsage.t_to_js x2716)|])
    let (generateKey''' :
      'tags this ->
        algorithm:(EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKeyPair.t Promise.t_1)
      =
      fun (x2727 : 'tags this) ->
        fun
          ~algorithm:(x2721 :
                       (EcKeyGenParams.t, RsaHashedKeyGenParams.t) union2)
          ->
          fun ~extractable:(x2724 : bool) ->
            fun ~keyUsages:(x2725 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKeyPair.t_of_js
                (Ojs.call (this_to_js Obj.magic x2727) "generateKey"
                   [|(union2_to_js EcKeyGenParams.t_to_js
                        RsaHashedKeyGenParams.t_to_js x2721);(Ojs.bool_to_js
                                                                x2724);(
                     Ojs.list_to_js KeyUsage.t_to_js x2725)|])
    let (generateKey'''' :
      'tags this ->
        algorithm:(AesKeyGenParams.t, HmacKeyGenParams.t, Pbkdf2Params.t)
          union3 ->
          extractable:bool ->
            keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2737 : 'tags this) ->
        fun
          ~algorithm:(x2730 :
                       (AesKeyGenParams.t, HmacKeyGenParams.t,
                         Pbkdf2Params.t) union3)
          ->
          fun ~extractable:(x2734 : bool) ->
            fun ~keyUsages:(x2735 : KeyUsage.t list) ->
              Promise.t_1_of_js CryptoKey.t_of_js
                (Ojs.call (this_to_js Obj.magic x2737) "generateKey"
                   [|(union3_to_js AesKeyGenParams.t_to_js
                        HmacKeyGenParams.t_to_js Pbkdf2Params.t_to_js x2730);(
                     Ojs.bool_to_js x2734);(Ojs.list_to_js KeyUsage.t_to_js
                                              x2735)|])
    let (generateKey''''' :
      'tags this ->
        algorithm:AlgorithmIdentifier.t ->
          extractable:bool ->
            keyUsages:KeyUsage.t Iterable.t_1 ->
              (CryptoKey.t, CryptoKeyPair.t) union2 Promise.t_1)
      =
      fun (x2744 : 'tags this) ->
        fun ~algorithm:(x2740 : AlgorithmIdentifier.t) ->
          fun ~extractable:(x2741 : bool) ->
            fun ~keyUsages:(x2742 : KeyUsage.t Iterable.t_1) ->
              Promise.t_1_of_js
                (fun (x2746 : Ojs.t) ->
                   union2_of_js CryptoKey.t_of_js CryptoKeyPair.t_of_js x2746)
                (Ojs.call (this_to_js Obj.magic x2744) "generateKey"
                   [|(AlgorithmIdentifier.t_to_js x2740);(Ojs.bool_to_js
                                                            x2741);(Iterable.t_1_to_js
                                                                    KeyUsage.t_to_js
                                                                    x2742)|])
    let (importKey'' :
      'tags this ->
        format:[ `L_s97_jwk ] ->
          keyData:JsonWebKey.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t list -> CryptoKey.t Promise.t_1)
      =
      fun (x2760 : 'tags this) ->
        fun ~format:(x2749 : [ `L_s97_jwk ]) ->
          fun ~keyData:(x2750 : JsonWebKey.t) ->
            fun
              ~algorithm:(x2751 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x2757 : bool) ->
                fun ~keyUsages:(x2758 : KeyUsage.t list) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2760) "importKey"
                       [|((match x2749 with
                           | `L_s97_jwk -> Ojs.string_to_js "jwk"));(
                         JsonWebKey.t_to_js x2750);(union5_to_js
                                                      AesKeyAlgorithm.t_to_js
                                                      AlgorithmIdentifier.t_to_js
                                                      EcKeyImportParams.t_to_js
                                                      HmacImportParams.t_to_js
                                                      RsaHashedImportParams.t_to_js
                                                      x2751);(Ojs.bool_to_js
                                                                x2757);(
                         Ojs.list_to_js KeyUsage.t_to_js x2758)|])
    let (importKey''' :
      'tags this ->
        format:(KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2 ->
          keyData:BufferSource.t ->
            algorithm:(AesKeyAlgorithm.t, AlgorithmIdentifier.t,
              EcKeyImportParams.t, HmacImportParams.t,
              RsaHashedImportParams.t) union5 ->
              extractable:bool ->
                keyUsages:KeyUsage.t Iterable.t_1 -> CryptoKey.t Promise.t_1)
      =
      fun (x2776 : 'tags this) ->
        fun ~format:(x2763 : (KeyFormat.t, [ `L_s97_jwk ]) Exclude.t_2) ->
          fun ~keyData:(x2766 : BufferSource.t) ->
            fun
              ~algorithm:(x2767 :
                           (AesKeyAlgorithm.t, AlgorithmIdentifier.t,
                             EcKeyImportParams.t, HmacImportParams.t,
                             RsaHashedImportParams.t) union5)
              ->
              fun ~extractable:(x2773 : bool) ->
                fun ~keyUsages:(x2774 : KeyUsage.t Iterable.t_1) ->
                  Promise.t_1_of_js CryptoKey.t_of_js
                    (Ojs.call (this_to_js Obj.magic x2776) "importKey"
                       [|(Exclude.t_2_to_js KeyFormat.t_to_js
                            (fun (x2765 : [ `L_s97_jwk ]) ->
                               match x2765 with
                               | `L_s97_jwk -> Ojs.string_to_js "jwk") x2763);(
                         BufferSource.t_to_js x2766);(union5_to_js
                                                        AesKeyAlgorithm.t_to_js
                                                        AlgorithmIdentifier.t_to_js
                                                        EcKeyImportParams.t_to_js
                                                        HmacImportParams.t_to_js
                                                        RsaHashedImportParams.t_to_js
                                                        x2767);(Ojs.bool_to_js
                                                                  x2773);(
                         Iterable.t_1_to_js KeyUsage.t_to_js x2774)|])
    let (unwrapKey' :
      'tags this ->
        format:KeyFormat.t ->
          wrappedKey:BufferSource.t ->
            unwrappingKey:CryptoKey.t ->
              unwrapAlgorithm:(AesCbcParams.t, AesCtrParams.t,
                AesGcmParams.t, AlgorithmIdentifier.t, RsaOaepParams.t)
                union5 ->
                unwrappedKeyAlgorithm:(AesKeyAlgorithm.t,
                  AlgorithmIdentifier.t, EcKeyImportParams.t,
                  HmacImportParams.t, RsaHashedImportParams.t) union5 ->
                  extractable:bool ->
                    keyUsages:KeyUsage.t Iterable.t_1 ->
                      CryptoKey.t Promise.t_1)
      =
      fun (x2797 : 'tags this) ->
        fun ~format:(x2779 : KeyFormat.t) ->
          fun ~wrappedKey:(x2780 : BufferSource.t) ->
            fun ~unwrappingKey:(x2781 : CryptoKey.t) ->
              fun
                ~unwrapAlgorithm:(x2782 :
                                   (AesCbcParams.t, AesCtrParams.t,
                                     AesGcmParams.t, AlgorithmIdentifier.t,
                                     RsaOaepParams.t) union5)
                ->
                fun
                  ~unwrappedKeyAlgorithm:(x2788 :
                                           (AesKeyAlgorithm.t,
                                             AlgorithmIdentifier.t,
                                             EcKeyImportParams.t,
                                             HmacImportParams.t,
                                             RsaHashedImportParams.t) union5)
                  ->
                  fun ~extractable:(x2794 : bool) ->
                    fun ~keyUsages:(x2795 : KeyUsage.t Iterable.t_1) ->
                      Promise.t_1_of_js CryptoKey.t_of_js
                        (Ojs.call (this_to_js Obj.magic x2797) "unwrapKey"
                           [|(KeyFormat.t_to_js x2779);(BufferSource.t_to_js
                                                          x2780);(CryptoKey.t_to_js
                                                                    x2781);(
                             union5_to_js AesCbcParams.t_to_js
                               AesCtrParams.t_to_js AesGcmParams.t_to_js
                               AlgorithmIdentifier.t_to_js
                               RsaOaepParams.t_to_js x2782);(union5_to_js
                                                               AesKeyAlgorithm.t_to_js
                                                               AlgorithmIdentifier.t_to_js
                                                               EcKeyImportParams.t_to_js
                                                               HmacImportParams.t_to_js
                                                               RsaHashedImportParams.t_to_js
                                                               x2788);(
                             Ojs.bool_to_js x2794);(Iterable.t_1_to_js
                                                      KeyUsage.t_to_js x2795)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "SubtleCrypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "SubtleCrypto") [||])
  end
module CryptoStatic =
  struct
    let (subtle : unit -> SubtleCrypto.t) =
      fun () ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "crypto")
             "subtle")
    let (getRandomValues : 'T -> 'T) =
      fun (x2800 : 'T) ->
        Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "crypto")
             "getRandomValues" [|(Obj.magic x2800)|])
  end
module ConsoleStatic =
  struct
    let (assert_ : ?condition:bool -> data:any list -> unit -> unit) =
      fun ?condition:(x2801 : bool option) ->
        fun ~data:(x2802 : any list) ->
          fun () ->
            ignore
              (let x2806 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x2806 "assert") "apply"
                 [|x2806;((let x2803 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2801 with
                            | Some x2805 ->
                                ignore
                                  (Ojs.call x2803 "push"
                                     [|(Ojs.bool_to_js x2805)|])
                            | None -> ());
                           List.iter
                             (fun (x2804 : any) ->
                                ignore
                                  (Ojs.call x2803 "push"
                                     [|(any_to_js x2804)|])) x2802;
                           x2803))|])
    let (clear : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "clear" [||])
    let (count : ?label:string -> unit -> unit) =
      fun ?label:(x2807 : string option) ->
        fun () ->
          ignore
            (let x2810 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x2810 "count") "apply"
               [|x2810;((let x2808 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x2807 with
                          | Some x2809 ->
                              ignore
                                (Ojs.call x2808 "push"
                                   [|(Ojs.string_to_js x2809)|])
                          | None -> ());
                         x2808))|])
    let (countReset : ?label:string -> unit -> unit) =
      fun ?label:(x2811 : string option) ->
        fun () ->
          ignore
            (let x2814 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x2814 "countReset") "apply"
               [|x2814;((let x2812 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x2811 with
                          | Some x2813 ->
                              ignore
                                (Ojs.call x2812 "push"
                                   [|(Ojs.string_to_js x2813)|])
                          | None -> ());
                         x2812))|])
    let (debug : any list -> unit) =
      fun (x2815 : any list) ->
        ignore
          (let x2818 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x2818 "debug") "apply"
             [|x2818;((let x2816 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2817 : any) ->
                            ignore
                              (Ojs.call x2816 "push" [|(any_to_js x2817)|]))
                         x2815;
                       x2816))|])
    let (dir : ?item:any -> ?options:any -> unit -> unit) =
      fun ?item:(x2819 : any option) ->
        fun ?options:(x2820 : any option) ->
          fun () ->
            ignore
              (let x2824 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x2824 "dir") "apply"
                 [|x2824;((let x2821 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2819 with
                            | Some x2823 ->
                                ignore
                                  (Ojs.call x2821 "push"
                                     [|(any_to_js x2823)|])
                            | None -> ());
                           (match x2820 with
                            | Some x2822 ->
                                ignore
                                  (Ojs.call x2821 "push"
                                     [|(any_to_js x2822)|])
                            | None -> ());
                           x2821))|])
    let (dirxml : any list -> unit) =
      fun (x2825 : any list) ->
        ignore
          (let x2828 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x2828 "dirxml") "apply"
             [|x2828;((let x2826 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2827 : any) ->
                            ignore
                              (Ojs.call x2826 "push" [|(any_to_js x2827)|]))
                         x2825;
                       x2826))|])
    let (error : any list -> unit) =
      fun (x2829 : any list) ->
        ignore
          (let x2832 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x2832 "error") "apply"
             [|x2832;((let x2830 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2831 : any) ->
                            ignore
                              (Ojs.call x2830 "push" [|(any_to_js x2831)|]))
                         x2829;
                       x2830))|])
    let (group : any list -> unit) =
      fun (x2833 : any list) ->
        ignore
          (let x2836 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x2836 "group") "apply"
             [|x2836;((let x2834 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2835 : any) ->
                            ignore
                              (Ojs.call x2834 "push" [|(any_to_js x2835)|]))
                         x2833;
                       x2834))|])
    let (groupCollapsed : any list -> unit) =
      fun (x2837 : any list) ->
        ignore
          (let x2840 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x2840 "groupCollapsed") "apply"
             [|x2840;((let x2838 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2839 : any) ->
                            ignore
                              (Ojs.call x2838 "push" [|(any_to_js x2839)|]))
                         x2837;
                       x2838))|])
    let (groupEnd : unit -> unit) =
      fun () ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "console") "groupEnd" [||])
    let (info : any list -> unit) =
      fun (x2841 : any list) ->
        ignore
          (let x2844 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x2844 "info") "apply"
             [|x2844;((let x2842 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2843 : any) ->
                            ignore
                              (Ojs.call x2842 "push" [|(any_to_js x2843)|]))
                         x2841;
                       x2842))|])
    let (log : any list -> unit) =
      fun (x2845 : any list) ->
        ignore
          (let x2848 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x2848 "log") "apply"
             [|x2848;((let x2846 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2847 : any) ->
                            ignore
                              (Ojs.call x2846 "push" [|(any_to_js x2847)|]))
                         x2845;
                       x2846))|])
    let (table : ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun ?tabularData:(x2849 : any option) ->
        fun ?properties:(x2850 : string list option) ->
          fun () ->
            ignore
              (let x2855 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x2855 "table") "apply"
                 [|x2855;((let x2851 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2849 with
                            | Some x2854 ->
                                ignore
                                  (Ojs.call x2851 "push"
                                     [|(any_to_js x2854)|])
                            | None -> ());
                           (match x2850 with
                            | Some x2852 ->
                                ignore
                                  (Ojs.call x2851 "push"
                                     [|(Ojs.list_to_js Ojs.string_to_js x2852)|])
                            | None -> ());
                           x2851))|])
    let (time : ?label:string -> unit -> unit) =
      fun ?label:(x2856 : string option) ->
        fun () ->
          ignore
            (let x2859 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x2859 "time") "apply"
               [|x2859;((let x2857 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x2856 with
                          | Some x2858 ->
                              ignore
                                (Ojs.call x2857 "push"
                                   [|(Ojs.string_to_js x2858)|])
                          | None -> ());
                         x2857))|])
    let (timeEnd : ?label:string -> unit -> unit) =
      fun ?label:(x2860 : string option) ->
        fun () ->
          ignore
            (let x2863 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x2863 "timeEnd") "apply"
               [|x2863;((let x2861 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x2860 with
                          | Some x2862 ->
                              ignore
                                (Ojs.call x2861 "push"
                                   [|(Ojs.string_to_js x2862)|])
                          | None -> ());
                         x2861))|])
    let (timeLog : ?label:string -> data:any list -> unit -> unit) =
      fun ?label:(x2864 : string option) ->
        fun ~data:(x2865 : any list) ->
          fun () ->
            ignore
              (let x2869 = Ojs.get_prop_ascii Ojs.global "console" in
               Ojs.call (Ojs.get_prop_ascii x2869 "timeLog") "apply"
                 [|x2869;((let x2866 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2864 with
                            | Some x2868 ->
                                ignore
                                  (Ojs.call x2866 "push"
                                     [|(Ojs.string_to_js x2868)|])
                            | None -> ());
                           List.iter
                             (fun (x2867 : any) ->
                                ignore
                                  (Ojs.call x2866 "push"
                                     [|(any_to_js x2867)|])) x2865;
                           x2866))|])
    let (timeStamp : ?label:string -> unit -> unit) =
      fun ?label:(x2870 : string option) ->
        fun () ->
          ignore
            (let x2873 = Ojs.get_prop_ascii Ojs.global "console" in
             Ojs.call (Ojs.get_prop_ascii x2873 "timeStamp") "apply"
               [|x2873;((let x2871 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x2870 with
                          | Some x2872 ->
                              ignore
                                (Ojs.call x2871 "push"
                                   [|(Ojs.string_to_js x2872)|])
                          | None -> ());
                         x2871))|])
    let (trace : any list -> unit) =
      fun (x2874 : any list) ->
        ignore
          (let x2877 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x2877 "trace") "apply"
             [|x2877;((let x2875 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2876 : any) ->
                            ignore
                              (Ojs.call x2875 "push" [|(any_to_js x2876)|]))
                         x2874;
                       x2875))|])
    let (warn : any list -> unit) =
      fun (x2878 : any list) ->
        ignore
          (let x2881 = Ojs.get_prop_ascii Ojs.global "console" in
           Ojs.call (Ojs.get_prop_ascii x2881 "warn") "apply"
             [|x2881;((let x2879 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       List.iter
                         (fun (x2880 : any) ->
                            ignore
                              (Ojs.call x2879 "push" [|(any_to_js x2880)|]))
                         x2878;
                       x2879))|])
  end
module CacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2883 : Ojs.t) -> t_of_js x2883
    and t_0_to_js : t_0 -> Ojs.t = fun (x2882 : t) -> t_to_js x2882
    type tags = [ `CacheQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2886 : Ojs.t) -> intf_of_js __tags_of_js x2886
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2884 : __tags intf) -> intf_to_js __tags_to_js x2884
    let (get_ignoreMethod : 'tags this -> bool) =
      fun (x2888 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2888) "ignoreMethod")
    let (set_ignoreMethod : 'tags this -> bool -> unit) =
      fun (x2890 : 'tags this) ->
        fun (x2891 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2890) "ignoreMethod"
            (Ojs.bool_to_js x2891)
    let (get_ignoreSearch : 'tags this -> bool) =
      fun (x2893 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2893) "ignoreSearch")
    let (set_ignoreSearch : 'tags this -> bool -> unit) =
      fun (x2895 : 'tags this) ->
        fun (x2896 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2895) "ignoreSearch"
            (Ojs.bool_to_js x2896)
    let (get_ignoreVary : 'tags this -> bool) =
      fun (x2898 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2898) "ignoreVary")
    let (set_ignoreVary : 'tags this -> bool -> unit) =
      fun (x2900 : 'tags this) ->
        fun (x2901 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2900) "ignoreVary"
            (Ojs.bool_to_js x2901)
    let cast_from = Obj.magic
  end
module MultiCacheQueryOptions =
  struct
    type t = [ `CacheQueryOptions  | `MultiCacheQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2904 : Ojs.t) -> t_of_js x2904
    and t_0_to_js : t_0 -> Ojs.t = fun (x2903 : t) -> t_to_js x2903
    type tags = [ `CacheQueryOptions  | `MultiCacheQueryOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `MultiCacheQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2907 : Ojs.t) -> intf_of_js __tags_of_js x2907
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2905 : __tags intf) -> intf_to_js __tags_to_js x2905
    let (get_cacheName : 'tags this -> string) =
      fun (x2909 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x2909) "cacheName")
    let (set_cacheName : 'tags this -> string -> unit) =
      fun (x2911 : 'tags this) ->
        fun (x2912 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x2911) "cacheName"
            (Ojs.string_to_js x2912)
    let cast_from = Obj.magic
  end
module URLSearchParams =
  struct
    type t =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x2915 : Ojs.t) -> t_of_js x2915
    and t_0_to_js : t_0 -> Ojs.t = fun (x2914 : t) -> t_to_js x2914
    type tags =
      [ `URLSearchParams  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URLSearchParams ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x2918 : Ojs.t) -> intf_of_js __tags_of_js x2918
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x2916 : __tags intf) -> intf_to_js __tags_to_js x2916
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x2922 : 'tags this) ->
        fun ~name:(x2920 : string) ->
          fun ~value:(x2921 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x2922) "append"
                 [|(Ojs.string_to_js x2920);(Ojs.string_to_js x2921)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x2925 : 'tags this) ->
        fun ~name:(x2924 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x2925) "delete"
               [|(Ojs.string_to_js x2924)|])
    let (get_ : 'tags this -> name:string -> string or_null) =
      fun (x2928 : 'tags this) ->
        fun ~name:(x2927 : string) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x2928) "get"
               [|(Ojs.string_to_js x2927)|])
    let (getAll : 'tags this -> name:string -> string list) =
      fun (x2932 : 'tags this) ->
        fun ~name:(x2931 : string) ->
          Ojs.list_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x2932) "getAll"
               [|(Ojs.string_to_js x2931)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x2936 : 'tags this) ->
        fun ~name:(x2935 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x2936) "has"
               [|(Ojs.string_to_js x2935)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x2940 : 'tags this) ->
        fun ~name:(x2938 : string) ->
          fun ~value:(x2939 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x2940) "set"
                 [|(Ojs.string_to_js x2938);(Ojs.string_to_js x2939)|])
    let (sort : 'tags this -> unit) =
      fun (x2942 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x2942) "sort" [||])
    let (toString : 'tags this -> string) =
      fun (x2944 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x2944) "toString" [||])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x2953 : 'tags this) ->
        fun
          ~callbackfn:(x2946 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x2947 : any option) ->
            fun () ->
              ignore
                (let x2955 = this_to_js Obj.magic x2953 in
                 Ojs.call (Ojs.get_prop_ascii x2955 "forEach") "apply"
                   [|x2955;((let x2948 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2948 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x2950 : Ojs.t) ->
                                          fun (x2951 : Ojs.t) ->
                                            fun (x2952 : Ojs.t) ->
                                              x2946
                                                ~value:(Ojs.string_of_js
                                                          x2950)
                                                ~key:(Ojs.string_of_js x2951)
                                                ~parent:(t_of_js x2952)))|]);
                             (match x2947 with
                              | Some x2949 ->
                                  ignore
                                    (Ojs.call x2948 "push"
                                       [|(any_to_js x2949)|])
                              | None -> ());
                             x2948))|])
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x2956 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x2958 : Ojs.t) ->
             let x2959 = x2958 in
             ((Ojs.string_of_js (Ojs.array_get x2959 0)),
               (Ojs.string_of_js (Ojs.array_get x2959 1))))
          (Ojs.call (this_to_js Obj.magic x2956) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x2960 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x2960) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x2963 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x2963) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "URLSearchParams") "prototype")
    let (create : ?init:(t, string list) or_array or_string -> unit -> t) =
      fun ?init:(x2966 : (t, string list) or_array or_string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
               (let x2967 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x2966 with
                 | Some x2968 ->
                     ignore
                       (Ojs.call x2967 "push"
                          [|(or_string_to_js
                               (fun (x2969 : (t, string list) or_array) ->
                                  or_array_to_js t_to_js
                                    (fun (x2971 : string list) ->
                                       Ojs.list_to_js Ojs.string_to_js x2971)
                                    x2969) x2968)|])
                 | None -> ());
                x2967))
    let (toString' : unit -> string) =
      fun () ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URLSearchParams")
             "toString" [||])
  end
module ReadableStreamDefaultController =
  struct
    type 'R t = [ `ReadableStreamDefaultController of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x2975 : Ojs.t) -> t_of_js __R_of_js x2975
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x2973 : __R t) -> t_to_js __R_to_js x2973
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x2979 : Ojs.t) -> t_of_js any_of_js x2979
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x2977 : any t) -> t_to_js any_to_js x2977
    type 'R tags = [ `ReadableStreamDefaultController of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultController of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x2983 : Ojs.t) -> intf_of_js __tags_of_js x2983
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x2981 : __tags intf) -> intf_to_js __tags_to_js x2981
    let (get_desiredSize : ('tags, 'R) this -> float or_null) =
      fun (x2985 : ('tags, 'R) this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x2985)
             "desiredSize")
    let (close : ('tags, 'R) this -> unit) =
      fun (x2989 : ('tags, 'R) this) ->
        ignore (Ojs.call (this_to_js Obj.magic Obj.magic x2989) "close" [||])
    let (enqueue : ('tags, 'R) this -> ?chunk:'R -> unit -> unit) =
      fun (x2995 : ('tags, 'R) this) ->
        fun ?chunk:(x2992 : 'R option) ->
          fun () ->
            ignore
              (let x2998 = this_to_js Obj.magic Obj.magic x2995 in
               Ojs.call (Ojs.get_prop_ascii x2998 "enqueue") "apply"
                 [|x2998;((let x2993 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2992 with
                            | Some x2994 ->
                                ignore
                                  (Ojs.call x2993 "push"
                                     [|(Obj.magic x2994)|])
                            | None -> ());
                           x2993))|])
    let (error : ('tags, 'R) this -> ?e:any -> unit -> unit) =
      fun (x3002 : ('tags, 'R) this) ->
        fun ?e:(x2999 : any option) ->
          fun () ->
            ignore
              (let x3005 = this_to_js Obj.magic Obj.magic x3002 in
               Ojs.call (Ojs.get_prop_ascii x3005 "error") "apply"
                 [|x3005;((let x3000 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x2999 with
                            | Some x3001 ->
                                ignore
                                  (Ojs.call x3000 "push"
                                     [|(any_to_js x3001)|])
                            | None -> ());
                           x3000))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultController")
             [||])
  end
module ReadableStreamController =
  struct
    type 'T t = 'T ReadableStreamDefaultController.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3008 : Ojs.t) ->
          ReadableStreamDefaultController.t_of_js __T_of_js x3008
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3006 : __T ReadableStreamDefaultController.t) ->
          ReadableStreamDefaultController.t_to_js __T_to_js x3006
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3012 : Ojs.t) -> t_of_js __T_of_js x3012
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3010 : __T t) -> t_to_js __T_to_js x3010
  end
module UnderlyingSourceStartCallback =
  struct
    type 'R t = [ `UnderlyingSourceStartCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3016 : Ojs.t) -> t_of_js __R_of_js x3016
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3014 : __R t) -> t_to_js __R_to_js x3014
    type 'R tags = [ `UnderlyingSourceStartCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourceStartCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3020 : Ojs.t) -> intf_of_js __tags_of_js x3020
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3018 : __tags intf) -> intf_to_js __tags_to_js x3018
    let (apply :
      ('tags, 'R) this -> controller:'R ReadableStreamController.t -> any) =
      fun (x3024 : ('tags, 'R) this) ->
        fun ~controller:(x3022 : 'R ReadableStreamController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x3024)
               [|(ReadableStreamController.t_to_js Obj.magic x3022)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourcePullCallback =
  struct
    type 'R t = [ `UnderlyingSourcePullCallback of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3029 : Ojs.t) -> t_of_js __R_of_js x3029
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3027 : __R t) -> t_to_js __R_to_js x3027
    type 'R tags = [ `UnderlyingSourcePullCallback of 'R ]
    type 'R tags_1 = 'R tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSourcePullCallback of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3033 : Ojs.t) -> intf_of_js __tags_of_js x3033
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3031 : __tags intf) -> intf_to_js __tags_to_js x3031
    let (apply :
      ('tags, 'R) this -> controller:'R ReadableStreamController.t -> unit) =
      fun (x3037 : ('tags, 'R) this) ->
        fun ~controller:(x3035 : 'R ReadableStreamController.t) ->
          ignore
            (Ojs.apply (this_to_js Obj.magic Obj.magic x3037)
               [|(ReadableStreamController.t_to_js Obj.magic x3035)|])
    let cast_from = Obj.magic
  end
module UnderlyingSourceCancelCallback =
  struct
    type t = [ `UnderlyingSourceCancelCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3041 : Ojs.t) -> t_of_js x3041
    and t_0_to_js : t_0 -> Ojs.t = fun (x3040 : t) -> t_to_js x3040
    type tags = [ `UnderlyingSourceCancelCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSourceCancelCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3044 : Ojs.t) -> intf_of_js __tags_of_js x3044
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3042 : __tags intf) -> intf_to_js __tags_to_js x3042
    let (apply : 'tags this -> ?reason:any -> unit -> unit) =
      fun (x3049 : 'tags this) ->
        fun ?reason:(x3046 : any option) ->
          fun () ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3049) "apply"
                 [|Ojs.null;((let x3047 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x3046 with
                               | Some x3048 ->
                                   ignore
                                     (Ojs.call x3047 "push"
                                        [|(any_to_js x3048)|])
                               | None -> ());
                              x3047))|])
    let cast_from = Obj.magic
  end
module UnderlyingSource =
  struct
    type 'R t = [ `UnderlyingSource of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3053 : Ojs.t) -> t_of_js __R_of_js x3053
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3051 : __R t) -> t_to_js __R_to_js x3051
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3057 : Ojs.t) -> t_of_js any_of_js x3057
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3055 : any t) -> t_to_js any_to_js x3055
    type 'R tags = [ `UnderlyingSource of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `UnderlyingSource of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3061 : Ojs.t) -> intf_of_js __tags_of_js x3061
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3059 : __tags intf) -> intf_to_js __tags_to_js x3059
    let (get_cancel : ('tags, 'R) this -> UnderlyingSourceCancelCallback.t) =
      fun (x3063 : ('tags, 'R) this) ->
        UnderlyingSourceCancelCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3063) "cancel")
    let (set_cancel :
      ('tags, 'R) this -> UnderlyingSourceCancelCallback.t -> unit) =
      fun (x3066 : ('tags, 'R) this) ->
        fun (x3067 : UnderlyingSourceCancelCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3066) "cancel"
            (UnderlyingSourceCancelCallback.t_to_js x3067)
    let (get_pull : ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t) =
      fun (x3070 : ('tags, 'R) this) ->
        UnderlyingSourcePullCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3070) "pull")
    let (set_pull :
      ('tags, 'R) this -> 'R UnderlyingSourcePullCallback.t -> unit) =
      fun (x3074 : ('tags, 'R) this) ->
        fun (x3075 : 'R UnderlyingSourcePullCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3074) "pull"
            (UnderlyingSourcePullCallback.t_to_js Obj.magic x3075)
    let (get_start : ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t)
      =
      fun (x3079 : ('tags, 'R) this) ->
        UnderlyingSourceStartCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3079) "start")
    let (set_start :
      ('tags, 'R) this -> 'R UnderlyingSourceStartCallback.t -> unit) =
      fun (x3083 : ('tags, 'R) this) ->
        fun (x3084 : 'R UnderlyingSourceStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3083) "start"
            (UnderlyingSourceStartCallback.t_to_js Obj.magic x3084)
    let (get_type : ('tags, 'R) this -> never or_undefined) =
      fun (x3088 : ('tags, 'R) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3088) "type")
    let (set_type : ('tags, 'R) this -> never or_undefined -> unit) =
      fun (x3092 : ('tags, 'R) this) ->
        fun (x3093 : never or_undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3092) "type"
            (or_undefined_to_js never_to_js x3093)
    let cast_from = Obj.magic
  end
module StreamPipeOptions =
  struct
    type t = [ `StreamPipeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3098 : Ojs.t) -> t_of_js x3098
    and t_0_to_js : t_0 -> Ojs.t = fun (x3097 : t) -> t_to_js x3097
    type tags = [ `StreamPipeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `StreamPipeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3101 : Ojs.t) -> intf_of_js __tags_of_js x3101
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3099 : __tags intf) -> intf_to_js __tags_to_js x3099
    let (get_preventAbort : 'tags this -> bool) =
      fun (x3103 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3103) "preventAbort")
    let (set_preventAbort : 'tags this -> bool -> unit) =
      fun (x3105 : 'tags this) ->
        fun (x3106 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3105) "preventAbort"
            (Ojs.bool_to_js x3106)
    let (get_preventCancel : 'tags this -> bool) =
      fun (x3108 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3108) "preventCancel")
    let (set_preventCancel : 'tags this -> bool -> unit) =
      fun (x3110 : 'tags this) ->
        fun (x3111 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3110) "preventCancel"
            (Ojs.bool_to_js x3111)
    let (get_preventClose : 'tags this -> bool) =
      fun (x3113 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3113) "preventClose")
    let (set_preventClose : 'tags this -> bool -> unit) =
      fun (x3115 : 'tags this) ->
        fun (x3116 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3115) "preventClose"
            (Ojs.bool_to_js x3116)
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x3118 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3118) "signal")
    let (set_signal : 'tags this -> AbortSignal.t -> unit) =
      fun (x3120 : 'tags this) ->
        fun (x3121 : AbortSignal.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3120) "signal"
            (AbortSignal.t_to_js x3121)
    let cast_from = Obj.magic
  end
module WritableStreamDefaultController =
  struct
    type t = [ `WritableStreamDefaultController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3124 : Ojs.t) -> t_of_js x3124
    and t_0_to_js : t_0 -> Ojs.t = fun (x3123 : t) -> t_to_js x3123
    type tags = [ `WritableStreamDefaultController ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WritableStreamDefaultController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3127 : Ojs.t) -> intf_of_js __tags_of_js x3127
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3125 : __tags intf) -> intf_to_js __tags_to_js x3125
    let (error : 'tags this -> ?e:any -> unit -> unit) =
      fun (x3132 : 'tags this) ->
        fun ?e:(x3129 : any option) ->
          fun () ->
            ignore
              (let x3134 = this_to_js Obj.magic x3132 in
               Ojs.call (Ojs.get_prop_ascii x3134 "error") "apply"
                 [|x3134;((let x3130 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3129 with
                            | Some x3131 ->
                                ignore
                                  (Ojs.call x3130 "push"
                                     [|(any_to_js x3131)|])
                            | None -> ());
                           x3130))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultController")
             [||])
  end
module UnderlyingSinkWriteCallback =
  struct
    type 'W t = [ `UnderlyingSinkWriteCallback of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3137 : Ojs.t) -> t_of_js __W_of_js x3137
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3135 : __W t) -> t_to_js __W_to_js x3135
    type 'W tags = [ `UnderlyingSinkWriteCallback of 'W ]
    type 'W tags_1 = 'W tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSinkWriteCallback of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3141 : Ojs.t) -> intf_of_js __tags_of_js x3141
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3139 : __tags intf) -> intf_to_js __tags_to_js x3139
    let (apply :
      ('tags, 'W) this ->
        chunk:'W -> controller:WritableStreamDefaultController.t -> unit)
      =
      fun (x3145 : ('tags, 'W) this) ->
        fun ~chunk:(x3143 : 'W) ->
          fun ~controller:(x3144 : WritableStreamDefaultController.t) ->
            ignore
              (Ojs.apply (this_to_js Obj.magic Obj.magic x3145)
                 [|(Obj.magic x3143);(WritableStreamDefaultController.t_to_js
                                        x3144)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkStartCallback =
  struct
    type t = [ `UnderlyingSinkStartCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3149 : Ojs.t) -> t_of_js x3149
    and t_0_to_js : t_0 -> Ojs.t = fun (x3148 : t) -> t_to_js x3148
    type tags = [ `UnderlyingSinkStartCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkStartCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3152 : Ojs.t) -> intf_of_js __tags_of_js x3152
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3150 : __tags intf) -> intf_to_js __tags_to_js x3150
    let (apply :
      'tags this -> controller:WritableStreamDefaultController.t -> any) =
      fun (x3155 : 'tags this) ->
        fun ~controller:(x3154 : WritableStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic x3155)
               [|(WritableStreamDefaultController.t_to_js x3154)|])
    let cast_from = Obj.magic
  end
module UnderlyingSinkCloseCallback =
  struct
    type t = [ `UnderlyingSinkCloseCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3158 : Ojs.t) -> t_of_js x3158
    and t_0_to_js : t_0 -> Ojs.t = fun (x3157 : t) -> t_to_js x3157
    type tags = [ `UnderlyingSinkCloseCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkCloseCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3161 : Ojs.t) -> intf_of_js __tags_of_js x3161
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3159 : __tags intf) -> intf_to_js __tags_to_js x3159
    let (apply : 'tags this -> unit) =
      fun (x3163 : 'tags this) ->
        ignore (Ojs.apply (this_to_js Obj.magic x3163) [||])
    let cast_from = Obj.magic
  end
module UnderlyingSinkAbortCallback =
  struct
    type t = [ `UnderlyingSinkAbortCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3166 : Ojs.t) -> t_of_js x3166
    and t_0_to_js : t_0 -> Ojs.t = fun (x3165 : t) -> t_to_js x3165
    type tags = [ `UnderlyingSinkAbortCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `UnderlyingSinkAbortCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3169 : Ojs.t) -> intf_of_js __tags_of_js x3169
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3167 : __tags intf) -> intf_to_js __tags_to_js x3167
    let (apply : 'tags this -> ?reason:any -> unit -> unit) =
      fun (x3174 : 'tags this) ->
        fun ?reason:(x3171 : any option) ->
          fun () ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3174) "apply"
                 [|Ojs.null;((let x3172 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x3171 with
                               | Some x3173 ->
                                   ignore
                                     (Ojs.call x3172 "push"
                                        [|(any_to_js x3173)|])
                               | None -> ());
                              x3172))|])
    let cast_from = Obj.magic
  end
module UnderlyingSink =
  struct
    type 'W t = [ `UnderlyingSink of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3178 : Ojs.t) -> t_of_js __W_of_js x3178
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3176 : __W t) -> t_to_js __W_to_js x3176
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3182 : Ojs.t) -> t_of_js any_of_js x3182
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3180 : any t) -> t_to_js any_to_js x3180
    type 'W tags = [ `UnderlyingSink of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `UnderlyingSink of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3186 : Ojs.t) -> intf_of_js __tags_of_js x3186
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3184 : __tags intf) -> intf_to_js __tags_to_js x3184
    let (get_abort : ('tags, 'W) this -> UnderlyingSinkAbortCallback.t) =
      fun (x3188 : ('tags, 'W) this) ->
        UnderlyingSinkAbortCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3188) "abort")
    let (set_abort :
      ('tags, 'W) this -> UnderlyingSinkAbortCallback.t -> unit) =
      fun (x3191 : ('tags, 'W) this) ->
        fun (x3192 : UnderlyingSinkAbortCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3191) "abort"
            (UnderlyingSinkAbortCallback.t_to_js x3192)
    let (get_close : ('tags, 'W) this -> UnderlyingSinkCloseCallback.t) =
      fun (x3195 : ('tags, 'W) this) ->
        UnderlyingSinkCloseCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3195) "close")
    let (set_close :
      ('tags, 'W) this -> UnderlyingSinkCloseCallback.t -> unit) =
      fun (x3198 : ('tags, 'W) this) ->
        fun (x3199 : UnderlyingSinkCloseCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3198) "close"
            (UnderlyingSinkCloseCallback.t_to_js x3199)
    let (get_start : ('tags, 'W) this -> UnderlyingSinkStartCallback.t) =
      fun (x3202 : ('tags, 'W) this) ->
        UnderlyingSinkStartCallback.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3202) "start")
    let (set_start :
      ('tags, 'W) this -> UnderlyingSinkStartCallback.t -> unit) =
      fun (x3205 : ('tags, 'W) this) ->
        fun (x3206 : UnderlyingSinkStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3205) "start"
            (UnderlyingSinkStartCallback.t_to_js x3206)
    let (get_type : ('tags, 'W) this -> never or_undefined) =
      fun (x3209 : ('tags, 'W) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3209) "type")
    let (set_type : ('tags, 'W) this -> never or_undefined -> unit) =
      fun (x3213 : ('tags, 'W) this) ->
        fun (x3214 : never or_undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3213) "type"
            (or_undefined_to_js never_to_js x3214)
    let (get_write : ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t) =
      fun (x3218 : ('tags, 'W) this) ->
        UnderlyingSinkWriteCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3218) "write")
    let (set_write :
      ('tags, 'W) this -> 'W UnderlyingSinkWriteCallback.t -> unit) =
      fun (x3222 : ('tags, 'W) this) ->
        fun (x3223 : 'W UnderlyingSinkWriteCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3222) "write"
            (UnderlyingSinkWriteCallback.t_to_js Obj.magic x3223)
    let cast_from = Obj.magic
  end
module QueuingStrategySize =
  struct
    type 'T t = [ `QueuingStrategySize of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3229 : Ojs.t) -> t_of_js __T_of_js x3229
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3227 : __T t) -> t_to_js __T_to_js x3227
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3233 : Ojs.t) -> t_of_js any_of_js x3233
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3231 : any t) -> t_to_js any_to_js x3231
    type 'T tags = [ `QueuingStrategySize of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategySize of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3237 : Ojs.t) -> intf_of_js __tags_of_js x3237
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3235 : __tags intf) -> intf_to_js __tags_to_js x3235
    let (apply : ('tags, 'T) this -> chunk:'T -> float) =
      fun (x3240 : ('tags, 'T) this) ->
        fun ~chunk:(x3239 : 'T) ->
          Ojs.float_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x3240)
               [|(Obj.magic x3239)|])
    let cast_from = Obj.magic
  end
module QueuingStrategy =
  struct
    type 'T t = [ `QueuingStrategy of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3245 : Ojs.t) -> t_of_js __T_of_js x3245
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3243 : __T t) -> t_to_js __T_to_js x3243
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3249 : Ojs.t) -> t_of_js any_of_js x3249
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3247 : any t) -> t_to_js any_to_js x3247
    type 'T tags = [ `QueuingStrategy of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `QueuingStrategy of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3253 : Ojs.t) -> intf_of_js __tags_of_js x3253
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3251 : __tags intf) -> intf_to_js __tags_to_js x3251
    let (get_highWaterMark : ('tags, 'T) this -> float) =
      fun (x3255 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3255)
             "highWaterMark")
    let (set_highWaterMark : ('tags, 'T) this -> float -> unit) =
      fun (x3258 : ('tags, 'T) this) ->
        fun (x3259 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3258)
            "highWaterMark" (Ojs.float_to_js x3259)
    let (get_size : ('tags, 'T) this -> 'T QueuingStrategySize.t) =
      fun (x3262 : ('tags, 'T) this) ->
        QueuingStrategySize.t_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3262) "size")
    let (set_size : ('tags, 'T) this -> 'T QueuingStrategySize.t -> unit) =
      fun (x3266 : ('tags, 'T) this) ->
        fun (x3267 : 'T QueuingStrategySize.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3266) "size"
            (QueuingStrategySize.t_to_js Obj.magic x3267)
    let cast_from = Obj.magic
  end
module rec
  WritableStream:sig
                   type 'W t = [ `WritableStream of 'W ] intf
                   type 'W t_1 = 'W t
                   type t_0 = any t
                   [@@@js.stop ]
                   type 'W tags = [ `WritableStream of 'W ]
                   type 'W tags_1 = 'W tags
                   type tags_0 = any tags
                   [@@@js.start ]
                   [@@@js.implem
                     type 'W tags = [ `WritableStream of 'W ]
                     type 'W tags_1 = 'W tags
                     type tags_0 = any tags]
                   type ('tags, 'W) this =
                     'tags intf constraint 'tags = [> `WritableStream of 'W ]
                   val t_to_js : ('W -> Ojs.t) -> 'W t -> Ojs.t
                   val t_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t
                   val t_1_to_js : ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                   val t_1_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_locked : ('tags, 'W) this -> bool
                   val abort :
                     ('tags, 'W) this ->
                       ?reason:any -> unit -> unit Promise.t_1
                   val close : ('tags, 'W) this -> unit Promise.t_1
                   val getWriter :
                     ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t
                   val cast_from : ('tags, 'W) this -> 'W t
                   val prototype : unit -> t_0
                   val create :
                     ?underlyingSink:'W UnderlyingSink.t ->
                       ?strategy:'W QueuingStrategy.t -> unit -> 'W t
                 end =
  struct
    type 'W t = [ `WritableStream of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3273 : Ojs.t) -> t_of_js __W_of_js x3273
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3271 : __W t) -> t_to_js __W_to_js x3271
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3277 : Ojs.t) -> t_of_js any_of_js x3277
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3275 : any t) -> t_to_js any_to_js x3275
    type 'W tags = [ `WritableStream of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `WritableStream of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3281 : Ojs.t) -> intf_of_js __tags_of_js x3281
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3279 : __tags intf) -> intf_to_js __tags_to_js x3279
    let (get_locked : ('tags, 'W) this -> bool) =
      fun (x3283 : ('tags, 'W) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3283) "locked")
    let (abort : ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1)
      =
      fun (x3289 : ('tags, 'W) this) ->
        fun ?reason:(x3286 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3292 = this_to_js Obj.magic Obj.magic x3289 in
               Ojs.call (Ojs.get_prop_ascii x3292 "abort") "apply"
                 [|x3292;((let x3287 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3286 with
                            | Some x3288 ->
                                ignore
                                  (Ojs.call x3287 "push"
                                     [|(any_to_js x3288)|])
                            | None -> ());
                           x3287))|])
    let (close : ('tags, 'W) this -> unit Promise.t_1) =
      fun (x3294 : ('tags, 'W) this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x3294) "close" [||])
    let (getWriter : ('tags, 'W) this -> 'W WritableStreamDefaultWriter.t) =
      fun (x3298 : ('tags, 'W) this) ->
        WritableStreamDefaultWriter.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x3298) "getWriter" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStream") "prototype")
    let (create :
      ?underlyingSink:'W UnderlyingSink.t ->
        ?strategy:'W QueuingStrategy.t -> unit -> 'W t)
      =
      fun ?underlyingSink:(x3302 : 'W UnderlyingSink.t option) ->
        fun ?strategy:(x3303 : 'W QueuingStrategy.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "WritableStream")
                 (let x3304 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x3302 with
                   | Some x3307 ->
                       ignore
                         (Ojs.call x3304 "push"
                            [|(UnderlyingSink.t_to_js Obj.magic x3307)|])
                   | None -> ());
                  (match x3303 with
                   | Some x3305 ->
                       ignore
                         (Ojs.call x3304 "push"
                            [|(QueuingStrategy.t_to_js Obj.magic x3305)|])
                   | None -> ());
                  x3304))
  end
 and
  WritableStreamDefaultWriter:sig
                                type 'W t =
                                  [ `WritableStreamDefaultWriter of 'W ] intf
                                type 'W t_1 = 'W t
                                type t_0 = any t
                                [@@@js.stop ]
                                type 'W tags =
                                  [ `WritableStreamDefaultWriter of 'W ]
                                type 'W tags_1 = 'W tags
                                type tags_0 = any tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type 'W tags =
                                    [ `WritableStreamDefaultWriter of 'W ]
                                  type 'W tags_1 = 'W tags
                                  type tags_0 = any tags]
                                type ('tags, 'W) this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `WritableStreamDefaultWriter
                                                  of 'W ]
                                val t_to_js : ('W -> Ojs.t) -> 'W t -> Ojs.t
                                val t_of_js : (Ojs.t -> 'W) -> Ojs.t -> 'W t
                                val t_1_to_js :
                                  ('W -> Ojs.t) -> 'W t_1 -> Ojs.t
                                val t_1_of_js :
                                  (Ojs.t -> 'W) -> Ojs.t -> 'W t_1
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val get_closed :
                                  ('tags, 'W) this ->
                                    never or_undefined Promise.t_1
                                val get_desiredSize :
                                  ('tags, 'W) this -> float or_null
                                val get_ready :
                                  ('tags, 'W) this ->
                                    never or_undefined Promise.t_1
                                val abort :
                                  ('tags, 'W) this ->
                                    ?reason:any -> unit -> unit Promise.t_1
                                val close :
                                  ('tags, 'W) this -> unit Promise.t_1
                                val releaseLock : ('tags, 'W) this -> unit
                                val write :
                                  ('tags, 'W) this ->
                                    ?chunk:'W -> unit -> unit Promise.t_1
                                val cast_from : ('tags, 'W) this -> 'W t
                                val prototype : unit -> t_0
                                val create : 'W WritableStream.t -> 'W t
                              end =
  struct
    type 'W t = [ `WritableStreamDefaultWriter of 'W ] intf
    let rec t_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t =
      fun _W -> Obj.magic
    and t_to_js : 'W . ('W -> Ojs.t) -> 'W t -> Ojs.t = fun _W -> Obj.magic
    type 'W t_1 = 'W t
    let rec t_1_of_js : 'W . (Ojs.t -> 'W) -> Ojs.t -> 'W t_1 = fun (type
      __W) ->
      fun (__W_of_js : Ojs.t -> __W) ->
        fun (x3312 : Ojs.t) -> t_of_js __W_of_js x3312
    and t_1_to_js : 'W . ('W -> Ojs.t) -> 'W t_1 -> Ojs.t = fun (type __W) ->
      fun (__W_to_js : __W -> Ojs.t) ->
        fun (x3310 : __W t) -> t_to_js __W_to_js x3310
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3316 : Ojs.t) -> t_of_js any_of_js x3316
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3314 : any t) -> t_to_js any_to_js x3314
    type 'W tags = [ `WritableStreamDefaultWriter of 'W ]
    type 'W tags_1 = 'W tags
    type tags_0 = any tags
    type ('tags, 'W) this =
      'tags intf constraint 'tags = [> `WritableStreamDefaultWriter of 'W ]
    let rec this_of_js :
      'tags 'W .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'W) this
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__W_of_js : Ojs.t -> __W) ->
          fun (x3320 : Ojs.t) -> intf_of_js __tags_of_js x3320
    and this_to_js :
      'tags 'W .
        ('tags -> Ojs.t) -> ('W -> Ojs.t) -> ('tags, 'W) this -> Ojs.t
      = fun (type __tags) -> fun (type __W) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__W_to_js : __W -> Ojs.t) ->
          fun (x3318 : __tags intf) -> intf_to_js __tags_to_js x3318
    let (get_closed : ('tags, 'W) this -> never or_undefined Promise.t_1) =
      fun (x3322 : ('tags, 'W) this) ->
        Promise.t_1_of_js
          (fun (x3325 : Ojs.t) -> or_undefined_of_js never_of_js x3325)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3322) "closed")
    let (get_desiredSize : ('tags, 'W) this -> float or_null) =
      fun (x3327 : ('tags, 'W) this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3327)
             "desiredSize")
    let (get_ready : ('tags, 'W) this -> never or_undefined Promise.t_1) =
      fun (x3331 : ('tags, 'W) this) ->
        Promise.t_1_of_js
          (fun (x3334 : Ojs.t) -> or_undefined_of_js never_of_js x3334)
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3331) "ready")
    let (abort : ('tags, 'W) this -> ?reason:any -> unit -> unit Promise.t_1)
      =
      fun (x3339 : ('tags, 'W) this) ->
        fun ?reason:(x3336 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3342 = this_to_js Obj.magic Obj.magic x3339 in
               Ojs.call (Ojs.get_prop_ascii x3342 "abort") "apply"
                 [|x3342;((let x3337 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3336 with
                            | Some x3338 ->
                                ignore
                                  (Ojs.call x3337 "push"
                                     [|(any_to_js x3338)|])
                            | None -> ());
                           x3337))|])
    let (close : ('tags, 'W) this -> unit Promise.t_1) =
      fun (x3344 : ('tags, 'W) this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic Obj.magic x3344) "close" [||])
    let (releaseLock : ('tags, 'W) this -> unit) =
      fun (x3348 : ('tags, 'W) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x3348) "releaseLock" [||])
    let (write : ('tags, 'W) this -> ?chunk:'W -> unit -> unit Promise.t_1) =
      fun (x3354 : ('tags, 'W) this) ->
        fun ?chunk:(x3351 : 'W option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3357 = this_to_js Obj.magic Obj.magic x3354 in
               Ojs.call (Ojs.get_prop_ascii x3357 "write") "apply"
                 [|x3357;((let x3352 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3351 with
                            | Some x3353 ->
                                ignore
                                  (Ojs.call x3352 "push"
                                     [|(Obj.magic x3353)|])
                            | None -> ());
                           x3352))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultWriter")
             "prototype")
    let (create : 'W WritableStream.t -> 'W t) =
      fun (x3359 : 'W WritableStream.t) ->
        t_of_js Obj.magic
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WritableStreamDefaultWriter")
             [|(WritableStream.t_to_js Obj.magic x3359)|])
  end
module ReadableStreamGenericReader =
  struct
    type t = [ `ReadableStreamGenericReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3363 : Ojs.t) -> t_of_js x3363
    and t_0_to_js : t_0 -> Ojs.t = fun (x3362 : t) -> t_to_js x3362
    type tags = [ `ReadableStreamGenericReader ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamGenericReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3366 : Ojs.t) -> intf_of_js __tags_of_js x3366
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3364 : __tags intf) -> intf_to_js __tags_to_js x3364
    let (get_closed : 'tags this -> never or_undefined Promise.t_1) =
      fun (x3368 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x3370 : Ojs.t) -> or_undefined_of_js never_of_js x3370)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3368) "closed")
    let (cancel : 'tags this -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x3375 : 'tags this) ->
        fun ?reason:(x3372 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3377 = this_to_js Obj.magic x3375 in
               Ojs.call (Ojs.get_prop_ascii x3377 "cancel") "apply"
                 [|x3377;((let x3373 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3372 with
                            | Some x3374 ->
                                ignore
                                  (Ojs.call x3373 "push"
                                     [|(any_to_js x3374)|])
                            | None -> ());
                           x3373))|])
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadValueResult =
  struct
    type 'T t = [ `ReadableStreamDefaultReadValueResult of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3381 : Ojs.t) -> t_of_js __T_of_js x3381
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3379 : __T t) -> t_to_js __T_to_js x3379
    type 'T tags = [ `ReadableStreamDefaultReadValueResult of 'T ]
    type 'T tags_1 = 'T tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags =
                  [> `ReadableStreamDefaultReadValueResult of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x3385 : Ojs.t) -> intf_of_js __tags_of_js x3385
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x3383 : __tags intf) -> intf_to_js __tags_to_js x3383
    let (get_done : ('tags, 'T) this -> [ `L_b_false ]) =
      fun (x3387 : ('tags, 'T) this) ->
        let x3390 =
          Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3387) "done" in
        match Ojs.bool_of_js x3390 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_done : ('tags, 'T) this -> [ `L_b_false ] -> unit) =
      fun (x3391 : ('tags, 'T) this) ->
        fun (x3392 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3391) "done"
            (match x3392 with | `L_b_false -> Ojs.bool_to_js false)
    let (get_value : ('tags, 'T) this -> 'T) =
      fun (x3395 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3395) "value")
    let (set_value : ('tags, 'T) this -> 'T -> unit) =
      fun (x3398 : ('tags, 'T) this) ->
        fun (x3399 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x3398) "value"
            (Obj.magic x3399)
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadDoneResult =
  struct
    type t = [ `ReadableStreamDefaultReadDoneResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3403 : Ojs.t) -> t_of_js x3403
    and t_0_to_js : t_0 -> Ojs.t = fun (x3402 : t) -> t_to_js x3402
    type tags = [ `ReadableStreamDefaultReadDoneResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ReadableStreamDefaultReadDoneResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3406 : Ojs.t) -> intf_of_js __tags_of_js x3406
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3404 : __tags intf) -> intf_to_js __tags_to_js x3404
    let (get_done : 'tags this -> [ `L_b_true ]) =
      fun (x3408 : 'tags this) ->
        let x3410 = Ojs.get_prop_ascii (this_to_js Obj.magic x3408) "done" in
        match Ojs.bool_of_js x3410 with
        | true -> `L_b_true
        | _ -> assert false
    let (set_done : 'tags this -> [ `L_b_true ] -> unit) =
      fun (x3411 : 'tags this) ->
        fun (x3412 : [ `L_b_true ]) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3411) "done"
            (match x3412 with | `L_b_true -> Ojs.bool_to_js true)
    let (get_value : 'tags this -> never or_undefined) =
      fun (x3414 : 'tags this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3414) "value")
    let (set_value : 'tags this -> never or_undefined -> unit) =
      fun (x3417 : 'tags this) ->
        fun (x3418 : never or_undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3417) "value"
            (or_undefined_to_js never_to_js x3418)
    let cast_from = Obj.magic
  end
module ReadableStreamDefaultReadResult =
  struct
    type 'T t =
      [ `U_b_false of 'T ReadableStreamDefaultReadValueResult.t 
      | `U_b_true of ReadableStreamDefaultReadDoneResult.t ]
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3425 : Ojs.t) ->
          let x3426 = x3425 in
          match Ojs.bool_of_js (Ojs.get_prop_ascii x3426 "done") with
          | false ->
              `U_b_false
                (ReadableStreamDefaultReadValueResult.t_of_js __T_of_js x3426)
          | true ->
              `U_b_true (ReadableStreamDefaultReadDoneResult.t_of_js x3426)
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun
          (x3421 :
            [ `U_b_false of __T ReadableStreamDefaultReadValueResult.t 
            | `U_b_true of ReadableStreamDefaultReadDoneResult.t ])
          ->
          match x3421 with
          | `U_b_false x3422 ->
              ReadableStreamDefaultReadValueResult.t_to_js __T_to_js x3422
          | `U_b_true x3424 ->
              ReadableStreamDefaultReadDoneResult.t_to_js x3424
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x3430 : Ojs.t) -> t_of_js __T_of_js x3430
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x3428 : __T t) -> t_to_js __T_to_js x3428
  end
module rec
  ReadableStream:sig
                   type 'R t = [ `ReadableStream of 'R ] intf
                   type 'R t_1 = 'R t
                   type t_0 = any t
                   [@@@js.stop ]
                   type 'R tags = [ `ReadableStream of 'R ]
                   type 'R tags_1 = 'R tags
                   type tags_0 = any tags
                   [@@@js.start ]
                   [@@@js.implem
                     type 'R tags = [ `ReadableStream of 'R ]
                     type 'R tags_1 = 'R tags
                     type tags_0 = any tags]
                   type ('tags, 'R) this =
                     'tags intf constraint 'tags = [> `ReadableStream of 'R ]
                   val t_to_js : ('R -> Ojs.t) -> 'R t -> Ojs.t
                   val t_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t
                   val t_1_to_js : ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                   val t_1_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_locked : ('tags, 'R) this -> bool
                   val cancel :
                     ('tags, 'R) this ->
                       ?reason:any -> unit -> unit Promise.t_1
                   val getReader :
                     ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t
                   val pipeThrough :
                     ('tags, 'R) this ->
                       transform:('T, 'R) ReadableWritablePair.t ->
                         ?options:StreamPipeOptions.t -> unit -> 'T t
                   val pipeTo :
                     ('tags, 'R) this ->
                       destination:'R WritableStream.t ->
                         ?options:StreamPipeOptions.t ->
                           unit -> unit Promise.t_1
                   val tee : ('tags, 'R) this -> ('R t * 'R t)
                   val cast_from : ('tags, 'R) this -> 'R t
                   val prototype : unit -> t_0
                   val create :
                     ?underlyingSource:'R UnderlyingSource.t ->
                       ?strategy:'R QueuingStrategy.t -> unit -> 'R t
                 end =
  struct
    type 'R t = [ `ReadableStream of 'R ] intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3434 : Ojs.t) -> t_of_js __R_of_js x3434
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3432 : __R t) -> t_to_js __R_to_js x3432
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3438 : Ojs.t) -> t_of_js any_of_js x3438
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3436 : any t) -> t_to_js any_to_js x3436
    type 'R tags = [ `ReadableStream of 'R ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `ReadableStream of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3442 : Ojs.t) -> intf_of_js __tags_of_js x3442
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3440 : __tags intf) -> intf_to_js __tags_to_js x3440
    let (get_locked : ('tags, 'R) this -> bool) =
      fun (x3444 : ('tags, 'R) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x3444) "locked")
    let (cancel :
      ('tags, 'R) this -> ?reason:any -> unit -> unit Promise.t_1) =
      fun (x3450 : ('tags, 'R) this) ->
        fun ?reason:(x3447 : any option) ->
          fun () ->
            Promise.t_1_of_js Ojs.unit_of_js
              (let x3453 = this_to_js Obj.magic Obj.magic x3450 in
               Ojs.call (Ojs.get_prop_ascii x3453 "cancel") "apply"
                 [|x3453;((let x3448 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x3447 with
                            | Some x3449 ->
                                ignore
                                  (Ojs.call x3448 "push"
                                     [|(any_to_js x3449)|])
                            | None -> ());
                           x3448))|])
    let (getReader : ('tags, 'R) this -> 'R ReadableStreamDefaultReader.t) =
      fun (x3455 : ('tags, 'R) this) ->
        ReadableStreamDefaultReader.t_of_js Obj.magic
          (Ojs.call (this_to_js Obj.magic Obj.magic x3455) "getReader" [||])
    let (pipeThrough :
      ('tags, 'R) this ->
        transform:('T, 'R) ReadableWritablePair.t ->
          ?options:StreamPipeOptions.t -> unit -> 'T t)
      =
      fun (x3465 : ('tags, 'R) this) ->
        fun ~transform:(x3459 : ('T, 'R) ReadableWritablePair.t) ->
          fun ?options:(x3460 : StreamPipeOptions.t option) ->
            fun () ->
              t_of_js Obj.magic
                (let x3468 = this_to_js Obj.magic Obj.magic x3465 in
                 Ojs.call (Ojs.get_prop_ascii x3468 "pipeThrough") "apply"
                   [|x3468;((let x3461 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3461 "push"
                                  [|(ReadableWritablePair.t_to_js Obj.magic
                                       Obj.magic x3459)|]);
                             (match x3460 with
                              | Some x3462 ->
                                  ignore
                                    (Ojs.call x3461 "push"
                                       [|(StreamPipeOptions.t_to_js x3462)|])
                              | None -> ());
                             x3461))|])
    let (pipeTo :
      ('tags, 'R) this ->
        destination:'R WritableStream.t ->
          ?options:StreamPipeOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x3475 : ('tags, 'R) this) ->
        fun ~destination:(x3470 : 'R WritableStream.t) ->
          fun ?options:(x3471 : StreamPipeOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x3478 = this_to_js Obj.magic Obj.magic x3475 in
                 Ojs.call (Ojs.get_prop_ascii x3478 "pipeTo") "apply"
                   [|x3478;((let x3472 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3472 "push"
                                  [|(WritableStream.t_to_js Obj.magic x3470)|]);
                             (match x3471 with
                              | Some x3473 ->
                                  ignore
                                    (Ojs.call x3472 "push"
                                       [|(StreamPipeOptions.t_to_js x3473)|])
                              | None -> ());
                             x3472))|])
    let (tee : ('tags, 'R) this -> ('R t * 'R t)) =
      fun (x3480 : ('tags, 'R) this) ->
        let x3483 =
          Ojs.call (this_to_js Obj.magic Obj.magic x3480) "tee" [||] in
        ((t_of_js Obj.magic (Ojs.array_get x3483 0)),
          (t_of_js Obj.magic (Ojs.array_get x3483 1)))
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStream") "prototype")
    let (create :
      ?underlyingSource:'R UnderlyingSource.t ->
        ?strategy:'R QueuingStrategy.t -> unit -> 'R t)
      =
      fun ?underlyingSource:(x3486 : 'R UnderlyingSource.t option) ->
        fun ?strategy:(x3487 : 'R QueuingStrategy.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ReadableStream")
                 (let x3488 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x3486 with
                   | Some x3491 ->
                       ignore
                         (Ojs.call x3488 "push"
                            [|(UnderlyingSource.t_to_js Obj.magic x3491)|])
                   | None -> ());
                  (match x3487 with
                   | Some x3489 ->
                       ignore
                         (Ojs.call x3488 "push"
                            [|(QueuingStrategy.t_to_js Obj.magic x3489)|])
                   | None -> ());
                  x3488))
  end
 and
  ReadableStreamDefaultReader:sig
                                type 'R t =
                                  [ `ReadableStreamDefaultReader of 'R 
                                  | `ReadableStreamGenericReader ] intf
                                type 'R t_1 = 'R t
                                type t_0 = any t
                                [@@@js.stop ]
                                type 'R tags =
                                  [ `ReadableStreamDefaultReader of 'R 
                                  | `ReadableStreamGenericReader ]
                                type 'R tags_1 = 'R tags
                                type tags_0 = any tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type 'R tags =
                                    [ `ReadableStreamDefaultReader of 'R 
                                    | `ReadableStreamGenericReader ]
                                  type 'R tags_1 = 'R tags
                                  type tags_0 = any tags]
                                type ('tags, 'R) this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `ReadableStreamDefaultReader
                                                  of 'R ]
                                val t_to_js : ('R -> Ojs.t) -> 'R t -> Ojs.t
                                val t_of_js : (Ojs.t -> 'R) -> Ojs.t -> 'R t
                                val t_1_to_js :
                                  ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                                val t_1_of_js :
                                  (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val read :
                                  ('tags, 'R) this ->
                                    'R ReadableStreamDefaultReadResult.t
                                      Promise.t_1
                                val releaseLock : ('tags, 'R) this -> unit
                                val cast_from : ('tags, 'R) this -> 'R t
                                val prototype : unit -> t_0
                                val create : 'R ReadableStream.t -> 'R t
                              end =
  struct
    type 'R t =
      [ `ReadableStreamDefaultReader of 'R  | `ReadableStreamGenericReader ]
        intf
    let rec t_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t =
      fun _R -> Obj.magic
    and t_to_js : 'R . ('R -> Ojs.t) -> 'R t -> Ojs.t = fun _R -> Obj.magic
    type 'R t_1 = 'R t
    let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun (type
      __R) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (x3496 : Ojs.t) -> t_of_js __R_of_js x3496
    and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type __R) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (x3494 : __R t) -> t_to_js __R_to_js x3494
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x3500 : Ojs.t) -> t_of_js any_of_js x3500
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x3498 : any t) -> t_to_js any_to_js x3498
    type 'R tags =
      [ `ReadableStreamDefaultReader of 'R  | `ReadableStreamGenericReader ]
    type 'R tags_1 = 'R tags
    type tags_0 = any tags
    type ('tags, 'R) this =
      'tags intf constraint 'tags = [> `ReadableStreamDefaultReader of 'R ]
    let rec this_of_js :
      'tags 'R .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'R) -> Ojs.t -> ('tags, 'R) this
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (x3504 : Ojs.t) -> intf_of_js __tags_of_js x3504
    and this_to_js :
      'tags 'R .
        ('tags -> Ojs.t) -> ('R -> Ojs.t) -> ('tags, 'R) this -> Ojs.t
      = fun (type __tags) -> fun (type __R) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (x3502 : __tags intf) -> intf_to_js __tags_to_js x3502
    let (read :
      ('tags, 'R) this -> 'R ReadableStreamDefaultReadResult.t Promise.t_1) =
      fun (x3506 : ('tags, 'R) this) ->
        Promise.t_1_of_js
          (fun (x3509 : Ojs.t) ->
             ReadableStreamDefaultReadResult.t_of_js Obj.magic x3509)
          (Ojs.call (this_to_js Obj.magic Obj.magic x3506) "read" [||])
    let (releaseLock : ('tags, 'R) this -> unit) =
      fun (x3511 : ('tags, 'R) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x3511) "releaseLock" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultReader")
             "prototype")
    let (create : 'R ReadableStream.t -> 'R t) =
      fun (x3514 : 'R ReadableStream.t) ->
        t_of_js Obj.magic
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ReadableStreamDefaultReader")
             [|(ReadableStream.t_to_js Obj.magic x3514)|])
  end and
       ReadableWritablePair:sig
                              type ('R, 'W) t =
                                [ `ReadableWritablePair of ('R * 'W) ] intf
                              type ('R, 'W) t_2 = ('R, 'W) t
                              type 'R t_1 = ('R, any) t
                              type t_0 = (any, any) t
                              [@@@js.stop ]
                              type ('R, 'W) tags =
                                [ `ReadableWritablePair of ('R * 'W) ]
                              type ('R, 'W) tags_2 = ('R, 'W) tags
                              type 'R tags_1 = ('R, any) tags
                              type tags_0 = (any, any) tags
                              [@@@js.start ]
                              [@@@js.implem
                                type ('R, 'W) tags =
                                  [ `ReadableWritablePair of ('R * 'W) ]
                                type ('R, 'W) tags_2 = ('R, 'W) tags
                                type 'R tags_1 = ('R, any) tags
                                type tags_0 = (any, any) tags]
                              type ('tags, 'R, 'W) this =
                                'tags intf constraint 'tags =
                                            [>
                                              `ReadableWritablePair of
                                                ('R * 'W) ]
                              val t_to_js :
                                ('R -> Ojs.t) ->
                                  ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t
                              val t_of_js :
                                (Ojs.t -> 'R) ->
                                  (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t
                              val t_2_to_js :
                                ('R -> Ojs.t) ->
                                  ('W -> Ojs.t) -> ('R, 'W) t_2 -> Ojs.t
                              val t_2_of_js :
                                (Ojs.t -> 'R) ->
                                  (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t_2
                              val t_1_to_js :
                                ('R -> Ojs.t) -> 'R t_1 -> Ojs.t
                              val t_1_of_js :
                                (Ojs.t -> 'R) -> Ojs.t -> 'R t_1
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_readable :
                                ('tags, 'R, 'W) this -> 'R ReadableStream.t
                              val set_readable :
                                ('tags, 'R, 'W) this ->
                                  'R ReadableStream.t -> unit
                              val get_writable :
                                ('tags, 'R, 'W) this -> 'W WritableStream.t
                              val set_writable :
                                ('tags, 'R, 'W) this ->
                                  'W WritableStream.t -> unit
                              val cast_from :
                                ('tags, 'R, 'W) this -> ('R, 'W) t
                            end =
       struct
         type ('R, 'W) t = [ `ReadableWritablePair of ('R * 'W) ] intf
         let rec t_of_js :
           'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t =
           fun _R -> fun _W -> Obj.magic
         and t_to_js :
           'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t -> Ojs.t =
           fun _R -> fun _W -> Obj.magic
         type ('R, 'W) t_2 = ('R, 'W) t
         let rec t_2_of_js :
           'R 'W . (Ojs.t -> 'R) -> (Ojs.t -> 'W) -> Ojs.t -> ('R, 'W) t_2 =
           fun (type __R) -> fun (type __W) ->
           fun (__R_of_js : Ojs.t -> __R) ->
             fun (__W_of_js : Ojs.t -> __W) ->
               fun (x3520 : Ojs.t) -> t_of_js __R_of_js __W_of_js x3520
         and t_2_to_js :
           'R 'W . ('R -> Ojs.t) -> ('W -> Ojs.t) -> ('R, 'W) t_2 -> Ojs.t =
           fun (type __R) -> fun (type __W) ->
           fun (__R_to_js : __R -> Ojs.t) ->
             fun (__W_to_js : __W -> Ojs.t) ->
               fun (x3517 : (__R, __W) t) ->
                 t_to_js __R_to_js __W_to_js x3517
         type 'R t_1 = ('R, any) t
         let rec t_1_of_js : 'R . (Ojs.t -> 'R) -> Ojs.t -> 'R t_1 = fun
           (type __R) ->
           fun (__R_of_js : Ojs.t -> __R) ->
             fun (x3526 : Ojs.t) -> t_of_js __R_of_js any_of_js x3526
         and t_1_to_js : 'R . ('R -> Ojs.t) -> 'R t_1 -> Ojs.t = fun (type
           __R) ->
           fun (__R_to_js : __R -> Ojs.t) ->
             fun (x3523 : (__R, any) t) -> t_to_js __R_to_js any_to_js x3523
         type t_0 = (any, any) t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x3532 : Ojs.t) -> t_of_js any_of_js any_of_js x3532
         and t_0_to_js : t_0 -> Ojs.t =
           fun (x3529 : (any, any) t) -> t_to_js any_to_js any_to_js x3529
         type ('R, 'W) tags = [ `ReadableWritablePair of ('R * 'W) ]
         type ('R, 'W) tags_2 = ('R, 'W) tags
         type 'R tags_1 = ('R, any) tags
         type tags_0 = (any, any) tags
         type ('tags, 'R, 'W) this =
           'tags intf constraint 'tags =
                       [> `ReadableWritablePair of ('R * 'W) ]
         let rec this_of_js :
           'tags 'R 'W .
             (Ojs.t -> 'tags) ->
               (Ojs.t -> 'R) ->
                 (Ojs.t -> 'W) -> Ojs.t -> ('tags, 'R, 'W) this
           = fun (type __tags) -> fun (type __R) -> fun (type __W) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (__R_of_js : Ojs.t -> __R) ->
               fun (__W_of_js : Ojs.t -> __W) ->
                 fun (x3537 : Ojs.t) -> intf_of_js __tags_of_js x3537
         and this_to_js :
           'tags 'R 'W .
             ('tags -> Ojs.t) ->
               ('R -> Ojs.t) ->
                 ('W -> Ojs.t) -> ('tags, 'R, 'W) this -> Ojs.t
           = fun (type __tags) -> fun (type __R) -> fun (type __W) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (__R_to_js : __R -> Ojs.t) ->
               fun (__W_to_js : __W -> Ojs.t) ->
                 fun (x3535 : __tags intf) -> intf_to_js __tags_to_js x3535
         let (get_readable : ('tags, 'R, 'W) this -> 'R ReadableStream.t) =
           fun (x3539 : ('tags, 'R, 'W) this) ->
             ReadableStream.t_of_js Obj.magic
               (Ojs.get_prop_ascii
                  (this_to_js Obj.magic Obj.magic Obj.magic x3539) "readable")
         let (set_readable :
           ('tags, 'R, 'W) this -> 'R ReadableStream.t -> unit) =
           fun (x3544 : ('tags, 'R, 'W) this) ->
             fun (x3545 : 'R ReadableStream.t) ->
               Ojs.set_prop_ascii
                 (this_to_js Obj.magic Obj.magic Obj.magic x3544) "readable"
                 (ReadableStream.t_to_js Obj.magic x3545)
         let (get_writable : ('tags, 'R, 'W) this -> 'W WritableStream.t) =
           fun (x3550 : ('tags, 'R, 'W) this) ->
             WritableStream.t_of_js Obj.magic
               (Ojs.get_prop_ascii
                  (this_to_js Obj.magic Obj.magic Obj.magic x3550) "writable")
         let (set_writable :
           ('tags, 'R, 'W) this -> 'W WritableStream.t -> unit) =
           fun (x3555 : ('tags, 'R, 'W) this) ->
             fun (x3556 : 'W WritableStream.t) ->
               Ojs.set_prop_ascii
                 (this_to_js Obj.magic Obj.magic Obj.magic x3555) "writable"
                 (WritableStream.t_to_js Obj.magic x3556)
         let cast_from = Obj.magic
       end
module EndingType =
  struct
    type t = [ `L_s118_native  | `L_s194_transparent ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3562 : Ojs.t) ->
        let x3563 = x3562 in
        match Ojs.string_of_js x3563 with
        | "native" -> `L_s118_native
        | "transparent" -> `L_s194_transparent
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x3561 : [ `L_s118_native  | `L_s194_transparent ]) ->
        match x3561 with
        | `L_s118_native -> Ojs.string_to_js "native"
        | `L_s194_transparent -> Ojs.string_to_js "transparent"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3565 : Ojs.t) -> t_of_js x3565
    and t_0_to_js : t_0 -> Ojs.t = fun (x3564 : t) -> t_to_js x3564
  end
module BlobPropertyBag =
  struct
    type t = [ `BlobPropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3567 : Ojs.t) -> t_of_js x3567
    and t_0_to_js : t_0 -> Ojs.t = fun (x3566 : t) -> t_to_js x3566
    type tags = [ `BlobPropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BlobPropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3570 : Ojs.t) -> intf_of_js __tags_of_js x3570
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3568 : __tags intf) -> intf_to_js __tags_to_js x3568
    let (get_endings : 'tags this -> EndingType.t) =
      fun (x3572 : 'tags this) ->
        EndingType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3572) "endings")
    let (set_endings : 'tags this -> EndingType.t -> unit) =
      fun (x3574 : 'tags this) ->
        fun (x3575 : EndingType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3574) "endings"
            (EndingType.t_to_js x3575)
    let (get_type : 'tags this -> string) =
      fun (x3577 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3577) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x3579 : 'tags this) ->
        fun (x3580 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3579) "type"
            (Ojs.string_to_js x3580)
    let cast_from = Obj.magic
  end
module rec
  Blob:sig
         type t = [ `Blob ] intf
         type t_0 = t
         [@@@js.stop ]
         type tags = [ `Blob ]
         type tags_0 = tags
         [@@@js.start ]
         [@@@js.implem type tags = [ `Blob ]
           type tags_0 = tags]
         type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
         val t_to_js : t -> Ojs.t
         val t_of_js : Ojs.t -> t
         val t_0_to_js : t_0 -> Ojs.t
         val t_0_of_js : Ojs.t -> t_0
         val get_size : 'tags this -> float
         val get_type : 'tags this -> string
         val arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1
         val slice :
           'tags this ->
             ?start:float -> ?end_:float -> ?contentType:string -> unit -> t
         val stream : 'tags this -> ReadableStream.t_0
         val text : 'tags this -> string Promise.t_1
         val cast_from : 'tags this -> t
         val prototype : unit -> t
         val create :
           ?blobParts:BlobPart.t list ->
             ?options:BlobPropertyBag.t -> unit -> t
       end =
  struct
    type t = [ `Blob ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3583 : Ojs.t) -> t_of_js x3583
    and t_0_to_js : t_0 -> Ojs.t = fun (x3582 : t) -> t_to_js x3582
    type tags = [ `Blob ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Blob ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3586 : Ojs.t) -> intf_of_js __tags_of_js x3586
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3584 : __tags intf) -> intf_to_js __tags_to_js x3584
    let (get_size : 'tags this -> float) =
      fun (x3588 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3588) "size")
    let (get_type : 'tags this -> string) =
      fun (x3590 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3590) "type")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x3592 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x3592) "arrayBuffer" [||])
    let (slice :
      'tags this ->
        ?start:float -> ?end_:float -> ?contentType:string -> unit -> t)
      =
      fun (x3602 : 'tags this) ->
        fun ?start:(x3595 : float option) ->
          fun ?end_:(x3596 : float option) ->
            fun ?contentType:(x3597 : string option) ->
              fun () ->
                t_of_js
                  (let x3604 = this_to_js Obj.magic x3602 in
                   Ojs.call (Ojs.get_prop_ascii x3604 "slice") "apply"
                     [|x3604;((let x3598 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x3595 with
                                | Some x3601 ->
                                    ignore
                                      (Ojs.call x3598 "push"
                                         [|(Ojs.float_to_js x3601)|])
                                | None -> ());
                               (match x3596 with
                                | Some x3600 ->
                                    ignore
                                      (Ojs.call x3598 "push"
                                         [|(Ojs.float_to_js x3600)|])
                                | None -> ());
                               (match x3597 with
                                | Some x3599 ->
                                    ignore
                                      (Ojs.call x3598 "push"
                                         [|(Ojs.string_to_js x3599)|])
                                | None -> ());
                               x3598))|])
    let (stream : 'tags this -> ReadableStream.t_0) =
      fun (x3605 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x3605) "stream" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x3607 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3607) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Blob")
             "prototype")
    let (create :
      ?blobParts:BlobPart.t list -> ?options:BlobPropertyBag.t -> unit -> t)
      =
      fun ?blobParts:(x3610 : BlobPart.t list option) ->
        fun ?options:(x3611 : BlobPropertyBag.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Blob")
                 (let x3612 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x3610 with
                   | Some x3614 ->
                       ignore
                         (Ojs.call x3612 "push"
                            [|(Ojs.list_to_js BlobPart.t_to_js x3614)|])
                   | None -> ());
                  (match x3611 with
                   | Some x3613 ->
                       ignore
                         (Ojs.call x3612 "push"
                            [|(BlobPropertyBag.t_to_js x3613)|])
                   | None -> ());
                  x3612))
  end
 and
  BlobPart:sig
             type t = Blob.t or_string
             type t_0 = t
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
           end =
  struct
    type t = Blob.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x3618 : Ojs.t) -> or_string_of_js Blob.t_of_js x3618
    and t_to_js : t -> Ojs.t =
      fun (x3616 : Blob.t or_string) -> or_string_to_js Blob.t_to_js x3616
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3621 : Ojs.t) -> t_of_js x3621
    and t_0_to_js : t_0 -> Ojs.t = fun (x3620 : t) -> t_to_js x3620
  end
module URL =
  struct
    type t = [ `URL ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3623 : Ojs.t) -> t_of_js x3623
    and t_0_to_js : t_0 -> Ojs.t = fun (x3622 : t) -> t_to_js x3622
    type tags = [ `URL ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `URL ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3626 : Ojs.t) -> intf_of_js __tags_of_js x3626
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3624 : __tags intf) -> intf_to_js __tags_to_js x3624
    let (get_hash : 'tags this -> string) =
      fun (x3628 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3628) "hash")
    let (set_hash : 'tags this -> string -> unit) =
      fun (x3630 : 'tags this) ->
        fun (x3631 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3630) "hash"
            (Ojs.string_to_js x3631)
    let (get_host : 'tags this -> string) =
      fun (x3633 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3633) "host")
    let (set_host : 'tags this -> string -> unit) =
      fun (x3635 : 'tags this) ->
        fun (x3636 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3635) "host"
            (Ojs.string_to_js x3636)
    let (get_hostname : 'tags this -> string) =
      fun (x3638 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3638) "hostname")
    let (set_hostname : 'tags this -> string -> unit) =
      fun (x3640 : 'tags this) ->
        fun (x3641 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3640) "hostname"
            (Ojs.string_to_js x3641)
    let (get_href : 'tags this -> string) =
      fun (x3643 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3643) "href")
    let (set_href : 'tags this -> string -> unit) =
      fun (x3645 : 'tags this) ->
        fun (x3646 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3645) "href"
            (Ojs.string_to_js x3646)
    let (toString : 'tags this -> string) =
      fun (x3648 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3648) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x3650 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3650) "origin")
    let (get_password : 'tags this -> string) =
      fun (x3652 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3652) "password")
    let (set_password : 'tags this -> string -> unit) =
      fun (x3654 : 'tags this) ->
        fun (x3655 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3654) "password"
            (Ojs.string_to_js x3655)
    let (get_pathname : 'tags this -> string) =
      fun (x3657 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3657) "pathname")
    let (set_pathname : 'tags this -> string -> unit) =
      fun (x3659 : 'tags this) ->
        fun (x3660 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3659) "pathname"
            (Ojs.string_to_js x3660)
    let (get_port : 'tags this -> string) =
      fun (x3662 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3662) "port")
    let (set_port : 'tags this -> string -> unit) =
      fun (x3664 : 'tags this) ->
        fun (x3665 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3664) "port"
            (Ojs.string_to_js x3665)
    let (get_protocol : 'tags this -> string) =
      fun (x3667 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3667) "protocol")
    let (set_protocol : 'tags this -> string -> unit) =
      fun (x3669 : 'tags this) ->
        fun (x3670 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3669) "protocol"
            (Ojs.string_to_js x3670)
    let (get_search : 'tags this -> string) =
      fun (x3672 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3672) "search")
    let (set_search : 'tags this -> string -> unit) =
      fun (x3674 : 'tags this) ->
        fun (x3675 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3674) "search"
            (Ojs.string_to_js x3675)
    let (get_searchParams : 'tags this -> URLSearchParams.t) =
      fun (x3677 : 'tags this) ->
        URLSearchParams.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3677) "searchParams")
    let (get_username : 'tags this -> string) =
      fun (x3679 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3679) "username")
    let (set_username : 'tags this -> string -> unit) =
      fun (x3681 : 'tags this) ->
        fun (x3682 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3681) "username"
            (Ojs.string_to_js x3682)
    let (toJSON : 'tags this -> string) =
      fun (x3684 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3684) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "URL")
             "prototype")
    let (create : url:t or_string -> ?base:t or_string -> unit -> t) =
      fun ~url:(x3686 : t or_string) ->
        fun ?base:(x3687 : t or_string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "URL")
                 (let x3688 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x3688 "push"
                       [|(or_string_to_js t_to_js x3686)|]);
                  (match x3687 with
                   | Some x3689 ->
                       ignore
                         (Ojs.call x3688 "push"
                            [|(or_string_to_js t_to_js x3689)|])
                   | None -> ());
                  x3688))
    let (createObjectURL : Blob.t -> string) =
      fun (x3692 : Blob.t) ->
        Ojs.string_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "createObjectURL"
             [|(Blob.t_to_js x3692)|])
    let (revokeObjectURL : string -> unit) =
      fun (x3693 : string) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "URL") "revokeObjectURL"
             [|(Ojs.string_to_js x3693)|])
  end
module ResponseType =
  struct
    type t =
      [ `L_s137_opaque  | `L_s138_opaqueredirect  | `L_s43_basic 
      | `L_s55_cors  | `L_s57_default  | `L_s67_error ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3695 : Ojs.t) ->
        let x3696 = x3695 in
        match Ojs.string_of_js x3696 with
        | "opaque" -> `L_s137_opaque
        | "opaqueredirect" -> `L_s138_opaqueredirect
        | "basic" -> `L_s43_basic
        | "cors" -> `L_s55_cors
        | "default" -> `L_s57_default
        | "error" -> `L_s67_error
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3694 :
          [ `L_s137_opaque  | `L_s138_opaqueredirect  | `L_s43_basic 
          | `L_s55_cors  | `L_s57_default  | `L_s67_error ])
        ->
        match x3694 with
        | `L_s137_opaque -> Ojs.string_to_js "opaque"
        | `L_s138_opaqueredirect -> Ojs.string_to_js "opaqueredirect"
        | `L_s43_basic -> Ojs.string_to_js "basic"
        | `L_s55_cors -> Ojs.string_to_js "cors"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s67_error -> Ojs.string_to_js "error"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3698 : Ojs.t) -> t_of_js x3698
    and t_0_to_js : t_0 -> Ojs.t = fun (x3697 : t) -> t_to_js x3697
  end
module rec
  Headers:sig
            type t =
              [ `Headers  | (string * string) IterableIterator.tags_1] intf
            type t_0 = t
            [@@@js.stop ]
            type tags =
              [ `Headers  | (string * string) IterableIterator.tags_1]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags =
                [ `Headers  | (string * string) IterableIterator.tags_1]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val append : 'tags this -> name:string -> value:string -> unit
            val delete : 'tags this -> name:string -> unit
            val get_ : 'tags this -> name:string -> string or_null
            val has : 'tags this -> name:string -> bool
            val set_ : 'tags this -> name:string -> value:string -> unit
            val forEach :
              'tags this ->
                callbackfn:(value:string -> key:string -> parent:t -> unit)
                  -> ?thisArg:any -> unit -> unit
            val entries :
              'tags this -> (string * string) IterableIterator.t_1
            val keys : 'tags this -> string IterableIterator.t_1
            val values : 'tags this -> string IterableIterator.t_1
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create : ?init:HeadersInit.t -> unit -> t
          end =
  struct
    type t = [ `Headers  | (string * string) IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3700 : Ojs.t) -> t_of_js x3700
    and t_0_to_js : t_0 -> Ojs.t = fun (x3699 : t) -> t_to_js x3699
    type tags = [ `Headers  | (string * string) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Headers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3703 : Ojs.t) -> intf_of_js __tags_of_js x3703
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3701 : __tags intf) -> intf_to_js __tags_to_js x3701
    let (append : 'tags this -> name:string -> value:string -> unit) =
      fun (x3707 : 'tags this) ->
        fun ~name:(x3705 : string) ->
          fun ~value:(x3706 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3707) "append"
                 [|(Ojs.string_to_js x3705);(Ojs.string_to_js x3706)|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x3710 : 'tags this) ->
        fun ~name:(x3709 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x3710) "delete"
               [|(Ojs.string_to_js x3709)|])
    let (get_ : 'tags this -> name:string -> string or_null) =
      fun (x3713 : 'tags this) ->
        fun ~name:(x3712 : string) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x3713) "get"
               [|(Ojs.string_to_js x3712)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x3717 : 'tags this) ->
        fun ~name:(x3716 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x3717) "has"
               [|(Ojs.string_to_js x3716)|])
    let (set_ : 'tags this -> name:string -> value:string -> unit) =
      fun (x3721 : 'tags this) ->
        fun ~name:(x3719 : string) ->
          fun ~value:(x3720 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x3721) "set"
                 [|(Ojs.string_to_js x3719);(Ojs.string_to_js x3720)|])
    let (forEach :
      'tags this ->
        callbackfn:(value:string -> key:string -> parent:t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x3730 : 'tags this) ->
        fun
          ~callbackfn:(x3723 :
                        value:string -> key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x3724 : any option) ->
            fun () ->
              ignore
                (let x3732 = this_to_js Obj.magic x3730 in
                 Ojs.call (Ojs.get_prop_ascii x3732 "forEach") "apply"
                   [|x3732;((let x3725 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3725 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3727 : Ojs.t) ->
                                          fun (x3728 : Ojs.t) ->
                                            fun (x3729 : Ojs.t) ->
                                              x3723
                                                ~value:(Ojs.string_of_js
                                                          x3727)
                                                ~key:(Ojs.string_of_js x3728)
                                                ~parent:(t_of_js x3729)))|]);
                             (match x3724 with
                              | Some x3726 ->
                                  ignore
                                    (Ojs.call x3725 "push"
                                       [|(any_to_js x3726)|])
                              | None -> ());
                             x3725))|])
    let (entries : 'tags this -> (string * string) IterableIterator.t_1) =
      fun (x3733 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x3735 : Ojs.t) ->
             let x3736 = x3735 in
             ((Ojs.string_of_js (Ojs.array_get x3736 0)),
               (Ojs.string_of_js (Ojs.array_get x3736 1))))
          (Ojs.call (this_to_js Obj.magic x3733) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x3737 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3737) "keys" [||])
    let (values : 'tags this -> string IterableIterator.t_1) =
      fun (x3740 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3740) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Headers")
             "prototype")
    let (create : ?init:HeadersInit.t -> unit -> t) =
      fun ?init:(x3743 : HeadersInit.t option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Headers")
               (let x3744 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x3743 with
                 | Some x3745 ->
                     ignore
                       (Ojs.call x3744 "push" [|(HeadersInit.t_to_js x3745)|])
                 | None -> ());
                x3744))
  end
 and
  HeadersInit:sig
                type t = (Headers.t, string list) or_array
                type t_0 = t
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
              end =
  struct
    type t = (Headers.t, string list) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x3750 : Ojs.t) ->
        or_array_of_js Headers.t_of_js
          (fun (x3752 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x3752)
          x3750
    and t_to_js : t -> Ojs.t =
      fun (x3746 : (Headers.t, string list) or_array) ->
        or_array_to_js Headers.t_to_js
          (fun (x3748 : string list) -> Ojs.list_to_js Ojs.string_to_js x3748)
          x3746
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3755 : Ojs.t) -> t_of_js x3755
    and t_0_to_js : t_0 -> Ojs.t = fun (x3754 : t) -> t_to_js x3754
  end
module ResponseInit =
  struct
    type t = [ `ResponseInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3757 : Ojs.t) -> t_of_js x3757
    and t_0_to_js : t_0 -> Ojs.t = fun (x3756 : t) -> t_to_js x3756
    type tags = [ `ResponseInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ResponseInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3760 : Ojs.t) -> intf_of_js __tags_of_js x3760
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3758 : __tags intf) -> intf_to_js __tags_to_js x3758
    let (get_headers : 'tags this -> HeadersInit.t) =
      fun (x3762 : 'tags this) ->
        HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3762) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x3764 : 'tags this) ->
        fun (x3765 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3764) "headers"
            (HeadersInit.t_to_js x3765)
    let (get_status : 'tags this -> float) =
      fun (x3767 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3767) "status")
    let (set_status : 'tags this -> float -> unit) =
      fun (x3769 : 'tags this) ->
        fun (x3770 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3769) "status"
            (Ojs.float_to_js x3770)
    let (get_statusText : 'tags this -> string) =
      fun (x3772 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3772) "statusText")
    let (set_statusText : 'tags this -> string -> unit) =
      fun (x3774 : 'tags this) ->
        fun (x3775 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3774) "statusText"
            (Ojs.string_to_js x3775)
    let cast_from = Obj.magic
  end
module FilePropertyBag =
  struct
    type t = [ `BlobPropertyBag  | `FilePropertyBag ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3778 : Ojs.t) -> t_of_js x3778
    and t_0_to_js : t_0 -> Ojs.t = fun (x3777 : t) -> t_to_js x3777
    type tags = [ `BlobPropertyBag  | `FilePropertyBag ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FilePropertyBag ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3781 : Ojs.t) -> intf_of_js __tags_of_js x3781
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3779 : __tags intf) -> intf_to_js __tags_to_js x3779
    let (get_lastModified : 'tags this -> float) =
      fun (x3783 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3783) "lastModified")
    let (set_lastModified : 'tags this -> float -> unit) =
      fun (x3785 : 'tags this) ->
        fun (x3786 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3785) "lastModified"
            (Ojs.float_to_js x3786)
    let cast_from = Obj.magic
  end
module File =
  struct
    type t = [ `Blob  | `File ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3789 : Ojs.t) -> t_of_js x3789
    and t_0_to_js : t_0 -> Ojs.t = fun (x3788 : t) -> t_to_js x3788
    type tags = [ `Blob  | `File ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `File ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3792 : Ojs.t) -> intf_of_js __tags_of_js x3792
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3790 : __tags intf) -> intf_to_js __tags_to_js x3790
    let (get_lastModified : 'tags this -> float) =
      fun (x3794 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3794) "lastModified")
    let (get_name : 'tags this -> string) =
      fun (x3796 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3796) "name")
    let (get_webkitRelativePath : 'tags this -> string) =
      fun (x3798 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3798)
             "webkitRelativePath")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "File")
             "prototype")
    let (create :
      fileBits:BlobPart.t list ->
        fileName:string -> ?options:FilePropertyBag.t -> unit -> t)
      =
      fun ~fileBits:(x3800 : BlobPart.t list) ->
        fun ~fileName:(x3801 : string) ->
          fun ?options:(x3802 : FilePropertyBag.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "File")
                   (let x3803 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x3803 "push"
                         [|(Ojs.list_to_js BlobPart.t_to_js x3800)|]);
                    ignore
                      (Ojs.call x3803 "push" [|(Ojs.string_to_js x3801)|]);
                    (match x3802 with
                     | Some x3804 ->
                         ignore
                           (Ojs.call x3803 "push"
                              [|(FilePropertyBag.t_to_js x3804)|])
                     | None -> ());
                    x3803))
  end
module FormDataEntryValue =
  struct
    type t = File.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x3808 : Ojs.t) -> or_string_of_js File.t_of_js x3808
    and t_to_js : t -> Ojs.t =
      fun (x3806 : File.t or_string) -> or_string_to_js File.t_to_js x3806
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3811 : Ojs.t) -> t_of_js x3811
    and t_0_to_js : t_0 -> Ojs.t = fun (x3810 : t) -> t_to_js x3810
  end
module FormData =
  struct
    type t =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3813 : Ojs.t) -> t_of_js x3813
    and t_0_to_js : t_0 -> Ojs.t = fun (x3812 : t) -> t_to_js x3812
    type tags =
      [ `FormData  | (string * FormDataEntryValue.t) IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FormData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3816 : Ojs.t) -> intf_of_js __tags_of_js x3816
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3814 : __tags intf) -> intf_to_js __tags_to_js x3814
    let (append :
      'tags this ->
        name:string ->
          value:Blob.t or_string -> ?fileName:string -> unit -> unit)
      =
      fun (x3824 : 'tags this) ->
        fun ~name:(x3818 : string) ->
          fun ~value:(x3819 : Blob.t or_string) ->
            fun ?fileName:(x3820 : string option) ->
              fun () ->
                ignore
                  (let x3826 = this_to_js Obj.magic x3824 in
                   Ojs.call (Ojs.get_prop_ascii x3826 "append") "apply"
                     [|x3826;((let x3821 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3821 "push"
                                    [|(Ojs.string_to_js x3818)|]);
                               ignore
                                 (Ojs.call x3821 "push"
                                    [|(or_string_to_js Blob.t_to_js x3819)|]);
                               (match x3820 with
                                | Some x3822 ->
                                    ignore
                                      (Ojs.call x3821 "push"
                                         [|(Ojs.string_to_js x3822)|])
                                | None -> ());
                               x3821))|])
    let (delete : 'tags this -> name:string -> unit) =
      fun (x3828 : 'tags this) ->
        fun ~name:(x3827 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x3828) "delete"
               [|(Ojs.string_to_js x3827)|])
    let (get_ : 'tags this -> name:string -> FormDataEntryValue.t or_null) =
      fun (x3831 : 'tags this) ->
        fun ~name:(x3830 : string) ->
          or_null_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x3831) "get"
               [|(Ojs.string_to_js x3830)|])
    let (getAll : 'tags this -> name:string -> FormDataEntryValue.t list) =
      fun (x3835 : 'tags this) ->
        fun ~name:(x3834 : string) ->
          Ojs.list_of_js FormDataEntryValue.t_of_js
            (Ojs.call (this_to_js Obj.magic x3835) "getAll"
               [|(Ojs.string_to_js x3834)|])
    let (has : 'tags this -> name:string -> bool) =
      fun (x3839 : 'tags this) ->
        fun ~name:(x3838 : string) ->
          Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x3839) "has"
               [|(Ojs.string_to_js x3838)|])
    let (set_ :
      'tags this ->
        name:string ->
          value:Blob.t or_string -> ?fileName:string -> unit -> unit)
      =
      fun (x3847 : 'tags this) ->
        fun ~name:(x3841 : string) ->
          fun ~value:(x3842 : Blob.t or_string) ->
            fun ?fileName:(x3843 : string option) ->
              fun () ->
                ignore
                  (let x3849 = this_to_js Obj.magic x3847 in
                   Ojs.call (Ojs.get_prop_ascii x3849 "set") "apply"
                     [|x3849;((let x3844 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x3844 "push"
                                    [|(Ojs.string_to_js x3841)|]);
                               ignore
                                 (Ojs.call x3844 "push"
                                    [|(or_string_to_js Blob.t_to_js x3842)|]);
                               (match x3843 with
                                | Some x3845 ->
                                    ignore
                                      (Ojs.call x3844 "push"
                                         [|(Ojs.string_to_js x3845)|])
                                | None -> ());
                               x3844))|])
    let (forEach :
      'tags this ->
        callbackfn:(value:FormDataEntryValue.t ->
                      key:string -> parent:t -> unit)
          -> ?thisArg:any -> unit -> unit)
      =
      fun (x3857 : 'tags this) ->
        fun
          ~callbackfn:(x3850 :
                        value:FormDataEntryValue.t ->
                          key:string -> parent:t -> unit)
          ->
          fun ?thisArg:(x3851 : any option) ->
            fun () ->
              ignore
                (let x3859 = this_to_js Obj.magic x3857 in
                 Ojs.call (Ojs.get_prop_ascii x3859 "forEach") "apply"
                   [|x3859;((let x3852 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x3852 "push"
                                  [|(Ojs.fun_to_js 3
                                       (fun (x3854 : Ojs.t) ->
                                          fun (x3855 : Ojs.t) ->
                                            fun (x3856 : Ojs.t) ->
                                              x3850
                                                ~value:(FormDataEntryValue.t_of_js
                                                          x3854)
                                                ~key:(Ojs.string_of_js x3855)
                                                ~parent:(t_of_js x3856)))|]);
                             (match x3851 with
                              | Some x3853 ->
                                  ignore
                                    (Ojs.call x3852 "push"
                                       [|(any_to_js x3853)|])
                              | None -> ());
                             x3852))|])
    let (entries :
      'tags this -> (string * FormDataEntryValue.t) IterableIterator.t_1) =
      fun (x3860 : 'tags this) ->
        IterableIterator.t_1_of_js
          (fun (x3862 : Ojs.t) ->
             let x3863 = x3862 in
             ((Ojs.string_of_js (Ojs.array_get x3863 0)),
               (FormDataEntryValue.t_of_js (Ojs.array_get x3863 1))))
          (Ojs.call (this_to_js Obj.magic x3860) "entries" [||])
    let (keys : 'tags this -> string IterableIterator.t_1) =
      fun (x3864 : 'tags this) ->
        IterableIterator.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3864) "keys" [||])
    let (values : 'tags this -> FormDataEntryValue.t IterableIterator.t_1) =
      fun (x3867 : 'tags this) ->
        IterableIterator.t_1_of_js FormDataEntryValue.t_of_js
          (Ojs.call (this_to_js Obj.magic x3867) "values" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FormData")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FormData") [||])
  end
module XMLHttpRequestBodyInit =
  struct
    type t = (Blob.t, FormData.t, URLSearchParams.t) union3 or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x3875 : Ojs.t) ->
        or_string_of_js
          (fun (x3876 : Ojs.t) ->
             union3_of_js Blob.t_of_js FormData.t_of_js
               URLSearchParams.t_of_js x3876) x3875
    and t_to_js : t -> Ojs.t =
      fun (x3870 : (Blob.t, FormData.t, URLSearchParams.t) union3 or_string)
        ->
        or_string_to_js
          (fun (x3871 : (Blob.t, FormData.t, URLSearchParams.t) union3) ->
             union3_to_js Blob.t_to_js FormData.t_to_js
               URLSearchParams.t_to_js x3871) x3870
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3881 : Ojs.t) -> t_of_js x3881
    and t_0_to_js : t_0 -> Ojs.t = fun (x3880 : t) -> t_to_js x3880
  end
module BodyInit =
  struct
    type t = (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x3885 : Ojs.t) ->
        union2_of_js ReadableStream.t_0_of_js XMLHttpRequestBodyInit.t_of_js
          x3885
    and t_to_js : t -> Ojs.t =
      fun (x3882 : (ReadableStream.t_0, XMLHttpRequestBodyInit.t) union2) ->
        union2_to_js ReadableStream.t_0_to_js XMLHttpRequestBodyInit.t_to_js
          x3882
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3889 : Ojs.t) -> t_of_js x3889
    and t_0_to_js : t_0 -> Ojs.t = fun (x3888 : t) -> t_to_js x3888
  end
module Body =
  struct
    type t = [ `Body ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3891 : Ojs.t) -> t_of_js x3891
    and t_0_to_js : t_0 -> Ojs.t = fun (x3890 : t) -> t_to_js x3890
    type tags = [ `Body ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Body ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3894 : Ojs.t) -> intf_of_js __tags_of_js x3894
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3892 : __tags intf) -> intf_to_js __tags_to_js x3892
    let (get_body : 'tags this -> Uint8Array.t_0 ReadableStream.t or_null) =
      fun (x3896 : 'tags this) ->
        or_null_of_js
          (fun (x3898 : Ojs.t) ->
             ReadableStream.t_of_js Uint8Array.t_0_of_js x3898)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3896) "body")
    let (get_bodyUsed : 'tags this -> bool) =
      fun (x3900 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3900) "bodyUsed")
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0 Promise.t_1) =
      fun (x3902 : 'tags this) ->
        Promise.t_1_of_js ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x3902) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t Promise.t_1) =
      fun (x3905 : 'tags this) ->
        Promise.t_1_of_js Blob.t_of_js
          (Ojs.call (this_to_js Obj.magic x3905) "blob" [||])
    let (formData : 'tags this -> FormData.t Promise.t_1) =
      fun (x3908 : 'tags this) ->
        Promise.t_1_of_js FormData.t_of_js
          (Ojs.call (this_to_js Obj.magic x3908) "formData" [||])
    let (json : 'tags this -> any Promise.t_1) =
      fun (x3911 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.call (this_to_js Obj.magic x3911) "json" [||])
    let (text : 'tags this -> string Promise.t_1) =
      fun (x3914 : 'tags this) ->
        Promise.t_1_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x3914) "text" [||])
    let cast_from = Obj.magic
  end
module Response =
  struct
    type t = [ `Body  | `Response ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3918 : Ojs.t) -> t_of_js x3918
    and t_0_to_js : t_0 -> Ojs.t = fun (x3917 : t) -> t_to_js x3917
    type tags = [ `Body  | `Response ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Response ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3921 : Ojs.t) -> intf_of_js __tags_of_js x3921
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3919 : __tags intf) -> intf_to_js __tags_to_js x3919
    let (get_headers : 'tags this -> Headers.t) =
      fun (x3923 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3923) "headers")
    let (get_ok : 'tags this -> bool) =
      fun (x3925 : 'tags this) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x3925) "ok")
    let (get_redirected : 'tags this -> bool) =
      fun (x3927 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3927) "redirected")
    let (get_status : 'tags this -> float) =
      fun (x3929 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3929) "status")
    let (get_statusText : 'tags this -> string) =
      fun (x3931 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3931) "statusText")
    let (get_type : 'tags this -> ResponseType.t) =
      fun (x3933 : 'tags this) ->
        ResponseType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3933) "type")
    let (get_url : 'tags this -> string) =
      fun (x3935 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3935) "url")
    let (clone : 'tags this -> t) =
      fun (x3937 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x3937) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Response")
             "prototype")
    let (create :
      ?body:BodyInit.t or_null -> ?init:ResponseInit.t -> unit -> t) =
      fun ?body:(x3939 : BodyInit.t or_null option) ->
        fun ?init:(x3940 : ResponseInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Response")
                 (let x3941 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x3939 with
                   | Some x3943 ->
                       ignore
                         (Ojs.call x3941 "push"
                            [|(or_null_to_js BodyInit.t_to_js x3943)|])
                   | None -> ());
                  (match x3940 with
                   | Some x3942 ->
                       ignore
                         (Ojs.call x3941 "push"
                            [|(ResponseInit.t_to_js x3942)|])
                   | None -> ());
                  x3941))
    let (error : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Response") "error" [||])
    let (redirect : url:URL.t or_string -> ?status:float -> unit -> t) =
      fun ~url:(x3945 : URL.t or_string) ->
        fun ?status:(x3946 : float option) ->
          fun () ->
            t_of_js
              (let x3950 = Ojs.get_prop_ascii Ojs.global "Response" in
               Ojs.call (Ojs.get_prop_ascii x3950 "redirect") "apply"
                 [|x3950;((let x3947 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x3947 "push"
                                [|(or_string_to_js URL.t_to_js x3945)|]);
                           (match x3946 with
                            | Some x3948 ->
                                ignore
                                  (Ojs.call x3947 "push"
                                     [|(Ojs.float_to_js x3948)|])
                            | None -> ());
                           x3947))|])
  end
module RequestRedirect =
  struct
    type t = [ `L_s110_manual  | `L_s67_error  | `L_s75_follow ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3952 : Ojs.t) ->
        let x3953 = x3952 in
        match Ojs.string_of_js x3953 with
        | "manual" -> `L_s110_manual
        | "error" -> `L_s67_error
        | "follow" -> `L_s75_follow
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x3951 : [ `L_s110_manual  | `L_s67_error  | `L_s75_follow ]) ->
        match x3951 with
        | `L_s110_manual -> Ojs.string_to_js "manual"
        | `L_s67_error -> Ojs.string_to_js "error"
        | `L_s75_follow -> Ojs.string_to_js "follow"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3955 : Ojs.t) -> t_of_js x3955
    and t_0_to_js : t_0 -> Ojs.t = fun (x3954 : t) -> t_to_js x3954
  end
module RequestMode =
  struct
    type t =
      [ `L_s119_navigate  | `L_s124_no_cors  | `L_s172_same_origin 
      | `L_s55_cors ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3957 : Ojs.t) ->
        let x3958 = x3957 in
        match Ojs.string_of_js x3958 with
        | "navigate" -> `L_s119_navigate
        | "no-cors" -> `L_s124_no_cors
        | "same-origin" -> `L_s172_same_origin
        | "cors" -> `L_s55_cors
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3956 :
          [ `L_s119_navigate  | `L_s124_no_cors  | `L_s172_same_origin 
          | `L_s55_cors ])
        ->
        match x3956 with
        | `L_s119_navigate -> Ojs.string_to_js "navigate"
        | `L_s124_no_cors -> Ojs.string_to_js "no-cors"
        | `L_s172_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s55_cors -> Ojs.string_to_js "cors"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3960 : Ojs.t) -> t_of_js x3960
    and t_0_to_js : t_0 -> Ojs.t = fun (x3959 : t) -> t_to_js x3959
  end
module RequestCredentials =
  struct
    type t = [ `L_s134_omit  | `L_s172_same_origin  | `L_s92_include ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3962 : Ojs.t) ->
        let x3963 = x3962 in
        match Ojs.string_of_js x3963 with
        | "omit" -> `L_s134_omit
        | "same-origin" -> `L_s172_same_origin
        | "include" -> `L_s92_include
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x3961 : [ `L_s134_omit  | `L_s172_same_origin  | `L_s92_include ])
        ->
        match x3961 with
        | `L_s134_omit -> Ojs.string_to_js "omit"
        | `L_s172_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s92_include -> Ojs.string_to_js "include"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3965 : Ojs.t) -> t_of_js x3965
    and t_0_to_js : t_0 -> Ojs.t = fun (x3964 : t) -> t_to_js x3964
  end
module RequestCache =
  struct
    type t =
      [ `L_s123_no_cache  | `L_s127_no_store  | `L_s136_only_if_cached 
      | `L_s168_reload  | `L_s57_default  | `L_s77_force_cache ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3967 : Ojs.t) ->
        let x3968 = x3967 in
        match Ojs.string_of_js x3968 with
        | "no-cache" -> `L_s123_no_cache
        | "no-store" -> `L_s127_no_store
        | "only-if-cached" -> `L_s136_only_if_cached
        | "reload" -> `L_s168_reload
        | "default" -> `L_s57_default
        | "force-cache" -> `L_s77_force_cache
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3966 :
          [ `L_s123_no_cache  | `L_s127_no_store  | `L_s136_only_if_cached 
          | `L_s168_reload  | `L_s57_default  | `L_s77_force_cache ])
        ->
        match x3966 with
        | `L_s123_no_cache -> Ojs.string_to_js "no-cache"
        | `L_s127_no_store -> Ojs.string_to_js "no-store"
        | `L_s136_only_if_cached -> Ojs.string_to_js "only-if-cached"
        | `L_s168_reload -> Ojs.string_to_js "reload"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s77_force_cache -> Ojs.string_to_js "force-cache"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3970 : Ojs.t) -> t_of_js x3970
    and t_0_to_js : t_0 -> Ojs.t = fun (x3969 : t) -> t_to_js x3969
  end
module ReferrerPolicy =
  struct
    type t =
      [ `L_s0  | `L_s125_no_referrer  | `L_s126_no_referrer_when_downgrade 
      | `L_s140_origin  | `L_s141_origin_when_cross_origin 
      | `L_s172_same_origin  | `L_s185_strict_origin 
      | `L_s186_strict_origin_when_cross_origin  | `L_s198_unsafe_url ]
    let rec t_of_js : Ojs.t -> t =
      fun (x3972 : Ojs.t) ->
        let x3973 = x3972 in
        match Ojs.string_of_js x3973 with
        | "" -> `L_s0
        | "no-referrer" -> `L_s125_no_referrer
        | "no-referrer-when-downgrade" -> `L_s126_no_referrer_when_downgrade
        | "origin" -> `L_s140_origin
        | "origin-when-cross-origin" -> `L_s141_origin_when_cross_origin
        | "same-origin" -> `L_s172_same_origin
        | "strict-origin" -> `L_s185_strict_origin
        | "strict-origin-when-cross-origin" ->
            `L_s186_strict_origin_when_cross_origin
        | "unsafe-url" -> `L_s198_unsafe_url
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x3971 :
          [ `L_s0  | `L_s125_no_referrer 
          | `L_s126_no_referrer_when_downgrade  | `L_s140_origin 
          | `L_s141_origin_when_cross_origin  | `L_s172_same_origin 
          | `L_s185_strict_origin  | `L_s186_strict_origin_when_cross_origin 
          | `L_s198_unsafe_url ])
        ->
        match x3971 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s125_no_referrer -> Ojs.string_to_js "no-referrer"
        | `L_s126_no_referrer_when_downgrade ->
            Ojs.string_to_js "no-referrer-when-downgrade"
        | `L_s140_origin -> Ojs.string_to_js "origin"
        | `L_s141_origin_when_cross_origin ->
            Ojs.string_to_js "origin-when-cross-origin"
        | `L_s172_same_origin -> Ojs.string_to_js "same-origin"
        | `L_s185_strict_origin -> Ojs.string_to_js "strict-origin"
        | `L_s186_strict_origin_when_cross_origin ->
            Ojs.string_to_js "strict-origin-when-cross-origin"
        | `L_s198_unsafe_url -> Ojs.string_to_js "unsafe-url"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3975 : Ojs.t) -> t_of_js x3975
    and t_0_to_js : t_0 -> Ojs.t = fun (x3974 : t) -> t_to_js x3974
  end
module RequestInit =
  struct
    type t = [ `RequestInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x3977 : Ojs.t) -> t_of_js x3977
    and t_0_to_js : t_0 -> Ojs.t = fun (x3976 : t) -> t_to_js x3976
    type tags = [ `RequestInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RequestInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x3980 : Ojs.t) -> intf_of_js __tags_of_js x3980
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x3978 : __tags intf) -> intf_to_js __tags_to_js x3978
    let (get_body : 'tags this -> BodyInit.t or_null) =
      fun (x3982 : 'tags this) ->
        or_null_of_js BodyInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3982) "body")
    let (set_body : 'tags this -> BodyInit.t or_null -> unit) =
      fun (x3985 : 'tags this) ->
        fun (x3986 : BodyInit.t or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3985) "body"
            (or_null_to_js BodyInit.t_to_js x3986)
    let (get_cache : 'tags this -> RequestCache.t) =
      fun (x3989 : 'tags this) ->
        RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3989) "cache")
    let (set_cache : 'tags this -> RequestCache.t -> unit) =
      fun (x3991 : 'tags this) ->
        fun (x3992 : RequestCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3991) "cache"
            (RequestCache.t_to_js x3992)
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x3994 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3994) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x3996 : 'tags this) ->
        fun (x3997 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x3996) "credentials"
            (RequestCredentials.t_to_js x3997)
    let (get_headers : 'tags this -> HeadersInit.t) =
      fun (x3999 : 'tags this) ->
        HeadersInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x3999) "headers")
    let (set_headers : 'tags this -> HeadersInit.t -> unit) =
      fun (x4001 : 'tags this) ->
        fun (x4002 : HeadersInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4001) "headers"
            (HeadersInit.t_to_js x4002)
    let (get_integrity : 'tags this -> string) =
      fun (x4004 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4004) "integrity")
    let (set_integrity : 'tags this -> string -> unit) =
      fun (x4006 : 'tags this) ->
        fun (x4007 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4006) "integrity"
            (Ojs.string_to_js x4007)
    let (get_keepalive : 'tags this -> bool) =
      fun (x4009 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4009) "keepalive")
    let (set_keepalive : 'tags this -> bool -> unit) =
      fun (x4011 : 'tags this) ->
        fun (x4012 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4011) "keepalive"
            (Ojs.bool_to_js x4012)
    let (get_method : 'tags this -> string) =
      fun (x4014 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4014) "method")
    let (set_method : 'tags this -> string -> unit) =
      fun (x4016 : 'tags this) ->
        fun (x4017 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4016) "method"
            (Ojs.string_to_js x4017)
    let (get_mode : 'tags this -> RequestMode.t) =
      fun (x4019 : 'tags this) ->
        RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4019) "mode")
    let (set_mode : 'tags this -> RequestMode.t -> unit) =
      fun (x4021 : 'tags this) ->
        fun (x4022 : RequestMode.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4021) "mode"
            (RequestMode.t_to_js x4022)
    let (get_redirect : 'tags this -> RequestRedirect.t) =
      fun (x4024 : 'tags this) ->
        RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4024) "redirect")
    let (set_redirect : 'tags this -> RequestRedirect.t -> unit) =
      fun (x4026 : 'tags this) ->
        fun (x4027 : RequestRedirect.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4026) "redirect"
            (RequestRedirect.t_to_js x4027)
    let (get_referrer : 'tags this -> string) =
      fun (x4029 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4029) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x4031 : 'tags this) ->
        fun (x4032 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4031) "referrer"
            (Ojs.string_to_js x4032)
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t) =
      fun (x4034 : 'tags this) ->
        ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4034) "referrerPolicy")
    let (set_referrerPolicy : 'tags this -> ReferrerPolicy.t -> unit) =
      fun (x4036 : 'tags this) ->
        fun (x4037 : ReferrerPolicy.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4036) "referrerPolicy"
            (ReferrerPolicy.t_to_js x4037)
    let (get_signal : 'tags this -> AbortSignal.t or_null) =
      fun (x4039 : 'tags this) ->
        or_null_of_js AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4039) "signal")
    let (set_signal : 'tags this -> AbortSignal.t or_null -> unit) =
      fun (x4042 : 'tags this) ->
        fun (x4043 : AbortSignal.t or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4042) "signal"
            (or_null_to_js AbortSignal.t_to_js x4043)
    let (get_window : 'tags this -> never or_null) =
      fun (x4046 : 'tags this) ->
        or_null_of_js never_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4046) "window")
    let (set_window : 'tags this -> never or_null -> unit) =
      fun (x4049 : 'tags this) ->
        fun (x4050 : never or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4049) "window"
            (or_null_to_js never_to_js x4050)
    let cast_from = Obj.magic
  end
module RequestDestination =
  struct
    type t =
      [ `L_s0  | `L_s109_manifest  | `L_s132_object  | `L_s145_paintworklet 
      | `L_s169_report  | `L_s174_script  | `L_s176_sharedworker 
      | `L_s187_style  | `L_s193_track  | `L_s204_video  | `L_s209_worker 
      | `L_s212_xslt  | `L_s38_audio  | `L_s39_audioworklet 
      | `L_s62_document  | `L_s64_embed  | `L_s76_font  | `L_s78_frame 
      | `L_s89_iframe  | `L_s90_image ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4054 : Ojs.t) ->
        let x4055 = x4054 in
        match Ojs.string_of_js x4055 with
        | "" -> `L_s0
        | "manifest" -> `L_s109_manifest
        | "object" -> `L_s132_object
        | "paintworklet" -> `L_s145_paintworklet
        | "report" -> `L_s169_report
        | "script" -> `L_s174_script
        | "sharedworker" -> `L_s176_sharedworker
        | "style" -> `L_s187_style
        | "track" -> `L_s193_track
        | "video" -> `L_s204_video
        | "worker" -> `L_s209_worker
        | "xslt" -> `L_s212_xslt
        | "audio" -> `L_s38_audio
        | "audioworklet" -> `L_s39_audioworklet
        | "document" -> `L_s62_document
        | "embed" -> `L_s64_embed
        | "font" -> `L_s76_font
        | "frame" -> `L_s78_frame
        | "iframe" -> `L_s89_iframe
        | "image" -> `L_s90_image
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4053 :
          [ `L_s0  | `L_s109_manifest  | `L_s132_object 
          | `L_s145_paintworklet  | `L_s169_report  | `L_s174_script 
          | `L_s176_sharedworker  | `L_s187_style  | `L_s193_track 
          | `L_s204_video  | `L_s209_worker  | `L_s212_xslt  | `L_s38_audio 
          | `L_s39_audioworklet  | `L_s62_document  | `L_s64_embed 
          | `L_s76_font  | `L_s78_frame  | `L_s89_iframe  | `L_s90_image ])
        ->
        match x4053 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s109_manifest -> Ojs.string_to_js "manifest"
        | `L_s132_object -> Ojs.string_to_js "object"
        | `L_s145_paintworklet -> Ojs.string_to_js "paintworklet"
        | `L_s169_report -> Ojs.string_to_js "report"
        | `L_s174_script -> Ojs.string_to_js "script"
        | `L_s176_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s187_style -> Ojs.string_to_js "style"
        | `L_s193_track -> Ojs.string_to_js "track"
        | `L_s204_video -> Ojs.string_to_js "video"
        | `L_s209_worker -> Ojs.string_to_js "worker"
        | `L_s212_xslt -> Ojs.string_to_js "xslt"
        | `L_s38_audio -> Ojs.string_to_js "audio"
        | `L_s39_audioworklet -> Ojs.string_to_js "audioworklet"
        | `L_s62_document -> Ojs.string_to_js "document"
        | `L_s64_embed -> Ojs.string_to_js "embed"
        | `L_s76_font -> Ojs.string_to_js "font"
        | `L_s78_frame -> Ojs.string_to_js "frame"
        | `L_s89_iframe -> Ojs.string_to_js "iframe"
        | `L_s90_image -> Ojs.string_to_js "image"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4057 : Ojs.t) -> t_of_js x4057
    and t_0_to_js : t_0 -> Ojs.t = fun (x4056 : t) -> t_to_js x4056
  end
module rec
  Request:sig
            type t = [ `Body  | `Request ] intf
            type t_0 = t
            [@@@js.stop ]
            type tags = [ `Body  | `Request ]
            type tags_0 = tags
            [@@@js.start ]
            [@@@js.implem
              type tags = [ `Body  | `Request ]
              type tags_0 = tags]
            type 'tags this = 'tags intf constraint 'tags = [> `Request ]
            val t_to_js : t -> Ojs.t
            val t_of_js : Ojs.t -> t
            val t_0_to_js : t_0 -> Ojs.t
            val t_0_of_js : Ojs.t -> t_0
            val get_cache : 'tags this -> RequestCache.t
            val get_credentials : 'tags this -> RequestCredentials.t
            val get_destination : 'tags this -> RequestDestination.t
            val get_headers : 'tags this -> Headers.t
            val get_integrity : 'tags this -> string
            val get_keepalive : 'tags this -> bool
            val get_method : 'tags this -> string
            val get_mode : 'tags this -> RequestMode.t
            val get_redirect : 'tags this -> RequestRedirect.t
            val get_referrer : 'tags this -> string
            val get_referrerPolicy : 'tags this -> ReferrerPolicy.t
            val get_signal : 'tags this -> AbortSignal.t
            val get_url : 'tags this -> string
            val clone : 'tags this -> t
            val cast_from : 'tags this -> t
            val prototype : unit -> t
            val create :
              input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t
          end =
  struct
    type t = [ `Body  | `Request ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4059 : Ojs.t) -> t_of_js x4059
    and t_0_to_js : t_0 -> Ojs.t = fun (x4058 : t) -> t_to_js x4058
    type tags = [ `Body  | `Request ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Request ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4062 : Ojs.t) -> intf_of_js __tags_of_js x4062
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4060 : __tags intf) -> intf_to_js __tags_to_js x4060
    let (get_cache : 'tags this -> RequestCache.t) =
      fun (x4064 : 'tags this) ->
        RequestCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4064) "cache")
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x4066 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4066) "credentials")
    let (get_destination : 'tags this -> RequestDestination.t) =
      fun (x4068 : 'tags this) ->
        RequestDestination.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4068) "destination")
    let (get_headers : 'tags this -> Headers.t) =
      fun (x4070 : 'tags this) ->
        Headers.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4070) "headers")
    let (get_integrity : 'tags this -> string) =
      fun (x4072 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4072) "integrity")
    let (get_keepalive : 'tags this -> bool) =
      fun (x4074 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4074) "keepalive")
    let (get_method : 'tags this -> string) =
      fun (x4076 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4076) "method")
    let (get_mode : 'tags this -> RequestMode.t) =
      fun (x4078 : 'tags this) ->
        RequestMode.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4078) "mode")
    let (get_redirect : 'tags this -> RequestRedirect.t) =
      fun (x4080 : 'tags this) ->
        RequestRedirect.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4080) "redirect")
    let (get_referrer : 'tags this -> string) =
      fun (x4082 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4082) "referrer")
    let (get_referrerPolicy : 'tags this -> ReferrerPolicy.t) =
      fun (x4084 : 'tags this) ->
        ReferrerPolicy.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4084) "referrerPolicy")
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x4086 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4086) "signal")
    let (get_url : 'tags this -> string) =
      fun (x4088 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4088) "url")
    let (clone : 'tags this -> t) =
      fun (x4090 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x4090) "clone" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Request")
             "prototype")
    let (create : input:RequestInfo.t -> ?init:RequestInit.t -> unit -> t) =
      fun ~input:(x4092 : RequestInfo.t) ->
        fun ?init:(x4093 : RequestInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Request")
                 (let x4094 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x4094 "push" [|(RequestInfo.t_to_js x4092)|]);
                  (match x4093 with
                   | Some x4095 ->
                       ignore
                         (Ojs.call x4094 "push"
                            [|(RequestInit.t_to_js x4095)|])
                   | None -> ());
                  x4094))
  end
 and
  RequestInfo:sig
                type t = Request.t or_string
                type t_0 = t
                val t_to_js : t -> Ojs.t
                val t_of_js : Ojs.t -> t
                val t_0_to_js : t_0 -> Ojs.t
                val t_0_of_js : Ojs.t -> t_0
              end =
  struct
    type t = Request.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x4098 : Ojs.t) -> or_string_of_js Request.t_of_js x4098
    and t_to_js : t -> Ojs.t =
      fun (x4096 : Request.t or_string) ->
        or_string_to_js Request.t_to_js x4096
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4101 : Ojs.t) -> t_of_js x4101
    and t_0_to_js : t_0 -> Ojs.t = fun (x4100 : t) -> t_to_js x4100
  end
module Cache =
  struct
    type t = [ `Cache ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4103 : Ojs.t) -> t_of_js x4103
    and t_0_to_js : t_0 -> Ojs.t = fun (x4102 : t) -> t_to_js x4102
    type tags = [ `Cache ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Cache ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4106 : Ojs.t) -> intf_of_js __tags_of_js x4106
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4104 : __tags intf) -> intf_to_js __tags_to_js x4104
    let (add : 'tags this -> request:RequestInfo.t -> unit Promise.t_1) =
      fun (x4109 : 'tags this) ->
        fun ~request:(x4108 : RequestInfo.t) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4109) "add"
               [|(RequestInfo.t_to_js x4108)|])
    let (addAll :
      'tags this -> requests:RequestInfo.t list -> unit Promise.t_1) =
      fun (x4114 : 'tags this) ->
        fun ~requests:(x4112 : RequestInfo.t list) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4114) "addAll"
               [|(Ojs.list_to_js RequestInfo.t_to_js x4112)|])
    let (delete :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> bool Promise.t_1)
      =
      fun (x4121 : 'tags this) ->
        fun ~request:(x4117 : RequestInfo.t) ->
          fun ?options:(x4118 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.bool_of_js
                (let x4123 = this_to_js Obj.magic x4121 in
                 Ojs.call (Ojs.get_prop_ascii x4123 "delete") "apply"
                   [|x4123;((let x4119 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4119 "push"
                                  [|(RequestInfo.t_to_js x4117)|]);
                             (match x4118 with
                              | Some x4120 ->
                                  ignore
                                    (Ojs.call x4119 "push"
                                       [|(CacheQueryOptions.t_to_js x4120)|])
                              | None -> ());
                             x4119))|])
    let (keys :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Request.t list Promise.t_1)
      =
      fun (x4130 : 'tags this) ->
        fun ?request:(x4125 : RequestInfo.t option) ->
          fun ?options:(x4126 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4133 : Ojs.t) -> Ojs.list_of_js Request.t_of_js x4133)
                (let x4132 = this_to_js Obj.magic x4130 in
                 Ojs.call (Ojs.get_prop_ascii x4132 "keys") "apply"
                   [|x4132;((let x4127 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4125 with
                              | Some x4129 ->
                                  ignore
                                    (Ojs.call x4127 "push"
                                       [|(RequestInfo.t_to_js x4129)|])
                              | None -> ());
                             (match x4126 with
                              | Some x4128 ->
                                  ignore
                                    (Ojs.call x4127 "push"
                                       [|(CacheQueryOptions.t_to_js x4128)|])
                              | None -> ());
                             x4127))|])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:CacheQueryOptions.t ->
            unit -> Response.t or_undefined Promise.t_1)
      =
      fun (x4139 : 'tags this) ->
        fun ~request:(x4135 : RequestInfo.t) ->
          fun ?options:(x4136 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4142 : Ojs.t) ->
                   or_undefined_of_js Response.t_of_js x4142)
                (let x4141 = this_to_js Obj.magic x4139 in
                 Ojs.call (Ojs.get_prop_ascii x4141 "match") "apply"
                   [|x4141;((let x4137 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x4137 "push"
                                  [|(RequestInfo.t_to_js x4135)|]);
                             (match x4136 with
                              | Some x4138 ->
                                  ignore
                                    (Ojs.call x4137 "push"
                                       [|(CacheQueryOptions.t_to_js x4138)|])
                              | None -> ());
                             x4137))|])
    let (matchAll :
      'tags this ->
        ?request:RequestInfo.t ->
          ?options:CacheQueryOptions.t -> unit -> Response.t list Promise.t_1)
      =
      fun (x4149 : 'tags this) ->
        fun ?request:(x4144 : RequestInfo.t option) ->
          fun ?options:(x4145 : CacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x4152 : Ojs.t) -> Ojs.list_of_js Response.t_of_js x4152)
                (let x4151 = this_to_js Obj.magic x4149 in
                 Ojs.call (Ojs.get_prop_ascii x4151 "matchAll") "apply"
                   [|x4151;((let x4146 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x4144 with
                              | Some x4148 ->
                                  ignore
                                    (Ojs.call x4146 "push"
                                       [|(RequestInfo.t_to_js x4148)|])
                              | None -> ());
                             (match x4145 with
                              | Some x4147 ->
                                  ignore
                                    (Ojs.call x4146 "push"
                                       [|(CacheQueryOptions.t_to_js x4147)|])
                              | None -> ());
                             x4146))|])
    let (put :
      'tags this ->
        request:RequestInfo.t -> response:Response.t -> unit Promise.t_1)
      =
      fun (x4156 : 'tags this) ->
        fun ~request:(x4154 : RequestInfo.t) ->
          fun ~response:(x4155 : Response.t) ->
            Promise.t_1_of_js Ojs.unit_of_js
              (Ojs.call (this_to_js Obj.magic x4156) "put"
                 [|(RequestInfo.t_to_js x4154);(Response.t_to_js x4155)|])
    let (addAll' :
      'tags this -> requests:RequestInfo.t Iterable.t_1 -> unit Promise.t_1)
      =
      fun (x4161 : 'tags this) ->
        fun ~requests:(x4159 : RequestInfo.t Iterable.t_1) ->
          Promise.t_1_of_js Ojs.unit_of_js
            (Ojs.call (this_to_js Obj.magic x4161) "addAll"
               [|(Iterable.t_1_to_js RequestInfo.t_to_js x4159)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Cache")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Cache") [||])
  end
module CachesStatic =
  struct
    let (delete : string -> bool Promise.t_1) =
      fun (x4164 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "delete"
             [|(Ojs.string_to_js x4164)|])
    let (has : string -> bool Promise.t_1) =
      fun (x4166 : string) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "has"
             [|(Ojs.string_to_js x4166)|])
    let (keys : unit -> string list Promise.t_1) =
      fun () ->
        Promise.t_1_of_js
          (fun (x4168 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x4168)
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "keys" [||])
    let (match_ :
      request:RequestInfo.t ->
        ?options:MultiCacheQueryOptions.t ->
          unit -> Response.t or_undefined Promise.t_1)
      =
      fun ~request:(x4170 : RequestInfo.t) ->
        fun ?options:(x4171 : MultiCacheQueryOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x4175 : Ojs.t) ->
                 or_undefined_of_js Response.t_of_js x4175)
              (let x4174 = Ojs.get_prop_ascii Ojs.global "caches" in
               Ojs.call (Ojs.get_prop_ascii x4174 "match") "apply"
                 [|x4174;((let x4172 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x4172 "push"
                                [|(RequestInfo.t_to_js x4170)|]);
                           (match x4171 with
                            | Some x4173 ->
                                ignore
                                  (Ojs.call x4172 "push"
                                     [|(MultiCacheQueryOptions.t_to_js x4173)|])
                            | None -> ());
                           x4172))|])
    let (open_ : string -> Cache.t Promise.t_1) =
      fun (x4177 : string) ->
        Promise.t_1_of_js Cache.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "caches") "open"
             [|(Ojs.string_to_js x4177)|])
  end
module XMLHttpRequestResponseType =
  struct
    type t =
      [ `L_s0  | `L_s190_text  | `L_s37_arraybuffer  | `L_s44_blob 
      | `L_s62_document  | `L_s96_json ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4180 : Ojs.t) ->
        let x4181 = x4180 in
        match Ojs.string_of_js x4181 with
        | "" -> `L_s0
        | "text" -> `L_s190_text
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | "document" -> `L_s62_document
        | "json" -> `L_s96_json
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4179 :
          [ `L_s0  | `L_s190_text  | `L_s37_arraybuffer  | `L_s44_blob 
          | `L_s62_document  | `L_s96_json ])
        ->
        match x4179 with
        | `L_s0 -> Ojs.string_to_js ""
        | `L_s190_text -> Ojs.string_to_js "text"
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
        | `L_s62_document -> Ojs.string_to_js "document"
        | `L_s96_json -> Ojs.string_to_js "json"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4183 : Ojs.t) -> t_of_js x4183
    and t_0_to_js : t_0 -> Ojs.t = fun (x4182 : t) -> t_to_js x4182
  end
module ProgressEventInit =
  struct
    type t = [ `EventInit  | `ProgressEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4185 : Ojs.t) -> t_of_js x4185
    and t_0_to_js : t_0 -> Ojs.t = fun (x4184 : t) -> t_to_js x4184
    type tags = [ `EventInit  | `ProgressEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ProgressEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4188 : Ojs.t) -> intf_of_js __tags_of_js x4188
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4186 : __tags intf) -> intf_to_js __tags_to_js x4186
    let (get_lengthComputable : 'tags this -> bool) =
      fun (x4190 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4190) "lengthComputable")
    let (set_lengthComputable : 'tags this -> bool -> unit) =
      fun (x4192 : 'tags this) ->
        fun (x4193 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4192) "lengthComputable"
            (Ojs.bool_to_js x4193)
    let (get_loaded : 'tags this -> float) =
      fun (x4195 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4195) "loaded")
    let (set_loaded : 'tags this -> float -> unit) =
      fun (x4197 : 'tags this) ->
        fun (x4198 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4197) "loaded"
            (Ojs.float_to_js x4198)
    let (get_total : 'tags this -> float) =
      fun (x4200 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4200) "total")
    let (set_total : 'tags this -> float -> unit) =
      fun (x4202 : 'tags this) ->
        fun (x4203 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4202) "total"
            (Ojs.float_to_js x4203)
    let cast_from = Obj.magic
  end
module ProgressEvent =
  struct
    type 'T t = [ `Event  | `ProgressEvent of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4207 : Ojs.t) -> t_of_js __T_of_js x4207
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4205 : __T t) -> t_to_js __T_to_js x4205
    type t_0 = EventTarget.t t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x4211 : Ojs.t) -> t_of_js EventTarget.t_of_js x4211
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x4209 : EventTarget.t t) -> t_to_js EventTarget.t_to_js x4209
    type 'T tags = [ `Event  | `ProgressEvent of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = EventTarget.t tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `ProgressEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x4215 : Ojs.t) -> intf_of_js __tags_of_js x4215
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x4213 : __tags intf) -> intf_to_js __tags_to_js x4213
    let (get_lengthComputable : ('tags, 'T) this -> bool) =
      fun (x4217 : ('tags, 'T) this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4217)
             "lengthComputable")
    let (get_loaded : ('tags, 'T) this -> float) =
      fun (x4220 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4220) "loaded")
    let (get_target : ('tags, 'T) this -> 'T or_null) =
      fun (x4223 : ('tags, 'T) this) ->
        or_null_of_js Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4223) "target")
    let (get_total : ('tags, 'T) this -> float) =
      fun (x4227 : ('tags, 'T) this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4227) "total")
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:ProgressEventInit.t -> unit -> t_0) =
      fun ~type_:(x4230 : string) ->
        fun ?eventInitDict:(x4231 : ProgressEventInit.t option) ->
          fun () ->
            t_0_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ProgressEvent")
                 (let x4232 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x4232 "push" [|(Ojs.string_to_js x4230)|]);
                  (match x4231 with
                   | Some x4233 ->
                       ignore
                         (Ojs.call x4232 "push"
                            [|(ProgressEventInit.t_to_js x4233)|])
                   | None -> ());
                  x4232))
  end
module rec
  XMLHttpRequest:sig
                   type t =
                     [ `EventTarget  | `XMLHttpRequest 
                     | `XMLHttpRequestEventTarget ] intf
                   type t_0 = t
                   [@@@js.stop ]
                   type tags =
                     [ `EventTarget  | `XMLHttpRequest 
                     | `XMLHttpRequestEventTarget ]
                   type tags_0 = tags
                   [@@@js.start ]
                   [@@@js.implem
                     type tags =
                       [ `EventTarget  | `XMLHttpRequest 
                       | `XMLHttpRequestEventTarget ]
                     type tags_0 = tags]
                   type 'tags this =
                     'tags intf constraint 'tags = [> `XMLHttpRequest ]
                   val t_to_js : t -> Ojs.t
                   val t_of_js : Ojs.t -> t
                   val t_0_to_js : t_0 -> Ojs.t
                   val t_0_of_js : Ojs.t -> t_0
                   val get_onreadystatechange :
                     'tags this -> (this:t -> ev:Event.t -> any) or_null
                   val set_onreadystatechange :
                     'tags this ->
                       (this:t -> ev:Event.t -> any) or_null -> unit
                   val get_readyState : 'tags this -> float
                   val get_response : 'tags this -> any
                   val get_responseText : 'tags this -> string
                   val get_responseType :
                     'tags this -> XMLHttpRequestResponseType.t
                   val set_responseType :
                     'tags this -> XMLHttpRequestResponseType.t -> unit
                   val get_responseURL : 'tags this -> string
                   val get_status : 'tags this -> float
                   val get_statusText : 'tags this -> string
                   val get_timeout : 'tags this -> float
                   val set_timeout : 'tags this -> float -> unit
                   val get_upload : 'tags this -> XMLHttpRequestUpload.t
                   val get_withCredentials : 'tags this -> bool
                   val set_withCredentials : 'tags this -> bool -> unit
                   val abort : 'tags this -> unit
                   val getAllResponseHeaders : 'tags this -> string
                   val getResponseHeader :
                     'tags this -> name:string -> string or_null
                   val open_ :
                     'tags this ->
                       method_:string -> url:URL.t or_string -> unit
                   val open_' :
                     'tags this ->
                       method_:string ->
                         url:URL.t or_string ->
                           async:bool ->
                             ?username:string or_null ->
                               ?password:string or_null -> unit -> unit
                   val overrideMimeType : 'tags this -> mime:string -> unit
                   val send :
                     'tags this ->
                       ?body:XMLHttpRequestBodyInit.t or_null -> unit -> unit
                   val setRequestHeader :
                     'tags this -> name:string -> value:string -> unit
                   val get_DONE : 'tags this -> float
                   val get_HEADERS_RECEIVED : 'tags this -> float
                   val get_LOADING : 'tags this -> float
                   val get_OPENED : 'tags this -> float
                   val get_UNSENT : 'tags this -> float
                   val addEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:AddEventListenerOptions.t or_boolean ->
                             unit -> unit
                   val addEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:AddEventListenerOptions.t or_boolean ->
                             unit -> unit
                   val removeEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:EventListenerOptions.t or_boolean ->
                             unit -> unit
                   val removeEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:EventListenerOptions.t or_boolean ->
                             unit -> unit
                   val cast_from : 'tags this -> t
                   val prototype : unit -> t
                   val create : unit -> t
                   val done_ : unit -> float
                   val headers_received : unit -> float
                   val loading : unit -> float
                   val opened : unit -> float
                   val unsent : unit -> float
                 end =
  struct
    type t =
      [ `EventTarget  | `XMLHttpRequest  | `XMLHttpRequestEventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4235 : Ojs.t) -> t_of_js x4235
    and t_0_to_js : t_0 -> Ojs.t = fun (x4234 : t) -> t_to_js x4234
    type tags =
      [ `EventTarget  | `XMLHttpRequest  | `XMLHttpRequestEventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `XMLHttpRequest ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4238 : Ojs.t) -> intf_of_js __tags_of_js x4238
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4236 : __tags intf) -> intf_to_js __tags_to_js x4236
    let (get_onreadystatechange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x4240 : 'tags this) ->
        or_null_of_js
          (fun (x4242 : Ojs.t) ->
             fun ~this:(x4243 : t) ->
               fun ~ev:(x4244 : Event.t) ->
                 any_of_js
                   (Ojs.apply x4242 [|(t_to_js x4243);(Event.t_to_js x4244)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4240)
             "onreadystatechange")
    let (set_onreadystatechange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x4245 : 'tags this) ->
        fun (x4246 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4245)
            "onreadystatechange"
            (or_null_to_js
               (fun (x4247 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x4248 : Ojs.t) ->
                       fun (x4249 : Ojs.t) ->
                         any_to_js
                           (x4247 ~this:(t_of_js x4248)
                              ~ev:(Event.t_of_js x4249)))) x4246)
    let (get_readyState : 'tags this -> float) =
      fun (x4251 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4251) "readyState")
    let (get_response : 'tags this -> any) =
      fun (x4253 : 'tags this) ->
        any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4253) "response")
    let (get_responseText : 'tags this -> string) =
      fun (x4255 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4255) "responseText")
    let (get_responseType : 'tags this -> XMLHttpRequestResponseType.t) =
      fun (x4257 : 'tags this) ->
        XMLHttpRequestResponseType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4257) "responseType")
    let (set_responseType :
      'tags this -> XMLHttpRequestResponseType.t -> unit) =
      fun (x4259 : 'tags this) ->
        fun (x4260 : XMLHttpRequestResponseType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4259) "responseType"
            (XMLHttpRequestResponseType.t_to_js x4260)
    let (get_responseURL : 'tags this -> string) =
      fun (x4262 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4262) "responseURL")
    let (get_status : 'tags this -> float) =
      fun (x4264 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4264) "status")
    let (get_statusText : 'tags this -> string) =
      fun (x4266 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4266) "statusText")
    let (get_timeout : 'tags this -> float) =
      fun (x4268 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4268) "timeout")
    let (set_timeout : 'tags this -> float -> unit) =
      fun (x4270 : 'tags this) ->
        fun (x4271 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4270) "timeout"
            (Ojs.float_to_js x4271)
    let (get_upload : 'tags this -> XMLHttpRequestUpload.t) =
      fun (x4273 : 'tags this) ->
        XMLHttpRequestUpload.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4273) "upload")
    let (get_withCredentials : 'tags this -> bool) =
      fun (x4275 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4275) "withCredentials")
    let (set_withCredentials : 'tags this -> bool -> unit) =
      fun (x4277 : 'tags this) ->
        fun (x4278 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4277) "withCredentials"
            (Ojs.bool_to_js x4278)
    let (abort : 'tags this -> unit) =
      fun (x4280 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x4280) "abort" [||])
    let (getAllResponseHeaders : 'tags this -> string) =
      fun (x4282 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x4282) "getAllResponseHeaders" [||])
    let (getResponseHeader : 'tags this -> name:string -> string or_null) =
      fun (x4285 : 'tags this) ->
        fun ~name:(x4284 : string) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x4285) "getResponseHeader"
               [|(Ojs.string_to_js x4284)|])
    let (open_ : 'tags this -> method_:string -> url:URL.t or_string -> unit)
      =
      fun (x4291 : 'tags this) ->
        fun ~method_:(x4288 : string) ->
          fun ~url:(x4289 : URL.t or_string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4291) "open"
                 [|(Ojs.string_to_js x4288);(or_string_to_js URL.t_to_js
                                               x4289)|])
    let (open_' :
      'tags this ->
        method_:string ->
          url:URL.t or_string ->
            async:bool ->
              ?username:string or_null ->
                ?password:string or_null -> unit -> unit)
      =
      fun (x4304 : 'tags this) ->
        fun ~method_:(x4293 : string) ->
          fun ~url:(x4294 : URL.t or_string) ->
            fun ~async:(x4295 : bool) ->
              fun ?username:(x4296 : string or_null option) ->
                fun ?password:(x4297 : string or_null option) ->
                  fun () ->
                    ignore
                      (let x4306 = this_to_js Obj.magic x4304 in
                       Ojs.call (Ojs.get_prop_ascii x4306 "open") "apply"
                         [|x4306;((let x4298 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x4298 "push"
                                        [|(Ojs.string_to_js x4293)|]);
                                   ignore
                                     (Ojs.call x4298 "push"
                                        [|(or_string_to_js URL.t_to_js x4294)|]);
                                   ignore
                                     (Ojs.call x4298 "push"
                                        [|(Ojs.bool_to_js x4295)|]);
                                   (match x4296 with
                                    | Some x4301 ->
                                        ignore
                                          (Ojs.call x4298 "push"
                                             [|(or_null_to_js
                                                  Ojs.string_to_js x4301)|])
                                    | None -> ());
                                   (match x4297 with
                                    | Some x4299 ->
                                        ignore
                                          (Ojs.call x4298 "push"
                                             [|(or_null_to_js
                                                  Ojs.string_to_js x4299)|])
                                    | None -> ());
                                   x4298))|])
    let (overrideMimeType : 'tags this -> mime:string -> unit) =
      fun (x4308 : 'tags this) ->
        fun ~mime:(x4307 : string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x4308) "overrideMimeType"
               [|(Ojs.string_to_js x4307)|])
    let (send :
      'tags this -> ?body:XMLHttpRequestBodyInit.t or_null -> unit -> unit) =
      fun (x4314 : 'tags this) ->
        fun ?body:(x4310 : XMLHttpRequestBodyInit.t or_null option) ->
          fun () ->
            ignore
              (let x4316 = this_to_js Obj.magic x4314 in
               Ojs.call (Ojs.get_prop_ascii x4316 "send") "apply"
                 [|x4316;((let x4311 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x4310 with
                            | Some x4312 ->
                                ignore
                                  (Ojs.call x4311 "push"
                                     [|(or_null_to_js
                                          XMLHttpRequestBodyInit.t_to_js
                                          x4312)|])
                            | None -> ());
                           x4311))|])
    let (setRequestHeader :
      'tags this -> name:string -> value:string -> unit) =
      fun (x4319 : 'tags this) ->
        fun ~name:(x4317 : string) ->
          fun ~value:(x4318 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x4319) "setRequestHeader"
                 [|(Ojs.string_to_js x4317);(Ojs.string_to_js x4318)|])
    let (get_DONE : 'tags this -> float) =
      fun (x4321 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4321) "DONE")
    let (get_HEADERS_RECEIVED : 'tags this -> float) =
      fun (x4323 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4323) "HEADERS_RECEIVED")
    let (get_LOADING : 'tags this -> float) =
      fun (x4325 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4325) "LOADING")
    let (get_OPENED : 'tags this -> float) =
      fun (x4327 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4327) "OPENED")
    let (get_UNSENT : 'tags this -> float) =
      fun (x4329 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4329) "UNSENT")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4339 : 'tags this) ->
        fun ~type_:(x4331 : 'K) ->
          fun ~listener:(x4332 : this:t -> ev:any -> any) ->
            fun
              ?options:(x4333 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4341 = this_to_js Obj.magic x4339 in
                   Ojs.call (Ojs.get_prop_ascii x4341 "addEventListener")
                     "apply"
                     [|x4341;((let x4334 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4334 "push" [|(Obj.magic x4331)|]);
                               ignore
                                 (Ojs.call x4334 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4337 : Ojs.t) ->
                                            fun (x4338 : Ojs.t) ->
                                              any_to_js
                                                (x4332 ~this:(t_of_js x4337)
                                                   ~ev:(any_of_js x4338))))|]);
                               (match x4333 with
                                | Some x4335 ->
                                    ignore
                                      (Ojs.call x4334 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x4335)|])
                                | None -> ());
                               x4334))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4348 : 'tags this) ->
        fun ~type_:(x4342 : string) ->
          fun ~listener:(x4343 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x4344 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4350 = this_to_js Obj.magic x4348 in
                   Ojs.call (Ojs.get_prop_ascii x4350 "addEventListener")
                     "apply"
                     [|x4350;((let x4345 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4345 "push"
                                    [|(Ojs.string_to_js x4342)|]);
                               ignore
                                 (Ojs.call x4345 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4343)|]);
                               (match x4344 with
                                | Some x4346 ->
                                    ignore
                                      (Ojs.call x4345 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x4346)|])
                                | None -> ());
                               x4345))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4359 : 'tags this) ->
        fun ~type_:(x4351 : 'K) ->
          fun ~listener:(x4352 : this:t -> ev:any -> any) ->
            fun ?options:(x4353 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4361 = this_to_js Obj.magic x4359 in
                   Ojs.call (Ojs.get_prop_ascii x4361 "removeEventListener")
                     "apply"
                     [|x4361;((let x4354 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4354 "push" [|(Obj.magic x4351)|]);
                               ignore
                                 (Ojs.call x4354 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4357 : Ojs.t) ->
                                            fun (x4358 : Ojs.t) ->
                                              any_to_js
                                                (x4352 ~this:(t_of_js x4357)
                                                   ~ev:(any_of_js x4358))))|]);
                               (match x4353 with
                                | Some x4355 ->
                                    ignore
                                      (Ojs.call x4354 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x4355)|])
                                | None -> ());
                               x4354))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4368 : 'tags this) ->
        fun ~type_:(x4362 : string) ->
          fun ~listener:(x4363 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x4364 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4370 = this_to_js Obj.magic x4368 in
                   Ojs.call (Ojs.get_prop_ascii x4370 "removeEventListener")
                     "apply"
                     [|x4370;((let x4365 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4365 "push"
                                    [|(Ojs.string_to_js x4362)|]);
                               ignore
                                 (Ojs.call x4365 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4363)|]);
                               (match x4364 with
                                | Some x4366 ->
                                    ignore
                                      (Ojs.call x4365 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x4366)|])
                                | None -> ());
                               x4365))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") [||])
    let (done_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "DONE")
    let (headers_received : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest")
             "HEADERS_RECEIVED")
    let (loading : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "LOADING")
    let (opened : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "OPENED")
    let (unsent : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequest") "UNSENT")
  end
 and
  XMLHttpRequestEventTarget:sig
                              type t =
                                [ `EventTarget 
                                | `XMLHttpRequestEventTarget ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `EventTarget 
                                | `XMLHttpRequestEventTarget ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `EventTarget 
                                  | `XMLHttpRequestEventTarget ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `XMLHttpRequestEventTarget ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val get_onabort :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null
                              val set_onabort :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null -> unit
                              val get_onerror :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null
                              val set_onerror :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null -> unit
                              val get_onload :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null
                              val set_onload :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null -> unit
                              val get_onloadend :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null
                              val set_onloadend :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null -> unit
                              val get_onloadstart :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null
                              val set_onloadstart :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null -> unit
                              val get_onprogress :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null
                              val set_onprogress :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null -> unit
                              val get_ontimeout :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null
                              val set_ontimeout :
                                'tags this ->
                                  (this:XMLHttpRequest.t ->
                                     ev:ProgressEvent.t_0 -> any)
                                    or_null -> unit
                              val addEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:AddEventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val addEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:AddEventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val removeEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:EventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val removeEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:EventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
  struct
    type t = [ `EventTarget  | `XMLHttpRequestEventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4372 : Ojs.t) -> t_of_js x4372
    and t_0_to_js : t_0 -> Ojs.t = fun (x4371 : t) -> t_to_js x4371
    type tags = [ `EventTarget  | `XMLHttpRequestEventTarget ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventTarget ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4375 : Ojs.t) -> intf_of_js __tags_of_js x4375
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4373 : __tags intf) -> intf_to_js __tags_to_js x4373
    let (get_onabort :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
      =
      fun (x4377 : 'tags this) ->
        or_null_of_js
          (fun (x4379 : Ojs.t) ->
             fun ~this:(x4380 : XMLHttpRequest.t) ->
               fun ~ev:(x4381 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4379
                      [|(XMLHttpRequest.t_to_js x4380);(ProgressEvent.t_0_to_js
                                                          x4381)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4377) "onabort")
    let (set_onabort :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null ->
          unit)
      =
      fun (x4382 : 'tags this) ->
        fun
          (x4383 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4382) "onabort"
            (or_null_to_js
               (fun
                  (x4384 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4385 : Ojs.t) ->
                       fun (x4386 : Ojs.t) ->
                         any_to_js
                           (x4384 ~this:(XMLHttpRequest.t_of_js x4385)
                              ~ev:(ProgressEvent.t_0_of_js x4386)))) x4383)
    let (get_onerror :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
      =
      fun (x4388 : 'tags this) ->
        or_null_of_js
          (fun (x4390 : Ojs.t) ->
             fun ~this:(x4391 : XMLHttpRequest.t) ->
               fun ~ev:(x4392 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4390
                      [|(XMLHttpRequest.t_to_js x4391);(ProgressEvent.t_0_to_js
                                                          x4392)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4388) "onerror")
    let (set_onerror :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null ->
          unit)
      =
      fun (x4393 : 'tags this) ->
        fun
          (x4394 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4393) "onerror"
            (or_null_to_js
               (fun
                  (x4395 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4396 : Ojs.t) ->
                       fun (x4397 : Ojs.t) ->
                         any_to_js
                           (x4395 ~this:(XMLHttpRequest.t_of_js x4396)
                              ~ev:(ProgressEvent.t_0_of_js x4397)))) x4394)
    let (get_onload :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
      =
      fun (x4399 : 'tags this) ->
        or_null_of_js
          (fun (x4401 : Ojs.t) ->
             fun ~this:(x4402 : XMLHttpRequest.t) ->
               fun ~ev:(x4403 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4401
                      [|(XMLHttpRequest.t_to_js x4402);(ProgressEvent.t_0_to_js
                                                          x4403)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4399) "onload")
    let (set_onload :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null ->
          unit)
      =
      fun (x4404 : 'tags this) ->
        fun
          (x4405 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4404) "onload"
            (or_null_to_js
               (fun
                  (x4406 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4407 : Ojs.t) ->
                       fun (x4408 : Ojs.t) ->
                         any_to_js
                           (x4406 ~this:(XMLHttpRequest.t_of_js x4407)
                              ~ev:(ProgressEvent.t_0_of_js x4408)))) x4405)
    let (get_onloadend :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
      =
      fun (x4410 : 'tags this) ->
        or_null_of_js
          (fun (x4412 : Ojs.t) ->
             fun ~this:(x4413 : XMLHttpRequest.t) ->
               fun ~ev:(x4414 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4412
                      [|(XMLHttpRequest.t_to_js x4413);(ProgressEvent.t_0_to_js
                                                          x4414)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4410) "onloadend")
    let (set_onloadend :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null ->
          unit)
      =
      fun (x4415 : 'tags this) ->
        fun
          (x4416 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4415) "onloadend"
            (or_null_to_js
               (fun
                  (x4417 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4418 : Ojs.t) ->
                       fun (x4419 : Ojs.t) ->
                         any_to_js
                           (x4417 ~this:(XMLHttpRequest.t_of_js x4418)
                              ~ev:(ProgressEvent.t_0_of_js x4419)))) x4416)
    let (get_onloadstart :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
      =
      fun (x4421 : 'tags this) ->
        or_null_of_js
          (fun (x4423 : Ojs.t) ->
             fun ~this:(x4424 : XMLHttpRequest.t) ->
               fun ~ev:(x4425 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4423
                      [|(XMLHttpRequest.t_to_js x4424);(ProgressEvent.t_0_to_js
                                                          x4425)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4421) "onloadstart")
    let (set_onloadstart :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null ->
          unit)
      =
      fun (x4426 : 'tags this) ->
        fun
          (x4427 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4426) "onloadstart"
            (or_null_to_js
               (fun
                  (x4428 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4429 : Ojs.t) ->
                       fun (x4430 : Ojs.t) ->
                         any_to_js
                           (x4428 ~this:(XMLHttpRequest.t_of_js x4429)
                              ~ev:(ProgressEvent.t_0_of_js x4430)))) x4427)
    let (get_onprogress :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
      =
      fun (x4432 : 'tags this) ->
        or_null_of_js
          (fun (x4434 : Ojs.t) ->
             fun ~this:(x4435 : XMLHttpRequest.t) ->
               fun ~ev:(x4436 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4434
                      [|(XMLHttpRequest.t_to_js x4435);(ProgressEvent.t_0_to_js
                                                          x4436)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4432) "onprogress")
    let (set_onprogress :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null ->
          unit)
      =
      fun (x4437 : 'tags this) ->
        fun
          (x4438 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4437) "onprogress"
            (or_null_to_js
               (fun
                  (x4439 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4440 : Ojs.t) ->
                       fun (x4441 : Ojs.t) ->
                         any_to_js
                           (x4439 ~this:(XMLHttpRequest.t_of_js x4440)
                              ~ev:(ProgressEvent.t_0_of_js x4441)))) x4438)
    let (get_ontimeout :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
      =
      fun (x4443 : 'tags this) ->
        or_null_of_js
          (fun (x4445 : Ojs.t) ->
             fun ~this:(x4446 : XMLHttpRequest.t) ->
               fun ~ev:(x4447 : ProgressEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x4445
                      [|(XMLHttpRequest.t_to_js x4446);(ProgressEvent.t_0_to_js
                                                          x4447)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4443) "ontimeout")
    let (set_ontimeout :
      'tags this ->
        (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null ->
          unit)
      =
      fun (x4448 : 'tags this) ->
        fun
          (x4449 :
            (this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4448) "ontimeout"
            (or_null_to_js
               (fun
                  (x4450 :
                    this:XMLHttpRequest.t -> ev:ProgressEvent.t_0 -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x4451 : Ojs.t) ->
                       fun (x4452 : Ojs.t) ->
                         any_to_js
                           (x4450 ~this:(XMLHttpRequest.t_of_js x4451)
                              ~ev:(ProgressEvent.t_0_of_js x4452)))) x4449)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4462 : 'tags this) ->
        fun ~type_:(x4454 : 'K) ->
          fun ~listener:(x4455 : this:t -> ev:any -> any) ->
            fun
              ?options:(x4456 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4464 = this_to_js Obj.magic x4462 in
                   Ojs.call (Ojs.get_prop_ascii x4464 "addEventListener")
                     "apply"
                     [|x4464;((let x4457 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4457 "push" [|(Obj.magic x4454)|]);
                               ignore
                                 (Ojs.call x4457 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4460 : Ojs.t) ->
                                            fun (x4461 : Ojs.t) ->
                                              any_to_js
                                                (x4455 ~this:(t_of_js x4460)
                                                   ~ev:(any_of_js x4461))))|]);
                               (match x4456 with
                                | Some x4458 ->
                                    ignore
                                      (Ojs.call x4457 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x4458)|])
                                | None -> ());
                               x4457))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4471 : 'tags this) ->
        fun ~type_:(x4465 : string) ->
          fun ~listener:(x4466 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x4467 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4473 = this_to_js Obj.magic x4471 in
                   Ojs.call (Ojs.get_prop_ascii x4473 "addEventListener")
                     "apply"
                     [|x4473;((let x4468 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4468 "push"
                                    [|(Ojs.string_to_js x4465)|]);
                               ignore
                                 (Ojs.call x4468 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4466)|]);
                               (match x4467 with
                                | Some x4469 ->
                                    ignore
                                      (Ojs.call x4468 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x4469)|])
                                | None -> ());
                               x4468))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4482 : 'tags this) ->
        fun ~type_:(x4474 : 'K) ->
          fun ~listener:(x4475 : this:t -> ev:any -> any) ->
            fun ?options:(x4476 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4484 = this_to_js Obj.magic x4482 in
                   Ojs.call (Ojs.get_prop_ascii x4484 "removeEventListener")
                     "apply"
                     [|x4484;((let x4477 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4477 "push" [|(Obj.magic x4474)|]);
                               ignore
                                 (Ojs.call x4477 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4480 : Ojs.t) ->
                                            fun (x4481 : Ojs.t) ->
                                              any_to_js
                                                (x4475 ~this:(t_of_js x4480)
                                                   ~ev:(any_of_js x4481))))|]);
                               (match x4476 with
                                | Some x4478 ->
                                    ignore
                                      (Ojs.call x4477 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x4478)|])
                                | None -> ());
                               x4477))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4491 : 'tags this) ->
        fun ~type_:(x4485 : string) ->
          fun ~listener:(x4486 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x4487 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4493 = this_to_js Obj.magic x4491 in
                   Ojs.call (Ojs.get_prop_ascii x4493 "removeEventListener")
                     "apply"
                     [|x4493;((let x4488 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4488 "push"
                                    [|(Ojs.string_to_js x4485)|]);
                               ignore
                                 (Ojs.call x4488 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4486)|]);
                               (match x4487 with
                                | Some x4489 ->
                                    ignore
                                      (Ojs.call x4488 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x4489)|])
                                | None -> ());
                               x4488))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestEventTarget")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestEventTarget") 
             [||])
  end and
       XMLHttpRequestUpload:sig
                              type t =
                                [ `EventTarget  | `XMLHttpRequestEventTarget 
                                | `XMLHttpRequestUpload ] intf
                              type t_0 = t
                              [@@@js.stop ]
                              type tags =
                                [ `EventTarget  | `XMLHttpRequestEventTarget 
                                | `XMLHttpRequestUpload ]
                              type tags_0 = tags
                              [@@@js.start ]
                              [@@@js.implem
                                type tags =
                                  [ `EventTarget 
                                  | `XMLHttpRequestEventTarget 
                                  | `XMLHttpRequestUpload ]
                                type tags_0 = tags]
                              type 'tags this =
                                'tags intf constraint 'tags =
                                            [> `XMLHttpRequestUpload ]
                              val t_to_js : t -> Ojs.t
                              val t_of_js : Ojs.t -> t
                              val t_0_to_js : t_0 -> Ojs.t
                              val t_0_of_js : Ojs.t -> t_0
                              val addEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:AddEventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val addEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:AddEventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val removeEventListener :
                                'tags this ->
                                  type_:'K ->
                                    listener:(this:t -> ev:any -> any) ->
                                      ?options:EventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val removeEventListener' :
                                'tags this ->
                                  type_:string ->
                                    listener:EventListenerOrEventListenerObject.t
                                      ->
                                      ?options:EventListenerOptions.t
                                        or_boolean -> unit -> unit
                              val cast_from : 'tags this -> t
                              val prototype : unit -> t
                              val create : unit -> t
                            end =
       struct
         type t =
           [ `EventTarget  | `XMLHttpRequestEventTarget 
           | `XMLHttpRequestUpload ] intf
         let rec t_of_js : Ojs.t -> t = Obj.magic
         and t_to_js : t -> Ojs.t = Obj.magic
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x4495 : Ojs.t) -> t_of_js x4495
         and t_0_to_js : t_0 -> Ojs.t = fun (x4494 : t) -> t_to_js x4494
         type tags =
           [ `EventTarget  | `XMLHttpRequestEventTarget 
           | `XMLHttpRequestUpload ]
         type tags_0 = tags
         type 'tags this =
           'tags intf constraint 'tags = [> `XMLHttpRequestUpload ]
         let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
           = fun (type __tags) ->
           fun (__tags_of_js : Ojs.t -> __tags) ->
             fun (x4498 : Ojs.t) -> intf_of_js __tags_of_js x4498
         and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
           fun (type __tags) ->
           fun (__tags_to_js : __tags -> Ojs.t) ->
             fun (x4496 : __tags intf) -> intf_to_js __tags_to_js x4496
         let (addEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:AddEventListenerOptions.t or_boolean ->
                   unit -> unit)
           =
           fun (x4508 : 'tags this) ->
             fun ~type_:(x4500 : 'K) ->
               fun ~listener:(x4501 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x4502 :
                              AddEventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x4510 = this_to_js Obj.magic x4508 in
                        Ojs.call
                          (Ojs.get_prop_ascii x4510 "addEventListener")
                          "apply"
                          [|x4510;((let x4503 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x4503 "push"
                                         [|(Obj.magic x4500)|]);
                                    ignore
                                      (Ojs.call x4503 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x4506 : Ojs.t) ->
                                                 fun (x4507 : Ojs.t) ->
                                                   any_to_js
                                                     (x4501
                                                        ~this:(t_of_js x4506)
                                                        ~ev:(any_of_js x4507))))|]);
                                    (match x4502 with
                                     | Some x4504 ->
                                         ignore
                                           (Ojs.call x4503 "push"
                                              [|(or_boolean_to_js
                                                   AddEventListenerOptions.t_to_js
                                                   x4504)|])
                                     | None -> ());
                                    x4503))|])
         let (addEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:AddEventListenerOptions.t or_boolean ->
                   unit -> unit)
           =
           fun (x4517 : 'tags this) ->
             fun ~type_:(x4511 : string) ->
               fun ~listener:(x4512 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x4513 :
                              AddEventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x4519 = this_to_js Obj.magic x4517 in
                        Ojs.call
                          (Ojs.get_prop_ascii x4519 "addEventListener")
                          "apply"
                          [|x4519;((let x4514 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x4514 "push"
                                         [|(Ojs.string_to_js x4511)|]);
                                    ignore
                                      (Ojs.call x4514 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x4512)|]);
                                    (match x4513 with
                                     | Some x4515 ->
                                         ignore
                                           (Ojs.call x4514 "push"
                                              [|(or_boolean_to_js
                                                   AddEventListenerOptions.t_to_js
                                                   x4515)|])
                                     | None -> ());
                                    x4514))|])
         let (removeEventListener :
           'tags this ->
             type_:'K ->
               listener:(this:t -> ev:any -> any) ->
                 ?options:EventListenerOptions.t or_boolean -> unit -> unit)
           =
           fun (x4528 : 'tags this) ->
             fun ~type_:(x4520 : 'K) ->
               fun ~listener:(x4521 : this:t -> ev:any -> any) ->
                 fun
                   ?options:(x4522 :
                              EventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x4530 = this_to_js Obj.magic x4528 in
                        Ojs.call
                          (Ojs.get_prop_ascii x4530 "removeEventListener")
                          "apply"
                          [|x4530;((let x4523 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x4523 "push"
                                         [|(Obj.magic x4520)|]);
                                    ignore
                                      (Ojs.call x4523 "push"
                                         [|(Ojs.fun_to_js 2
                                              (fun (x4526 : Ojs.t) ->
                                                 fun (x4527 : Ojs.t) ->
                                                   any_to_js
                                                     (x4521
                                                        ~this:(t_of_js x4526)
                                                        ~ev:(any_of_js x4527))))|]);
                                    (match x4522 with
                                     | Some x4524 ->
                                         ignore
                                           (Ojs.call x4523 "push"
                                              [|(or_boolean_to_js
                                                   EventListenerOptions.t_to_js
                                                   x4524)|])
                                     | None -> ());
                                    x4523))|])
         let (removeEventListener' :
           'tags this ->
             type_:string ->
               listener:EventListenerOrEventListenerObject.t ->
                 ?options:EventListenerOptions.t or_boolean -> unit -> unit)
           =
           fun (x4537 : 'tags this) ->
             fun ~type_:(x4531 : string) ->
               fun ~listener:(x4532 : EventListenerOrEventListenerObject.t)
                 ->
                 fun
                   ?options:(x4533 :
                              EventListenerOptions.t or_boolean option)
                   ->
                   fun () ->
                     ignore
                       (let x4539 = this_to_js Obj.magic x4537 in
                        Ojs.call
                          (Ojs.get_prop_ascii x4539 "removeEventListener")
                          "apply"
                          [|x4539;((let x4534 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x4534 "push"
                                         [|(Ojs.string_to_js x4531)|]);
                                    ignore
                                      (Ojs.call x4534 "push"
                                         [|(EventListenerOrEventListenerObject.t_to_js
                                              x4532)|]);
                                    (match x4533 with
                                     | Some x4535 ->
                                         ignore
                                           (Ojs.call x4534 "push"
                                              [|(or_boolean_to_js
                                                   EventListenerOptions.t_to_js
                                                   x4535)|])
                                     | None -> ());
                                    x4534))|])
         let cast_from = Obj.magic
         let (prototype : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestUpload")
                  "prototype")
         let (create : unit -> t) =
           fun () ->
             t_of_js
               (Ojs.new_obj
                  (Ojs.get_prop_ascii Ojs.global "XMLHttpRequestUpload") 
                  [||])
       end
module XMLHttpRequestEventTargetEventMap =
  struct
    type t = [ `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4541 : Ojs.t) -> t_of_js x4541
    and t_0_to_js : t_0 -> Ojs.t = fun (x4540 : t) -> t_to_js x4540
    type tags = [ `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventTargetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4544 : Ojs.t) -> intf_of_js __tags_of_js x4544
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4542 : __tags intf) -> intf_to_js __tags_to_js x4542
    let (get_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4546 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4546) "abort")
    let (set_abort :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4549 : 'tags this) ->
        fun (x4550 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4549) "abort"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4550)
    let (get_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4553 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4553) "error")
    let (set_error :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4556 : 'tags this) ->
        fun (x4557 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4556) "error"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4557)
    let (get_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4560 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4560) "load")
    let (set_load :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4563 : 'tags this) ->
        fun (x4564 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4563) "load"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4564)
    let (get_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4567 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4567) "loadend")
    let (set_loadend :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4570 : 'tags this) ->
        fun (x4571 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4570) "loadend"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4571)
    let (get_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4574 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4574) "loadstart")
    let (set_loadstart :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4577 : 'tags this) ->
        fun (x4578 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4577) "loadstart"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4578)
    let (get_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4581 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4581) "progress")
    let (set_progress :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4584 : 'tags this) ->
        fun (x4585 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4584) "progress"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4585)
    let (get_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t) =
      fun (x4588 : 'tags this) ->
        ProgressEvent.t_of_js XMLHttpRequestEventTarget.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4588) "timeout")
    let (set_timeout :
      'tags this -> XMLHttpRequestEventTarget.t ProgressEvent.t -> unit) =
      fun (x4591 : 'tags this) ->
        fun (x4592 : XMLHttpRequestEventTarget.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4591) "timeout"
            (ProgressEvent.t_to_js XMLHttpRequestEventTarget.t_to_js x4592)
    let cast_from = Obj.magic
  end
module XMLHttpRequestEventMap =
  struct
    type t =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4596 : Ojs.t) -> t_of_js x4596
    and t_0_to_js : t_0 -> Ojs.t = fun (x4595 : t) -> t_to_js x4595
    type tags =
      [ `XMLHttpRequestEventMap  | `XMLHttpRequestEventTargetEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `XMLHttpRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4599 : Ojs.t) -> intf_of_js __tags_of_js x4599
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4597 : __tags intf) -> intf_to_js __tags_to_js x4597
    let (get_readystatechange : 'tags this -> Event.t) =
      fun (x4601 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4601) "readystatechange")
    let (set_readystatechange : 'tags this -> Event.t -> unit) =
      fun (x4603 : 'tags this) ->
        fun (x4604 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4603) "readystatechange"
            (Event.t_to_js x4604)
    let cast_from = Obj.magic
  end
module ServiceWorkerState =
  struct
    type t =
      [ `L_s146_parsed  | `L_s166_redundant  | `L_s33_activated 
      | `L_s34_activating  | `L_s94_installed  | `L_s95_installing ]
    let rec t_of_js : Ojs.t -> t =
      fun (x4607 : Ojs.t) ->
        let x4608 = x4607 in
        match Ojs.string_of_js x4608 with
        | "parsed" -> `L_s146_parsed
        | "redundant" -> `L_s166_redundant
        | "activated" -> `L_s33_activated
        | "activating" -> `L_s34_activating
        | "installed" -> `L_s94_installed
        | "installing" -> `L_s95_installing
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x4606 :
          [ `L_s146_parsed  | `L_s166_redundant  | `L_s33_activated 
          | `L_s34_activating  | `L_s94_installed  | `L_s95_installing ])
        ->
        match x4606 with
        | `L_s146_parsed -> Ojs.string_to_js "parsed"
        | `L_s166_redundant -> Ojs.string_to_js "redundant"
        | `L_s33_activated -> Ojs.string_to_js "activated"
        | `L_s34_activating -> Ojs.string_to_js "activating"
        | `L_s94_installed -> Ojs.string_to_js "installed"
        | `L_s95_installing -> Ojs.string_to_js "installing"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4610 : Ojs.t) -> t_of_js x4610
    and t_0_to_js : t_0 -> Ojs.t = fun (x4609 : t) -> t_to_js x4609
  end
module ImageBitmap =
  struct
    type t = [ `ImageBitmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4612 : Ojs.t) -> t_of_js x4612
    and t_0_to_js : t_0 -> Ojs.t = fun (x4611 : t) -> t_to_js x4611
    type tags = [ `ImageBitmap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4615 : Ojs.t) -> intf_of_js __tags_of_js x4615
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4613 : __tags intf) -> intf_to_js __tags_to_js x4613
    let (get_height : 'tags this -> float) =
      fun (x4617 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4617) "height")
    let (get_width : 'tags this -> float) =
      fun (x4619 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4619) "width")
    let (close : 'tags this -> unit) =
      fun (x4621 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x4621) "close" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageBitmap")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "ImageBitmap") [||])
  end
module StructuredSerializeOptions =
  struct
    type t = [ `StructuredSerializeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4624 : Ojs.t) -> t_of_js x4624
    and t_0_to_js : t_0 -> Ojs.t = fun (x4623 : t) -> t_to_js x4623
    type tags = [ `StructuredSerializeOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `StructuredSerializeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4627 : Ojs.t) -> intf_of_js __tags_of_js x4627
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4625 : __tags intf) -> intf_to_js __tags_to_js x4625
    let (get_transfer : 'tags this -> any list) =
      fun (x4629 : 'tags this) ->
        Ojs.list_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4629) "transfer")
    let (set_transfer : 'tags this -> any list -> unit) =
      fun (x4632 : 'tags this) ->
        fun (x4633 : any list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4632) "transfer"
            (Ojs.list_to_js any_to_js x4633)
    let cast_from = Obj.magic
  end
module ErrorEventInit =
  struct
    type t = [ `ErrorEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4637 : Ojs.t) -> t_of_js x4637
    and t_0_to_js : t_0 -> Ojs.t = fun (x4636 : t) -> t_to_js x4636
    type tags = [ `ErrorEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4640 : Ojs.t) -> intf_of_js __tags_of_js x4640
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4638 : __tags intf) -> intf_to_js __tags_to_js x4638
    let (get_colno : 'tags this -> float) =
      fun (x4642 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4642) "colno")
    let (set_colno : 'tags this -> float -> unit) =
      fun (x4644 : 'tags this) ->
        fun (x4645 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4644) "colno"
            (Ojs.float_to_js x4645)
    let (get_error : 'tags this -> any) =
      fun (x4647 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x4647) "error")
    let (set_error : 'tags this -> any -> unit) =
      fun (x4649 : 'tags this) ->
        fun (x4650 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4649) "error"
            (any_to_js x4650)
    let (get_filename : 'tags this -> string) =
      fun (x4652 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4652) "filename")
    let (set_filename : 'tags this -> string -> unit) =
      fun (x4654 : 'tags this) ->
        fun (x4655 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4654) "filename"
            (Ojs.string_to_js x4655)
    let (get_lineno : 'tags this -> float) =
      fun (x4657 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4657) "lineno")
    let (set_lineno : 'tags this -> float -> unit) =
      fun (x4659 : 'tags this) ->
        fun (x4660 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4659) "lineno"
            (Ojs.float_to_js x4660)
    let (get_message : 'tags this -> string) =
      fun (x4662 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4662) "message")
    let (set_message : 'tags this -> string -> unit) =
      fun (x4664 : 'tags this) ->
        fun (x4665 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4664) "message"
            (Ojs.string_to_js x4665)
    let cast_from = Obj.magic
  end
module ErrorEvent =
  struct
    type t = [ `ErrorEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4668 : Ojs.t) -> t_of_js x4668
    and t_0_to_js : t_0 -> Ojs.t = fun (x4667 : t) -> t_to_js x4667
    type tags = [ `ErrorEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ErrorEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4671 : Ojs.t) -> intf_of_js __tags_of_js x4671
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4669 : __tags intf) -> intf_to_js __tags_to_js x4669
    let (get_colno : 'tags this -> float) =
      fun (x4673 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4673) "colno")
    let (get_error : 'tags this -> any) =
      fun (x4675 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x4675) "error")
    let (get_filename : 'tags this -> string) =
      fun (x4677 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4677) "filename")
    let (get_lineno : 'tags this -> float) =
      fun (x4679 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4679) "lineno")
    let (get_message : 'tags this -> string) =
      fun (x4681 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4681) "message")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:ErrorEventInit.t -> unit -> t) =
      fun ~type_:(x4683 : string) ->
        fun ?eventInitDict:(x4684 : ErrorEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ErrorEvent")
                 (let x4685 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x4685 "push" [|(Ojs.string_to_js x4683)|]);
                  (match x4684 with
                   | Some x4686 ->
                       ignore
                         (Ojs.call x4685 "push"
                            [|(ErrorEventInit.t_to_js x4686)|])
                   | None -> ());
                  x4685))
  end
module AbstractWorker =
  struct
    type t = [ `AbstractWorker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x4688 : Ojs.t) -> t_of_js x4688
    and t_0_to_js : t_0 -> Ojs.t = fun (x4687 : t) -> t_to_js x4687
    type tags = [ `AbstractWorker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbstractWorker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x4691 : Ojs.t) -> intf_of_js __tags_of_js x4691
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x4689 : __tags intf) -> intf_to_js __tags_to_js x4689
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null) =
      fun (x4693 : 'tags this) ->
        or_null_of_js
          (fun (x4695 : Ojs.t) ->
             fun ~this:(x4696 : t) ->
               fun ~ev:(x4697 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x4695
                      [|(t_to_js x4696);(ErrorEvent.t_to_js x4697)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x4693) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null -> unit) =
      fun (x4698 : 'tags this) ->
        fun (x4699 : (this:t -> ev:ErrorEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x4698) "onerror"
            (or_null_to_js
               (fun (x4700 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x4701 : Ojs.t) ->
                       fun (x4702 : Ojs.t) ->
                         any_to_js
                           (x4700 ~this:(t_of_js x4701)
                              ~ev:(ErrorEvent.t_of_js x4702)))) x4699)
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4712 : 'tags this) ->
        fun ~type_:(x4704 : 'K) ->
          fun ~listener:(x4705 : this:t -> ev:any -> any) ->
            fun
              ?options:(x4706 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4714 = this_to_js Obj.magic x4712 in
                   Ojs.call (Ojs.get_prop_ascii x4714 "addEventListener")
                     "apply"
                     [|x4714;((let x4707 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4707 "push" [|(Obj.magic x4704)|]);
                               ignore
                                 (Ojs.call x4707 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4710 : Ojs.t) ->
                                            fun (x4711 : Ojs.t) ->
                                              any_to_js
                                                (x4705 ~this:(t_of_js x4710)
                                                   ~ev:(any_of_js x4711))))|]);
                               (match x4706 with
                                | Some x4708 ->
                                    ignore
                                      (Ojs.call x4707 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x4708)|])
                                | None -> ());
                               x4707))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4721 : 'tags this) ->
        fun ~type_:(x4715 : string) ->
          fun ~listener:(x4716 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x4717 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4723 = this_to_js Obj.magic x4721 in
                   Ojs.call (Ojs.get_prop_ascii x4723 "addEventListener")
                     "apply"
                     [|x4723;((let x4718 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4718 "push"
                                    [|(Ojs.string_to_js x4715)|]);
                               ignore
                                 (Ojs.call x4718 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4716)|]);
                               (match x4717 with
                                | Some x4719 ->
                                    ignore
                                      (Ojs.call x4718 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x4719)|])
                                | None -> ());
                               x4718))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4732 : 'tags this) ->
        fun ~type_:(x4724 : 'K) ->
          fun ~listener:(x4725 : this:t -> ev:any -> any) ->
            fun ?options:(x4726 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4734 = this_to_js Obj.magic x4732 in
                   Ojs.call (Ojs.get_prop_ascii x4734 "removeEventListener")
                     "apply"
                     [|x4734;((let x4727 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4727 "push" [|(Obj.magic x4724)|]);
                               ignore
                                 (Ojs.call x4727 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x4730 : Ojs.t) ->
                                            fun (x4731 : Ojs.t) ->
                                              any_to_js
                                                (x4725 ~this:(t_of_js x4730)
                                                   ~ev:(any_of_js x4731))))|]);
                               (match x4726 with
                                | Some x4728 ->
                                    ignore
                                      (Ojs.call x4727 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x4728)|])
                                | None -> ());
                               x4727))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x4741 : 'tags this) ->
        fun ~type_:(x4735 : string) ->
          fun ~listener:(x4736 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x4737 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x4743 = this_to_js Obj.magic x4741 in
                   Ojs.call (Ojs.get_prop_ascii x4743 "removeEventListener")
                     "apply"
                     [|x4743;((let x4738 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x4738 "push"
                                    [|(Ojs.string_to_js x4735)|]);
                               ignore
                                 (Ojs.call x4738 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x4736)|]);
                               (match x4737 with
                                | Some x4739 ->
                                    ignore
                                      (Ojs.call x4738 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x4739)|])
                                | None -> ());
                               x4738))|])
    let cast_from = Obj.magic
  end
module rec
  MessageEvent:sig
                 type 'T t = [ `Event  | `MessageEvent of 'T ] intf
                 type 'T t_1 = 'T t
                 type t_0 = any t
                 [@@@js.stop ]
                 type 'T tags = [ `Event  | `MessageEvent of 'T ]
                 type 'T tags_1 = 'T tags
                 type tags_0 = any tags
                 [@@@js.start ]
                 [@@@js.implem
                   type 'T tags = [ `Event  | `MessageEvent of 'T ]
                   type 'T tags_1 = 'T tags
                   type tags_0 = any tags]
                 type ('tags, 'T) this =
                   'tags intf constraint 'tags = [> `MessageEvent of 'T ]
                 val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                 val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                 val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                 val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                 val t_0_to_js : t_0 -> Ojs.t
                 val t_0_of_js : Ojs.t -> t_0
                 val get_data : ('tags, 'T) this -> 'T
                 val get_lastEventId : ('tags, 'T) this -> string
                 val get_origin : ('tags, 'T) this -> string
                 val get_ports : ('tags, 'T) this -> MessagePort.t list
                 val get_source :
                   ('tags, 'T) this -> MessageEventSource.t or_null
                 val initMessageEvent :
                   ('tags, 'T) this ->
                     type_:string ->
                       ?bubbles:bool ->
                         ?cancelable:bool ->
                           ?data:any ->
                             ?origin:string ->
                               ?lastEventId:string ->
                                 ?source:MessageEventSource.t or_null ->
                                   ?ports:MessagePort.t list -> unit -> unit
                 val initMessageEvent' :
                   ('tags, 'T) this ->
                     type_:string ->
                       ?bubbles:bool ->
                         ?cancelable:bool ->
                           ?data:any ->
                             ?origin:string ->
                               ?lastEventId:string ->
                                 ?source:MessageEventSource.t or_null ->
                                   ?ports:MessagePort.t Iterable.t_1 ->
                                     unit -> unit
                 val cast_from : ('tags, 'T) this -> 'T t
                 val prototype : unit -> t_0
                 val create :
                   type_:string ->
                     ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t
               end =
  struct
    type 'T t = [ `Event  | `MessageEvent of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4746 : Ojs.t) -> t_of_js __T_of_js x4746
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4744 : __T t) -> t_to_js __T_to_js x4744
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x4750 : Ojs.t) -> t_of_js any_of_js x4750
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x4748 : any t) -> t_to_js any_to_js x4748
    type 'T tags = [ `Event  | `MessageEvent of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `MessageEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x4754 : Ojs.t) -> intf_of_js __tags_of_js x4754
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x4752 : __tags intf) -> intf_to_js __tags_to_js x4752
    let (get_data : ('tags, 'T) this -> 'T) =
      fun (x4756 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4756) "data")
    let (get_lastEventId : ('tags, 'T) this -> string) =
      fun (x4759 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4759)
             "lastEventId")
    let (get_origin : ('tags, 'T) this -> string) =
      fun (x4762 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4762) "origin")
    let (get_ports : ('tags, 'T) this -> MessagePort.t list) =
      fun (x4765 : ('tags, 'T) this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4765) "ports")
    let (get_source : ('tags, 'T) this -> MessageEventSource.t or_null) =
      fun (x4769 : ('tags, 'T) this) ->
        or_null_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4769) "source")
    let (initMessageEvent :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t or_null ->
                      ?ports:MessagePort.t list -> unit -> unit)
      =
      fun (x4791 : ('tags, 'T) this) ->
        fun ~type_:(x4773 : string) ->
          fun ?bubbles:(x4774 : bool option) ->
            fun ?cancelable:(x4775 : bool option) ->
              fun ?data:(x4776 : any option) ->
                fun ?origin:(x4777 : string option) ->
                  fun ?lastEventId:(x4778 : string option) ->
                    fun ?source:(x4779 : MessageEventSource.t or_null option)
                      ->
                      fun ?ports:(x4780 : MessagePort.t list option) ->
                        fun () ->
                          ignore
                            (let x4794 = this_to_js Obj.magic Obj.magic x4791 in
                             Ojs.call
                               (Ojs.get_prop_ascii x4794 "initMessageEvent")
                               "apply"
                               [|x4794;((let x4781 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x4781 "push"
                                              [|(Ojs.string_to_js x4773)|]);
                                         (match x4774 with
                                          | Some x4790 ->
                                              ignore
                                                (Ojs.call x4781 "push"
                                                   [|(Ojs.bool_to_js x4790)|])
                                          | None -> ());
                                         (match x4775 with
                                          | Some x4789 ->
                                              ignore
                                                (Ojs.call x4781 "push"
                                                   [|(Ojs.bool_to_js x4789)|])
                                          | None -> ());
                                         (match x4776 with
                                          | Some x4788 ->
                                              ignore
                                                (Ojs.call x4781 "push"
                                                   [|(any_to_js x4788)|])
                                          | None -> ());
                                         (match x4777 with
                                          | Some x4787 ->
                                              ignore
                                                (Ojs.call x4781 "push"
                                                   [|(Ojs.string_to_js x4787)|])
                                          | None -> ());
                                         (match x4778 with
                                          | Some x4786 ->
                                              ignore
                                                (Ojs.call x4781 "push"
                                                   [|(Ojs.string_to_js x4786)|])
                                          | None -> ());
                                         (match x4779 with
                                          | Some x4784 ->
                                              ignore
                                                (Ojs.call x4781 "push"
                                                   [|(or_null_to_js
                                                        MessageEventSource.t_to_js
                                                        x4784)|])
                                          | None -> ());
                                         (match x4780 with
                                          | Some x4782 ->
                                              ignore
                                                (Ojs.call x4781 "push"
                                                   [|(Ojs.list_to_js
                                                        MessagePort.t_to_js
                                                        x4782)|])
                                          | None -> ());
                                         x4781))|])
    let (initMessageEvent' :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool ->
            ?cancelable:bool ->
              ?data:any ->
                ?origin:string ->
                  ?lastEventId:string ->
                    ?source:MessageEventSource.t or_null ->
                      ?ports:MessagePort.t Iterable.t_1 -> unit -> unit)
      =
      fun (x4813 : ('tags, 'T) this) ->
        fun ~type_:(x4795 : string) ->
          fun ?bubbles:(x4796 : bool option) ->
            fun ?cancelable:(x4797 : bool option) ->
              fun ?data:(x4798 : any option) ->
                fun ?origin:(x4799 : string option) ->
                  fun ?lastEventId:(x4800 : string option) ->
                    fun ?source:(x4801 : MessageEventSource.t or_null option)
                      ->
                      fun ?ports:(x4802 : MessagePort.t Iterable.t_1 option)
                        ->
                        fun () ->
                          ignore
                            (let x4816 = this_to_js Obj.magic Obj.magic x4813 in
                             Ojs.call
                               (Ojs.get_prop_ascii x4816 "initMessageEvent")
                               "apply"
                               [|x4816;((let x4803 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x4803 "push"
                                              [|(Ojs.string_to_js x4795)|]);
                                         (match x4796 with
                                          | Some x4812 ->
                                              ignore
                                                (Ojs.call x4803 "push"
                                                   [|(Ojs.bool_to_js x4812)|])
                                          | None -> ());
                                         (match x4797 with
                                          | Some x4811 ->
                                              ignore
                                                (Ojs.call x4803 "push"
                                                   [|(Ojs.bool_to_js x4811)|])
                                          | None -> ());
                                         (match x4798 with
                                          | Some x4810 ->
                                              ignore
                                                (Ojs.call x4803 "push"
                                                   [|(any_to_js x4810)|])
                                          | None -> ());
                                         (match x4799 with
                                          | Some x4809 ->
                                              ignore
                                                (Ojs.call x4803 "push"
                                                   [|(Ojs.string_to_js x4809)|])
                                          | None -> ());
                                         (match x4800 with
                                          | Some x4808 ->
                                              ignore
                                                (Ojs.call x4803 "push"
                                                   [|(Ojs.string_to_js x4808)|])
                                          | None -> ());
                                         (match x4801 with
                                          | Some x4806 ->
                                              ignore
                                                (Ojs.call x4803 "push"
                                                   [|(or_null_to_js
                                                        MessageEventSource.t_to_js
                                                        x4806)|])
                                          | None -> ());
                                         (match x4802 with
                                          | Some x4804 ->
                                              ignore
                                                (Ojs.call x4803 "push"
                                                   [|(Iterable.t_1_to_js
                                                        MessagePort.t_to_js
                                                        x4804)|])
                                          | None -> ());
                                         x4803))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "MessageEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:'T MessageEventInit.t -> unit -> 'T t) =
      fun ~type_:(x4817 : string) ->
        fun ?eventInitDict:(x4818 : 'T MessageEventInit.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "MessageEvent")
                 (let x4819 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x4819 "push" [|(Ojs.string_to_js x4817)|]);
                  (match x4818 with
                   | Some x4820 ->
                       ignore
                         (Ojs.call x4819 "push"
                            [|(MessageEventInit.t_to_js Obj.magic x4820)|])
                   | None -> ());
                  x4819))
  end
 and
  MessageEventInit:sig
                     type 'T t =
                       [ `EventInit  | `MessageEventInit of 'T ] intf
                     type 'T t_1 = 'T t
                     type t_0 = any t
                     [@@@js.stop ]
                     type 'T tags = [ `EventInit  | `MessageEventInit of 'T ]
                     type 'T tags_1 = 'T tags
                     type tags_0 = any tags
                     [@@@js.start ]
                     [@@@js.implem
                       type 'T tags =
                         [ `EventInit  | `MessageEventInit of 'T ]
                       type 'T tags_1 = 'T tags
                       type tags_0 = any tags]
                     type ('tags, 'T) this =
                       'tags intf constraint 'tags =
                                   [> `MessageEventInit of 'T ]
                     val t_to_js : ('T -> Ojs.t) -> 'T t -> Ojs.t
                     val t_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t
                     val t_1_to_js : ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
                     val t_1_of_js : (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_data : ('tags, 'T) this -> 'T
                     val set_data : ('tags, 'T) this -> 'T -> unit
                     val get_lastEventId : ('tags, 'T) this -> string
                     val set_lastEventId : ('tags, 'T) this -> string -> unit
                     val get_origin : ('tags, 'T) this -> string
                     val set_origin : ('tags, 'T) this -> string -> unit
                     val get_ports : ('tags, 'T) this -> MessagePort.t list
                     val set_ports :
                       ('tags, 'T) this -> MessagePort.t list -> unit
                     val get_source :
                       ('tags, 'T) this -> MessageEventSource.t or_null
                     val set_source :
                       ('tags, 'T) this ->
                         MessageEventSource.t or_null -> unit
                     val cast_from : ('tags, 'T) this -> 'T t
                   end =
  struct
    type 'T t = [ `EventInit  | `MessageEventInit of 'T ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x4825 : Ojs.t) -> t_of_js __T_of_js x4825
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x4823 : __T t) -> t_to_js __T_to_js x4823
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x4829 : Ojs.t) -> t_of_js any_of_js x4829
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x4827 : any t) -> t_to_js any_to_js x4827
    type 'T tags = [ `EventInit  | `MessageEventInit of 'T ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `MessageEventInit of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x4833 : Ojs.t) -> intf_of_js __tags_of_js x4833
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x4831 : __tags intf) -> intf_to_js __tags_to_js x4831
    let (get_data : ('tags, 'T) this -> 'T) =
      fun (x4835 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4835) "data")
    let (set_data : ('tags, 'T) this -> 'T -> unit) =
      fun (x4838 : ('tags, 'T) this) ->
        fun (x4839 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x4838) "data"
            (Obj.magic x4839)
    let (get_lastEventId : ('tags, 'T) this -> string) =
      fun (x4842 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4842)
             "lastEventId")
    let (set_lastEventId : ('tags, 'T) this -> string -> unit) =
      fun (x4845 : ('tags, 'T) this) ->
        fun (x4846 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x4845)
            "lastEventId" (Ojs.string_to_js x4846)
    let (get_origin : ('tags, 'T) this -> string) =
      fun (x4849 : ('tags, 'T) this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4849) "origin")
    let (set_origin : ('tags, 'T) this -> string -> unit) =
      fun (x4852 : ('tags, 'T) this) ->
        fun (x4853 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x4852) "origin"
            (Ojs.string_to_js x4853)
    let (get_ports : ('tags, 'T) this -> MessagePort.t list) =
      fun (x4856 : ('tags, 'T) this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4856) "ports")
    let (set_ports : ('tags, 'T) this -> MessagePort.t list -> unit) =
      fun (x4860 : ('tags, 'T) this) ->
        fun (x4861 : MessagePort.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x4860) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x4861)
    let (get_source : ('tags, 'T) this -> MessageEventSource.t or_null) =
      fun (x4865 : ('tags, 'T) this) ->
        or_null_of_js MessageEventSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x4865) "source")
    let (set_source :
      ('tags, 'T) this -> MessageEventSource.t or_null -> unit) =
      fun (x4869 : ('tags, 'T) this) ->
        fun (x4870 : MessageEventSource.t or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x4869) "source"
            (or_null_to_js MessageEventSource.t_to_js x4870)
    let cast_from = Obj.magic
  end and
       MessageEventSource:sig
                            type t = (MessagePort.t, ServiceWorker.t) union2
                            type t_0 = t
                            val t_to_js : t -> Ojs.t
                            val t_of_js : Ojs.t -> t
                            val t_0_to_js : t_0 -> Ojs.t
                            val t_0_of_js : Ojs.t -> t_0
                          end =
       struct
         type t = (MessagePort.t, ServiceWorker.t) union2
         let rec t_of_js : Ojs.t -> t =
           fun (x4877 : Ojs.t) ->
             union2_of_js MessagePort.t_of_js ServiceWorker.t_of_js x4877
         and t_to_js : t -> Ojs.t =
           fun (x4874 : (MessagePort.t, ServiceWorker.t) union2) ->
             union2_to_js MessagePort.t_to_js ServiceWorker.t_to_js x4874
         type t_0 = t
         let rec t_0_of_js : Ojs.t -> t_0 =
           fun (x4881 : Ojs.t) -> t_of_js x4881
         and t_0_to_js : t_0 -> Ojs.t = fun (x4880 : t) -> t_to_js x4880
       end and
            MessagePort:sig
                          type t = [ `EventTarget  | `MessagePort ] intf
                          type t_0 = t
                          [@@@js.stop ]
                          type tags = [ `EventTarget  | `MessagePort ]
                          type tags_0 = tags
                          [@@@js.start ]
                          [@@@js.implem
                            type tags = [ `EventTarget  | `MessagePort ]
                            type tags_0 = tags]
                          type 'tags this =
                            'tags intf constraint 'tags = [> `MessagePort ]
                          val t_to_js : t -> Ojs.t
                          val t_of_js : Ojs.t -> t
                          val t_0_to_js : t_0 -> Ojs.t
                          val t_0_of_js : Ojs.t -> t_0
                          val get_onmessage :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) or_null
                          val set_onmessage :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) or_null
                                -> unit
                          val get_onmessageerror :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) or_null
                          val set_onmessageerror :
                            'tags this ->
                              (this:t -> ev:MessageEvent.t_0 -> any) or_null
                                -> unit
                          val close : 'tags this -> unit
                          val postMessage :
                            'tags this ->
                              message:any ->
                                transfer:Transferable.t list -> unit
                          val postMessage' :
                            'tags this ->
                              message:any ->
                                ?options:StructuredSerializeOptions.t ->
                                  unit -> unit
                          val start : 'tags this -> unit
                          val addEventListener :
                            'tags this ->
                              type_:'K ->
                                listener:(this:t -> ev:any -> any) ->
                                  ?options:AddEventListenerOptions.t
                                    or_boolean -> unit -> unit
                          val addEventListener' :
                            'tags this ->
                              type_:string ->
                                listener:EventListenerOrEventListenerObject.t
                                  ->
                                  ?options:AddEventListenerOptions.t
                                    or_boolean -> unit -> unit
                          val removeEventListener :
                            'tags this ->
                              type_:'K ->
                                listener:(this:t -> ev:any -> any) ->
                                  ?options:EventListenerOptions.t or_boolean
                                    -> unit -> unit
                          val removeEventListener' :
                            'tags this ->
                              type_:string ->
                                listener:EventListenerOrEventListenerObject.t
                                  ->
                                  ?options:EventListenerOptions.t or_boolean
                                    -> unit -> unit
                          val cast_from : 'tags this -> t
                          val prototype : unit -> t
                          val create : unit -> t
                        end =
            struct
              type t = [ `EventTarget  | `MessagePort ] intf
              let rec t_of_js : Ojs.t -> t = Obj.magic
              and t_to_js : t -> Ojs.t = Obj.magic
              type t_0 = t
              let rec t_0_of_js : Ojs.t -> t_0 =
                fun (x4883 : Ojs.t) -> t_of_js x4883
              and t_0_to_js : t_0 -> Ojs.t = fun (x4882 : t) -> t_to_js x4882
              type tags = [ `EventTarget  | `MessagePort ]
              type tags_0 = tags
              type 'tags this =
                'tags intf constraint 'tags = [> `MessagePort ]
              let rec this_of_js :
                'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun (type
                __tags) ->
                fun (__tags_of_js : Ojs.t -> __tags) ->
                  fun (x4886 : Ojs.t) -> intf_of_js __tags_of_js x4886
              and this_to_js :
                'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun (type
                __tags) ->
                fun (__tags_to_js : __tags -> Ojs.t) ->
                  fun (x4884 : __tags intf) -> intf_to_js __tags_to_js x4884
              let (get_onmessage :
                'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null)
                =
                fun (x4888 : 'tags this) ->
                  or_null_of_js
                    (fun (x4890 : Ojs.t) ->
                       fun ~this:(x4891 : t) ->
                         fun ~ev:(x4892 : MessageEvent.t_0) ->
                           any_of_js
                             (Ojs.apply x4890
                                [|(t_to_js x4891);(MessageEvent.t_0_to_js
                                                     x4892)|]))
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4888)
                       "onmessage")
              let (set_onmessage :
                'tags this ->
                  (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit)
                =
                fun (x4893 : 'tags this) ->
                  fun
                    (x4894 : (this:t -> ev:MessageEvent.t_0 -> any) or_null)
                    ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x4893)
                      "onmessage"
                      (or_null_to_js
                         (fun (x4895 : this:t -> ev:MessageEvent.t_0 -> any)
                            ->
                            Ojs.fun_to_js 2
                              (fun (x4896 : Ojs.t) ->
                                 fun (x4897 : Ojs.t) ->
                                   any_to_js
                                     (x4895 ~this:(t_of_js x4896)
                                        ~ev:(MessageEvent.t_0_of_js x4897))))
                         x4894)
              let (get_onmessageerror :
                'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null)
                =
                fun (x4899 : 'tags this) ->
                  or_null_of_js
                    (fun (x4901 : Ojs.t) ->
                       fun ~this:(x4902 : t) ->
                         fun ~ev:(x4903 : MessageEvent.t_0) ->
                           any_of_js
                             (Ojs.apply x4901
                                [|(t_to_js x4902);(MessageEvent.t_0_to_js
                                                     x4903)|]))
                    (Ojs.get_prop_ascii (this_to_js Obj.magic x4899)
                       "onmessageerror")
              let (set_onmessageerror :
                'tags this ->
                  (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit)
                =
                fun (x4904 : 'tags this) ->
                  fun
                    (x4905 : (this:t -> ev:MessageEvent.t_0 -> any) or_null)
                    ->
                    Ojs.set_prop_ascii (this_to_js Obj.magic x4904)
                      "onmessageerror"
                      (or_null_to_js
                         (fun (x4906 : this:t -> ev:MessageEvent.t_0 -> any)
                            ->
                            Ojs.fun_to_js 2
                              (fun (x4907 : Ojs.t) ->
                                 fun (x4908 : Ojs.t) ->
                                   any_to_js
                                     (x4906 ~this:(t_of_js x4907)
                                        ~ev:(MessageEvent.t_0_of_js x4908))))
                         x4905)
              let (close : 'tags this -> unit) =
                fun (x4910 : 'tags this) ->
                  ignore (Ojs.call (this_to_js Obj.magic x4910) "close" [||])
              let (postMessage :
                'tags this ->
                  message:any -> transfer:Transferable.t list -> unit)
                =
                fun (x4915 : 'tags this) ->
                  fun ~message:(x4912 : any) ->
                    fun ~transfer:(x4913 : Transferable.t list) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x4915) "postMessage"
                           [|(any_to_js x4912);(Ojs.list_to_js
                                                  Transferable.t_to_js x4913)|])
              let (postMessage' :
                'tags this ->
                  message:any ->
                    ?options:StructuredSerializeOptions.t -> unit -> unit)
                =
                fun (x4921 : 'tags this) ->
                  fun ~message:(x4917 : any) ->
                    fun
                      ?options:(x4918 : StructuredSerializeOptions.t option)
                      ->
                      fun () ->
                        ignore
                          (let x4923 = this_to_js Obj.magic x4921 in
                           Ojs.call (Ojs.get_prop_ascii x4923 "postMessage")
                             "apply"
                             [|x4923;((let x4919 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       ignore
                                         (Ojs.call x4919 "push"
                                            [|(any_to_js x4917)|]);
                                       (match x4918 with
                                        | Some x4920 ->
                                            ignore
                                              (Ojs.call x4919 "push"
                                                 [|(StructuredSerializeOptions.t_to_js
                                                      x4920)|])
                                        | None -> ());
                                       x4919))|])
              let (start : 'tags this -> unit) =
                fun (x4924 : 'tags this) ->
                  ignore (Ojs.call (this_to_js Obj.magic x4924) "start" [||])
              let (addEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:AddEventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x4934 : 'tags this) ->
                  fun ~type_:(x4926 : 'K) ->
                    fun ~listener:(x4927 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x4928 :
                                   AddEventListenerOptions.t or_boolean
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x4936 = this_to_js Obj.magic x4934 in
                             Ojs.call
                               (Ojs.get_prop_ascii x4936 "addEventListener")
                               "apply"
                               [|x4936;((let x4929 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x4929 "push"
                                              [|(Obj.magic x4926)|]);
                                         ignore
                                           (Ojs.call x4929 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x4932 : Ojs.t) ->
                                                      fun (x4933 : Ojs.t) ->
                                                        any_to_js
                                                          (x4927
                                                             ~this:(t_of_js
                                                                    x4932)
                                                             ~ev:(any_of_js
                                                                    x4933))))|]);
                                         (match x4928 with
                                          | Some x4930 ->
                                              ignore
                                                (Ojs.call x4929 "push"
                                                   [|(or_boolean_to_js
                                                        AddEventListenerOptions.t_to_js
                                                        x4930)|])
                                          | None -> ());
                                         x4929))|])
              let (addEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:AddEventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x4943 : 'tags this) ->
                  fun ~type_:(x4937 : string) ->
                    fun
                      ~listener:(x4938 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x4939 :
                                   AddEventListenerOptions.t or_boolean
                                     option)
                        ->
                        fun () ->
                          ignore
                            (let x4945 = this_to_js Obj.magic x4943 in
                             Ojs.call
                               (Ojs.get_prop_ascii x4945 "addEventListener")
                               "apply"
                               [|x4945;((let x4940 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x4940 "push"
                                              [|(Ojs.string_to_js x4937)|]);
                                         ignore
                                           (Ojs.call x4940 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x4938)|]);
                                         (match x4939 with
                                          | Some x4941 ->
                                              ignore
                                                (Ojs.call x4940 "push"
                                                   [|(or_boolean_to_js
                                                        AddEventListenerOptions.t_to_js
                                                        x4941)|])
                                          | None -> ());
                                         x4940))|])
              let (removeEventListener :
                'tags this ->
                  type_:'K ->
                    listener:(this:t -> ev:any -> any) ->
                      ?options:EventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x4954 : 'tags this) ->
                  fun ~type_:(x4946 : 'K) ->
                    fun ~listener:(x4947 : this:t -> ev:any -> any) ->
                      fun
                        ?options:(x4948 :
                                   EventListenerOptions.t or_boolean option)
                        ->
                        fun () ->
                          ignore
                            (let x4956 = this_to_js Obj.magic x4954 in
                             Ojs.call
                               (Ojs.get_prop_ascii x4956
                                  "removeEventListener") "apply"
                               [|x4956;((let x4949 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x4949 "push"
                                              [|(Obj.magic x4946)|]);
                                         ignore
                                           (Ojs.call x4949 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x4952 : Ojs.t) ->
                                                      fun (x4953 : Ojs.t) ->
                                                        any_to_js
                                                          (x4947
                                                             ~this:(t_of_js
                                                                    x4952)
                                                             ~ev:(any_of_js
                                                                    x4953))))|]);
                                         (match x4948 with
                                          | Some x4950 ->
                                              ignore
                                                (Ojs.call x4949 "push"
                                                   [|(or_boolean_to_js
                                                        EventListenerOptions.t_to_js
                                                        x4950)|])
                                          | None -> ());
                                         x4949))|])
              let (removeEventListener' :
                'tags this ->
                  type_:string ->
                    listener:EventListenerOrEventListenerObject.t ->
                      ?options:EventListenerOptions.t or_boolean ->
                        unit -> unit)
                =
                fun (x4963 : 'tags this) ->
                  fun ~type_:(x4957 : string) ->
                    fun
                      ~listener:(x4958 :
                                  EventListenerOrEventListenerObject.t)
                      ->
                      fun
                        ?options:(x4959 :
                                   EventListenerOptions.t or_boolean option)
                        ->
                        fun () ->
                          ignore
                            (let x4965 = this_to_js Obj.magic x4963 in
                             Ojs.call
                               (Ojs.get_prop_ascii x4965
                                  "removeEventListener") "apply"
                               [|x4965;((let x4960 =
                                           Ojs.new_obj
                                             (Ojs.get_prop_ascii Ojs.global
                                                "Array") [||] in
                                         ignore
                                           (Ojs.call x4960 "push"
                                              [|(Ojs.string_to_js x4957)|]);
                                         ignore
                                           (Ojs.call x4960 "push"
                                              [|(EventListenerOrEventListenerObject.t_to_js
                                                   x4958)|]);
                                         (match x4959 with
                                          | Some x4961 ->
                                              ignore
                                                (Ojs.call x4960 "push"
                                                   [|(or_boolean_to_js
                                                        EventListenerOptions.t_to_js
                                                        x4961)|])
                                          | None -> ());
                                         x4960))|])
              let cast_from = Obj.magic
              let (prototype : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.get_prop_ascii
                       (Ojs.get_prop_ascii Ojs.global "MessagePort")
                       "prototype")
              let (create : unit -> t) =
                fun () ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Ojs.global "MessagePort") 
                       [||])
            end and
                 ServiceWorker:sig
                                 type t =
                                   [ `AbstractWorker  | `EventTarget 
                                   | `ServiceWorker ] intf
                                 type t_0 = t
                                 [@@@js.stop ]
                                 type tags =
                                   [ `AbstractWorker  | `EventTarget 
                                   | `ServiceWorker ]
                                 type tags_0 = tags
                                 [@@@js.start ]
                                 [@@@js.implem
                                   type tags =
                                     [ `AbstractWorker  | `EventTarget 
                                     | `ServiceWorker ]
                                   type tags_0 = tags]
                                 type 'tags this =
                                   'tags intf constraint 'tags =
                                               [> `ServiceWorker ]
                                 val t_to_js : t -> Ojs.t
                                 val t_of_js : Ojs.t -> t
                                 val t_0_to_js : t_0 -> Ojs.t
                                 val t_0_of_js : Ojs.t -> t_0
                                 val get_onstatechange :
                                   'tags this ->
                                     (this:t -> ev:Event.t -> any) or_null
                                 val set_onstatechange :
                                   'tags this ->
                                     (this:t -> ev:Event.t -> any) or_null ->
                                       unit
                                 val get_scriptURL : 'tags this -> string
                                 val get_state :
                                   'tags this -> ServiceWorkerState.t
                                 val postMessage :
                                   'tags this ->
                                     message:any ->
                                       transfer:Transferable.t list -> unit
                                 val postMessage' :
                                   'tags this ->
                                     message:any ->
                                       ?options:StructuredSerializeOptions.t
                                         -> unit -> unit
                                 val addEventListener :
                                   'tags this ->
                                     type_:'K ->
                                       listener:(this:t -> ev:any -> any) ->
                                         ?options:AddEventListenerOptions.t
                                           or_boolean -> unit -> unit
                                 val addEventListener' :
                                   'tags this ->
                                     type_:string ->
                                       listener:EventListenerOrEventListenerObject.t
                                         ->
                                         ?options:AddEventListenerOptions.t
                                           or_boolean -> unit -> unit
                                 val removeEventListener :
                                   'tags this ->
                                     type_:'K ->
                                       listener:(this:t -> ev:any -> any) ->
                                         ?options:EventListenerOptions.t
                                           or_boolean -> unit -> unit
                                 val removeEventListener' :
                                   'tags this ->
                                     type_:string ->
                                       listener:EventListenerOrEventListenerObject.t
                                         ->
                                         ?options:EventListenerOptions.t
                                           or_boolean -> unit -> unit
                                 val cast_from : 'tags this -> t
                                 val prototype : unit -> t
                                 val create : unit -> t
                               end =
                 struct
                   type t =
                     [ `AbstractWorker  | `EventTarget  | `ServiceWorker ]
                       intf
                   let rec t_of_js : Ojs.t -> t = Obj.magic
                   and t_to_js : t -> Ojs.t = Obj.magic
                   type t_0 = t
                   let rec t_0_of_js : Ojs.t -> t_0 =
                     fun (x4967 : Ojs.t) -> t_of_js x4967
                   and t_0_to_js : t_0 -> Ojs.t =
                     fun (x4966 : t) -> t_to_js x4966
                   type tags =
                     [ `AbstractWorker  | `EventTarget  | `ServiceWorker ]
                   type tags_0 = tags
                   type 'tags this =
                     'tags intf constraint 'tags = [> `ServiceWorker ]
                   let rec this_of_js :
                     'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this = fun
                     (type __tags) ->
                     fun (__tags_of_js : Ojs.t -> __tags) ->
                       fun (x4970 : Ojs.t) -> intf_of_js __tags_of_js x4970
                   and this_to_js :
                     'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
                     (type __tags) ->
                     fun (__tags_to_js : __tags -> Ojs.t) ->
                       fun (x4968 : __tags intf) ->
                         intf_to_js __tags_to_js x4968
                   let (get_onstatechange :
                     'tags this -> (this:t -> ev:Event.t -> any) or_null) =
                     fun (x4972 : 'tags this) ->
                       or_null_of_js
                         (fun (x4974 : Ojs.t) ->
                            fun ~this:(x4975 : t) ->
                              fun ~ev:(x4976 : Event.t) ->
                                any_of_js
                                  (Ojs.apply x4974
                                     [|(t_to_js x4975);(Event.t_to_js x4976)|]))
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4972)
                            "onstatechange")
                   let (set_onstatechange :
                     'tags this ->
                       (this:t -> ev:Event.t -> any) or_null -> unit)
                     =
                     fun (x4977 : 'tags this) ->
                       fun (x4978 : (this:t -> ev:Event.t -> any) or_null) ->
                         Ojs.set_prop_ascii (this_to_js Obj.magic x4977)
                           "onstatechange"
                           (or_null_to_js
                              (fun (x4979 : this:t -> ev:Event.t -> any) ->
                                 Ojs.fun_to_js 2
                                   (fun (x4980 : Ojs.t) ->
                                      fun (x4981 : Ojs.t) ->
                                        any_to_js
                                          (x4979 ~this:(t_of_js x4980)
                                             ~ev:(Event.t_of_js x4981))))
                              x4978)
                   let (get_scriptURL : 'tags this -> string) =
                     fun (x4983 : 'tags this) ->
                       Ojs.string_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4983)
                            "scriptURL")
                   let (get_state : 'tags this -> ServiceWorkerState.t) =
                     fun (x4985 : 'tags this) ->
                       ServiceWorkerState.t_of_js
                         (Ojs.get_prop_ascii (this_to_js Obj.magic x4985)
                            "state")
                   let (postMessage :
                     'tags this ->
                       message:any -> transfer:Transferable.t list -> unit)
                     =
                     fun (x4990 : 'tags this) ->
                       fun ~message:(x4987 : any) ->
                         fun ~transfer:(x4988 : Transferable.t list) ->
                           ignore
                             (Ojs.call (this_to_js Obj.magic x4990)
                                "postMessage"
                                [|(any_to_js x4987);(Ojs.list_to_js
                                                       Transferable.t_to_js
                                                       x4988)|])
                   let (postMessage' :
                     'tags this ->
                       message:any ->
                         ?options:StructuredSerializeOptions.t ->
                           unit -> unit)
                     =
                     fun (x4996 : 'tags this) ->
                       fun ~message:(x4992 : any) ->
                         fun
                           ?options:(x4993 :
                                      StructuredSerializeOptions.t option)
                           ->
                           fun () ->
                             ignore
                               (let x4998 = this_to_js Obj.magic x4996 in
                                Ojs.call
                                  (Ojs.get_prop_ascii x4998 "postMessage")
                                  "apply"
                                  [|x4998;((let x4994 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x4994 "push"
                                                 [|(any_to_js x4992)|]);
                                            (match x4993 with
                                             | Some x4995 ->
                                                 ignore
                                                   (Ojs.call x4994 "push"
                                                      [|(StructuredSerializeOptions.t_to_js
                                                           x4995)|])
                                             | None -> ());
                                            x4994))|])
                   let (addEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:AddEventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x5007 : 'tags this) ->
                       fun ~type_:(x4999 : 'K) ->
                         fun ~listener:(x5000 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x5001 :
                                        AddEventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5009 = this_to_js Obj.magic x5007 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5009
                                       "addEventListener") "apply"
                                    [|x5009;((let x5002 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5002 "push"
                                                   [|(Obj.magic x4999)|]);
                                              ignore
                                                (Ojs.call x5002 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x5005 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x5006 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x5000
                                                                  ~this:(
                                                                  t_of_js
                                                                    x5005)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x5006))))|]);
                                              (match x5001 with
                                               | Some x5003 ->
                                                   ignore
                                                     (Ojs.call x5002 "push"
                                                        [|(or_boolean_to_js
                                                             AddEventListenerOptions.t_to_js
                                                             x5003)|])
                                               | None -> ());
                                              x5002))|])
                   let (addEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:AddEventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x5016 : 'tags this) ->
                       fun ~type_:(x5010 : string) ->
                         fun
                           ~listener:(x5011 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x5012 :
                                        AddEventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5018 = this_to_js Obj.magic x5016 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5018
                                       "addEventListener") "apply"
                                    [|x5018;((let x5013 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5013 "push"
                                                   [|(Ojs.string_to_js x5010)|]);
                                              ignore
                                                (Ojs.call x5013 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x5011)|]);
                                              (match x5012 with
                                               | Some x5014 ->
                                                   ignore
                                                     (Ojs.call x5013 "push"
                                                        [|(or_boolean_to_js
                                                             AddEventListenerOptions.t_to_js
                                                             x5014)|])
                                               | None -> ());
                                              x5013))|])
                   let (removeEventListener :
                     'tags this ->
                       type_:'K ->
                         listener:(this:t -> ev:any -> any) ->
                           ?options:EventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x5027 : 'tags this) ->
                       fun ~type_:(x5019 : 'K) ->
                         fun ~listener:(x5020 : this:t -> ev:any -> any) ->
                           fun
                             ?options:(x5021 :
                                        EventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5029 = this_to_js Obj.magic x5027 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5029
                                       "removeEventListener") "apply"
                                    [|x5029;((let x5022 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5022 "push"
                                                   [|(Obj.magic x5019)|]);
                                              ignore
                                                (Ojs.call x5022 "push"
                                                   [|(Ojs.fun_to_js 2
                                                        (fun (x5025 : Ojs.t)
                                                           ->
                                                           fun
                                                             (x5026 : Ojs.t)
                                                             ->
                                                             any_to_js
                                                               (x5020
                                                                  ~this:(
                                                                  t_of_js
                                                                    x5025)
                                                                  ~ev:(
                                                                  any_of_js
                                                                    x5026))))|]);
                                              (match x5021 with
                                               | Some x5023 ->
                                                   ignore
                                                     (Ojs.call x5022 "push"
                                                        [|(or_boolean_to_js
                                                             EventListenerOptions.t_to_js
                                                             x5023)|])
                                               | None -> ());
                                              x5022))|])
                   let (removeEventListener' :
                     'tags this ->
                       type_:string ->
                         listener:EventListenerOrEventListenerObject.t ->
                           ?options:EventListenerOptions.t or_boolean ->
                             unit -> unit)
                     =
                     fun (x5036 : 'tags this) ->
                       fun ~type_:(x5030 : string) ->
                         fun
                           ~listener:(x5031 :
                                       EventListenerOrEventListenerObject.t)
                           ->
                           fun
                             ?options:(x5032 :
                                        EventListenerOptions.t or_boolean
                                          option)
                             ->
                             fun () ->
                               ignore
                                 (let x5038 = this_to_js Obj.magic x5036 in
                                  Ojs.call
                                    (Ojs.get_prop_ascii x5038
                                       "removeEventListener") "apply"
                                    [|x5038;((let x5033 =
                                                Ojs.new_obj
                                                  (Ojs.get_prop_ascii
                                                     Ojs.global "Array") 
                                                  [||] in
                                              ignore
                                                (Ojs.call x5033 "push"
                                                   [|(Ojs.string_to_js x5030)|]);
                                              ignore
                                                (Ojs.call x5033 "push"
                                                   [|(EventListenerOrEventListenerObject.t_to_js
                                                        x5031)|]);
                                              (match x5032 with
                                               | Some x5034 ->
                                                   ignore
                                                     (Ojs.call x5033 "push"
                                                        [|(or_boolean_to_js
                                                             EventListenerOptions.t_to_js
                                                             x5034)|])
                                               | None -> ());
                                              x5033))|])
                   let cast_from = Obj.magic
                   let (prototype : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Ojs.global "ServiceWorker")
                            "prototype")
                   let (create : unit -> t) =
                     fun () ->
                       t_of_js
                         (Ojs.new_obj
                            (Ojs.get_prop_ascii Ojs.global "ServiceWorker")
                            [||])
                 end and
                      Transferable:sig
                                     type t =
                                       (ImageBitmap.t, MessagePort.t) union2
                                     type t_0 = t
                                     val t_to_js : t -> Ojs.t
                                     val t_of_js : Ojs.t -> t
                                     val t_0_to_js : t_0 -> Ojs.t
                                     val t_0_of_js : Ojs.t -> t_0
                                   end =
                      struct
                        type t = (ImageBitmap.t, MessagePort.t) union2
                        let rec t_of_js : Ojs.t -> t =
                          fun (x5042 : Ojs.t) ->
                            union2_of_js ImageBitmap.t_of_js
                              MessagePort.t_of_js x5042
                        and t_to_js : t -> Ojs.t =
                          fun (x5039 : (ImageBitmap.t, MessagePort.t) union2)
                            ->
                            union2_to_js ImageBitmap.t_to_js
                              MessagePort.t_to_js x5039
                        type t_0 = t
                        let rec t_0_of_js : Ojs.t -> t_0 =
                          fun (x5046 : Ojs.t) -> t_of_js x5046
                        and t_0_to_js : t_0 -> Ojs.t =
                          fun (x5045 : t) -> t_to_js x5045
                      end
module AbstractWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5048 : Ojs.t) -> t_of_js x5048
    and t_0_to_js : t_0 -> Ojs.t = fun (x5047 : t) -> t_to_js x5047
    type tags = [ `AbstractWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AbstractWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5051 : Ojs.t) -> intf_of_js __tags_of_js x5051
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5049 : __tags intf) -> intf_to_js __tags_to_js x5049
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x5053 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5053) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x5055 : 'tags this) ->
        fun (x5056 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5055) "error"
            (ErrorEvent.t_to_js x5056)
    let cast_from = Obj.magic
  end
module WorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `WorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5059 : Ojs.t) -> t_of_js x5059
    and t_0_to_js : t_0 -> Ojs.t = fun (x5058 : t) -> t_to_js x5058
    type tags = [ `AbstractWorkerEventMap  | `WorkerEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5062 : Ojs.t) -> intf_of_js __tags_of_js x5062
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5060 : __tags intf) -> intf_to_js __tags_to_js x5060
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x5064 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5064) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5066 : 'tags this) ->
        fun (x5067 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5066) "message"
            (MessageEvent.t_0_to_js x5067)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x5069 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5069) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5071 : 'tags this) ->
        fun (x5072 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5071) "messageerror"
            (MessageEvent.t_0_to_js x5072)
    let cast_from = Obj.magic
  end
module WorkerType =
  struct
    type t = [ `L_s117_module  | `L_s49_classic ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5075 : Ojs.t) ->
        let x5076 = x5075 in
        match Ojs.string_of_js x5076 with
        | "module" -> `L_s117_module
        | "classic" -> `L_s49_classic
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5074 : [ `L_s117_module  | `L_s49_classic ]) ->
        match x5074 with
        | `L_s117_module -> Ojs.string_to_js "module"
        | `L_s49_classic -> Ojs.string_to_js "classic"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5078 : Ojs.t) -> t_of_js x5078
    and t_0_to_js : t_0 -> Ojs.t = fun (x5077 : t) -> t_to_js x5077
  end
module WorkerOptions =
  struct
    type t = [ `WorkerOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5080 : Ojs.t) -> t_of_js x5080
    and t_0_to_js : t_0 -> Ojs.t = fun (x5079 : t) -> t_to_js x5079
    type tags = [ `WorkerOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5083 : Ojs.t) -> intf_of_js __tags_of_js x5083
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5081 : __tags intf) -> intf_to_js __tags_to_js x5081
    let (get_credentials : 'tags this -> RequestCredentials.t) =
      fun (x5085 : 'tags this) ->
        RequestCredentials.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5085) "credentials")
    let (set_credentials : 'tags this -> RequestCredentials.t -> unit) =
      fun (x5087 : 'tags this) ->
        fun (x5088 : RequestCredentials.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5087) "credentials"
            (RequestCredentials.t_to_js x5088)
    let (get_name : 'tags this -> string) =
      fun (x5090 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5090) "name")
    let (set_name : 'tags this -> string -> unit) =
      fun (x5092 : 'tags this) ->
        fun (x5093 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5092) "name"
            (Ojs.string_to_js x5093)
    let (get_type : 'tags this -> WorkerType.t) =
      fun (x5095 : 'tags this) ->
        WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5095) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x5097 : 'tags this) ->
        fun (x5098 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5097) "type"
            (WorkerType.t_to_js x5098)
    let cast_from = Obj.magic
  end
module Worker =
  struct
    type t = [ `AbstractWorker  | `EventTarget  | `Worker ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5101 : Ojs.t) -> t_of_js x5101
    and t_0_to_js : t_0 -> Ojs.t = fun (x5100 : t) -> t_to_js x5100
    type tags = [ `AbstractWorker  | `EventTarget  | `Worker ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Worker ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5104 : Ojs.t) -> intf_of_js __tags_of_js x5104
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5102 : __tags intf) -> intf_to_js __tags_to_js x5102
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x5106 : 'tags this) ->
        or_null_of_js
          (fun (x5108 : Ojs.t) ->
             fun ~this:(x5109 : t) ->
               fun ~ev:(x5110 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5108
                      [|(t_to_js x5109);(MessageEvent.t_0_to_js x5110)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5106) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x5111 : 'tags this) ->
        fun (x5112 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5111) "onmessage"
            (or_null_to_js
               (fun (x5113 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5114 : Ojs.t) ->
                       fun (x5115 : Ojs.t) ->
                         any_to_js
                           (x5113 ~this:(t_of_js x5114)
                              ~ev:(MessageEvent.t_0_of_js x5115)))) x5112)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x5117 : 'tags this) ->
        or_null_of_js
          (fun (x5119 : Ojs.t) ->
             fun ~this:(x5120 : t) ->
               fun ~ev:(x5121 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5119
                      [|(t_to_js x5120);(MessageEvent.t_0_to_js x5121)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5117) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x5122 : 'tags this) ->
        fun (x5123 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5122) "onmessageerror"
            (or_null_to_js
               (fun (x5124 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5125 : Ojs.t) ->
                       fun (x5126 : Ojs.t) ->
                         any_to_js
                           (x5124 ~this:(t_of_js x5125)
                              ~ev:(MessageEvent.t_0_of_js x5126)))) x5123)
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x5131 : 'tags this) ->
        fun ~message:(x5128 : any) ->
          fun ~transfer:(x5129 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5131) "postMessage"
                 [|(any_to_js x5128);(Ojs.list_to_js Transferable.t_to_js
                                        x5129)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x5137 : 'tags this) ->
        fun ~message:(x5133 : any) ->
          fun ?options:(x5134 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x5139 = this_to_js Obj.magic x5137 in
                 Ojs.call (Ojs.get_prop_ascii x5139 "postMessage") "apply"
                   [|x5139;((let x5135 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x5135 "push" [|(any_to_js x5133)|]);
                             (match x5134 with
                              | Some x5136 ->
                                  ignore
                                    (Ojs.call x5135 "push"
                                       [|(StructuredSerializeOptions.t_to_js
                                            x5136)|])
                              | None -> ());
                             x5135))|])
    let (terminate : 'tags this -> unit) =
      fun (x5140 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5140) "terminate" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5150 : 'tags this) ->
        fun ~type_:(x5142 : 'K) ->
          fun ~listener:(x5143 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5144 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5152 = this_to_js Obj.magic x5150 in
                   Ojs.call (Ojs.get_prop_ascii x5152 "addEventListener")
                     "apply"
                     [|x5152;((let x5145 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5145 "push" [|(Obj.magic x5142)|]);
                               ignore
                                 (Ojs.call x5145 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5148 : Ojs.t) ->
                                            fun (x5149 : Ojs.t) ->
                                              any_to_js
                                                (x5143 ~this:(t_of_js x5148)
                                                   ~ev:(any_of_js x5149))))|]);
                               (match x5144 with
                                | Some x5146 ->
                                    ignore
                                      (Ojs.call x5145 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x5146)|])
                                | None -> ());
                               x5145))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5159 : 'tags this) ->
        fun ~type_:(x5153 : string) ->
          fun ~listener:(x5154 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5155 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5161 = this_to_js Obj.magic x5159 in
                   Ojs.call (Ojs.get_prop_ascii x5161 "addEventListener")
                     "apply"
                     [|x5161;((let x5156 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5156 "push"
                                    [|(Ojs.string_to_js x5153)|]);
                               ignore
                                 (Ojs.call x5156 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5154)|]);
                               (match x5155 with
                                | Some x5157 ->
                                    ignore
                                      (Ojs.call x5156 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x5157)|])
                                | None -> ());
                               x5156))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5170 : 'tags this) ->
        fun ~type_:(x5162 : 'K) ->
          fun ~listener:(x5163 : this:t -> ev:any -> any) ->
            fun ?options:(x5164 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5172 = this_to_js Obj.magic x5170 in
                   Ojs.call (Ojs.get_prop_ascii x5172 "removeEventListener")
                     "apply"
                     [|x5172;((let x5165 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5165 "push" [|(Obj.magic x5162)|]);
                               ignore
                                 (Ojs.call x5165 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5168 : Ojs.t) ->
                                            fun (x5169 : Ojs.t) ->
                                              any_to_js
                                                (x5163 ~this:(t_of_js x5168)
                                                   ~ev:(any_of_js x5169))))|]);
                               (match x5164 with
                                | Some x5166 ->
                                    ignore
                                      (Ojs.call x5165 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x5166)|])
                                | None -> ());
                               x5165))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5179 : 'tags this) ->
        fun ~type_:(x5173 : string) ->
          fun ~listener:(x5174 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x5175 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5181 = this_to_js Obj.magic x5179 in
                   Ojs.call (Ojs.get_prop_ascii x5181 "removeEventListener")
                     "apply"
                     [|x5181;((let x5176 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5176 "push"
                                    [|(Ojs.string_to_js x5173)|]);
                               ignore
                                 (Ojs.call x5176 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5174)|]);
                               (match x5175 with
                                | Some x5177 ->
                                    ignore
                                      (Ojs.call x5176 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x5177)|])
                                | None -> ());
                               x5176))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Worker")
             "prototype")
    let (create :
      scriptURL:URL.t or_string -> ?options:WorkerOptions.t -> unit -> t) =
      fun ~scriptURL:(x5182 : URL.t or_string) ->
        fun ?options:(x5183 : WorkerOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Worker")
                 (let x5184 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x5184 "push"
                       [|(or_string_to_js URL.t_to_js x5182)|]);
                  (match x5183 with
                   | Some x5185 ->
                       ignore
                         (Ojs.call x5184 "push"
                            [|(WorkerOptions.t_to_js x5185)|])
                   | None -> ());
                  x5184))
  end
module CloseEventInit =
  struct
    type t = [ `CloseEventInit  | `EventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5188 : Ojs.t) -> t_of_js x5188
    and t_0_to_js : t_0 -> Ojs.t = fun (x5187 : t) -> t_to_js x5187
    type tags = [ `CloseEventInit  | `EventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5191 : Ojs.t) -> intf_of_js __tags_of_js x5191
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5189 : __tags intf) -> intf_to_js __tags_to_js x5189
    let (get_code : 'tags this -> float) =
      fun (x5193 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5193) "code")
    let (set_code : 'tags this -> float -> unit) =
      fun (x5195 : 'tags this) ->
        fun (x5196 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5195) "code"
            (Ojs.float_to_js x5196)
    let (get_reason : 'tags this -> string) =
      fun (x5198 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5198) "reason")
    let (set_reason : 'tags this -> string -> unit) =
      fun (x5200 : 'tags this) ->
        fun (x5201 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5200) "reason"
            (Ojs.string_to_js x5201)
    let (get_wasClean : 'tags this -> bool) =
      fun (x5203 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5203) "wasClean")
    let (set_wasClean : 'tags this -> bool -> unit) =
      fun (x5205 : 'tags this) ->
        fun (x5206 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5205) "wasClean"
            (Ojs.bool_to_js x5206)
    let cast_from = Obj.magic
  end
module CloseEvent =
  struct
    type t = [ `CloseEvent  | `Event ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5209 : Ojs.t) -> t_of_js x5209
    and t_0_to_js : t_0 -> Ojs.t = fun (x5208 : t) -> t_to_js x5208
    type tags = [ `CloseEvent  | `Event ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CloseEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5212 : Ojs.t) -> intf_of_js __tags_of_js x5212
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5210 : __tags intf) -> intf_to_js __tags_to_js x5210
    let (get_code : 'tags this -> float) =
      fun (x5214 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5214) "code")
    let (get_reason : 'tags this -> string) =
      fun (x5216 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5216) "reason")
    let (get_wasClean : 'tags this -> bool) =
      fun (x5218 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5218) "wasClean")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CloseEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:CloseEventInit.t -> unit -> t) =
      fun ~type_:(x5220 : string) ->
        fun ?eventInitDict:(x5221 : CloseEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CloseEvent")
                 (let x5222 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x5222 "push" [|(Ojs.string_to_js x5220)|]);
                  (match x5221 with
                   | Some x5223 ->
                       ignore
                         (Ojs.call x5222 "push"
                            [|(CloseEventInit.t_to_js x5223)|])
                   | None -> ());
                  x5222))
  end
module WebSocketEventMap =
  struct
    type t = [ `WebSocketEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5225 : Ojs.t) -> t_of_js x5225
    and t_0_to_js : t_0 -> Ojs.t = fun (x5224 : t) -> t_to_js x5224
    type tags = [ `WebSocketEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocketEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5228 : Ojs.t) -> intf_of_js __tags_of_js x5228
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5226 : __tags intf) -> intf_to_js __tags_to_js x5226
    let (get_close : 'tags this -> CloseEvent.t) =
      fun (x5230 : 'tags this) ->
        CloseEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5230) "close")
    let (set_close : 'tags this -> CloseEvent.t -> unit) =
      fun (x5232 : 'tags this) ->
        fun (x5233 : CloseEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5232) "close"
            (CloseEvent.t_to_js x5233)
    let (get_error : 'tags this -> Event.t) =
      fun (x5235 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5235) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x5237 : 'tags this) ->
        fun (x5238 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5237) "error"
            (Event.t_to_js x5238)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x5240 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5240) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x5242 : 'tags this) ->
        fun (x5243 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5242) "message"
            (MessageEvent.t_0_to_js x5243)
    let (get_open : 'tags this -> Event.t) =
      fun (x5245 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5245) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x5247 : 'tags this) ->
        fun (x5248 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5247) "open"
            (Event.t_to_js x5248)
    let cast_from = Obj.magic
  end
module BinaryType =
  struct
    type t = [ `L_s37_arraybuffer  | `L_s44_blob ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5251 : Ojs.t) ->
        let x5252 = x5251 in
        match Ojs.string_of_js x5252 with
        | "arraybuffer" -> `L_s37_arraybuffer
        | "blob" -> `L_s44_blob
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5250 : [ `L_s37_arraybuffer  | `L_s44_blob ]) ->
        match x5250 with
        | `L_s37_arraybuffer -> Ojs.string_to_js "arraybuffer"
        | `L_s44_blob -> Ojs.string_to_js "blob"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5254 : Ojs.t) -> t_of_js x5254
    and t_0_to_js : t_0 -> Ojs.t = fun (x5253 : t) -> t_to_js x5253
  end
module WebSocket =
  struct
    type t = [ `EventTarget  | `WebSocket ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5256 : Ojs.t) -> t_of_js x5256
    and t_0_to_js : t_0 -> Ojs.t = fun (x5255 : t) -> t_to_js x5255
    type tags = [ `EventTarget  | `WebSocket ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebSocket ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5259 : Ojs.t) -> intf_of_js __tags_of_js x5259
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5257 : __tags intf) -> intf_to_js __tags_to_js x5257
    let (get_binaryType : 'tags this -> BinaryType.t) =
      fun (x5261 : 'tags this) ->
        BinaryType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5261) "binaryType")
    let (set_binaryType : 'tags this -> BinaryType.t -> unit) =
      fun (x5263 : 'tags this) ->
        fun (x5264 : BinaryType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5263) "binaryType"
            (BinaryType.t_to_js x5264)
    let (get_bufferedAmount : 'tags this -> float) =
      fun (x5266 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5266) "bufferedAmount")
    let (get_extensions : 'tags this -> string) =
      fun (x5268 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5268) "extensions")
    let (get_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) or_null) =
      fun (x5270 : 'tags this) ->
        or_null_of_js
          (fun (x5272 : Ojs.t) ->
             fun ~this:(x5273 : t) ->
               fun ~ev:(x5274 : CloseEvent.t) ->
                 any_of_js
                   (Ojs.apply x5272
                      [|(t_to_js x5273);(CloseEvent.t_to_js x5274)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5270) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:CloseEvent.t -> any) or_null -> unit) =
      fun (x5275 : 'tags this) ->
        fun (x5276 : (this:t -> ev:CloseEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5275) "onclose"
            (or_null_to_js
               (fun (x5277 : this:t -> ev:CloseEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5278 : Ojs.t) ->
                       fun (x5279 : Ojs.t) ->
                         any_to_js
                           (x5277 ~this:(t_of_js x5278)
                              ~ev:(CloseEvent.t_of_js x5279)))) x5276)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x5281 : 'tags this) ->
        or_null_of_js
          (fun (x5283 : Ojs.t) ->
             fun ~this:(x5284 : t) ->
               fun ~ev:(x5285 : Event.t) ->
                 any_of_js
                   (Ojs.apply x5283 [|(t_to_js x5284);(Event.t_to_js x5285)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5281) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x5286 : 'tags this) ->
        fun (x5287 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5286) "onerror"
            (or_null_to_js
               (fun (x5288 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5289 : Ojs.t) ->
                       fun (x5290 : Ojs.t) ->
                         any_to_js
                           (x5288 ~this:(t_of_js x5289)
                              ~ev:(Event.t_of_js x5290)))) x5287)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x5292 : 'tags this) ->
        or_null_of_js
          (fun (x5294 : Ojs.t) ->
             fun ~this:(x5295 : t) ->
               fun ~ev:(x5296 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x5294
                      [|(t_to_js x5295);(MessageEvent.t_0_to_js x5296)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5292) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x5297 : 'tags this) ->
        fun (x5298 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5297) "onmessage"
            (or_null_to_js
               (fun (x5299 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5300 : Ojs.t) ->
                       fun (x5301 : Ojs.t) ->
                         any_to_js
                           (x5299 ~this:(t_of_js x5300)
                              ~ev:(MessageEvent.t_0_of_js x5301)))) x5298)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x5303 : 'tags this) ->
        or_null_of_js
          (fun (x5305 : Ojs.t) ->
             fun ~this:(x5306 : t) ->
               fun ~ev:(x5307 : Event.t) ->
                 any_of_js
                   (Ojs.apply x5305 [|(t_to_js x5306);(Event.t_to_js x5307)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5303) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x5308 : 'tags this) ->
        fun (x5309 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5308) "onopen"
            (or_null_to_js
               (fun (x5310 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x5311 : Ojs.t) ->
                       fun (x5312 : Ojs.t) ->
                         any_to_js
                           (x5310 ~this:(t_of_js x5311)
                              ~ev:(Event.t_of_js x5312)))) x5309)
    let (get_protocol : 'tags this -> string) =
      fun (x5314 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5314) "protocol")
    let (get_readyState : 'tags this -> float) =
      fun (x5316 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5316) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x5318 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5318) "url")
    let (close : 'tags this -> ?code:float -> ?reason:string -> unit -> unit)
      =
      fun (x5325 : 'tags this) ->
        fun ?code:(x5320 : float option) ->
          fun ?reason:(x5321 : string option) ->
            fun () ->
              ignore
                (let x5327 = this_to_js Obj.magic x5325 in
                 Ojs.call (Ojs.get_prop_ascii x5327 "close") "apply"
                   [|x5327;((let x5322 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x5320 with
                              | Some x5324 ->
                                  ignore
                                    (Ojs.call x5322 "push"
                                       [|(Ojs.float_to_js x5324)|])
                              | None -> ());
                             (match x5321 with
                              | Some x5323 ->
                                  ignore
                                    (Ojs.call x5322 "push"
                                       [|(Ojs.string_to_js x5323)|])
                              | None -> ());
                             x5322))|])
    let (send : 'tags this -> data:Blob.t or_string -> unit) =
      fun (x5330 : 'tags this) ->
        fun ~data:(x5328 : Blob.t or_string) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x5330) "send"
               [|(or_string_to_js Blob.t_to_js x5328)|])
    let (get_CLOSED : 'tags this -> float) =
      fun (x5332 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5332) "CLOSED")
    let (get_CLOSING : 'tags this -> float) =
      fun (x5334 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5334) "CLOSING")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x5336 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5336) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x5338 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5338) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5348 : 'tags this) ->
        fun ~type_:(x5340 : 'K) ->
          fun ~listener:(x5341 : this:t -> ev:any -> any) ->
            fun
              ?options:(x5342 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5350 = this_to_js Obj.magic x5348 in
                   Ojs.call (Ojs.get_prop_ascii x5350 "addEventListener")
                     "apply"
                     [|x5350;((let x5343 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5343 "push" [|(Obj.magic x5340)|]);
                               ignore
                                 (Ojs.call x5343 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5346 : Ojs.t) ->
                                            fun (x5347 : Ojs.t) ->
                                              any_to_js
                                                (x5341 ~this:(t_of_js x5346)
                                                   ~ev:(any_of_js x5347))))|]);
                               (match x5342 with
                                | Some x5344 ->
                                    ignore
                                      (Ojs.call x5343 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x5344)|])
                                | None -> ());
                               x5343))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5357 : 'tags this) ->
        fun ~type_:(x5351 : string) ->
          fun ~listener:(x5352 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x5353 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5359 = this_to_js Obj.magic x5357 in
                   Ojs.call (Ojs.get_prop_ascii x5359 "addEventListener")
                     "apply"
                     [|x5359;((let x5354 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5354 "push"
                                    [|(Ojs.string_to_js x5351)|]);
                               ignore
                                 (Ojs.call x5354 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5352)|]);
                               (match x5353 with
                                | Some x5355 ->
                                    ignore
                                      (Ojs.call x5354 "push"
                                         [|(or_boolean_to_js
                                              AddEventListenerOptions.t_to_js
                                              x5355)|])
                                | None -> ());
                               x5354))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5368 : 'tags this) ->
        fun ~type_:(x5360 : 'K) ->
          fun ~listener:(x5361 : this:t -> ev:any -> any) ->
            fun ?options:(x5362 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5370 = this_to_js Obj.magic x5368 in
                   Ojs.call (Ojs.get_prop_ascii x5370 "removeEventListener")
                     "apply"
                     [|x5370;((let x5363 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5363 "push" [|(Obj.magic x5360)|]);
                               ignore
                                 (Ojs.call x5363 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x5366 : Ojs.t) ->
                                            fun (x5367 : Ojs.t) ->
                                              any_to_js
                                                (x5361 ~this:(t_of_js x5366)
                                                   ~ev:(any_of_js x5367))))|]);
                               (match x5362 with
                                | Some x5364 ->
                                    ignore
                                      (Ojs.call x5363 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x5364)|])
                                | None -> ());
                               x5363))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x5377 : 'tags this) ->
        fun ~type_:(x5371 : string) ->
          fun ~listener:(x5372 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x5373 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x5379 = this_to_js Obj.magic x5377 in
                   Ojs.call (Ojs.get_prop_ascii x5379 "removeEventListener")
                     "apply"
                     [|x5379;((let x5374 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x5374 "push"
                                    [|(Ojs.string_to_js x5371)|]);
                               ignore
                                 (Ojs.call x5374 "push"
                                    [|(EventListenerOrEventListenerObject.t_to_js
                                         x5372)|]);
                               (match x5373 with
                                | Some x5375 ->
                                    ignore
                                      (Ojs.call x5374 "push"
                                         [|(or_boolean_to_js
                                              EventListenerOptions.t_to_js
                                              x5375)|])
                                | None -> ());
                               x5374))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "prototype")
    let (create :
      url:URL.t or_string -> ?protocols:string list or_string -> unit -> t) =
      fun ~url:(x5380 : URL.t or_string) ->
        fun ?protocols:(x5381 : string list or_string option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "WebSocket")
                 (let x5382 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x5382 "push"
                       [|(or_string_to_js URL.t_to_js x5380)|]);
                  (match x5381 with
                   | Some x5383 ->
                       ignore
                         (Ojs.call x5382 "push"
                            [|(or_string_to_js
                                 (fun (x5384 : string list) ->
                                    Ojs.list_to_js Ojs.string_to_js x5384)
                                 x5383)|])
                   | None -> ());
                  x5382))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSED")
    let (closing : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CLOSING")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebSocket")
             "OPEN")
  end
module WebGLUniformLocation =
  struct
    type t = [ `WebGLUniformLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5388 : Ojs.t) -> t_of_js x5388
    and t_0_to_js : t_0 -> Ojs.t = fun (x5387 : t) -> t_to_js x5387
    type tags = [ `WebGLUniformLocation ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLUniformLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5391 : Ojs.t) -> intf_of_js __tags_of_js x5391
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5389 : __tags intf) -> intf_to_js __tags_to_js x5389
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLUniformLocation")
             [||])
  end
module PredefinedColorSpace =
  struct
    type t = [ `L_s183_srgb  | `L_s61_display_p3 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5394 : Ojs.t) ->
        let x5395 = x5394 in
        match Ojs.string_of_js x5395 with
        | "srgb" -> `L_s183_srgb
        | "display-p3" -> `L_s61_display_p3
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x5393 : [ `L_s183_srgb  | `L_s61_display_p3 ]) ->
        match x5393 with
        | `L_s183_srgb -> Ojs.string_to_js "srgb"
        | `L_s61_display_p3 -> Ojs.string_to_js "display-p3"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5397 : Ojs.t) -> t_of_js x5397
    and t_0_to_js : t_0 -> Ojs.t = fun (x5396 : t) -> t_to_js x5396
  end
module ImageDataSettings =
  struct
    type t = [ `ImageDataSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5399 : Ojs.t) -> t_of_js x5399
    and t_0_to_js : t_0 -> Ojs.t = fun (x5398 : t) -> t_to_js x5398
    type tags = [ `ImageDataSettings ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageDataSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5402 : Ojs.t) -> intf_of_js __tags_of_js x5402
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5400 : __tags intf) -> intf_to_js __tags_to_js x5400
    let (get_colorSpace : 'tags this -> PredefinedColorSpace.t) =
      fun (x5404 : 'tags this) ->
        PredefinedColorSpace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5404) "colorSpace")
    let (set_colorSpace : 'tags this -> PredefinedColorSpace.t -> unit) =
      fun (x5406 : 'tags this) ->
        fun (x5407 : PredefinedColorSpace.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5406) "colorSpace"
            (PredefinedColorSpace.t_to_js x5407)
    let cast_from = Obj.magic
  end
module ImageData =
  struct
    type t = [ `ImageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5410 : Ojs.t) -> t_of_js x5410
    and t_0_to_js : t_0 -> Ojs.t = fun (x5409 : t) -> t_to_js x5409
    type tags = [ `ImageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5413 : Ojs.t) -> intf_of_js __tags_of_js x5413
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5411 : __tags intf) -> intf_to_js __tags_to_js x5411
    let (get_data : 'tags this -> Uint8ClampedArray.t_0) =
      fun (x5415 : 'tags this) ->
        Uint8ClampedArray.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5415) "data")
    let (get_height : 'tags this -> float) =
      fun (x5417 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5417) "height")
    let (get_width : 'tags this -> float) =
      fun (x5419 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5419) "width")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ImageData")
             "prototype")
    let (create :
      sw:float -> sh:float -> ?settings:ImageDataSettings.t -> unit -> t) =
      fun ~sw:(x5421 : float) ->
        fun ~sh:(x5422 : float) ->
          fun ?settings:(x5423 : ImageDataSettings.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "ImageData")
                   (let x5424 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x5424 "push" [|(Ojs.float_to_js x5421)|]);
                    ignore
                      (Ojs.call x5424 "push" [|(Ojs.float_to_js x5422)|]);
                    (match x5423 with
                     | Some x5425 ->
                         ignore
                           (Ojs.call x5424 "push"
                              [|(ImageDataSettings.t_to_js x5425)|])
                     | None -> ());
                    x5424))
    let (create' :
      data:Uint8ClampedArray.t_0 ->
        sw:float -> ?sh:float -> ?settings:ImageDataSettings.t -> unit -> t)
      =
      fun ~data:(x5426 : Uint8ClampedArray.t_0) ->
        fun ~sw:(x5427 : float) ->
          fun ?sh:(x5428 : float option) ->
            fun ?settings:(x5429 : ImageDataSettings.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "ImageData")
                     (let x5430 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x5430 "push"
                           [|(Uint8ClampedArray.t_0_to_js x5426)|]);
                      ignore
                        (Ojs.call x5430 "push" [|(Ojs.float_to_js x5427)|]);
                      (match x5428 with
                       | Some x5432 ->
                           ignore
                             (Ojs.call x5430 "push"
                                [|(Ojs.float_to_js x5432)|])
                       | None -> ());
                      (match x5429 with
                       | Some x5431 ->
                           ignore
                             (Ojs.call x5430 "push"
                                [|(ImageDataSettings.t_to_js x5431)|])
                       | None -> ());
                      x5430))
  end
module OffscreenCanvas =
  struct
    type t = [ `EventTarget  | `OffscreenCanvas ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5434 : Ojs.t) -> t_of_js x5434
    and t_0_to_js : t_0 -> Ojs.t = fun (x5433 : t) -> t_to_js x5433
    type tags = [ `EventTarget  | `OffscreenCanvas ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OffscreenCanvas ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5437 : Ojs.t) -> intf_of_js __tags_of_js x5437
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5435 : __tags intf) -> intf_to_js __tags_to_js x5435
    let cast_from = Obj.magic
  end
module TexImageSource =
  struct
    type t = (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x5443 : Ojs.t) ->
        union3_of_js ImageBitmap.t_of_js ImageData.t_of_js
          OffscreenCanvas.t_of_js x5443
    and t_to_js : t -> Ojs.t =
      fun (x5439 : (ImageBitmap.t, ImageData.t, OffscreenCanvas.t) union3) ->
        union3_to_js ImageBitmap.t_to_js ImageData.t_to_js
          OffscreenCanvas.t_to_js x5439
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5448 : Ojs.t) -> t_of_js x5448
    and t_0_to_js : t_0 -> Ojs.t = fun (x5447 : t) -> t_to_js x5447
  end
module GLint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5450 : Ojs.t) -> Ojs.float_of_js x5450
    and t_to_js : t -> Ojs.t = fun (x5449 : float) -> Ojs.float_to_js x5449
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5452 : Ojs.t) -> t_of_js x5452
    and t_0_to_js : t_0 -> Ojs.t = fun (x5451 : t) -> t_to_js x5451
  end
module Int32List =
  struct
    type t = (Int32Array.t_0, GLint.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x5456 : Ojs.t) ->
        or_array_of_js Int32Array.t_0_of_js GLint.t_of_js x5456
    and t_to_js : t -> Ojs.t =
      fun (x5453 : (Int32Array.t_0, GLint.t) or_array) ->
        or_array_to_js Int32Array.t_0_to_js GLint.t_to_js x5453
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5460 : Ojs.t) -> t_of_js x5460
    and t_0_to_js : t_0 -> Ojs.t = fun (x5459 : t) -> t_to_js x5459
  end
module GLsizeiptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5462 : Ojs.t) -> Ojs.float_of_js x5462
    and t_to_js : t -> Ojs.t = fun (x5461 : float) -> Ojs.float_to_js x5461
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5464 : Ojs.t) -> t_of_js x5464
    and t_0_to_js : t_0 -> Ojs.t = fun (x5463 : t) -> t_to_js x5463
  end
module GLboolean =
  struct
    type t = bool
    let rec t_of_js : Ojs.t -> t =
      fun (x5466 : Ojs.t) -> Ojs.bool_of_js x5466
    and t_to_js : t -> Ojs.t = fun (x5465 : bool) -> Ojs.bool_to_js x5465
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5468 : Ojs.t) -> t_of_js x5468
    and t_0_to_js : t_0 -> Ojs.t = fun (x5467 : t) -> t_to_js x5467
  end
module GLfloat =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5470 : Ojs.t) -> Ojs.float_of_js x5470
    and t_to_js : t -> Ojs.t = fun (x5469 : float) -> Ojs.float_to_js x5469
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5472 : Ojs.t) -> t_of_js x5472
    and t_0_to_js : t_0 -> Ojs.t = fun (x5471 : t) -> t_to_js x5471
  end
module Float32List =
  struct
    type t = (Float32Array.t_0, GLfloat.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x5476 : Ojs.t) ->
        or_array_of_js Float32Array.t_0_of_js GLfloat.t_of_js x5476
    and t_to_js : t -> Ojs.t =
      fun (x5473 : (Float32Array.t_0, GLfloat.t) or_array) ->
        or_array_to_js Float32Array.t_0_to_js GLfloat.t_to_js x5473
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5480 : Ojs.t) -> t_of_js x5480
    and t_0_to_js : t_0 -> Ojs.t = fun (x5479 : t) -> t_to_js x5479
  end
module GLsizei =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5482 : Ojs.t) -> Ojs.float_of_js x5482
    and t_to_js : t -> Ojs.t = fun (x5481 : float) -> Ojs.float_to_js x5481
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5484 : Ojs.t) -> t_of_js x5484
    and t_0_to_js : t_0 -> Ojs.t = fun (x5483 : t) -> t_to_js x5483
  end
module GLintptr =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5486 : Ojs.t) -> Ojs.float_of_js x5486
    and t_to_js : t -> Ojs.t = fun (x5485 : float) -> Ojs.float_to_js x5485
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5488 : Ojs.t) -> t_of_js x5488
    and t_0_to_js : t_0 -> Ojs.t = fun (x5487 : t) -> t_to_js x5487
  end
module GLenum =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x5490 : Ojs.t) -> Ojs.float_of_js x5490
    and t_to_js : t -> Ojs.t = fun (x5489 : float) -> Ojs.float_to_js x5489
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5492 : Ojs.t) -> t_of_js x5492
    and t_0_to_js : t_0 -> Ojs.t = fun (x5491 : t) -> t_to_js x5491
  end
module WebGLRenderingContextOverloads =
  struct
    type t = [ `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5494 : Ojs.t) -> t_of_js x5494
    and t_0_to_js : t_0 -> Ojs.t = fun (x5493 : t) -> t_to_js x5493
    type tags = [ `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5497 : Ojs.t) -> intf_of_js __tags_of_js x5497
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5495 : __tags intf) -> intf_to_js __tags_to_js x5495
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x5502 : 'tags this) ->
        fun ~target:(x5499 : GLenum.t) ->
          fun ~size:(x5500 : GLsizeiptr.t) ->
            fun ~usage:(x5501 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x5502) "bufferData"
                   [|(GLenum.t_to_js x5499);(GLsizeiptr.t_to_js x5500);(
                     GLenum.t_to_js x5501)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          data:BufferSource.t or_null -> usage:GLenum.t -> unit)
      =
      fun (x5508 : 'tags this) ->
        fun ~target:(x5504 : GLenum.t) ->
          fun ~data:(x5505 : BufferSource.t or_null) ->
            fun ~usage:(x5507 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x5508) "bufferData"
                   [|(GLenum.t_to_js x5504);(or_null_to_js
                                               BufferSource.t_to_js x5505);(
                     GLenum.t_to_js x5507)|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t -> offset:GLintptr.t -> data:BufferSource.t -> unit)
      =
      fun (x5513 : 'tags this) ->
        fun ~target:(x5510 : GLenum.t) ->
          fun ~offset:(x5511 : GLintptr.t) ->
            fun ~data:(x5512 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x5513) "bufferSubData"
                   [|(GLenum.t_to_js x5510);(GLintptr.t_to_js x5511);(
                     BufferSource.t_to_js x5512)|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x5522 : 'tags this) ->
        fun ~target:(x5515 : GLenum.t) ->
          fun ~level:(x5516 : GLint.t) ->
            fun ~internalformat:(x5517 : GLenum.t) ->
              fun ~width:(x5518 : GLsizei.t) ->
                fun ~height:(x5519 : GLsizei.t) ->
                  fun ~border:(x5520 : GLint.t) ->
                    fun ~data:(x5521 : ArrayBufferView.t_0) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x5522)
                           "compressedTexImage2D"
                           [|(GLenum.t_to_js x5515);(GLint.t_to_js x5516);(
                             GLenum.t_to_js x5517);(GLsizei.t_to_js x5518);(
                             GLsizei.t_to_js x5519);(GLint.t_to_js x5520);(
                             ArrayBufferView.t_0_to_js x5521)|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t -> data:ArrayBufferView.t_0 -> unit)
      =
      fun (x5532 : 'tags this) ->
        fun ~target:(x5524 : GLenum.t) ->
          fun ~level:(x5525 : GLint.t) ->
            fun ~xoffset:(x5526 : GLint.t) ->
              fun ~yoffset:(x5527 : GLint.t) ->
                fun ~width:(x5528 : GLsizei.t) ->
                  fun ~height:(x5529 : GLsizei.t) ->
                    fun ~format:(x5530 : GLenum.t) ->
                      fun ~data:(x5531 : ArrayBufferView.t_0) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x5532)
                             "compressedTexSubImage2D"
                             [|(GLenum.t_to_js x5524);(GLint.t_to_js x5525);(
                               GLint.t_to_js x5526);(GLint.t_to_js x5527);(
                               GLsizei.t_to_js x5528);(GLsizei.t_to_js x5529);(
                               GLenum.t_to_js x5530);(ArrayBufferView.t_0_to_js
                                                        x5531)|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x5542 : 'tags this) ->
        fun ~x:(x5534 : GLint.t) ->
          fun ~y:(x5535 : GLint.t) ->
            fun ~width:(x5536 : GLsizei.t) ->
              fun ~height:(x5537 : GLsizei.t) ->
                fun ~format:(x5538 : GLenum.t) ->
                  fun ~type_:(x5539 : GLenum.t) ->
                    fun ~pixels:(x5540 : ArrayBufferView.t_0 or_null) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x5542) "readPixels"
                           [|(GLint.t_to_js x5534);(GLint.t_to_js x5535);(
                             GLsizei.t_to_js x5536);(GLsizei.t_to_js x5537);(
                             GLenum.t_to_js x5538);(GLenum.t_to_js x5539);(
                             or_null_to_js ArrayBufferView.t_0_to_js x5540)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x5554 : 'tags this) ->
        fun ~target:(x5544 : GLenum.t) ->
          fun ~level:(x5545 : GLint.t) ->
            fun ~internalformat:(x5546 : GLint.t) ->
              fun ~width:(x5547 : GLsizei.t) ->
                fun ~height:(x5548 : GLsizei.t) ->
                  fun ~border:(x5549 : GLint.t) ->
                    fun ~format:(x5550 : GLenum.t) ->
                      fun ~type_:(x5551 : GLenum.t) ->
                        fun ~pixels:(x5552 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x5554)
                               "texImage2D"
                               [|(GLenum.t_to_js x5544);(GLint.t_to_js x5545);(
                                 GLint.t_to_js x5546);(GLsizei.t_to_js x5547);(
                                 GLsizei.t_to_js x5548);(GLint.t_to_js x5549);(
                                 GLenum.t_to_js x5550);(GLenum.t_to_js x5551);(
                                 or_null_to_js ArrayBufferView.t_0_to_js
                                   x5552)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x5562 : 'tags this) ->
        fun ~target:(x5556 : GLenum.t) ->
          fun ~level:(x5557 : GLint.t) ->
            fun ~internalformat:(x5558 : GLint.t) ->
              fun ~format:(x5559 : GLenum.t) ->
                fun ~type_:(x5560 : GLenum.t) ->
                  fun ~source:(x5561 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x5562) "texImage2D"
                         [|(GLenum.t_to_js x5556);(GLint.t_to_js x5557);(
                           GLint.t_to_js x5558);(GLenum.t_to_js x5559);(
                           GLenum.t_to_js x5560);(TexImageSource.t_to_js
                                                    x5561)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x5574 : 'tags this) ->
        fun ~target:(x5564 : GLenum.t) ->
          fun ~level:(x5565 : GLint.t) ->
            fun ~xoffset:(x5566 : GLint.t) ->
              fun ~yoffset:(x5567 : GLint.t) ->
                fun ~width:(x5568 : GLsizei.t) ->
                  fun ~height:(x5569 : GLsizei.t) ->
                    fun ~format:(x5570 : GLenum.t) ->
                      fun ~type_:(x5571 : GLenum.t) ->
                        fun ~pixels:(x5572 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x5574)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x5564);(GLint.t_to_js x5565);(
                                 GLint.t_to_js x5566);(GLint.t_to_js x5567);(
                                 GLsizei.t_to_js x5568);(GLsizei.t_to_js
                                                           x5569);(GLenum.t_to_js
                                                                    x5570);(
                                 GLenum.t_to_js x5571);(or_null_to_js
                                                          ArrayBufferView.t_0_to_js
                                                          x5572)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x5583 : 'tags this) ->
        fun ~target:(x5576 : GLenum.t) ->
          fun ~level:(x5577 : GLint.t) ->
            fun ~xoffset:(x5578 : GLint.t) ->
              fun ~yoffset:(x5579 : GLint.t) ->
                fun ~format:(x5580 : GLenum.t) ->
                  fun ~type_:(x5581 : GLenum.t) ->
                    fun ~source:(x5582 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x5583)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x5576);(GLint.t_to_js x5577);(
                             GLint.t_to_js x5578);(GLint.t_to_js x5579);(
                             GLenum.t_to_js x5580);(GLenum.t_to_js x5581);(
                             TexImageSource.t_to_js x5582)|])
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x5588 : 'tags this) ->
        fun ~location:(x5585 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5587 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5588) "uniform1fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5585);(
                   Float32List.t_to_js x5587)|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x5593 : 'tags this) ->
        fun ~location:(x5590 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5592 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5593) "uniform1iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5590);(
                   Int32List.t_to_js x5592)|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x5598 : 'tags this) ->
        fun ~location:(x5595 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5597 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5598) "uniform2fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5595);(
                   Float32List.t_to_js x5597)|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x5603 : 'tags this) ->
        fun ~location:(x5600 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5602 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5603) "uniform2iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5600);(
                   Int32List.t_to_js x5602)|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x5608 : 'tags this) ->
        fun ~location:(x5605 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5607 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5608) "uniform3fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5605);(
                   Float32List.t_to_js x5607)|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x5613 : 'tags this) ->
        fun ~location:(x5610 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5612 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5613) "uniform3iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5610);(
                   Int32List.t_to_js x5612)|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Float32List.t -> unit)
      =
      fun (x5618 : 'tags this) ->
        fun ~location:(x5615 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5617 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5618) "uniform4fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5615);(
                   Float32List.t_to_js x5617)|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v:Int32List.t -> unit)
      =
      fun (x5623 : 'tags this) ->
        fun ~location:(x5620 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5622 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5623) "uniform4iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5620);(
                   Int32List.t_to_js x5622)|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x5629 : 'tags this) ->
        fun ~location:(x5625 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x5627 : GLboolean.t) ->
            fun ~value:(x5628 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x5629) "uniformMatrix2fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x5625);(
                     GLboolean.t_to_js x5627);(Float32List.t_to_js x5628)|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x5635 : 'tags this) ->
        fun ~location:(x5631 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x5633 : GLboolean.t) ->
            fun ~value:(x5634 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x5635) "uniformMatrix3fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x5631);(
                     GLboolean.t_to_js x5633);(Float32List.t_to_js x5634)|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:Float32List.t -> unit)
      =
      fun (x5641 : 'tags this) ->
        fun ~location:(x5637 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x5639 : GLboolean.t) ->
            fun ~value:(x5640 : Float32List.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x5641) "uniformMatrix4fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x5637);(
                     GLboolean.t_to_js x5639);(Float32List.t_to_js x5640)|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x5647 : 'tags this) ->
        fun ~location:(x5643 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5645 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5647) "uniform1fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5643);(
                   Iterable.t_1_to_js GLfloat.t_to_js x5645)|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x5653 : 'tags this) ->
        fun ~location:(x5649 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5651 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5653) "uniform1iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5649);(
                   Iterable.t_1_to_js GLint.t_to_js x5651)|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x5659 : 'tags this) ->
        fun ~location:(x5655 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5657 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5659) "uniform2fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5655);(
                   Iterable.t_1_to_js GLfloat.t_to_js x5657)|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x5665 : 'tags this) ->
        fun ~location:(x5661 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5663 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5665) "uniform2iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5661);(
                   Iterable.t_1_to_js GLint.t_to_js x5663)|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x5671 : 'tags this) ->
        fun ~location:(x5667 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5669 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5671) "uniform3fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5667);(
                   Iterable.t_1_to_js GLfloat.t_to_js x5669)|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x5677 : 'tags this) ->
        fun ~location:(x5673 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5675 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5677) "uniform3iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5673);(
                   Iterable.t_1_to_js GLint.t_to_js x5675)|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x5683 : 'tags this) ->
        fun ~location:(x5679 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5681 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5683) "uniform4fv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5679);(
                   Iterable.t_1_to_js GLfloat.t_to_js x5681)|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v:GLint.t Iterable.t_1 -> unit)
      =
      fun (x5689 : 'tags this) ->
        fun ~location:(x5685 : WebGLUniformLocation.t or_null) ->
          fun ~v:(x5687 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x5689) "uniform4iv"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x5685);(
                   Iterable.t_1_to_js GLint.t_to_js x5687)|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x5696 : 'tags this) ->
        fun ~location:(x5691 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x5693 : GLboolean.t) ->
            fun ~value:(x5694 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x5696) "uniformMatrix2fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x5691);(
                     GLboolean.t_to_js x5693);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x5694)|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x5703 : 'tags this) ->
        fun ~location:(x5698 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x5700 : GLboolean.t) ->
            fun ~value:(x5701 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x5703) "uniformMatrix3fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x5698);(
                     GLboolean.t_to_js x5700);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x5701)|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t -> value:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x5710 : 'tags this) ->
        fun ~location:(x5705 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x5707 : GLboolean.t) ->
            fun ~value:(x5708 : GLfloat.t Iterable.t_1) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x5710) "uniformMatrix4fv"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x5705);(
                     GLboolean.t_to_js x5707);(Iterable.t_1_to_js
                                                 GLfloat.t_to_js x5708)|])
    let cast_from = Obj.magic
  end
module WebGLShaderPrecisionFormat =
  struct
    type t = [ `WebGLShaderPrecisionFormat ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5713 : Ojs.t) -> t_of_js x5713
    and t_0_to_js : t_0 -> Ojs.t = fun (x5712 : t) -> t_to_js x5712
    type tags = [ `WebGLShaderPrecisionFormat ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLShaderPrecisionFormat ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5716 : Ojs.t) -> intf_of_js __tags_of_js x5716
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5714 : __tags intf) -> intf_to_js __tags_to_js x5714
    let (get_precision : 'tags this -> GLint.t) =
      fun (x5718 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5718) "precision")
    let (get_rangeMax : 'tags this -> GLint.t) =
      fun (x5720 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5720) "rangeMax")
    let (get_rangeMin : 'tags this -> GLint.t) =
      fun (x5722 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5722) "rangeMin")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLShaderPrecisionFormat")
             [||])
  end
module WebGLRenderbuffer =
  struct
    type t = [ `WebGLRenderbuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5725 : Ojs.t) -> t_of_js x5725
    and t_0_to_js : t_0 -> Ojs.t = fun (x5724 : t) -> t_to_js x5724
    type tags = [ `WebGLRenderbuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLRenderbuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5728 : Ojs.t) -> intf_of_js __tags_of_js x5728
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5726 : __tags intf) -> intf_to_js __tags_to_js x5726
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLRenderbuffer")
             [||])
  end
module WebGLFramebuffer =
  struct
    type t = [ `WebGLFramebuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5731 : Ojs.t) -> t_of_js x5731
    and t_0_to_js : t_0 -> Ojs.t = fun (x5730 : t) -> t_to_js x5730
    type tags = [ `WebGLFramebuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLFramebuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5734 : Ojs.t) -> intf_of_js __tags_of_js x5734
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5732 : __tags intf) -> intf_to_js __tags_to_js x5732
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLFramebuffer")
             [||])
  end
module WebGLPowerPreference =
  struct
    type t =
      [ `L_s107_low_power  | `L_s57_default  | `L_s85_high_performance ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5737 : Ojs.t) ->
        let x5738 = x5737 in
        match Ojs.string_of_js x5738 with
        | "low-power" -> `L_s107_low_power
        | "default" -> `L_s57_default
        | "high-performance" -> `L_s85_high_performance
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x5736 :
          [ `L_s107_low_power  | `L_s57_default  | `L_s85_high_performance ])
        ->
        match x5736 with
        | `L_s107_low_power -> Ojs.string_to_js "low-power"
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s85_high_performance -> Ojs.string_to_js "high-performance"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5740 : Ojs.t) -> t_of_js x5740
    and t_0_to_js : t_0 -> Ojs.t = fun (x5739 : t) -> t_to_js x5739
  end
module WebGLContextAttributes =
  struct
    type t = [ `WebGLContextAttributes ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5742 : Ojs.t) -> t_of_js x5742
    and t_0_to_js : t_0 -> Ojs.t = fun (x5741 : t) -> t_to_js x5741
    type tags = [ `WebGLContextAttributes ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextAttributes ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5745 : Ojs.t) -> intf_of_js __tags_of_js x5745
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5743 : __tags intf) -> intf_to_js __tags_to_js x5743
    let (get_alpha : 'tags this -> bool) =
      fun (x5747 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5747) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x5749 : 'tags this) ->
        fun (x5750 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5749) "alpha"
            (Ojs.bool_to_js x5750)
    let (get_antialias : 'tags this -> bool) =
      fun (x5752 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5752) "antialias")
    let (set_antialias : 'tags this -> bool -> unit) =
      fun (x5754 : 'tags this) ->
        fun (x5755 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5754) "antialias"
            (Ojs.bool_to_js x5755)
    let (get_depth : 'tags this -> bool) =
      fun (x5757 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5757) "depth")
    let (set_depth : 'tags this -> bool -> unit) =
      fun (x5759 : 'tags this) ->
        fun (x5760 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5759) "depth"
            (Ojs.bool_to_js x5760)
    let (get_desynchronized : 'tags this -> bool) =
      fun (x5762 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5762) "desynchronized")
    let (set_desynchronized : 'tags this -> bool -> unit) =
      fun (x5764 : 'tags this) ->
        fun (x5765 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5764) "desynchronized"
            (Ojs.bool_to_js x5765)
    let (get_failIfMajorPerformanceCaveat : 'tags this -> bool) =
      fun (x5767 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5767)
             "failIfMajorPerformanceCaveat")
    let (set_failIfMajorPerformanceCaveat : 'tags this -> bool -> unit) =
      fun (x5769 : 'tags this) ->
        fun (x5770 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5769)
            "failIfMajorPerformanceCaveat" (Ojs.bool_to_js x5770)
    let (get_powerPreference : 'tags this -> WebGLPowerPreference.t) =
      fun (x5772 : 'tags this) ->
        WebGLPowerPreference.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5772) "powerPreference")
    let (set_powerPreference : 'tags this -> WebGLPowerPreference.t -> unit)
      =
      fun (x5774 : 'tags this) ->
        fun (x5775 : WebGLPowerPreference.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5774) "powerPreference"
            (WebGLPowerPreference.t_to_js x5775)
    let (get_premultipliedAlpha : 'tags this -> bool) =
      fun (x5777 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5777)
             "premultipliedAlpha")
    let (set_premultipliedAlpha : 'tags this -> bool -> unit) =
      fun (x5779 : 'tags this) ->
        fun (x5780 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5779)
            "premultipliedAlpha" (Ojs.bool_to_js x5780)
    let (get_preserveDrawingBuffer : 'tags this -> bool) =
      fun (x5782 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5782)
             "preserveDrawingBuffer")
    let (set_preserveDrawingBuffer : 'tags this -> bool -> unit) =
      fun (x5784 : 'tags this) ->
        fun (x5785 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5784)
            "preserveDrawingBuffer" (Ojs.bool_to_js x5785)
    let (get_stencil : 'tags this -> bool) =
      fun (x5787 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5787) "stencil")
    let (set_stencil : 'tags this -> bool -> unit) =
      fun (x5789 : 'tags this) ->
        fun (x5790 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x5789) "stencil"
            (Ojs.bool_to_js x5790)
    let cast_from = Obj.magic
  end
module WebGLProgram =
  struct
    type t = [ `WebGLProgram ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5793 : Ojs.t) -> t_of_js x5793
    and t_0_to_js : t_0 -> Ojs.t = fun (x5792 : t) -> t_to_js x5792
    type tags = [ `WebGLProgram ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLProgram ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5796 : Ojs.t) -> intf_of_js __tags_of_js x5796
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5794 : __tags intf) -> intf_to_js __tags_to_js x5794
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLProgram")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLProgram") [||])
  end
module WebGLBuffer =
  struct
    type t = [ `WebGLBuffer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5799 : Ojs.t) -> t_of_js x5799
    and t_0_to_js : t_0 -> Ojs.t = fun (x5798 : t) -> t_to_js x5798
    type tags = [ `WebGLBuffer ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLBuffer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5802 : Ojs.t) -> intf_of_js __tags_of_js x5802
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5800 : __tags intf) -> intf_to_js __tags_to_js x5800
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLBuffer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLBuffer") [||])
  end
module WebGLActiveInfo =
  struct
    type t = [ `WebGLActiveInfo ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5805 : Ojs.t) -> t_of_js x5805
    and t_0_to_js : t_0 -> Ojs.t = fun (x5804 : t) -> t_to_js x5804
    type tags = [ `WebGLActiveInfo ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLActiveInfo ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5808 : Ojs.t) -> intf_of_js __tags_of_js x5808
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5806 : __tags intf) -> intf_to_js __tags_to_js x5806
    let (get_name : 'tags this -> string) =
      fun (x5810 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5810) "name")
    let (get_size : 'tags this -> GLint.t) =
      fun (x5812 : 'tags this) ->
        GLint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5812) "size")
    let (get_type : 'tags this -> GLenum.t) =
      fun (x5814 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5814) "type")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLActiveInfo") [||])
  end
module WEBGL_lose_context =
  struct
    type t = [ `WEBGL_lose_context ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5817 : Ojs.t) -> t_of_js x5817
    and t_0_to_js : t_0 -> Ojs.t = fun (x5816 : t) -> t_to_js x5816
    type tags = [ `WEBGL_lose_context ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_lose_context ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5820 : Ojs.t) -> intf_of_js __tags_of_js x5820
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5818 : __tags intf) -> intf_to_js __tags_to_js x5818
    let (loseContext : 'tags this -> unit) =
      fun (x5822 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5822) "loseContext" [||])
    let (restoreContext : 'tags this -> unit) =
      fun (x5824 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x5824) "restoreContext" [||])
    let cast_from = Obj.magic
  end
module WEBGL_draw_buffers =
  struct
    type t = [ `WEBGL_draw_buffers ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5827 : Ojs.t) -> t_of_js x5827
    and t_0_to_js : t_0 -> Ojs.t = fun (x5826 : t) -> t_to_js x5826
    type tags = [ `WEBGL_draw_buffers ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_draw_buffers ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5830 : Ojs.t) -> intf_of_js __tags_of_js x5830
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5828 : __tags intf) -> intf_to_js __tags_to_js x5828
    let (drawBuffersWEBGL : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x5834 : 'tags this) ->
        fun ~buffers:(x5832 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x5834) "drawBuffersWEBGL"
               [|(Ojs.list_to_js GLenum.t_to_js x5832)|])
    let (get_COLOR_ATTACHMENT0_WEBGL : 'tags this -> GLenum.t) =
      fun (x5836 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5836)
             "COLOR_ATTACHMENT0_WEBGL")
    let (get_COLOR_ATTACHMENT10_WEBGL : 'tags this -> GLenum.t) =
      fun (x5838 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5838)
             "COLOR_ATTACHMENT10_WEBGL")
    let (get_COLOR_ATTACHMENT11_WEBGL : 'tags this -> GLenum.t) =
      fun (x5840 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5840)
             "COLOR_ATTACHMENT11_WEBGL")
    let (get_COLOR_ATTACHMENT12_WEBGL : 'tags this -> GLenum.t) =
      fun (x5842 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5842)
             "COLOR_ATTACHMENT12_WEBGL")
    let (get_COLOR_ATTACHMENT13_WEBGL : 'tags this -> GLenum.t) =
      fun (x5844 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5844)
             "COLOR_ATTACHMENT13_WEBGL")
    let (get_COLOR_ATTACHMENT14_WEBGL : 'tags this -> GLenum.t) =
      fun (x5846 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5846)
             "COLOR_ATTACHMENT14_WEBGL")
    let (get_COLOR_ATTACHMENT15_WEBGL : 'tags this -> GLenum.t) =
      fun (x5848 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5848)
             "COLOR_ATTACHMENT15_WEBGL")
    let (get_COLOR_ATTACHMENT1_WEBGL : 'tags this -> GLenum.t) =
      fun (x5850 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5850)
             "COLOR_ATTACHMENT1_WEBGL")
    let (get_COLOR_ATTACHMENT2_WEBGL : 'tags this -> GLenum.t) =
      fun (x5852 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5852)
             "COLOR_ATTACHMENT2_WEBGL")
    let (get_COLOR_ATTACHMENT3_WEBGL : 'tags this -> GLenum.t) =
      fun (x5854 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5854)
             "COLOR_ATTACHMENT3_WEBGL")
    let (get_COLOR_ATTACHMENT4_WEBGL : 'tags this -> GLenum.t) =
      fun (x5856 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5856)
             "COLOR_ATTACHMENT4_WEBGL")
    let (get_COLOR_ATTACHMENT5_WEBGL : 'tags this -> GLenum.t) =
      fun (x5858 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5858)
             "COLOR_ATTACHMENT5_WEBGL")
    let (get_COLOR_ATTACHMENT6_WEBGL : 'tags this -> GLenum.t) =
      fun (x5860 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5860)
             "COLOR_ATTACHMENT6_WEBGL")
    let (get_COLOR_ATTACHMENT7_WEBGL : 'tags this -> GLenum.t) =
      fun (x5862 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5862)
             "COLOR_ATTACHMENT7_WEBGL")
    let (get_COLOR_ATTACHMENT8_WEBGL : 'tags this -> GLenum.t) =
      fun (x5864 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5864)
             "COLOR_ATTACHMENT8_WEBGL")
    let (get_COLOR_ATTACHMENT9_WEBGL : 'tags this -> GLenum.t) =
      fun (x5866 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5866)
             "COLOR_ATTACHMENT9_WEBGL")
    let (get_DRAW_BUFFER0_WEBGL : 'tags this -> GLenum.t) =
      fun (x5868 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5868)
             "DRAW_BUFFER0_WEBGL")
    let (get_DRAW_BUFFER10_WEBGL : 'tags this -> GLenum.t) =
      fun (x5870 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5870)
             "DRAW_BUFFER10_WEBGL")
    let (get_DRAW_BUFFER11_WEBGL : 'tags this -> GLenum.t) =
      fun (x5872 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5872)
             "DRAW_BUFFER11_WEBGL")
    let (get_DRAW_BUFFER12_WEBGL : 'tags this -> GLenum.t) =
      fun (x5874 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5874)
             "DRAW_BUFFER12_WEBGL")
    let (get_DRAW_BUFFER13_WEBGL : 'tags this -> GLenum.t) =
      fun (x5876 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5876)
             "DRAW_BUFFER13_WEBGL")
    let (get_DRAW_BUFFER14_WEBGL : 'tags this -> GLenum.t) =
      fun (x5878 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5878)
             "DRAW_BUFFER14_WEBGL")
    let (get_DRAW_BUFFER15_WEBGL : 'tags this -> GLenum.t) =
      fun (x5880 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5880)
             "DRAW_BUFFER15_WEBGL")
    let (get_DRAW_BUFFER1_WEBGL : 'tags this -> GLenum.t) =
      fun (x5882 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5882)
             "DRAW_BUFFER1_WEBGL")
    let (get_DRAW_BUFFER2_WEBGL : 'tags this -> GLenum.t) =
      fun (x5884 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5884)
             "DRAW_BUFFER2_WEBGL")
    let (get_DRAW_BUFFER3_WEBGL : 'tags this -> GLenum.t) =
      fun (x5886 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5886)
             "DRAW_BUFFER3_WEBGL")
    let (get_DRAW_BUFFER4_WEBGL : 'tags this -> GLenum.t) =
      fun (x5888 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5888)
             "DRAW_BUFFER4_WEBGL")
    let (get_DRAW_BUFFER5_WEBGL : 'tags this -> GLenum.t) =
      fun (x5890 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5890)
             "DRAW_BUFFER5_WEBGL")
    let (get_DRAW_BUFFER6_WEBGL : 'tags this -> GLenum.t) =
      fun (x5892 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5892)
             "DRAW_BUFFER6_WEBGL")
    let (get_DRAW_BUFFER7_WEBGL : 'tags this -> GLenum.t) =
      fun (x5894 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5894)
             "DRAW_BUFFER7_WEBGL")
    let (get_DRAW_BUFFER8_WEBGL : 'tags this -> GLenum.t) =
      fun (x5896 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5896)
             "DRAW_BUFFER8_WEBGL")
    let (get_DRAW_BUFFER9_WEBGL : 'tags this -> GLenum.t) =
      fun (x5898 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5898)
             "DRAW_BUFFER9_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS_WEBGL : 'tags this -> GLenum.t) =
      fun (x5900 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5900)
             "MAX_COLOR_ATTACHMENTS_WEBGL")
    let (get_MAX_DRAW_BUFFERS_WEBGL : 'tags this -> GLenum.t) =
      fun (x5902 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5902)
             "MAX_DRAW_BUFFERS_WEBGL")
    let (drawBuffersWEBGL' :
      'tags this -> buffers:GLenum.t Iterable.t_1 -> unit) =
      fun (x5906 : 'tags this) ->
        fun ~buffers:(x5904 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x5906) "drawBuffersWEBGL"
               [|(Iterable.t_1_to_js GLenum.t_to_js x5904)|])
    let cast_from = Obj.magic
  end
module WEBGL_depth_texture =
  struct
    type t = [ `WEBGL_depth_texture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5909 : Ojs.t) -> t_of_js x5909
    and t_0_to_js : t_0 -> Ojs.t = fun (x5908 : t) -> t_to_js x5908
    type tags = [ `WEBGL_depth_texture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_depth_texture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5912 : Ojs.t) -> intf_of_js __tags_of_js x5912
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5910 : __tags intf) -> intf_to_js __tags_to_js x5910
    let (get_UNSIGNED_INT_24_8_WEBGL : 'tags this -> GLenum.t) =
      fun (x5914 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5914)
             "UNSIGNED_INT_24_8_WEBGL")
    let cast_from = Obj.magic
  end
module WebGLShader =
  struct
    type t = [ `WebGLShader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5917 : Ojs.t) -> t_of_js x5917
    and t_0_to_js : t_0 -> Ojs.t = fun (x5916 : t) -> t_to_js x5916
    type tags = [ `WebGLShader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLShader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5920 : Ojs.t) -> intf_of_js __tags_of_js x5920
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5918 : __tags intf) -> intf_to_js __tags_to_js x5918
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLShader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLShader") [||])
  end
module WEBGL_debug_shaders =
  struct
    type t = [ `WEBGL_debug_shaders ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5923 : Ojs.t) -> t_of_js x5923
    and t_0_to_js : t_0 -> Ojs.t = fun (x5922 : t) -> t_to_js x5922
    type tags = [ `WEBGL_debug_shaders ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WEBGL_debug_shaders ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5926 : Ojs.t) -> intf_of_js __tags_of_js x5926
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5924 : __tags intf) -> intf_to_js __tags_to_js x5924
    let (getTranslatedShaderSource :
      'tags this -> shader:WebGLShader.t -> string) =
      fun (x5929 : 'tags this) ->
        fun ~shader:(x5928 : WebGLShader.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x5929)
               "getTranslatedShaderSource" [|(WebGLShader.t_to_js x5928)|])
    let cast_from = Obj.magic
  end
module WEBGL_debug_renderer_info =
  struct
    type t = [ `WEBGL_debug_renderer_info ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5932 : Ojs.t) -> t_of_js x5932
    and t_0_to_js : t_0 -> Ojs.t = fun (x5931 : t) -> t_to_js x5931
    type tags = [ `WEBGL_debug_renderer_info ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_debug_renderer_info ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5935 : Ojs.t) -> intf_of_js __tags_of_js x5935
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5933 : __tags intf) -> intf_to_js __tags_to_js x5933
    let (get_UNMASKED_RENDERER_WEBGL : 'tags this -> GLenum.t) =
      fun (x5937 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5937)
             "UNMASKED_RENDERER_WEBGL")
    let (get_UNMASKED_VENDOR_WEBGL : 'tags this -> GLenum.t) =
      fun (x5939 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5939)
             "UNMASKED_VENDOR_WEBGL")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc_srgb =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc_srgb ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5942 : Ojs.t) -> t_of_js x5942
    and t_0_to_js : t_0 -> Ojs.t = fun (x5941 : t) -> t_to_js x5941
    type tags = [ `WEBGL_compressed_texture_s3tc_srgb ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc_srgb ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5945 : Ojs.t) -> intf_of_js __tags_of_js x5945
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5943 : __tags intf) -> intf_to_js __tags_to_js x5943
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x5947 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5947)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x5949 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5949)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x5951 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5951)
             "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_SRGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x5953 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5953)
             "COMPRESSED_SRGB_S3TC_DXT1_EXT")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_s3tc =
  struct
    type t = [ `WEBGL_compressed_texture_s3tc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5956 : Ojs.t) -> t_of_js x5956
    and t_0_to_js : t_0 -> Ojs.t = fun (x5955 : t) -> t_to_js x5955
    type tags = [ `WEBGL_compressed_texture_s3tc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_s3tc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5959 : Ojs.t) -> intf_of_js __tags_of_js x5959
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5957 : __tags intf) -> intf_to_js __tags_to_js x5957
    let (get_COMPRESSED_RGBA_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x5961 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5961)
             "COMPRESSED_RGBA_S3TC_DXT1_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT3_EXT : 'tags this -> GLenum.t) =
      fun (x5963 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5963)
             "COMPRESSED_RGBA_S3TC_DXT3_EXT")
    let (get_COMPRESSED_RGBA_S3TC_DXT5_EXT : 'tags this -> GLenum.t) =
      fun (x5965 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5965)
             "COMPRESSED_RGBA_S3TC_DXT5_EXT")
    let (get_COMPRESSED_RGB_S3TC_DXT1_EXT : 'tags this -> GLenum.t) =
      fun (x5967 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5967)
             "COMPRESSED_RGB_S3TC_DXT1_EXT")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_pvrtc =
  struct
    type t = [ `WEBGL_compressed_texture_pvrtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5970 : Ojs.t) -> t_of_js x5970
    and t_0_to_js : t_0 -> Ojs.t = fun (x5969 : t) -> t_to_js x5969
    type tags = [ `WEBGL_compressed_texture_pvrtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_pvrtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5973 : Ojs.t) -> intf_of_js __tags_of_js x5973
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5971 : __tags intf) -> intf_to_js __tags_to_js x5971
    let (get_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x5975 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5975)
             "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x5977 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5977)
             "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_2BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x5979 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5979)
             "COMPRESSED_RGB_PVRTC_2BPPV1_IMG")
    let (get_COMPRESSED_RGB_PVRTC_4BPPV1_IMG : 'tags this -> GLenum.t) =
      fun (x5981 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5981)
             "COMPRESSED_RGB_PVRTC_4BPPV1_IMG")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc1 =
  struct
    type t = [ `WEBGL_compressed_texture_etc1 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5984 : Ojs.t) -> t_of_js x5984
    and t_0_to_js : t_0 -> Ojs.t = fun (x5983 : t) -> t_to_js x5983
    type tags = [ `WEBGL_compressed_texture_etc1 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc1 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5987 : Ojs.t) -> intf_of_js __tags_of_js x5987
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5985 : __tags intf) -> intf_to_js __tags_to_js x5985
    let (get_COMPRESSED_RGB_ETC1_WEBGL : 'tags this -> GLenum.t) =
      fun (x5989 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5989)
             "COMPRESSED_RGB_ETC1_WEBGL")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_etc =
  struct
    type t = [ `WEBGL_compressed_texture_etc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x5992 : Ojs.t) -> t_of_js x5992
    and t_0_to_js : t_0 -> Ojs.t = fun (x5991 : t) -> t_to_js x5991
    type tags = [ `WEBGL_compressed_texture_etc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_etc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x5995 : Ojs.t) -> intf_of_js __tags_of_js x5995
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x5993 : __tags intf) -> intf_to_js __tags_to_js x5993
    let (get_COMPRESSED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x5997 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5997)
             "COMPRESSED_R11_EAC")
    let (get_COMPRESSED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x5999 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x5999)
             "COMPRESSED_RG11_EAC")
    let (get_COMPRESSED_RGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x6001 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6001)
             "COMPRESSED_RGB8_ETC2")
    let (get_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x6003 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6003)
             "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let (get_COMPRESSED_RGBA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x6005 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6005)
             "COMPRESSED_RGBA8_ETC2_EAC")
    let (get_COMPRESSED_SIGNED_R11_EAC : 'tags this -> GLenum.t) =
      fun (x6007 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6007)
             "COMPRESSED_SIGNED_R11_EAC")
    let (get_COMPRESSED_SIGNED_RG11_EAC : 'tags this -> GLenum.t) =
      fun (x6009 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6009)
             "COMPRESSED_SIGNED_RG11_EAC")
    let (get_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : 'tags this -> GLenum.t) =
      fun (x6011 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6011)
             "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC")
    let (get_COMPRESSED_SRGB8_ETC2 : 'tags this -> GLenum.t) =
      fun (x6013 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6013)
             "COMPRESSED_SRGB8_ETC2")
    let (get_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 :
      'tags this -> GLenum.t) =
      fun (x6015 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6015)
             "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2")
    let cast_from = Obj.magic
  end
module WEBGL_compressed_texture_astc =
  struct
    type t = [ `WEBGL_compressed_texture_astc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6018 : Ojs.t) -> t_of_js x6018
    and t_0_to_js : t_0 -> Ojs.t = fun (x6017 : t) -> t_to_js x6017
    type tags = [ `WEBGL_compressed_texture_astc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_compressed_texture_astc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6021 : Ojs.t) -> intf_of_js __tags_of_js x6021
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6019 : __tags intf) -> intf_to_js __tags_to_js x6019
    let (getSupportedProfiles : 'tags this -> string list) =
      fun (x6023 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x6023) "getSupportedProfiles" [||])
    let (get_COMPRESSED_RGBA_ASTC_10x10_KHR : 'tags this -> GLenum.t) =
      fun (x6026 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6026)
             "COMPRESSED_RGBA_ASTC_10x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x5_KHR : 'tags this -> GLenum.t) =
      fun (x6028 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6028)
             "COMPRESSED_RGBA_ASTC_10x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x6_KHR : 'tags this -> GLenum.t) =
      fun (x6030 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6030)
             "COMPRESSED_RGBA_ASTC_10x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_10x8_KHR : 'tags this -> GLenum.t) =
      fun (x6032 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6032)
             "COMPRESSED_RGBA_ASTC_10x8_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x10_KHR : 'tags this -> GLenum.t) =
      fun (x6034 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6034)
             "COMPRESSED_RGBA_ASTC_12x10_KHR")
    let (get_COMPRESSED_RGBA_ASTC_12x12_KHR : 'tags this -> GLenum.t) =
      fun (x6036 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6036)
             "COMPRESSED_RGBA_ASTC_12x12_KHR")
    let (get_COMPRESSED_RGBA_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x6038 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6038)
             "COMPRESSED_RGBA_ASTC_4x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x6040 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6040)
             "COMPRESSED_RGBA_ASTC_5x4_KHR")
    let (get_COMPRESSED_RGBA_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x6042 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6042)
             "COMPRESSED_RGBA_ASTC_5x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x6044 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6044)
             "COMPRESSED_RGBA_ASTC_6x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x6046 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6046)
             "COMPRESSED_RGBA_ASTC_6x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x6048 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6048)
             "COMPRESSED_RGBA_ASTC_8x5_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x6050 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6050)
             "COMPRESSED_RGBA_ASTC_8x6_KHR")
    let (get_COMPRESSED_RGBA_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x6052 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6052)
             "COMPRESSED_RGBA_ASTC_8x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x6054 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6054)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : 'tags this -> GLenum.t)
      =
      fun (x6056 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6056)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : 'tags this -> GLenum.t)
      =
      fun (x6058 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6058)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : 'tags this -> GLenum.t)
      =
      fun (x6060 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6060)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : 'tags this -> GLenum.t)
      =
      fun (x6062 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6062)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : 'tags this -> GLenum.t)
      =
      fun (x6064 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6064)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : 'tags this -> GLenum.t) =
      fun (x6066 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6066)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : 'tags this -> GLenum.t) =
      fun (x6068 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6068)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : 'tags this -> GLenum.t) =
      fun (x6070 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6070)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : 'tags this -> GLenum.t) =
      fun (x6072 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6072)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : 'tags this -> GLenum.t) =
      fun (x6074 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6074)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : 'tags this -> GLenum.t) =
      fun (x6076 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6076)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : 'tags this -> GLenum.t) =
      fun (x6078 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6078)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR")
    let (get_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : 'tags this -> GLenum.t) =
      fun (x6080 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6080)
             "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR")
    let cast_from = Obj.magic
  end
module WEBGL_color_buffer_float =
  struct
    type t = [ `WEBGL_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6083 : Ojs.t) -> t_of_js x6083
    and t_0_to_js : t_0 -> Ojs.t = fun (x6082 : t) -> t_to_js x6082
    type tags = [ `WEBGL_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WEBGL_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6086 : Ojs.t) -> intf_of_js __tags_of_js x6086
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6084 : __tags intf) -> intf_to_js __tags_to_js x6084
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x6088 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6088)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGBA32F_EXT : 'tags this -> GLenum.t) =
      fun (x6090 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6090) "RGBA32F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x6092 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6092)
             "UNSIGNED_NORMALIZED_EXT")
    let cast_from = Obj.magic
  end
module WebGLTexture =
  struct
    type t = [ `WebGLTexture ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6095 : Ojs.t) -> t_of_js x6095
    and t_0_to_js : t_0 -> Ojs.t = fun (x6094 : t) -> t_to_js x6094
    type tags = [ `WebGLTexture ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLTexture ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6098 : Ojs.t) -> intf_of_js __tags_of_js x6098
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6096 : __tags intf) -> intf_to_js __tags_to_js x6096
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLTexture")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLTexture") [||])
  end
module OVR_multiview2 =
  struct
    type t = [ `OVR_multiview2 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6101 : Ojs.t) -> t_of_js x6101
    and t_0_to_js : t_0 -> Ojs.t = fun (x6100 : t) -> t_to_js x6100
    type tags = [ `OVR_multiview2 ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OVR_multiview2 ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6104 : Ojs.t) -> intf_of_js __tags_of_js x6104
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6102 : __tags intf) -> intf_to_js __tags_to_js x6102
    let (framebufferTextureMultiviewOVR :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t or_null ->
              level:GLint.t ->
                baseViewIndex:GLint.t -> numViews:GLsizei.t -> unit)
      =
      fun (x6113 : 'tags this) ->
        fun ~target:(x6106 : GLenum.t) ->
          fun ~attachment:(x6107 : GLenum.t) ->
            fun ~texture:(x6108 : WebGLTexture.t or_null) ->
              fun ~level:(x6110 : GLint.t) ->
                fun ~baseViewIndex:(x6111 : GLint.t) ->
                  fun ~numViews:(x6112 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x6113)
                         "framebufferTextureMultiviewOVR"
                         [|(GLenum.t_to_js x6106);(GLenum.t_to_js x6107);(
                           or_null_to_js WebGLTexture.t_to_js x6108);(
                           GLint.t_to_js x6110);(GLint.t_to_js x6111);(
                           GLsizei.t_to_js x6112)|])
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR :
      'tags this -> GLenum.t) =
      fun (x6115 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6115)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR :
      'tags this -> GLenum.t) =
      fun (x6117 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6117)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR")
    let (get_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR :
      'tags this -> GLenum.t) =
      fun (x6119 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6119)
             "FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR")
    let (get_MAX_VIEWS_OVR : 'tags this -> GLenum.t) =
      fun (x6121 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6121) "MAX_VIEWS_OVR")
    let cast_from = Obj.magic
  end
module WebGLVertexArrayObjectOES =
  struct
    type t = [ `WebGLVertexArrayObjectOES ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6124 : Ojs.t) -> t_of_js x6124
    and t_0_to_js : t_0 -> Ojs.t = fun (x6123 : t) -> t_to_js x6123
    type tags = [ `WebGLVertexArrayObjectOES ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObjectOES ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6127 : Ojs.t) -> intf_of_js __tags_of_js x6127
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6125 : __tags intf) -> intf_to_js __tags_to_js x6125
    let cast_from = Obj.magic
  end
module OES_vertex_array_object =
  struct
    type t = [ `OES_vertex_array_object ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6130 : Ojs.t) -> t_of_js x6130
    and t_0_to_js : t_0 -> Ojs.t = fun (x6129 : t) -> t_to_js x6129
    type tags = [ `OES_vertex_array_object ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_vertex_array_object ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6133 : Ojs.t) -> intf_of_js __tags_of_js x6133
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6131 : __tags intf) -> intf_to_js __tags_to_js x6131
    let (bindVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t or_null -> unit)
      =
      fun (x6137 : 'tags this) ->
        fun ~arrayObject:(x6135 : WebGLVertexArrayObjectOES.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6137) "bindVertexArrayOES"
               [|(or_null_to_js WebGLVertexArrayObjectOES.t_to_js x6135)|])
    let (createVertexArrayOES :
      'tags this -> WebGLVertexArrayObjectOES.t or_null) =
      fun (x6139 : 'tags this) ->
        or_null_of_js WebGLVertexArrayObjectOES.t_of_js
          (Ojs.call (this_to_js Obj.magic x6139) "createVertexArrayOES" [||])
    let (deleteVertexArrayOES :
      'tags this -> arrayObject:WebGLVertexArrayObjectOES.t or_null -> unit)
      =
      fun (x6144 : 'tags this) ->
        fun ~arrayObject:(x6142 : WebGLVertexArrayObjectOES.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6144) "deleteVertexArrayOES"
               [|(or_null_to_js WebGLVertexArrayObjectOES.t_to_js x6142)|])
    let (isVertexArrayOES :
      'tags this ->
        arrayObject:WebGLVertexArrayObjectOES.t or_null -> GLboolean.t)
      =
      fun (x6148 : 'tags this) ->
        fun ~arrayObject:(x6146 : WebGLVertexArrayObjectOES.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x6148) "isVertexArrayOES"
               [|(or_null_to_js WebGLVertexArrayObjectOES.t_to_js x6146)|])
    let (get_VERTEX_ARRAY_BINDING_OES : 'tags this -> GLenum.t) =
      fun (x6150 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6150)
             "VERTEX_ARRAY_BINDING_OES")
    let cast_from = Obj.magic
  end
module OES_texture_half_float_linear =
  struct
    type t = [ `OES_texture_half_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6153 : Ojs.t) -> t_of_js x6153
    and t_0_to_js : t_0 -> Ojs.t = fun (x6152 : t) -> t_to_js x6152
    type tags = [ `OES_texture_half_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6156 : Ojs.t) -> intf_of_js __tags_of_js x6156
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6154 : __tags intf) -> intf_to_js __tags_to_js x6154
    let cast_from = Obj.magic
  end
module OES_texture_half_float =
  struct
    type t = [ `OES_texture_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6159 : Ojs.t) -> t_of_js x6159
    and t_0_to_js : t_0 -> Ojs.t = fun (x6158 : t) -> t_to_js x6158
    type tags = [ `OES_texture_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6162 : Ojs.t) -> intf_of_js __tags_of_js x6162
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6160 : __tags intf) -> intf_to_js __tags_to_js x6160
    let (get_HALF_FLOAT_OES : 'tags this -> GLenum.t) =
      fun (x6164 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6164) "HALF_FLOAT_OES")
    let cast_from = Obj.magic
  end
module OES_texture_float_linear =
  struct
    type t = [ `OES_texture_float_linear ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6167 : Ojs.t) -> t_of_js x6167
    and t_0_to_js : t_0 -> Ojs.t = fun (x6166 : t) -> t_to_js x6166
    type tags = [ `OES_texture_float_linear ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_texture_float_linear ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6170 : Ojs.t) -> intf_of_js __tags_of_js x6170
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6168 : __tags intf) -> intf_to_js __tags_to_js x6168
    let cast_from = Obj.magic
  end
module OES_texture_float =
  struct
    type t = [ `OES_texture_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6173 : Ojs.t) -> t_of_js x6173
    and t_0_to_js : t_0 -> Ojs.t = fun (x6172 : t) -> t_to_js x6172
    type tags = [ `OES_texture_float ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `OES_texture_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6176 : Ojs.t) -> intf_of_js __tags_of_js x6176
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6174 : __tags intf) -> intf_to_js __tags_to_js x6174
    let cast_from = Obj.magic
  end
module OES_standard_derivatives =
  struct
    type t = [ `OES_standard_derivatives ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6179 : Ojs.t) -> t_of_js x6179
    and t_0_to_js : t_0 -> Ojs.t = fun (x6178 : t) -> t_to_js x6178
    type tags = [ `OES_standard_derivatives ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_standard_derivatives ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6182 : Ojs.t) -> intf_of_js __tags_of_js x6182
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6180 : __tags intf) -> intf_to_js __tags_to_js x6180
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT_OES : 'tags this -> GLenum.t) =
      fun (x6184 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6184)
             "FRAGMENT_SHADER_DERIVATIVE_HINT_OES")
    let cast_from = Obj.magic
  end
module OES_element_index_uint =
  struct
    type t = [ `OES_element_index_uint ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6187 : Ojs.t) -> t_of_js x6187
    and t_0_to_js : t_0 -> Ojs.t = fun (x6186 : t) -> t_to_js x6186
    type tags = [ `OES_element_index_uint ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_element_index_uint ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6190 : Ojs.t) -> intf_of_js __tags_of_js x6190
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6188 : __tags intf) -> intf_to_js __tags_to_js x6188
    let cast_from = Obj.magic
  end
module KHR_parallel_shader_compile =
  struct
    type t = [ `KHR_parallel_shader_compile ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6193 : Ojs.t) -> t_of_js x6193
    and t_0_to_js : t_0 -> Ojs.t = fun (x6192 : t) -> t_to_js x6192
    type tags = [ `KHR_parallel_shader_compile ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `KHR_parallel_shader_compile ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6196 : Ojs.t) -> intf_of_js __tags_of_js x6196
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6194 : __tags intf) -> intf_to_js __tags_to_js x6194
    let (get_COMPLETION_STATUS_KHR : 'tags this -> GLenum.t) =
      fun (x6198 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6198)
             "COMPLETION_STATUS_KHR")
    let cast_from = Obj.magic
  end
module GLclampf =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6201 : Ojs.t) -> Ojs.float_of_js x6201
    and t_to_js : t -> Ojs.t = fun (x6200 : float) -> Ojs.float_to_js x6200
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6203 : Ojs.t) -> t_of_js x6203
    and t_0_to_js : t_0 -> Ojs.t = fun (x6202 : t) -> t_to_js x6202
  end
module GLbitfield =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6205 : Ojs.t) -> Ojs.float_of_js x6205
    and t_to_js : t -> Ojs.t = fun (x6204 : float) -> Ojs.float_to_js x6204
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6207 : Ojs.t) -> t_of_js x6207
    and t_0_to_js : t_0 -> Ojs.t = fun (x6206 : t) -> t_to_js x6206
  end
module EXT_texture_filter_anisotropic =
  struct
    type t = [ `EXT_texture_filter_anisotropic ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6209 : Ojs.t) -> t_of_js x6209
    and t_0_to_js : t_0 -> Ojs.t = fun (x6208 : t) -> t_to_js x6208
    type tags = [ `EXT_texture_filter_anisotropic ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_filter_anisotropic ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6212 : Ojs.t) -> intf_of_js __tags_of_js x6212
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6210 : __tags intf) -> intf_to_js __tags_to_js x6210
    let (get_MAX_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x6214 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6214)
             "MAX_TEXTURE_MAX_ANISOTROPY_EXT")
    let (get_TEXTURE_MAX_ANISOTROPY_EXT : 'tags this -> GLenum.t) =
      fun (x6216 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6216)
             "TEXTURE_MAX_ANISOTROPY_EXT")
    let cast_from = Obj.magic
  end
module EXT_shader_texture_lod =
  struct
    type t = [ `EXT_shader_texture_lod ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6219 : Ojs.t) -> t_of_js x6219
    and t_0_to_js : t_0 -> Ojs.t = fun (x6218 : t) -> t_to_js x6218
    type tags = [ `EXT_shader_texture_lod ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_shader_texture_lod ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6222 : Ojs.t) -> intf_of_js __tags_of_js x6222
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6220 : __tags intf) -> intf_to_js __tags_to_js x6220
    let cast_from = Obj.magic
  end
module EXT_sRGB =
  struct
    type t = [ `EXT_sRGB ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6225 : Ojs.t) -> t_of_js x6225
    and t_0_to_js : t_0 -> Ojs.t = fun (x6224 : t) -> t_to_js x6224
    type tags = [ `EXT_sRGB ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_sRGB ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6228 : Ojs.t) -> intf_of_js __tags_of_js x6228
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6226 : __tags intf) -> intf_to_js __tags_to_js x6226
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT :
      'tags this -> GLenum.t) =
      fun (x6230 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6230)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT")
    let (get_SRGB8_ALPHA8_EXT : 'tags this -> GLenum.t) =
      fun (x6232 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6232) "SRGB8_ALPHA8_EXT")
    let (get_SRGB_ALPHA_EXT : 'tags this -> GLenum.t) =
      fun (x6234 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6234) "SRGB_ALPHA_EXT")
    let (get_SRGB_EXT : 'tags this -> GLenum.t) =
      fun (x6236 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6236) "SRGB_EXT")
    let cast_from = Obj.magic
  end
module EXT_frag_depth =
  struct
    type t = [ `EXT_frag_depth ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6239 : Ojs.t) -> t_of_js x6239
    and t_0_to_js : t_0 -> Ojs.t = fun (x6238 : t) -> t_to_js x6238
    type tags = [ `EXT_frag_depth ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_frag_depth ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6242 : Ojs.t) -> intf_of_js __tags_of_js x6242
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6240 : __tags intf) -> intf_to_js __tags_to_js x6240
    let cast_from = Obj.magic
  end
module EXT_float_blend =
  struct
    type t = [ `EXT_float_blend ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6245 : Ojs.t) -> t_of_js x6245
    and t_0_to_js : t_0 -> Ojs.t = fun (x6244 : t) -> t_to_js x6244
    type tags = [ `EXT_float_blend ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_float_blend ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6248 : Ojs.t) -> intf_of_js __tags_of_js x6248
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6246 : __tags intf) -> intf_to_js __tags_to_js x6246
    let cast_from = Obj.magic
  end
module EXT_color_buffer_half_float =
  struct
    type t = [ `EXT_color_buffer_half_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6251 : Ojs.t) -> t_of_js x6251
    and t_0_to_js : t_0 -> Ojs.t = fun (x6250 : t) -> t_to_js x6250
    type tags = [ `EXT_color_buffer_half_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_half_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6254 : Ojs.t) -> intf_of_js __tags_of_js x6254
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6252 : __tags intf) -> intf_to_js __tags_to_js x6252
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT :
      'tags this -> GLenum.t) =
      fun (x6256 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6256)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT")
    let (get_RGB16F_EXT : 'tags this -> GLenum.t) =
      fun (x6258 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6258) "RGB16F_EXT")
    let (get_RGBA16F_EXT : 'tags this -> GLenum.t) =
      fun (x6260 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6260) "RGBA16F_EXT")
    let (get_UNSIGNED_NORMALIZED_EXT : 'tags this -> GLenum.t) =
      fun (x6262 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6262)
             "UNSIGNED_NORMALIZED_EXT")
    let cast_from = Obj.magic
  end
module EXT_color_buffer_float =
  struct
    type t = [ `EXT_color_buffer_float ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6265 : Ojs.t) -> t_of_js x6265
    and t_0_to_js : t_0 -> Ojs.t = fun (x6264 : t) -> t_to_js x6264
    type tags = [ `EXT_color_buffer_float ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_color_buffer_float ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6268 : Ojs.t) -> intf_of_js __tags_of_js x6268
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6266 : __tags intf) -> intf_to_js __tags_to_js x6266
    let cast_from = Obj.magic
  end
module EXT_blend_minmax =
  struct
    type t = [ `EXT_blend_minmax ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6271 : Ojs.t) -> t_of_js x6271
    and t_0_to_js : t_0 -> Ojs.t = fun (x6270 : t) -> t_to_js x6270
    type tags = [ `EXT_blend_minmax ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EXT_blend_minmax ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6274 : Ojs.t) -> intf_of_js __tags_of_js x6274
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6272 : __tags intf) -> intf_to_js __tags_to_js x6272
    let (get_MAX_EXT : 'tags this -> GLenum.t) =
      fun (x6276 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6276) "MAX_EXT")
    let (get_MIN_EXT : 'tags this -> GLenum.t) =
      fun (x6278 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6278) "MIN_EXT")
    let cast_from = Obj.magic
  end
module GLuint =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x6281 : Ojs.t) -> Ojs.float_of_js x6281
    and t_to_js : t -> Ojs.t = fun (x6280 : float) -> Ojs.float_to_js x6280
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6283 : Ojs.t) -> t_of_js x6283
    and t_0_to_js : t_0 -> Ojs.t = fun (x6282 : t) -> t_to_js x6282
  end
module ANGLE_instanced_arrays =
  struct
    type t = [ `ANGLE_instanced_arrays ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6285 : Ojs.t) -> t_of_js x6285
    and t_0_to_js : t_0 -> Ojs.t = fun (x6284 : t) -> t_to_js x6284
    type tags = [ `ANGLE_instanced_arrays ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ANGLE_instanced_arrays ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6288 : Ojs.t) -> intf_of_js __tags_of_js x6288
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6286 : __tags intf) -> intf_to_js __tags_to_js x6286
    let (drawArraysInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> primcount:GLsizei.t -> unit)
      =
      fun (x6294 : 'tags this) ->
        fun ~mode:(x6290 : GLenum.t) ->
          fun ~first:(x6291 : GLint.t) ->
            fun ~count:(x6292 : GLsizei.t) ->
              fun ~primcount:(x6293 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6294)
                     "drawArraysInstancedANGLE"
                     [|(GLenum.t_to_js x6290);(GLint.t_to_js x6291);(
                       GLsizei.t_to_js x6292);(GLsizei.t_to_js x6293)|])
    let (drawElementsInstancedANGLE :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> primcount:GLsizei.t -> unit)
      =
      fun (x6301 : 'tags this) ->
        fun ~mode:(x6296 : GLenum.t) ->
          fun ~count:(x6297 : GLsizei.t) ->
            fun ~type_:(x6298 : GLenum.t) ->
              fun ~offset:(x6299 : GLintptr.t) ->
                fun ~primcount:(x6300 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x6301)
                       "drawElementsInstancedANGLE"
                       [|(GLenum.t_to_js x6296);(GLsizei.t_to_js x6297);(
                         GLenum.t_to_js x6298);(GLintptr.t_to_js x6299);(
                         GLsizei.t_to_js x6300)|])
    let (vertexAttribDivisorANGLE :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x6305 : 'tags this) ->
        fun ~index:(x6303 : GLuint.t) ->
          fun ~divisor:(x6304 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6305)
                 "vertexAttribDivisorANGLE"
                 [|(GLuint.t_to_js x6303);(GLuint.t_to_js x6304)|])
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE : 'tags this -> GLenum.t) =
      fun (x6307 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6307)
             "VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE")
    let cast_from = Obj.magic
  end
module WebGLRenderingContextBase =
  struct
    type t = [ `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x6310 : Ojs.t) -> t_of_js x6310
    and t_0_to_js : t_0 -> Ojs.t = fun (x6309 : t) -> t_to_js x6309
    type tags = [ `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x6313 : Ojs.t) -> intf_of_js __tags_of_js x6313
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x6311 : __tags intf) -> intf_to_js __tags_to_js x6311
    let (get_drawingBufferHeight : 'tags this -> GLsizei.t) =
      fun (x6315 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6315)
             "drawingBufferHeight")
    let (get_drawingBufferWidth : 'tags this -> GLsizei.t) =
      fun (x6317 : 'tags this) ->
        GLsizei.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6317)
             "drawingBufferWidth")
    let (activeTexture : 'tags this -> texture:GLenum.t -> unit) =
      fun (x6320 : 'tags this) ->
        fun ~texture:(x6319 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6320) "activeTexture"
               [|(GLenum.t_to_js x6319)|])
    let (attachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x6324 : 'tags this) ->
        fun ~program:(x6322 : WebGLProgram.t) ->
          fun ~shader:(x6323 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6324) "attachShader"
                 [|(WebGLProgram.t_to_js x6322);(WebGLShader.t_to_js x6323)|])
    let (bindAttribLocation :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> name:string -> unit)
      =
      fun (x6329 : 'tags this) ->
        fun ~program:(x6326 : WebGLProgram.t) ->
          fun ~index:(x6327 : GLuint.t) ->
            fun ~name:(x6328 : string) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6329) "bindAttribLocation"
                   [|(WebGLProgram.t_to_js x6326);(GLuint.t_to_js x6327);(
                     Ojs.string_to_js x6328)|])
    let (bindBuffer :
      'tags this -> target:GLenum.t -> buffer:WebGLBuffer.t or_null -> unit)
      =
      fun (x6334 : 'tags this) ->
        fun ~target:(x6331 : GLenum.t) ->
          fun ~buffer:(x6332 : WebGLBuffer.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6334) "bindBuffer"
                 [|(GLenum.t_to_js x6331);(or_null_to_js WebGLBuffer.t_to_js
                                             x6332)|])
    let (bindFramebuffer :
      'tags this ->
        target:GLenum.t -> framebuffer:WebGLFramebuffer.t or_null -> unit)
      =
      fun (x6339 : 'tags this) ->
        fun ~target:(x6336 : GLenum.t) ->
          fun ~framebuffer:(x6337 : WebGLFramebuffer.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6339) "bindFramebuffer"
                 [|(GLenum.t_to_js x6336);(or_null_to_js
                                             WebGLFramebuffer.t_to_js x6337)|])
    let (bindRenderbuffer :
      'tags this ->
        target:GLenum.t -> renderbuffer:WebGLRenderbuffer.t or_null -> unit)
      =
      fun (x6344 : 'tags this) ->
        fun ~target:(x6341 : GLenum.t) ->
          fun ~renderbuffer:(x6342 : WebGLRenderbuffer.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6344) "bindRenderbuffer"
                 [|(GLenum.t_to_js x6341);(or_null_to_js
                                             WebGLRenderbuffer.t_to_js x6342)|])
    let (bindTexture :
      'tags this -> target:GLenum.t -> texture:WebGLTexture.t or_null -> unit)
      =
      fun (x6349 : 'tags this) ->
        fun ~target:(x6346 : GLenum.t) ->
          fun ~texture:(x6347 : WebGLTexture.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6349) "bindTexture"
                 [|(GLenum.t_to_js x6346);(or_null_to_js WebGLTexture.t_to_js
                                             x6347)|])
    let (blendColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x6355 : 'tags this) ->
        fun ~red:(x6351 : GLclampf.t) ->
          fun ~green:(x6352 : GLclampf.t) ->
            fun ~blue:(x6353 : GLclampf.t) ->
              fun ~alpha:(x6354 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6355) "blendColor"
                     [|(GLclampf.t_to_js x6351);(GLclampf.t_to_js x6352);(
                       GLclampf.t_to_js x6353);(GLclampf.t_to_js x6354)|])
    let (blendEquation : 'tags this -> mode:GLenum.t -> unit) =
      fun (x6358 : 'tags this) ->
        fun ~mode:(x6357 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6358) "blendEquation"
               [|(GLenum.t_to_js x6357)|])
    let (blendEquationSeparate :
      'tags this -> modeRGB:GLenum.t -> modeAlpha:GLenum.t -> unit) =
      fun (x6362 : 'tags this) ->
        fun ~modeRGB:(x6360 : GLenum.t) ->
          fun ~modeAlpha:(x6361 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6362) "blendEquationSeparate"
                 [|(GLenum.t_to_js x6360);(GLenum.t_to_js x6361)|])
    let (blendFunc :
      'tags this -> sfactor:GLenum.t -> dfactor:GLenum.t -> unit) =
      fun (x6366 : 'tags this) ->
        fun ~sfactor:(x6364 : GLenum.t) ->
          fun ~dfactor:(x6365 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6366) "blendFunc"
                 [|(GLenum.t_to_js x6364);(GLenum.t_to_js x6365)|])
    let (blendFuncSeparate :
      'tags this ->
        srcRGB:GLenum.t ->
          dstRGB:GLenum.t -> srcAlpha:GLenum.t -> dstAlpha:GLenum.t -> unit)
      =
      fun (x6372 : 'tags this) ->
        fun ~srcRGB:(x6368 : GLenum.t) ->
          fun ~dstRGB:(x6369 : GLenum.t) ->
            fun ~srcAlpha:(x6370 : GLenum.t) ->
              fun ~dstAlpha:(x6371 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6372) "blendFuncSeparate"
                     [|(GLenum.t_to_js x6368);(GLenum.t_to_js x6369);(
                       GLenum.t_to_js x6370);(GLenum.t_to_js x6371)|])
    let (checkFramebufferStatus : 'tags this -> target:GLenum.t -> GLenum.t)
      =
      fun (x6375 : 'tags this) ->
        fun ~target:(x6374 : GLenum.t) ->
          GLenum.t_of_js
            (Ojs.call (this_to_js Obj.magic x6375) "checkFramebufferStatus"
               [|(GLenum.t_to_js x6374)|])
    let (clear : 'tags this -> mask:GLbitfield.t -> unit) =
      fun (x6378 : 'tags this) ->
        fun ~mask:(x6377 : GLbitfield.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6378) "clear"
               [|(GLbitfield.t_to_js x6377)|])
    let (clearColor :
      'tags this ->
        red:GLclampf.t ->
          green:GLclampf.t -> blue:GLclampf.t -> alpha:GLclampf.t -> unit)
      =
      fun (x6384 : 'tags this) ->
        fun ~red:(x6380 : GLclampf.t) ->
          fun ~green:(x6381 : GLclampf.t) ->
            fun ~blue:(x6382 : GLclampf.t) ->
              fun ~alpha:(x6383 : GLclampf.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6384) "clearColor"
                     [|(GLclampf.t_to_js x6380);(GLclampf.t_to_js x6381);(
                       GLclampf.t_to_js x6382);(GLclampf.t_to_js x6383)|])
    let (clearDepth : 'tags this -> depth:GLclampf.t -> unit) =
      fun (x6387 : 'tags this) ->
        fun ~depth:(x6386 : GLclampf.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6387) "clearDepth"
               [|(GLclampf.t_to_js x6386)|])
    let (clearStencil : 'tags this -> s:GLint.t -> unit) =
      fun (x6390 : 'tags this) ->
        fun ~s:(x6389 : GLint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6390) "clearStencil"
               [|(GLint.t_to_js x6389)|])
    let (colorMask :
      'tags this ->
        red:GLboolean.t ->
          green:GLboolean.t -> blue:GLboolean.t -> alpha:GLboolean.t -> unit)
      =
      fun (x6396 : 'tags this) ->
        fun ~red:(x6392 : GLboolean.t) ->
          fun ~green:(x6393 : GLboolean.t) ->
            fun ~blue:(x6394 : GLboolean.t) ->
              fun ~alpha:(x6395 : GLboolean.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6396) "colorMask"
                     [|(GLboolean.t_to_js x6392);(GLboolean.t_to_js x6393);(
                       GLboolean.t_to_js x6394);(GLboolean.t_to_js x6395)|])
    let (compileShader : 'tags this -> shader:WebGLShader.t -> unit) =
      fun (x6399 : 'tags this) ->
        fun ~shader:(x6398 : WebGLShader.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6399) "compileShader"
               [|(WebGLShader.t_to_js x6398)|])
    let (copyTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              x:GLint.t ->
                y:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t -> border:GLint.t -> unit)
      =
      fun (x6409 : 'tags this) ->
        fun ~target:(x6401 : GLenum.t) ->
          fun ~level:(x6402 : GLint.t) ->
            fun ~internalformat:(x6403 : GLenum.t) ->
              fun ~x:(x6404 : GLint.t) ->
                fun ~y:(x6405 : GLint.t) ->
                  fun ~width:(x6406 : GLsizei.t) ->
                    fun ~height:(x6407 : GLsizei.t) ->
                      fun ~border:(x6408 : GLint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x6409)
                             "copyTexImage2D"
                             [|(GLenum.t_to_js x6401);(GLint.t_to_js x6402);(
                               GLenum.t_to_js x6403);(GLint.t_to_js x6404);(
                               GLint.t_to_js x6405);(GLsizei.t_to_js x6406);(
                               GLsizei.t_to_js x6407);(GLint.t_to_js x6408)|])
    let (copyTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                x:GLint.t ->
                  y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x6419 : 'tags this) ->
        fun ~target:(x6411 : GLenum.t) ->
          fun ~level:(x6412 : GLint.t) ->
            fun ~xoffset:(x6413 : GLint.t) ->
              fun ~yoffset:(x6414 : GLint.t) ->
                fun ~x:(x6415 : GLint.t) ->
                  fun ~y:(x6416 : GLint.t) ->
                    fun ~width:(x6417 : GLsizei.t) ->
                      fun ~height:(x6418 : GLsizei.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x6419)
                             "copyTexSubImage2D"
                             [|(GLenum.t_to_js x6411);(GLint.t_to_js x6412);(
                               GLint.t_to_js x6413);(GLint.t_to_js x6414);(
                               GLint.t_to_js x6415);(GLint.t_to_js x6416);(
                               GLsizei.t_to_js x6417);(GLsizei.t_to_js x6418)|])
    let (createBuffer : 'tags this -> WebGLBuffer.t or_null) =
      fun (x6421 : 'tags this) ->
        or_null_of_js WebGLBuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x6421) "createBuffer" [||])
    let (createFramebuffer : 'tags this -> WebGLFramebuffer.t or_null) =
      fun (x6424 : 'tags this) ->
        or_null_of_js WebGLFramebuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x6424) "createFramebuffer" [||])
    let (createProgram : 'tags this -> WebGLProgram.t or_null) =
      fun (x6427 : 'tags this) ->
        or_null_of_js WebGLProgram.t_of_js
          (Ojs.call (this_to_js Obj.magic x6427) "createProgram" [||])
    let (createRenderbuffer : 'tags this -> WebGLRenderbuffer.t or_null) =
      fun (x6430 : 'tags this) ->
        or_null_of_js WebGLRenderbuffer.t_of_js
          (Ojs.call (this_to_js Obj.magic x6430) "createRenderbuffer" [||])
    let (createShader :
      'tags this -> type_:GLenum.t -> WebGLShader.t or_null) =
      fun (x6434 : 'tags this) ->
        fun ~type_:(x6433 : GLenum.t) ->
          or_null_of_js WebGLShader.t_of_js
            (Ojs.call (this_to_js Obj.magic x6434) "createShader"
               [|(GLenum.t_to_js x6433)|])
    let (createTexture : 'tags this -> WebGLTexture.t or_null) =
      fun (x6437 : 'tags this) ->
        or_null_of_js WebGLTexture.t_of_js
          (Ojs.call (this_to_js Obj.magic x6437) "createTexture" [||])
    let (cullFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x6441 : 'tags this) ->
        fun ~mode:(x6440 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6441) "cullFace"
               [|(GLenum.t_to_js x6440)|])
    let (deleteBuffer : 'tags this -> buffer:WebGLBuffer.t or_null -> unit) =
      fun (x6445 : 'tags this) ->
        fun ~buffer:(x6443 : WebGLBuffer.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6445) "deleteBuffer"
               [|(or_null_to_js WebGLBuffer.t_to_js x6443)|])
    let (deleteFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t or_null -> unit) =
      fun (x6449 : 'tags this) ->
        fun ~framebuffer:(x6447 : WebGLFramebuffer.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6449) "deleteFramebuffer"
               [|(or_null_to_js WebGLFramebuffer.t_to_js x6447)|])
    let (deleteProgram :
      'tags this -> program:WebGLProgram.t or_null -> unit) =
      fun (x6453 : 'tags this) ->
        fun ~program:(x6451 : WebGLProgram.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6453) "deleteProgram"
               [|(or_null_to_js WebGLProgram.t_to_js x6451)|])
    let (deleteRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t or_null -> unit) =
      fun (x6457 : 'tags this) ->
        fun ~renderbuffer:(x6455 : WebGLRenderbuffer.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6457) "deleteRenderbuffer"
               [|(or_null_to_js WebGLRenderbuffer.t_to_js x6455)|])
    let (deleteShader : 'tags this -> shader:WebGLShader.t or_null -> unit) =
      fun (x6461 : 'tags this) ->
        fun ~shader:(x6459 : WebGLShader.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6461) "deleteShader"
               [|(or_null_to_js WebGLShader.t_to_js x6459)|])
    let (deleteTexture :
      'tags this -> texture:WebGLTexture.t or_null -> unit) =
      fun (x6465 : 'tags this) ->
        fun ~texture:(x6463 : WebGLTexture.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6465) "deleteTexture"
               [|(or_null_to_js WebGLTexture.t_to_js x6463)|])
    let (depthFunc : 'tags this -> func:GLenum.t -> unit) =
      fun (x6468 : 'tags this) ->
        fun ~func:(x6467 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6468) "depthFunc"
               [|(GLenum.t_to_js x6467)|])
    let (depthMask : 'tags this -> flag:GLboolean.t -> unit) =
      fun (x6471 : 'tags this) ->
        fun ~flag:(x6470 : GLboolean.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6471) "depthMask"
               [|(GLboolean.t_to_js x6470)|])
    let (depthRange :
      'tags this -> zNear:GLclampf.t -> zFar:GLclampf.t -> unit) =
      fun (x6475 : 'tags this) ->
        fun ~zNear:(x6473 : GLclampf.t) ->
          fun ~zFar:(x6474 : GLclampf.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6475) "depthRange"
                 [|(GLclampf.t_to_js x6473);(GLclampf.t_to_js x6474)|])
    let (detachShader :
      'tags this -> program:WebGLProgram.t -> shader:WebGLShader.t -> unit) =
      fun (x6479 : 'tags this) ->
        fun ~program:(x6477 : WebGLProgram.t) ->
          fun ~shader:(x6478 : WebGLShader.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6479) "detachShader"
                 [|(WebGLProgram.t_to_js x6477);(WebGLShader.t_to_js x6478)|])
    let (disable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x6482 : 'tags this) ->
        fun ~cap:(x6481 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6482) "disable"
               [|(GLenum.t_to_js x6481)|])
    let (disableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x6485 : 'tags this) ->
        fun ~index:(x6484 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6485) "disableVertexAttribArray"
               [|(GLuint.t_to_js x6484)|])
    let (drawArrays :
      'tags this -> mode:GLenum.t -> first:GLint.t -> count:GLsizei.t -> unit)
      =
      fun (x6490 : 'tags this) ->
        fun ~mode:(x6487 : GLenum.t) ->
          fun ~first:(x6488 : GLint.t) ->
            fun ~count:(x6489 : GLsizei.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6490) "drawArrays"
                   [|(GLenum.t_to_js x6487);(GLint.t_to_js x6488);(GLsizei.t_to_js
                                                                    x6489)|])
    let (drawElements :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x6496 : 'tags this) ->
        fun ~mode:(x6492 : GLenum.t) ->
          fun ~count:(x6493 : GLsizei.t) ->
            fun ~type_:(x6494 : GLenum.t) ->
              fun ~offset:(x6495 : GLintptr.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6496) "drawElements"
                     [|(GLenum.t_to_js x6492);(GLsizei.t_to_js x6493);(
                       GLenum.t_to_js x6494);(GLintptr.t_to_js x6495)|])
    let (enable : 'tags this -> cap:GLenum.t -> unit) =
      fun (x6499 : 'tags this) ->
        fun ~cap:(x6498 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6499) "enable"
               [|(GLenum.t_to_js x6498)|])
    let (enableVertexAttribArray : 'tags this -> index:GLuint.t -> unit) =
      fun (x6502 : 'tags this) ->
        fun ~index:(x6501 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6502) "enableVertexAttribArray"
               [|(GLuint.t_to_js x6501)|])
    let (finish : 'tags this -> unit) =
      fun (x6504 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6504) "finish" [||])
    let (flush : 'tags this -> unit) =
      fun (x6506 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x6506) "flush" [||])
    let (framebufferRenderbuffer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            renderbuffertarget:GLenum.t ->
              renderbuffer:WebGLRenderbuffer.t or_null -> unit)
      =
      fun (x6513 : 'tags this) ->
        fun ~target:(x6508 : GLenum.t) ->
          fun ~attachment:(x6509 : GLenum.t) ->
            fun ~renderbuffertarget:(x6510 : GLenum.t) ->
              fun ~renderbuffer:(x6511 : WebGLRenderbuffer.t or_null) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6513)
                     "framebufferRenderbuffer"
                     [|(GLenum.t_to_js x6508);(GLenum.t_to_js x6509);(
                       GLenum.t_to_js x6510);(or_null_to_js
                                                WebGLRenderbuffer.t_to_js
                                                x6511)|])
    let (framebufferTexture2D :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            textarget:GLenum.t ->
              texture:WebGLTexture.t or_null -> level:GLint.t -> unit)
      =
      fun (x6521 : 'tags this) ->
        fun ~target:(x6515 : GLenum.t) ->
          fun ~attachment:(x6516 : GLenum.t) ->
            fun ~textarget:(x6517 : GLenum.t) ->
              fun ~texture:(x6518 : WebGLTexture.t or_null) ->
                fun ~level:(x6520 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x6521)
                       "framebufferTexture2D"
                       [|(GLenum.t_to_js x6515);(GLenum.t_to_js x6516);(
                         GLenum.t_to_js x6517);(or_null_to_js
                                                  WebGLTexture.t_to_js x6518);(
                         GLint.t_to_js x6520)|])
    let (frontFace : 'tags this -> mode:GLenum.t -> unit) =
      fun (x6524 : 'tags this) ->
        fun ~mode:(x6523 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6524) "frontFace"
               [|(GLenum.t_to_js x6523)|])
    let (generateMipmap : 'tags this -> target:GLenum.t -> unit) =
      fun (x6527 : 'tags this) ->
        fun ~target:(x6526 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6527) "generateMipmap"
               [|(GLenum.t_to_js x6526)|])
    let (getActiveAttrib :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t or_null)
      =
      fun (x6531 : 'tags this) ->
        fun ~program:(x6529 : WebGLProgram.t) ->
          fun ~index:(x6530 : GLuint.t) ->
            or_null_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x6531) "getActiveAttrib"
                 [|(WebGLProgram.t_to_js x6529);(GLuint.t_to_js x6530)|])
    let (getActiveUniform :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t or_null)
      =
      fun (x6536 : 'tags this) ->
        fun ~program:(x6534 : WebGLProgram.t) ->
          fun ~index:(x6535 : GLuint.t) ->
            or_null_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x6536) "getActiveUniform"
                 [|(WebGLProgram.t_to_js x6534);(GLuint.t_to_js x6535)|])
    let (getAttachedShaders :
      'tags this -> program:WebGLProgram.t -> WebGLShader.t list or_null) =
      fun (x6540 : 'tags this) ->
        fun ~program:(x6539 : WebGLProgram.t) ->
          or_null_of_js
            (fun (x6542 : Ojs.t) -> Ojs.list_of_js WebGLShader.t_of_js x6542)
            (Ojs.call (this_to_js Obj.magic x6540) "getAttachedShaders"
               [|(WebGLProgram.t_to_js x6539)|])
    let (getAttribLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x6546 : 'tags this) ->
        fun ~program:(x6544 : WebGLProgram.t) ->
          fun ~name:(x6545 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x6546) "getAttribLocation"
                 [|(WebGLProgram.t_to_js x6544);(Ojs.string_to_js x6545)|])
    let (getBufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x6550 : 'tags this) ->
        fun ~target:(x6548 : GLenum.t) ->
          fun ~pname:(x6549 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x6550) "getBufferParameter"
                 [|(GLenum.t_to_js x6548);(GLenum.t_to_js x6549)|])
    let (getContextAttributes :
      'tags this -> WebGLContextAttributes.t or_null) =
      fun (x6552 : 'tags this) ->
        or_null_of_js WebGLContextAttributes.t_of_js
          (Ojs.call (this_to_js Obj.magic x6552) "getContextAttributes" [||])
    let (getError : 'tags this -> GLenum.t) =
      fun (x6555 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.call (this_to_js Obj.magic x6555) "getError" [||])
    let (getExtension :
      'tags this ->
        extensionName:[ `L_s2_EXT_blend_minmax ] ->
          EXT_blend_minmax.t or_null)
      =
      fun (x6558 : 'tags this) ->
        fun ~extensionName:(x6557 : [ `L_s2_EXT_blend_minmax ]) ->
          or_null_of_js EXT_blend_minmax.t_of_js
            (Ojs.call (this_to_js Obj.magic x6558) "getExtension"
               [|((match x6557 with
                   | `L_s2_EXT_blend_minmax ->
                       Ojs.string_to_js "EXT_blend_minmax"))|])
    let (getExtension' :
      'tags this ->
        extensionName:[ `L_s3_EXT_color_buffer_float ] ->
          EXT_color_buffer_float.t or_null)
      =
      fun (x6562 : 'tags this) ->
        fun ~extensionName:(x6561 : [ `L_s3_EXT_color_buffer_float ]) ->
          or_null_of_js EXT_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x6562) "getExtension"
               [|((match x6561 with
                   | `L_s3_EXT_color_buffer_float ->
                       Ojs.string_to_js "EXT_color_buffer_float"))|])
    let (getExtension'' :
      'tags this ->
        extensionName:[ `L_s4_EXT_color_buffer_half_float ] ->
          EXT_color_buffer_half_float.t or_null)
      =
      fun (x6566 : 'tags this) ->
        fun ~extensionName:(x6565 : [ `L_s4_EXT_color_buffer_half_float ]) ->
          or_null_of_js EXT_color_buffer_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x6566) "getExtension"
               [|((match x6565 with
                   | `L_s4_EXT_color_buffer_half_float ->
                       Ojs.string_to_js "EXT_color_buffer_half_float"))|])
    let (getExtension''' :
      'tags this ->
        extensionName:[ `L_s5_EXT_float_blend ] -> EXT_float_blend.t or_null)
      =
      fun (x6570 : 'tags this) ->
        fun ~extensionName:(x6569 : [ `L_s5_EXT_float_blend ]) ->
          or_null_of_js EXT_float_blend.t_of_js
            (Ojs.call (this_to_js Obj.magic x6570) "getExtension"
               [|((match x6569 with
                   | `L_s5_EXT_float_blend ->
                       Ojs.string_to_js "EXT_float_blend"))|])
    let (getExtension'''' :
      'tags this ->
        extensionName:[ `L_s9_EXT_texture_filter_anisotropic ] ->
          EXT_texture_filter_anisotropic.t or_null)
      =
      fun (x6574 : 'tags this) ->
        fun ~extensionName:(x6573 : [ `L_s9_EXT_texture_filter_anisotropic ])
          ->
          or_null_of_js EXT_texture_filter_anisotropic.t_of_js
            (Ojs.call (this_to_js Obj.magic x6574) "getExtension"
               [|((match x6573 with
                   | `L_s9_EXT_texture_filter_anisotropic ->
                       Ojs.string_to_js "EXT_texture_filter_anisotropic"))|])
    let (getExtension''''' :
      'tags this ->
        extensionName:[ `L_s6_EXT_frag_depth ] -> EXT_frag_depth.t or_null)
      =
      fun (x6578 : 'tags this) ->
        fun ~extensionName:(x6577 : [ `L_s6_EXT_frag_depth ]) ->
          or_null_of_js EXT_frag_depth.t_of_js
            (Ojs.call (this_to_js Obj.magic x6578) "getExtension"
               [|((match x6577 with
                   | `L_s6_EXT_frag_depth ->
                       Ojs.string_to_js "EXT_frag_depth"))|])
    let (getExtension'''''' :
      'tags this ->
        extensionName:[ `L_s8_EXT_shader_texture_lod ] ->
          EXT_shader_texture_lod.t or_null)
      =
      fun (x6582 : 'tags this) ->
        fun ~extensionName:(x6581 : [ `L_s8_EXT_shader_texture_lod ]) ->
          or_null_of_js EXT_shader_texture_lod.t_of_js
            (Ojs.call (this_to_js Obj.magic x6582) "getExtension"
               [|((match x6581 with
                   | `L_s8_EXT_shader_texture_lod ->
                       Ojs.string_to_js "EXT_shader_texture_lod"))|])
    let (getExtension''''''' :
      'tags this -> extensionName:[ `L_s7_EXT_sRGB ] -> EXT_sRGB.t or_null) =
      fun (x6586 : 'tags this) ->
        fun ~extensionName:(x6585 : [ `L_s7_EXT_sRGB ]) ->
          or_null_of_js EXT_sRGB.t_of_js
            (Ojs.call (this_to_js Obj.magic x6586) "getExtension"
               [|((match x6585 with
                   | `L_s7_EXT_sRGB -> Ojs.string_to_js "EXT_sRGB"))|])
    let (getExtension'''''''' :
      'tags this ->
        extensionName:[ `L_s10_KHR_parallel_shader_compile ] ->
          KHR_parallel_shader_compile.t or_null)
      =
      fun (x6590 : 'tags this) ->
        fun ~extensionName:(x6589 : [ `L_s10_KHR_parallel_shader_compile ])
          ->
          or_null_of_js KHR_parallel_shader_compile.t_of_js
            (Ojs.call (this_to_js Obj.magic x6590) "getExtension"
               [|((match x6589 with
                   | `L_s10_KHR_parallel_shader_compile ->
                       Ojs.string_to_js "KHR_parallel_shader_compile"))|])
    let (getExtension''''''''' :
      'tags this ->
        extensionName:[ `L_s17_OES_vertex_array_object ] ->
          OES_vertex_array_object.t or_null)
      =
      fun (x6594 : 'tags this) ->
        fun ~extensionName:(x6593 : [ `L_s17_OES_vertex_array_object ]) ->
          or_null_of_js OES_vertex_array_object.t_of_js
            (Ojs.call (this_to_js Obj.magic x6594) "getExtension"
               [|((match x6593 with
                   | `L_s17_OES_vertex_array_object ->
                       Ojs.string_to_js "OES_vertex_array_object"))|])
    let (getExtension'''''''''' :
      'tags this ->
        extensionName:[ `L_s18_OVR_multiview2 ] -> OVR_multiview2.t or_null)
      =
      fun (x6598 : 'tags this) ->
        fun ~extensionName:(x6597 : [ `L_s18_OVR_multiview2 ]) ->
          or_null_of_js OVR_multiview2.t_of_js
            (Ojs.call (this_to_js Obj.magic x6598) "getExtension"
               [|((match x6597 with
                   | `L_s18_OVR_multiview2 ->
                       Ojs.string_to_js "OVR_multiview2"))|])
    let (getExtension''''''''''' :
      'tags this ->
        extensionName:[ `L_s19_WEBGL_color_buffer_float ] ->
          WEBGL_color_buffer_float.t or_null)
      =
      fun (x6602 : 'tags this) ->
        fun ~extensionName:(x6601 : [ `L_s19_WEBGL_color_buffer_float ]) ->
          or_null_of_js WEBGL_color_buffer_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x6602) "getExtension"
               [|((match x6601 with
                   | `L_s19_WEBGL_color_buffer_float ->
                       Ojs.string_to_js "WEBGL_color_buffer_float"))|])
    let (getExtension'''''''''''' :
      'tags this ->
        extensionName:[ `L_s20_WEBGL_compressed_texture_astc ] ->
          WEBGL_compressed_texture_astc.t or_null)
      =
      fun (x6606 : 'tags this) ->
        fun ~extensionName:(x6605 : [ `L_s20_WEBGL_compressed_texture_astc ])
          ->
          or_null_of_js WEBGL_compressed_texture_astc.t_of_js
            (Ojs.call (this_to_js Obj.magic x6606) "getExtension"
               [|((match x6605 with
                   | `L_s20_WEBGL_compressed_texture_astc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_astc"))|])
    let (getExtension''''''''''''' :
      'tags this ->
        extensionName:[ `L_s21_WEBGL_compressed_texture_etc ] ->
          WEBGL_compressed_texture_etc.t or_null)
      =
      fun (x6610 : 'tags this) ->
        fun ~extensionName:(x6609 : [ `L_s21_WEBGL_compressed_texture_etc ])
          ->
          or_null_of_js WEBGL_compressed_texture_etc.t_of_js
            (Ojs.call (this_to_js Obj.magic x6610) "getExtension"
               [|((match x6609 with
                   | `L_s21_WEBGL_compressed_texture_etc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc"))|])
    let (getExtension'''''''''''''' :
      'tags this ->
        extensionName:[ `L_s22_WEBGL_compressed_texture_etc1 ] ->
          WEBGL_compressed_texture_etc1.t or_null)
      =
      fun (x6614 : 'tags this) ->
        fun ~extensionName:(x6613 : [ `L_s22_WEBGL_compressed_texture_etc1 ])
          ->
          or_null_of_js WEBGL_compressed_texture_etc1.t_of_js
            (Ojs.call (this_to_js Obj.magic x6614) "getExtension"
               [|((match x6613 with
                   | `L_s22_WEBGL_compressed_texture_etc1 ->
                       Ojs.string_to_js "WEBGL_compressed_texture_etc1"))|])
    let (getExtension''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s23_WEBGL_compressed_texture_pvrtc ] ->
          WEBGL_compressed_texture_pvrtc.t or_null)
      =
      fun (x6618 : 'tags this) ->
        fun
          ~extensionName:(x6617 : [ `L_s23_WEBGL_compressed_texture_pvrtc ])
          ->
          or_null_of_js WEBGL_compressed_texture_pvrtc.t_of_js
            (Ojs.call (this_to_js Obj.magic x6618) "getExtension"
               [|((match x6617 with
                   | `L_s23_WEBGL_compressed_texture_pvrtc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_pvrtc"))|])
    let (getExtension'''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s25_WEBGL_compressed_texture_s3tc_srgb ] ->
          WEBGL_compressed_texture_s3tc_srgb.t or_null)
      =
      fun (x6622 : 'tags this) ->
        fun
          ~extensionName:(x6621 :
                           [ `L_s25_WEBGL_compressed_texture_s3tc_srgb ])
          ->
          or_null_of_js WEBGL_compressed_texture_s3tc_srgb.t_of_js
            (Ojs.call (this_to_js Obj.magic x6622) "getExtension"
               [|((match x6621 with
                   | `L_s25_WEBGL_compressed_texture_s3tc_srgb ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc_srgb"))|])
    let (getExtension''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s27_WEBGL_debug_shaders ] ->
          WEBGL_debug_shaders.t or_null)
      =
      fun (x6626 : 'tags this) ->
        fun ~extensionName:(x6625 : [ `L_s27_WEBGL_debug_shaders ]) ->
          or_null_of_js WEBGL_debug_shaders.t_of_js
            (Ojs.call (this_to_js Obj.magic x6626) "getExtension"
               [|((match x6625 with
                   | `L_s27_WEBGL_debug_shaders ->
                       Ojs.string_to_js "WEBGL_debug_shaders"))|])
    let (getExtension'''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s29_WEBGL_draw_buffers ] ->
          WEBGL_draw_buffers.t or_null)
      =
      fun (x6630 : 'tags this) ->
        fun ~extensionName:(x6629 : [ `L_s29_WEBGL_draw_buffers ]) ->
          or_null_of_js WEBGL_draw_buffers.t_of_js
            (Ojs.call (this_to_js Obj.magic x6630) "getExtension"
               [|((match x6629 with
                   | `L_s29_WEBGL_draw_buffers ->
                       Ojs.string_to_js "WEBGL_draw_buffers"))|])
    let (getExtension''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s30_WEBGL_lose_context ] ->
          WEBGL_lose_context.t or_null)
      =
      fun (x6634 : 'tags this) ->
        fun ~extensionName:(x6633 : [ `L_s30_WEBGL_lose_context ]) ->
          or_null_of_js WEBGL_lose_context.t_of_js
            (Ojs.call (this_to_js Obj.magic x6634) "getExtension"
               [|((match x6633 with
                   | `L_s30_WEBGL_lose_context ->
                       Ojs.string_to_js "WEBGL_lose_context"))|])
    let (getExtension'''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s28_WEBGL_depth_texture ] ->
          WEBGL_depth_texture.t or_null)
      =
      fun (x6638 : 'tags this) ->
        fun ~extensionName:(x6637 : [ `L_s28_WEBGL_depth_texture ]) ->
          or_null_of_js WEBGL_depth_texture.t_of_js
            (Ojs.call (this_to_js Obj.magic x6638) "getExtension"
               [|((match x6637 with
                   | `L_s28_WEBGL_depth_texture ->
                       Ojs.string_to_js "WEBGL_depth_texture"))|])
    let (getExtension''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s26_WEBGL_debug_renderer_info ] ->
          WEBGL_debug_renderer_info.t or_null)
      =
      fun (x6642 : 'tags this) ->
        fun ~extensionName:(x6641 : [ `L_s26_WEBGL_debug_renderer_info ]) ->
          or_null_of_js WEBGL_debug_renderer_info.t_of_js
            (Ojs.call (this_to_js Obj.magic x6642) "getExtension"
               [|((match x6641 with
                   | `L_s26_WEBGL_debug_renderer_info ->
                       Ojs.string_to_js "WEBGL_debug_renderer_info"))|])
    let (getExtension'''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s24_WEBGL_compressed_texture_s3tc ] ->
          WEBGL_compressed_texture_s3tc.t or_null)
      =
      fun (x6646 : 'tags this) ->
        fun ~extensionName:(x6645 : [ `L_s24_WEBGL_compressed_texture_s3tc ])
          ->
          or_null_of_js WEBGL_compressed_texture_s3tc.t_of_js
            (Ojs.call (this_to_js Obj.magic x6646) "getExtension"
               [|((match x6645 with
                   | `L_s24_WEBGL_compressed_texture_s3tc ->
                       Ojs.string_to_js "WEBGL_compressed_texture_s3tc"))|])
    let (getExtension''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s16_OES_texture_half_float_linear ] ->
          OES_texture_half_float_linear.t or_null)
      =
      fun (x6650 : 'tags this) ->
        fun ~extensionName:(x6649 : [ `L_s16_OES_texture_half_float_linear ])
          ->
          or_null_of_js OES_texture_half_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x6650) "getExtension"
               [|((match x6649 with
                   | `L_s16_OES_texture_half_float_linear ->
                       Ojs.string_to_js "OES_texture_half_float_linear"))|])
    let (getExtension'''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s15_OES_texture_half_float ] ->
          OES_texture_half_float.t or_null)
      =
      fun (x6654 : 'tags this) ->
        fun ~extensionName:(x6653 : [ `L_s15_OES_texture_half_float ]) ->
          or_null_of_js OES_texture_half_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x6654) "getExtension"
               [|((match x6653 with
                   | `L_s15_OES_texture_half_float ->
                       Ojs.string_to_js "OES_texture_half_float"))|])
    let (getExtension''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s14_OES_texture_float_linear ] ->
          OES_texture_float_linear.t or_null)
      =
      fun (x6658 : 'tags this) ->
        fun ~extensionName:(x6657 : [ `L_s14_OES_texture_float_linear ]) ->
          or_null_of_js OES_texture_float_linear.t_of_js
            (Ojs.call (this_to_js Obj.magic x6658) "getExtension"
               [|((match x6657 with
                   | `L_s14_OES_texture_float_linear ->
                       Ojs.string_to_js "OES_texture_float_linear"))|])
    let (getExtension'''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s13_OES_texture_float ] ->
          OES_texture_float.t or_null)
      =
      fun (x6662 : 'tags this) ->
        fun ~extensionName:(x6661 : [ `L_s13_OES_texture_float ]) ->
          or_null_of_js OES_texture_float.t_of_js
            (Ojs.call (this_to_js Obj.magic x6662) "getExtension"
               [|((match x6661 with
                   | `L_s13_OES_texture_float ->
                       Ojs.string_to_js "OES_texture_float"))|])
    let (getExtension''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s12_OES_standard_derivatives ] ->
          OES_standard_derivatives.t or_null)
      =
      fun (x6666 : 'tags this) ->
        fun ~extensionName:(x6665 : [ `L_s12_OES_standard_derivatives ]) ->
          or_null_of_js OES_standard_derivatives.t_of_js
            (Ojs.call (this_to_js Obj.magic x6666) "getExtension"
               [|((match x6665 with
                   | `L_s12_OES_standard_derivatives ->
                       Ojs.string_to_js "OES_standard_derivatives"))|])
    let (getExtension'''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s11_OES_element_index_uint ] ->
          OES_element_index_uint.t or_null)
      =
      fun (x6670 : 'tags this) ->
        fun ~extensionName:(x6669 : [ `L_s11_OES_element_index_uint ]) ->
          or_null_of_js OES_element_index_uint.t_of_js
            (Ojs.call (this_to_js Obj.magic x6670) "getExtension"
               [|((match x6669 with
                   | `L_s11_OES_element_index_uint ->
                       Ojs.string_to_js "OES_element_index_uint"))|])
    let (getExtension''''''''''''''''''''''''''''' :
      'tags this ->
        extensionName:[ `L_s1_ANGLE_instanced_arrays ] ->
          ANGLE_instanced_arrays.t or_null)
      =
      fun (x6674 : 'tags this) ->
        fun ~extensionName:(x6673 : [ `L_s1_ANGLE_instanced_arrays ]) ->
          or_null_of_js ANGLE_instanced_arrays.t_of_js
            (Ojs.call (this_to_js Obj.magic x6674) "getExtension"
               [|((match x6673 with
                   | `L_s1_ANGLE_instanced_arrays ->
                       Ojs.string_to_js "ANGLE_instanced_arrays"))|])
    let (getExtension'''''''''''''''''''''''''''''' :
      'tags this -> name:string -> any) =
      fun (x6678 : 'tags this) ->
        fun ~name:(x6677 : string) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x6678) "getExtension"
               [|(Ojs.string_to_js x6677)|])
    let (getFramebufferAttachmentParameter :
      'tags this ->
        target:GLenum.t -> attachment:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x6683 : 'tags this) ->
        fun ~target:(x6680 : GLenum.t) ->
          fun ~attachment:(x6681 : GLenum.t) ->
            fun ~pname:(x6682 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x6683)
                   "getFramebufferAttachmentParameter"
                   [|(GLenum.t_to_js x6680);(GLenum.t_to_js x6681);(GLenum.t_to_js
                                                                    x6682)|])
    let (getParameter : 'tags this -> pname:GLenum.t -> any) =
      fun (x6686 : 'tags this) ->
        fun ~pname:(x6685 : GLenum.t) ->
          any_of_js
            (Ojs.call (this_to_js Obj.magic x6686) "getParameter"
               [|(GLenum.t_to_js x6685)|])
    let (getProgramInfoLog :
      'tags this -> program:WebGLProgram.t -> string or_null) =
      fun (x6689 : 'tags this) ->
        fun ~program:(x6688 : WebGLProgram.t) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x6689) "getProgramInfoLog"
               [|(WebGLProgram.t_to_js x6688)|])
    let (getProgramParameter :
      'tags this -> program:WebGLProgram.t -> pname:GLenum.t -> any) =
      fun (x6694 : 'tags this) ->
        fun ~program:(x6692 : WebGLProgram.t) ->
          fun ~pname:(x6693 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x6694) "getProgramParameter"
                 [|(WebGLProgram.t_to_js x6692);(GLenum.t_to_js x6693)|])
    let (getRenderbufferParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x6698 : 'tags this) ->
        fun ~target:(x6696 : GLenum.t) ->
          fun ~pname:(x6697 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x6698)
                 "getRenderbufferParameter"
                 [|(GLenum.t_to_js x6696);(GLenum.t_to_js x6697)|])
    let (getShaderInfoLog :
      'tags this -> shader:WebGLShader.t -> string or_null) =
      fun (x6701 : 'tags this) ->
        fun ~shader:(x6700 : WebGLShader.t) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x6701) "getShaderInfoLog"
               [|(WebGLShader.t_to_js x6700)|])
    let (getShaderParameter :
      'tags this -> shader:WebGLShader.t -> pname:GLenum.t -> any) =
      fun (x6706 : 'tags this) ->
        fun ~shader:(x6704 : WebGLShader.t) ->
          fun ~pname:(x6705 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x6706) "getShaderParameter"
                 [|(WebGLShader.t_to_js x6704);(GLenum.t_to_js x6705)|])
    let (getShaderPrecisionFormat :
      'tags this ->
        shadertype:GLenum.t ->
          precisiontype:GLenum.t -> WebGLShaderPrecisionFormat.t or_null)
      =
      fun (x6710 : 'tags this) ->
        fun ~shadertype:(x6708 : GLenum.t) ->
          fun ~precisiontype:(x6709 : GLenum.t) ->
            or_null_of_js WebGLShaderPrecisionFormat.t_of_js
              (Ojs.call (this_to_js Obj.magic x6710)
                 "getShaderPrecisionFormat"
                 [|(GLenum.t_to_js x6708);(GLenum.t_to_js x6709)|])
    let (getShaderSource :
      'tags this -> shader:WebGLShader.t -> string or_null) =
      fun (x6714 : 'tags this) ->
        fun ~shader:(x6713 : WebGLShader.t) ->
          or_null_of_js Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x6714) "getShaderSource"
               [|(WebGLShader.t_to_js x6713)|])
    let (getSupportedExtensions : 'tags this -> string list or_null) =
      fun (x6717 : 'tags this) ->
        or_null_of_js
          (fun (x6719 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x6719)
          (Ojs.call (this_to_js Obj.magic x6717) "getSupportedExtensions"
             [||])
    let (getTexParameter :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> any) =
      fun (x6723 : 'tags this) ->
        fun ~target:(x6721 : GLenum.t) ->
          fun ~pname:(x6722 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x6723) "getTexParameter"
                 [|(GLenum.t_to_js x6721);(GLenum.t_to_js x6722)|])
    let (getUniform :
      'tags this ->
        program:WebGLProgram.t -> location:WebGLUniformLocation.t -> any)
      =
      fun (x6727 : 'tags this) ->
        fun ~program:(x6725 : WebGLProgram.t) ->
          fun ~location:(x6726 : WebGLUniformLocation.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x6727) "getUniform"
                 [|(WebGLProgram.t_to_js x6725);(WebGLUniformLocation.t_to_js
                                                   x6726)|])
    let (getUniformLocation :
      'tags this ->
        program:WebGLProgram.t ->
          name:string -> WebGLUniformLocation.t or_null)
      =
      fun (x6731 : 'tags this) ->
        fun ~program:(x6729 : WebGLProgram.t) ->
          fun ~name:(x6730 : string) ->
            or_null_of_js WebGLUniformLocation.t_of_js
              (Ojs.call (this_to_js Obj.magic x6731) "getUniformLocation"
                 [|(WebGLProgram.t_to_js x6729);(Ojs.string_to_js x6730)|])
    let (getVertexAttrib :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> any) =
      fun (x6736 : 'tags this) ->
        fun ~index:(x6734 : GLuint.t) ->
          fun ~pname:(x6735 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x6736) "getVertexAttrib"
                 [|(GLuint.t_to_js x6734);(GLenum.t_to_js x6735)|])
    let (getVertexAttribOffset :
      'tags this -> index:GLuint.t -> pname:GLenum.t -> GLintptr.t) =
      fun (x6740 : 'tags this) ->
        fun ~index:(x6738 : GLuint.t) ->
          fun ~pname:(x6739 : GLenum.t) ->
            GLintptr.t_of_js
              (Ojs.call (this_to_js Obj.magic x6740) "getVertexAttribOffset"
                 [|(GLuint.t_to_js x6738);(GLenum.t_to_js x6739)|])
    let (hint : 'tags this -> target:GLenum.t -> mode:GLenum.t -> unit) =
      fun (x6744 : 'tags this) ->
        fun ~target:(x6742 : GLenum.t) ->
          fun ~mode:(x6743 : GLenum.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6744) "hint"
                 [|(GLenum.t_to_js x6742);(GLenum.t_to_js x6743)|])
    let (isBuffer :
      'tags this -> buffer:WebGLBuffer.t or_null -> GLboolean.t) =
      fun (x6748 : 'tags this) ->
        fun ~buffer:(x6746 : WebGLBuffer.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x6748) "isBuffer"
               [|(or_null_to_js WebGLBuffer.t_to_js x6746)|])
    let (isContextLost : 'tags this -> bool) =
      fun (x6750 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x6750) "isContextLost" [||])
    let (isEnabled : 'tags this -> cap:GLenum.t -> GLboolean.t) =
      fun (x6753 : 'tags this) ->
        fun ~cap:(x6752 : GLenum.t) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x6753) "isEnabled"
               [|(GLenum.t_to_js x6752)|])
    let (isFramebuffer :
      'tags this -> framebuffer:WebGLFramebuffer.t or_null -> GLboolean.t) =
      fun (x6757 : 'tags this) ->
        fun ~framebuffer:(x6755 : WebGLFramebuffer.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x6757) "isFramebuffer"
               [|(or_null_to_js WebGLFramebuffer.t_to_js x6755)|])
    let (isProgram :
      'tags this -> program:WebGLProgram.t or_null -> GLboolean.t) =
      fun (x6761 : 'tags this) ->
        fun ~program:(x6759 : WebGLProgram.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x6761) "isProgram"
               [|(or_null_to_js WebGLProgram.t_to_js x6759)|])
    let (isRenderbuffer :
      'tags this -> renderbuffer:WebGLRenderbuffer.t or_null -> GLboolean.t)
      =
      fun (x6765 : 'tags this) ->
        fun ~renderbuffer:(x6763 : WebGLRenderbuffer.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x6765) "isRenderbuffer"
               [|(or_null_to_js WebGLRenderbuffer.t_to_js x6763)|])
    let (isShader :
      'tags this -> shader:WebGLShader.t or_null -> GLboolean.t) =
      fun (x6769 : 'tags this) ->
        fun ~shader:(x6767 : WebGLShader.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x6769) "isShader"
               [|(or_null_to_js WebGLShader.t_to_js x6767)|])
    let (isTexture :
      'tags this -> texture:WebGLTexture.t or_null -> GLboolean.t) =
      fun (x6773 : 'tags this) ->
        fun ~texture:(x6771 : WebGLTexture.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x6773) "isTexture"
               [|(or_null_to_js WebGLTexture.t_to_js x6771)|])
    let (lineWidth : 'tags this -> width:GLfloat.t -> unit) =
      fun (x6776 : 'tags this) ->
        fun ~width:(x6775 : GLfloat.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6776) "lineWidth"
               [|(GLfloat.t_to_js x6775)|])
    let (linkProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x6779 : 'tags this) ->
        fun ~program:(x6778 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6779) "linkProgram"
               [|(WebGLProgram.t_to_js x6778)|])
    let (pixelStorei :
      'tags this ->
        pname:GLenum.t -> param:(GLboolean.t, GLint.t) union2 -> unit)
      =
      fun (x6785 : 'tags this) ->
        fun ~pname:(x6781 : GLenum.t) ->
          fun ~param:(x6782 : (GLboolean.t, GLint.t) union2) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6785) "pixelStorei"
                 [|(GLenum.t_to_js x6781);(union2_to_js GLboolean.t_to_js
                                             GLint.t_to_js x6782)|])
    let (polygonOffset :
      'tags this -> factor:GLfloat.t -> units:GLfloat.t -> unit) =
      fun (x6789 : 'tags this) ->
        fun ~factor:(x6787 : GLfloat.t) ->
          fun ~units:(x6788 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6789) "polygonOffset"
                 [|(GLfloat.t_to_js x6787);(GLfloat.t_to_js x6788)|])
    let (renderbufferStorage :
      'tags this ->
        target:GLenum.t ->
          internalformat:GLenum.t ->
            width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x6795 : 'tags this) ->
        fun ~target:(x6791 : GLenum.t) ->
          fun ~internalformat:(x6792 : GLenum.t) ->
            fun ~width:(x6793 : GLsizei.t) ->
              fun ~height:(x6794 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6795)
                     "renderbufferStorage"
                     [|(GLenum.t_to_js x6791);(GLenum.t_to_js x6792);(
                       GLsizei.t_to_js x6793);(GLsizei.t_to_js x6794)|])
    let (sampleCoverage :
      'tags this -> value:GLclampf.t -> invert:GLboolean.t -> unit) =
      fun (x6799 : 'tags this) ->
        fun ~value:(x6797 : GLclampf.t) ->
          fun ~invert:(x6798 : GLboolean.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6799) "sampleCoverage"
                 [|(GLclampf.t_to_js x6797);(GLboolean.t_to_js x6798)|])
    let (scissor :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x6805 : 'tags this) ->
        fun ~x:(x6801 : GLint.t) ->
          fun ~y:(x6802 : GLint.t) ->
            fun ~width:(x6803 : GLsizei.t) ->
              fun ~height:(x6804 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6805) "scissor"
                     [|(GLint.t_to_js x6801);(GLint.t_to_js x6802);(GLsizei.t_to_js
                                                                    x6803);(
                       GLsizei.t_to_js x6804)|])
    let (shaderSource :
      'tags this -> shader:WebGLShader.t -> source:string -> unit) =
      fun (x6809 : 'tags this) ->
        fun ~shader:(x6807 : WebGLShader.t) ->
          fun ~source:(x6808 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6809) "shaderSource"
                 [|(WebGLShader.t_to_js x6807);(Ojs.string_to_js x6808)|])
    let (stencilFunc :
      'tags this -> func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit) =
      fun (x6814 : 'tags this) ->
        fun ~func:(x6811 : GLenum.t) ->
          fun ~ref:(x6812 : GLint.t) ->
            fun ~mask:(x6813 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6814) "stencilFunc"
                   [|(GLenum.t_to_js x6811);(GLint.t_to_js x6812);(GLuint.t_to_js
                                                                    x6813)|])
    let (stencilFuncSeparate :
      'tags this ->
        face:GLenum.t ->
          func:GLenum.t -> ref:GLint.t -> mask:GLuint.t -> unit)
      =
      fun (x6820 : 'tags this) ->
        fun ~face:(x6816 : GLenum.t) ->
          fun ~func:(x6817 : GLenum.t) ->
            fun ~ref:(x6818 : GLint.t) ->
              fun ~mask:(x6819 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6820)
                     "stencilFuncSeparate"
                     [|(GLenum.t_to_js x6816);(GLenum.t_to_js x6817);(
                       GLint.t_to_js x6818);(GLuint.t_to_js x6819)|])
    let (stencilMask : 'tags this -> mask:GLuint.t -> unit) =
      fun (x6823 : 'tags this) ->
        fun ~mask:(x6822 : GLuint.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6823) "stencilMask"
               [|(GLuint.t_to_js x6822)|])
    let (stencilMaskSeparate :
      'tags this -> face:GLenum.t -> mask:GLuint.t -> unit) =
      fun (x6827 : 'tags this) ->
        fun ~face:(x6825 : GLenum.t) ->
          fun ~mask:(x6826 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6827) "stencilMaskSeparate"
                 [|(GLenum.t_to_js x6825);(GLuint.t_to_js x6826)|])
    let (stencilOp :
      'tags this -> fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x6832 : 'tags this) ->
        fun ~fail:(x6829 : GLenum.t) ->
          fun ~zfail:(x6830 : GLenum.t) ->
            fun ~zpass:(x6831 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6832) "stencilOp"
                   [|(GLenum.t_to_js x6829);(GLenum.t_to_js x6830);(GLenum.t_to_js
                                                                    x6831)|])
    let (stencilOpSeparate :
      'tags this ->
        face:GLenum.t ->
          fail:GLenum.t -> zfail:GLenum.t -> zpass:GLenum.t -> unit)
      =
      fun (x6838 : 'tags this) ->
        fun ~face:(x6834 : GLenum.t) ->
          fun ~fail:(x6835 : GLenum.t) ->
            fun ~zfail:(x6836 : GLenum.t) ->
              fun ~zpass:(x6837 : GLenum.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6838) "stencilOpSeparate"
                     [|(GLenum.t_to_js x6834);(GLenum.t_to_js x6835);(
                       GLenum.t_to_js x6836);(GLenum.t_to_js x6837)|])
    let (texParameterf :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x6843 : 'tags this) ->
        fun ~target:(x6840 : GLenum.t) ->
          fun ~pname:(x6841 : GLenum.t) ->
            fun ~param:(x6842 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6843) "texParameterf"
                   [|(GLenum.t_to_js x6840);(GLenum.t_to_js x6841);(GLfloat.t_to_js
                                                                    x6842)|])
    let (texParameteri :
      'tags this ->
        target:GLenum.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x6848 : 'tags this) ->
        fun ~target:(x6845 : GLenum.t) ->
          fun ~pname:(x6846 : GLenum.t) ->
            fun ~param:(x6847 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6848) "texParameteri"
                   [|(GLenum.t_to_js x6845);(GLenum.t_to_js x6846);(GLint.t_to_js
                                                                    x6847)|])
    let (uniform1f :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> x:GLfloat.t -> unit)
      =
      fun (x6853 : 'tags this) ->
        fun ~location:(x6850 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x6852 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6853) "uniform1f"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x6850);(
                   GLfloat.t_to_js x6852)|])
    let (uniform1i :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> x:GLint.t -> unit)
      =
      fun (x6858 : 'tags this) ->
        fun ~location:(x6855 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x6857 : GLint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6858) "uniform1i"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x6855);(
                   GLint.t_to_js x6857)|])
    let (uniform2f :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLfloat.t -> y:GLfloat.t -> unit)
      =
      fun (x6864 : 'tags this) ->
        fun ~location:(x6860 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x6862 : GLfloat.t) ->
            fun ~y:(x6863 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6864) "uniform2f"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x6860);(
                     GLfloat.t_to_js x6862);(GLfloat.t_to_js x6863)|])
    let (uniform2i :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLint.t -> y:GLint.t -> unit)
      =
      fun (x6870 : 'tags this) ->
        fun ~location:(x6866 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x6868 : GLint.t) ->
            fun ~y:(x6869 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6870) "uniform2i"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x6866);(
                     GLint.t_to_js x6868);(GLint.t_to_js x6869)|])
    let (uniform3f :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x6877 : 'tags this) ->
        fun ~location:(x6872 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x6874 : GLfloat.t) ->
            fun ~y:(x6875 : GLfloat.t) ->
              fun ~z:(x6876 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6877) "uniform3f"
                     [|(or_null_to_js WebGLUniformLocation.t_to_js x6872);(
                       GLfloat.t_to_js x6874);(GLfloat.t_to_js x6875);(
                       GLfloat.t_to_js x6876)|])
    let (uniform3i :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> unit)
      =
      fun (x6884 : 'tags this) ->
        fun ~location:(x6879 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x6881 : GLint.t) ->
            fun ~y:(x6882 : GLint.t) ->
              fun ~z:(x6883 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6884) "uniform3i"
                     [|(or_null_to_js WebGLUniformLocation.t_to_js x6879);(
                       GLint.t_to_js x6881);(GLint.t_to_js x6882);(GLint.t_to_js
                                                                    x6883)|])
    let (uniform4f :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x6892 : 'tags this) ->
        fun ~location:(x6886 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x6888 : GLfloat.t) ->
            fun ~y:(x6889 : GLfloat.t) ->
              fun ~z:(x6890 : GLfloat.t) ->
                fun ~w:(x6891 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x6892) "uniform4f"
                       [|(or_null_to_js WebGLUniformLocation.t_to_js x6886);(
                         GLfloat.t_to_js x6888);(GLfloat.t_to_js x6889);(
                         GLfloat.t_to_js x6890);(GLfloat.t_to_js x6891)|])
    let (uniform4i :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x6900 : 'tags this) ->
        fun ~location:(x6894 : WebGLUniformLocation.t or_null) ->
          fun ~x:(x6896 : GLint.t) ->
            fun ~y:(x6897 : GLint.t) ->
              fun ~z:(x6898 : GLint.t) ->
                fun ~w:(x6899 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x6900) "uniform4i"
                       [|(or_null_to_js WebGLUniformLocation.t_to_js x6894);(
                         GLint.t_to_js x6896);(GLint.t_to_js x6897);(
                         GLint.t_to_js x6898);(GLint.t_to_js x6899)|])
    let (useProgram : 'tags this -> program:WebGLProgram.t or_null -> unit) =
      fun (x6904 : 'tags this) ->
        fun ~program:(x6902 : WebGLProgram.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6904) "useProgram"
               [|(or_null_to_js WebGLProgram.t_to_js x6902)|])
    let (validateProgram : 'tags this -> program:WebGLProgram.t -> unit) =
      fun (x6907 : 'tags this) ->
        fun ~program:(x6906 : WebGLProgram.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x6907) "validateProgram"
               [|(WebGLProgram.t_to_js x6906)|])
    let (vertexAttrib1f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> unit) =
      fun (x6911 : 'tags this) ->
        fun ~index:(x6909 : GLuint.t) ->
          fun ~x:(x6910 : GLfloat.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6911) "vertexAttrib1f"
                 [|(GLuint.t_to_js x6909);(GLfloat.t_to_js x6910)|])
    let (vertexAttrib1fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x6915 : 'tags this) ->
        fun ~index:(x6913 : GLuint.t) ->
          fun ~values:(x6914 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6915) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x6913);(Float32List.t_to_js x6914)|])
    let (vertexAttrib2f :
      'tags this -> index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> unit) =
      fun (x6920 : 'tags this) ->
        fun ~index:(x6917 : GLuint.t) ->
          fun ~x:(x6918 : GLfloat.t) ->
            fun ~y:(x6919 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x6920) "vertexAttrib2f"
                   [|(GLuint.t_to_js x6917);(GLfloat.t_to_js x6918);(
                     GLfloat.t_to_js x6919)|])
    let (vertexAttrib2fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x6924 : 'tags this) ->
        fun ~index:(x6922 : GLuint.t) ->
          fun ~values:(x6923 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6924) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x6922);(Float32List.t_to_js x6923)|])
    let (vertexAttrib3f :
      'tags this ->
        index:GLuint.t -> x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> unit)
      =
      fun (x6930 : 'tags this) ->
        fun ~index:(x6926 : GLuint.t) ->
          fun ~x:(x6927 : GLfloat.t) ->
            fun ~y:(x6928 : GLfloat.t) ->
              fun ~z:(x6929 : GLfloat.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6930) "vertexAttrib3f"
                     [|(GLuint.t_to_js x6926);(GLfloat.t_to_js x6927);(
                       GLfloat.t_to_js x6928);(GLfloat.t_to_js x6929)|])
    let (vertexAttrib3fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x6934 : 'tags this) ->
        fun ~index:(x6932 : GLuint.t) ->
          fun ~values:(x6933 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6934) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x6932);(Float32List.t_to_js x6933)|])
    let (vertexAttrib4f :
      'tags this ->
        index:GLuint.t ->
          x:GLfloat.t -> y:GLfloat.t -> z:GLfloat.t -> w:GLfloat.t -> unit)
      =
      fun (x6941 : 'tags this) ->
        fun ~index:(x6936 : GLuint.t) ->
          fun ~x:(x6937 : GLfloat.t) ->
            fun ~y:(x6938 : GLfloat.t) ->
              fun ~z:(x6939 : GLfloat.t) ->
                fun ~w:(x6940 : GLfloat.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x6941) "vertexAttrib4f"
                       [|(GLuint.t_to_js x6936);(GLfloat.t_to_js x6937);(
                         GLfloat.t_to_js x6938);(GLfloat.t_to_js x6939);(
                         GLfloat.t_to_js x6940)|])
    let (vertexAttrib4fv :
      'tags this -> index:GLuint.t -> values:Float32List.t -> unit) =
      fun (x6945 : 'tags this) ->
        fun ~index:(x6943 : GLuint.t) ->
          fun ~values:(x6944 : Float32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x6945) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x6943);(Float32List.t_to_js x6944)|])
    let (vertexAttribPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t ->
              normalized:GLboolean.t ->
                stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x6953 : 'tags this) ->
        fun ~index:(x6947 : GLuint.t) ->
          fun ~size:(x6948 : GLint.t) ->
            fun ~type_:(x6949 : GLenum.t) ->
              fun ~normalized:(x6950 : GLboolean.t) ->
                fun ~stride:(x6951 : GLsizei.t) ->
                  fun ~offset:(x6952 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x6953)
                         "vertexAttribPointer"
                         [|(GLuint.t_to_js x6947);(GLint.t_to_js x6948);(
                           GLenum.t_to_js x6949);(GLboolean.t_to_js x6950);(
                           GLsizei.t_to_js x6951);(GLintptr.t_to_js x6952)|])
    let (viewport :
      'tags this ->
        x:GLint.t -> y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x6959 : 'tags this) ->
        fun ~x:(x6955 : GLint.t) ->
          fun ~y:(x6956 : GLint.t) ->
            fun ~width:(x6957 : GLsizei.t) ->
              fun ~height:(x6958 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x6959) "viewport"
                     [|(GLint.t_to_js x6955);(GLint.t_to_js x6956);(GLsizei.t_to_js
                                                                    x6957);(
                       GLsizei.t_to_js x6958)|])
    let (get_ACTIVE_ATTRIBUTES : 'tags this -> GLenum.t) =
      fun (x6961 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6961)
             "ACTIVE_ATTRIBUTES")
    let (get_ACTIVE_TEXTURE : 'tags this -> GLenum.t) =
      fun (x6963 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6963) "ACTIVE_TEXTURE")
    let (get_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x6965 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6965) "ACTIVE_UNIFORMS")
    let (get_ALIASED_LINE_WIDTH_RANGE : 'tags this -> GLenum.t) =
      fun (x6967 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6967)
             "ALIASED_LINE_WIDTH_RANGE")
    let (get_ALIASED_POINT_SIZE_RANGE : 'tags this -> GLenum.t) =
      fun (x6969 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6969)
             "ALIASED_POINT_SIZE_RANGE")
    let (get_ALPHA : 'tags this -> GLenum.t) =
      fun (x6971 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6971) "ALPHA")
    let (get_ALPHA_BITS : 'tags this -> GLenum.t) =
      fun (x6973 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6973) "ALPHA_BITS")
    let (get_ALWAYS : 'tags this -> GLenum.t) =
      fun (x6975 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6975) "ALWAYS")
    let (get_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x6977 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6977) "ARRAY_BUFFER")
    let (get_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x6979 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6979)
             "ARRAY_BUFFER_BINDING")
    let (get_ATTACHED_SHADERS : 'tags this -> GLenum.t) =
      fun (x6981 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6981) "ATTACHED_SHADERS")
    let (get_BACK : 'tags this -> GLenum.t) =
      fun (x6983 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6983) "BACK")
    let (get_BLEND : 'tags this -> GLenum.t) =
      fun (x6985 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6985) "BLEND")
    let (get_BLEND_COLOR : 'tags this -> GLenum.t) =
      fun (x6987 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6987) "BLEND_COLOR")
    let (get_BLEND_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x6989 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6989) "BLEND_DST_ALPHA")
    let (get_BLEND_DST_RGB : 'tags this -> GLenum.t) =
      fun (x6991 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6991) "BLEND_DST_RGB")
    let (get_BLEND_EQUATION : 'tags this -> GLenum.t) =
      fun (x6993 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6993) "BLEND_EQUATION")
    let (get_BLEND_EQUATION_ALPHA : 'tags this -> GLenum.t) =
      fun (x6995 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6995)
             "BLEND_EQUATION_ALPHA")
    let (get_BLEND_EQUATION_RGB : 'tags this -> GLenum.t) =
      fun (x6997 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6997)
             "BLEND_EQUATION_RGB")
    let (get_BLEND_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x6999 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x6999) "BLEND_SRC_ALPHA")
    let (get_BLEND_SRC_RGB : 'tags this -> GLenum.t) =
      fun (x7001 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7001) "BLEND_SRC_RGB")
    let (get_BLUE_BITS : 'tags this -> GLenum.t) =
      fun (x7003 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7003) "BLUE_BITS")
    let (get_BOOL : 'tags this -> GLenum.t) =
      fun (x7005 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7005) "BOOL")
    let (get_BOOL_VEC2 : 'tags this -> GLenum.t) =
      fun (x7007 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7007) "BOOL_VEC2")
    let (get_BOOL_VEC3 : 'tags this -> GLenum.t) =
      fun (x7009 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7009) "BOOL_VEC3")
    let (get_BOOL_VEC4 : 'tags this -> GLenum.t) =
      fun (x7011 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7011) "BOOL_VEC4")
    let (get_BROWSER_DEFAULT_WEBGL : 'tags this -> GLenum.t) =
      fun (x7013 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7013)
             "BROWSER_DEFAULT_WEBGL")
    let (get_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x7015 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7015) "BUFFER_SIZE")
    let (get_BUFFER_USAGE : 'tags this -> GLenum.t) =
      fun (x7017 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7017) "BUFFER_USAGE")
    let (get_BYTE : 'tags this -> GLenum.t) =
      fun (x7019 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7019) "BYTE")
    let (get_CCW : 'tags this -> GLenum.t) =
      fun (x7021 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7021) "CCW")
    let (get_CLAMP_TO_EDGE : 'tags this -> GLenum.t) =
      fun (x7023 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7023) "CLAMP_TO_EDGE")
    let (get_COLOR_ATTACHMENT0 : 'tags this -> GLenum.t) =
      fun (x7025 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7025)
             "COLOR_ATTACHMENT0")
    let (get_COLOR_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x7027 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7027) "COLOR_BUFFER_BIT")
    let (get_COLOR_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x7029 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7029)
             "COLOR_CLEAR_VALUE")
    let (get_COLOR_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x7031 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7031) "COLOR_WRITEMASK")
    let (get_COMPILE_STATUS : 'tags this -> GLenum.t) =
      fun (x7033 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7033) "COMPILE_STATUS")
    let (get_COMPRESSED_TEXTURE_FORMATS : 'tags this -> GLenum.t) =
      fun (x7035 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7035)
             "COMPRESSED_TEXTURE_FORMATS")
    let (get_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x7037 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7037) "CONSTANT_ALPHA")
    let (get_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x7039 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7039) "CONSTANT_COLOR")
    let (get_CONTEXT_LOST_WEBGL : 'tags this -> GLenum.t) =
      fun (x7041 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7041)
             "CONTEXT_LOST_WEBGL")
    let (get_CULL_FACE : 'tags this -> GLenum.t) =
      fun (x7043 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7043) "CULL_FACE")
    let (get_CULL_FACE_MODE : 'tags this -> GLenum.t) =
      fun (x7045 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7045) "CULL_FACE_MODE")
    let (get_CURRENT_PROGRAM : 'tags this -> GLenum.t) =
      fun (x7047 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7047) "CURRENT_PROGRAM")
    let (get_CURRENT_VERTEX_ATTRIB : 'tags this -> GLenum.t) =
      fun (x7049 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7049)
             "CURRENT_VERTEX_ATTRIB")
    let (get_CW : 'tags this -> GLenum.t) =
      fun (x7051 : 'tags this) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x7051) "CW")
    let (get_DECR : 'tags this -> GLenum.t) =
      fun (x7053 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7053) "DECR")
    let (get_DECR_WRAP : 'tags this -> GLenum.t) =
      fun (x7055 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7055) "DECR_WRAP")
    let (get_DELETE_STATUS : 'tags this -> GLenum.t) =
      fun (x7057 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7057) "DELETE_STATUS")
    let (get_DEPTH_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7059 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7059) "DEPTH_ATTACHMENT")
    let (get_DEPTH_BITS : 'tags this -> GLenum.t) =
      fun (x7061 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7061) "DEPTH_BITS")
    let (get_DEPTH_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x7063 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7063) "DEPTH_BUFFER_BIT")
    let (get_DEPTH_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x7065 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7065)
             "DEPTH_CLEAR_VALUE")
    let (get_DEPTH_COMPONENT : 'tags this -> GLenum.t) =
      fun (x7067 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7067) "DEPTH_COMPONENT")
    let (get_DEPTH_COMPONENT16 : 'tags this -> GLenum.t) =
      fun (x7069 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7069)
             "DEPTH_COMPONENT16")
    let (get_DEPTH_FUNC : 'tags this -> GLenum.t) =
      fun (x7071 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7071) "DEPTH_FUNC")
    let (get_DEPTH_RANGE : 'tags this -> GLenum.t) =
      fun (x7073 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7073) "DEPTH_RANGE")
    let (get_DEPTH_STENCIL : 'tags this -> GLenum.t) =
      fun (x7075 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7075) "DEPTH_STENCIL")
    let (get_DEPTH_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7077 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7077)
             "DEPTH_STENCIL_ATTACHMENT")
    let (get_DEPTH_TEST : 'tags this -> GLenum.t) =
      fun (x7079 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7079) "DEPTH_TEST")
    let (get_DEPTH_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x7081 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7081) "DEPTH_WRITEMASK")
    let (get_DITHER : 'tags this -> GLenum.t) =
      fun (x7083 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7083) "DITHER")
    let (get_DONT_CARE : 'tags this -> GLenum.t) =
      fun (x7085 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7085) "DONT_CARE")
    let (get_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x7087 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7087) "DST_ALPHA")
    let (get_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x7089 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7089) "DST_COLOR")
    let (get_DYNAMIC_DRAW : 'tags this -> GLenum.t) =
      fun (x7091 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7091) "DYNAMIC_DRAW")
    let (get_ELEMENT_ARRAY_BUFFER : 'tags this -> GLenum.t) =
      fun (x7093 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7093)
             "ELEMENT_ARRAY_BUFFER")
    let (get_ELEMENT_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7095 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7095)
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (get_EQUAL : 'tags this -> GLenum.t) =
      fun (x7097 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7097) "EQUAL")
    let (get_FASTEST : 'tags this -> GLenum.t) =
      fun (x7099 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7099) "FASTEST")
    let (get_FLOAT : 'tags this -> GLenum.t) =
      fun (x7101 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7101) "FLOAT")
    let (get_FLOAT_MAT2 : 'tags this -> GLenum.t) =
      fun (x7103 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7103) "FLOAT_MAT2")
    let (get_FLOAT_MAT3 : 'tags this -> GLenum.t) =
      fun (x7105 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7105) "FLOAT_MAT3")
    let (get_FLOAT_MAT4 : 'tags this -> GLenum.t) =
      fun (x7107 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7107) "FLOAT_MAT4")
    let (get_FLOAT_VEC2 : 'tags this -> GLenum.t) =
      fun (x7109 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7109) "FLOAT_VEC2")
    let (get_FLOAT_VEC3 : 'tags this -> GLenum.t) =
      fun (x7111 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7111) "FLOAT_VEC3")
    let (get_FLOAT_VEC4 : 'tags this -> GLenum.t) =
      fun (x7113 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7113) "FLOAT_VEC4")
    let (get_FRAGMENT_SHADER : 'tags this -> GLenum.t) =
      fun (x7115 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7115) "FRAGMENT_SHADER")
    let (get_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x7117 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7117) "FRAMEBUFFER")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : 'tags this -> GLenum.t) =
      fun (x7119 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7119)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (get_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x7121 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7121)
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE :
      'tags this -> GLenum.t) =
      fun (x7123 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7123)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : 'tags this -> GLenum.t) =
      fun (x7125 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7125)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (get_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7127 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7127)
             "FRAMEBUFFER_BINDING")
    let (get_FRAMEBUFFER_COMPLETE : 'tags this -> GLenum.t) =
      fun (x7129 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7129)
             "FRAMEBUFFER_COMPLETE")
    let (get_FRAMEBUFFER_INCOMPLETE_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7131 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7131)
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (get_FRAMEBUFFER_INCOMPLETE_DIMENSIONS : 'tags this -> GLenum.t) =
      fun (x7133 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7133)
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (get_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT :
      'tags this -> GLenum.t) =
      fun (x7135 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7135)
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (get_FRAMEBUFFER_UNSUPPORTED : 'tags this -> GLenum.t) =
      fun (x7137 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7137)
             "FRAMEBUFFER_UNSUPPORTED")
    let (get_FRONT : 'tags this -> GLenum.t) =
      fun (x7139 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7139) "FRONT")
    let (get_FRONT_AND_BACK : 'tags this -> GLenum.t) =
      fun (x7141 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7141) "FRONT_AND_BACK")
    let (get_FRONT_FACE : 'tags this -> GLenum.t) =
      fun (x7143 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7143) "FRONT_FACE")
    let (get_FUNC_ADD : 'tags this -> GLenum.t) =
      fun (x7145 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7145) "FUNC_ADD")
    let (get_FUNC_REVERSE_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x7147 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7147)
             "FUNC_REVERSE_SUBTRACT")
    let (get_FUNC_SUBTRACT : 'tags this -> GLenum.t) =
      fun (x7149 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7149) "FUNC_SUBTRACT")
    let (get_GENERATE_MIPMAP_HINT : 'tags this -> GLenum.t) =
      fun (x7151 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7151)
             "GENERATE_MIPMAP_HINT")
    let (get_GEQUAL : 'tags this -> GLenum.t) =
      fun (x7153 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7153) "GEQUAL")
    let (get_GREATER : 'tags this -> GLenum.t) =
      fun (x7155 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7155) "GREATER")
    let (get_GREEN_BITS : 'tags this -> GLenum.t) =
      fun (x7157 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7157) "GREEN_BITS")
    let (get_HIGH_FLOAT : 'tags this -> GLenum.t) =
      fun (x7159 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7159) "HIGH_FLOAT")
    let (get_HIGH_INT : 'tags this -> GLenum.t) =
      fun (x7161 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7161) "HIGH_INT")
    let (get_IMPLEMENTATION_COLOR_READ_FORMAT : 'tags this -> GLenum.t) =
      fun (x7163 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7163)
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (get_IMPLEMENTATION_COLOR_READ_TYPE : 'tags this -> GLenum.t) =
      fun (x7165 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7165)
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (get_INCR : 'tags this -> GLenum.t) =
      fun (x7167 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7167) "INCR")
    let (get_INCR_WRAP : 'tags this -> GLenum.t) =
      fun (x7169 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7169) "INCR_WRAP")
    let (get_INT : 'tags this -> GLenum.t) =
      fun (x7171 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7171) "INT")
    let (get_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x7173 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7173) "INT_VEC2")
    let (get_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x7175 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7175) "INT_VEC3")
    let (get_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x7177 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7177) "INT_VEC4")
    let (get_INVALID_ENUM : 'tags this -> GLenum.t) =
      fun (x7179 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7179) "INVALID_ENUM")
    let (get_INVALID_FRAMEBUFFER_OPERATION : 'tags this -> GLenum.t) =
      fun (x7181 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7181)
             "INVALID_FRAMEBUFFER_OPERATION")
    let (get_INVALID_OPERATION : 'tags this -> GLenum.t) =
      fun (x7183 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7183)
             "INVALID_OPERATION")
    let (get_INVALID_VALUE : 'tags this -> GLenum.t) =
      fun (x7185 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7185) "INVALID_VALUE")
    let (get_INVERT : 'tags this -> GLenum.t) =
      fun (x7187 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7187) "INVERT")
    let (get_KEEP : 'tags this -> GLenum.t) =
      fun (x7189 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7189) "KEEP")
    let (get_LEQUAL : 'tags this -> GLenum.t) =
      fun (x7191 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7191) "LEQUAL")
    let (get_LESS : 'tags this -> GLenum.t) =
      fun (x7193 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7193) "LESS")
    let (get_LINEAR : 'tags this -> GLenum.t) =
      fun (x7195 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7195) "LINEAR")
    let (get_LINEAR_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x7197 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7197)
             "LINEAR_MIPMAP_LINEAR")
    let (get_LINEAR_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x7199 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7199)
             "LINEAR_MIPMAP_NEAREST")
    let (get_LINES : 'tags this -> GLenum.t) =
      fun (x7201 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7201) "LINES")
    let (get_LINE_LOOP : 'tags this -> GLenum.t) =
      fun (x7203 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7203) "LINE_LOOP")
    let (get_LINE_STRIP : 'tags this -> GLenum.t) =
      fun (x7205 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7205) "LINE_STRIP")
    let (get_LINE_WIDTH : 'tags this -> GLenum.t) =
      fun (x7207 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7207) "LINE_WIDTH")
    let (get_LINK_STATUS : 'tags this -> GLenum.t) =
      fun (x7209 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7209) "LINK_STATUS")
    let (get_LOW_FLOAT : 'tags this -> GLenum.t) =
      fun (x7211 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7211) "LOW_FLOAT")
    let (get_LOW_INT : 'tags this -> GLenum.t) =
      fun (x7213 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7213) "LOW_INT")
    let (get_LUMINANCE : 'tags this -> GLenum.t) =
      fun (x7215 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7215) "LUMINANCE")
    let (get_LUMINANCE_ALPHA : 'tags this -> GLenum.t) =
      fun (x7217 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7217) "LUMINANCE_ALPHA")
    let (get_MAX_COMBINED_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x7219 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7219)
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (get_MAX_CUBE_MAP_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x7221 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7221)
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (get_MAX_FRAGMENT_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x7223 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7223)
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (get_MAX_RENDERBUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x7225 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7225)
             "MAX_RENDERBUFFER_SIZE")
    let (get_MAX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x7227 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7227)
             "MAX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x7229 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7229) "MAX_TEXTURE_SIZE")
    let (get_MAX_VARYING_VECTORS : 'tags this -> GLenum.t) =
      fun (x7231 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7231)
             "MAX_VARYING_VECTORS")
    let (get_MAX_VERTEX_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x7233 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7233)
             "MAX_VERTEX_ATTRIBS")
    let (get_MAX_VERTEX_TEXTURE_IMAGE_UNITS : 'tags this -> GLenum.t) =
      fun (x7235 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7235)
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (get_MAX_VERTEX_UNIFORM_VECTORS : 'tags this -> GLenum.t) =
      fun (x7237 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7237)
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (get_MAX_VIEWPORT_DIMS : 'tags this -> GLenum.t) =
      fun (x7239 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7239)
             "MAX_VIEWPORT_DIMS")
    let (get_MEDIUM_FLOAT : 'tags this -> GLenum.t) =
      fun (x7241 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7241) "MEDIUM_FLOAT")
    let (get_MEDIUM_INT : 'tags this -> GLenum.t) =
      fun (x7243 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7243) "MEDIUM_INT")
    let (get_MIRRORED_REPEAT : 'tags this -> GLenum.t) =
      fun (x7245 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7245) "MIRRORED_REPEAT")
    let (get_NEAREST : 'tags this -> GLenum.t) =
      fun (x7247 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7247) "NEAREST")
    let (get_NEAREST_MIPMAP_LINEAR : 'tags this -> GLenum.t) =
      fun (x7249 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7249)
             "NEAREST_MIPMAP_LINEAR")
    let (get_NEAREST_MIPMAP_NEAREST : 'tags this -> GLenum.t) =
      fun (x7251 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7251)
             "NEAREST_MIPMAP_NEAREST")
    let (get_NEVER : 'tags this -> GLenum.t) =
      fun (x7253 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7253) "NEVER")
    let (get_NICEST : 'tags this -> GLenum.t) =
      fun (x7255 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7255) "NICEST")
    let (get_NONE : 'tags this -> GLenum.t) =
      fun (x7257 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7257) "NONE")
    let (get_NOTEQUAL : 'tags this -> GLenum.t) =
      fun (x7259 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7259) "NOTEQUAL")
    let (get_NO_ERROR : 'tags this -> GLenum.t) =
      fun (x7261 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7261) "NO_ERROR")
    let (get_ONE : 'tags this -> GLenum.t) =
      fun (x7263 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7263) "ONE")
    let (get_ONE_MINUS_CONSTANT_ALPHA : 'tags this -> GLenum.t) =
      fun (x7265 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7265)
             "ONE_MINUS_CONSTANT_ALPHA")
    let (get_ONE_MINUS_CONSTANT_COLOR : 'tags this -> GLenum.t) =
      fun (x7267 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7267)
             "ONE_MINUS_CONSTANT_COLOR")
    let (get_ONE_MINUS_DST_ALPHA : 'tags this -> GLenum.t) =
      fun (x7269 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7269)
             "ONE_MINUS_DST_ALPHA")
    let (get_ONE_MINUS_DST_COLOR : 'tags this -> GLenum.t) =
      fun (x7271 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7271)
             "ONE_MINUS_DST_COLOR")
    let (get_ONE_MINUS_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x7273 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7273)
             "ONE_MINUS_SRC_ALPHA")
    let (get_ONE_MINUS_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x7275 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7275)
             "ONE_MINUS_SRC_COLOR")
    let (get_OUT_OF_MEMORY : 'tags this -> GLenum.t) =
      fun (x7277 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7277) "OUT_OF_MEMORY")
    let (get_PACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x7279 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7279) "PACK_ALIGNMENT")
    let (get_POINTS : 'tags this -> GLenum.t) =
      fun (x7281 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7281) "POINTS")
    let (get_POLYGON_OFFSET_FACTOR : 'tags this -> GLenum.t) =
      fun (x7283 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7283)
             "POLYGON_OFFSET_FACTOR")
    let (get_POLYGON_OFFSET_FILL : 'tags this -> GLenum.t) =
      fun (x7285 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7285)
             "POLYGON_OFFSET_FILL")
    let (get_POLYGON_OFFSET_UNITS : 'tags this -> GLenum.t) =
      fun (x7287 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7287)
             "POLYGON_OFFSET_UNITS")
    let (get_RED_BITS : 'tags this -> GLenum.t) =
      fun (x7289 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7289) "RED_BITS")
    let (get_RENDERBUFFER : 'tags this -> GLenum.t) =
      fun (x7291 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7291) "RENDERBUFFER")
    let (get_RENDERBUFFER_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x7293 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7293)
             "RENDERBUFFER_ALPHA_SIZE")
    let (get_RENDERBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7295 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7295)
             "RENDERBUFFER_BINDING")
    let (get_RENDERBUFFER_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x7297 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7297)
             "RENDERBUFFER_BLUE_SIZE")
    let (get_RENDERBUFFER_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x7299 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7299)
             "RENDERBUFFER_DEPTH_SIZE")
    let (get_RENDERBUFFER_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x7301 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7301)
             "RENDERBUFFER_GREEN_SIZE")
    let (get_RENDERBUFFER_HEIGHT : 'tags this -> GLenum.t) =
      fun (x7303 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7303)
             "RENDERBUFFER_HEIGHT")
    let (get_RENDERBUFFER_INTERNAL_FORMAT : 'tags this -> GLenum.t) =
      fun (x7305 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7305)
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (get_RENDERBUFFER_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x7307 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7307)
             "RENDERBUFFER_RED_SIZE")
    let (get_RENDERBUFFER_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x7309 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7309)
             "RENDERBUFFER_STENCIL_SIZE")
    let (get_RENDERBUFFER_WIDTH : 'tags this -> GLenum.t) =
      fun (x7311 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7311)
             "RENDERBUFFER_WIDTH")
    let (get_RENDERER : 'tags this -> GLenum.t) =
      fun (x7313 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7313) "RENDERER")
    let (get_REPEAT : 'tags this -> GLenum.t) =
      fun (x7315 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7315) "REPEAT")
    let (get_REPLACE : 'tags this -> GLenum.t) =
      fun (x7317 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7317) "REPLACE")
    let (get_RGB : 'tags this -> GLenum.t) =
      fun (x7319 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7319) "RGB")
    let (get_RGB565 : 'tags this -> GLenum.t) =
      fun (x7321 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7321) "RGB565")
    let (get_RGB5_A1 : 'tags this -> GLenum.t) =
      fun (x7323 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7323) "RGB5_A1")
    let (get_RGBA : 'tags this -> GLenum.t) =
      fun (x7325 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7325) "RGBA")
    let (get_RGBA4 : 'tags this -> GLenum.t) =
      fun (x7327 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7327) "RGBA4")
    let (get_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x7329 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7329) "SAMPLER_2D")
    let (get_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x7331 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7331) "SAMPLER_CUBE")
    let (get_SAMPLES : 'tags this -> GLenum.t) =
      fun (x7333 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7333) "SAMPLES")
    let (get_SAMPLE_ALPHA_TO_COVERAGE : 'tags this -> GLenum.t) =
      fun (x7335 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7335)
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (get_SAMPLE_BUFFERS : 'tags this -> GLenum.t) =
      fun (x7337 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7337) "SAMPLE_BUFFERS")
    let (get_SAMPLE_COVERAGE : 'tags this -> GLenum.t) =
      fun (x7339 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7339) "SAMPLE_COVERAGE")
    let (get_SAMPLE_COVERAGE_INVERT : 'tags this -> GLenum.t) =
      fun (x7341 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7341)
             "SAMPLE_COVERAGE_INVERT")
    let (get_SAMPLE_COVERAGE_VALUE : 'tags this -> GLenum.t) =
      fun (x7343 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7343)
             "SAMPLE_COVERAGE_VALUE")
    let (get_SCISSOR_BOX : 'tags this -> GLenum.t) =
      fun (x7345 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7345) "SCISSOR_BOX")
    let (get_SCISSOR_TEST : 'tags this -> GLenum.t) =
      fun (x7347 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7347) "SCISSOR_TEST")
    let (get_SHADER_TYPE : 'tags this -> GLenum.t) =
      fun (x7349 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7349) "SHADER_TYPE")
    let (get_SHADING_LANGUAGE_VERSION : 'tags this -> GLenum.t) =
      fun (x7351 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7351)
             "SHADING_LANGUAGE_VERSION")
    let (get_SHORT : 'tags this -> GLenum.t) =
      fun (x7353 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7353) "SHORT")
    let (get_SRC_ALPHA : 'tags this -> GLenum.t) =
      fun (x7355 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7355) "SRC_ALPHA")
    let (get_SRC_ALPHA_SATURATE : 'tags this -> GLenum.t) =
      fun (x7357 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7357)
             "SRC_ALPHA_SATURATE")
    let (get_SRC_COLOR : 'tags this -> GLenum.t) =
      fun (x7359 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7359) "SRC_COLOR")
    let (get_STATIC_DRAW : 'tags this -> GLenum.t) =
      fun (x7361 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7361) "STATIC_DRAW")
    let (get_STENCIL_ATTACHMENT : 'tags this -> GLenum.t) =
      fun (x7363 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7363)
             "STENCIL_ATTACHMENT")
    let (get_STENCIL_BACK_FAIL : 'tags this -> GLenum.t) =
      fun (x7365 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7365)
             "STENCIL_BACK_FAIL")
    let (get_STENCIL_BACK_FUNC : 'tags this -> GLenum.t) =
      fun (x7367 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7367)
             "STENCIL_BACK_FUNC")
    let (get_STENCIL_BACK_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x7369 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7369)
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (get_STENCIL_BACK_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x7371 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7371)
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (get_STENCIL_BACK_REF : 'tags this -> GLenum.t) =
      fun (x7373 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7373) "STENCIL_BACK_REF")
    let (get_STENCIL_BACK_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x7375 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7375)
             "STENCIL_BACK_VALUE_MASK")
    let (get_STENCIL_BACK_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x7377 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7377)
             "STENCIL_BACK_WRITEMASK")
    let (get_STENCIL_BITS : 'tags this -> GLenum.t) =
      fun (x7379 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7379) "STENCIL_BITS")
    let (get_STENCIL_BUFFER_BIT : 'tags this -> GLenum.t) =
      fun (x7381 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7381)
             "STENCIL_BUFFER_BIT")
    let (get_STENCIL_CLEAR_VALUE : 'tags this -> GLenum.t) =
      fun (x7383 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7383)
             "STENCIL_CLEAR_VALUE")
    let (get_STENCIL_FAIL : 'tags this -> GLenum.t) =
      fun (x7385 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7385) "STENCIL_FAIL")
    let (get_STENCIL_FUNC : 'tags this -> GLenum.t) =
      fun (x7387 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7387) "STENCIL_FUNC")
    let (get_STENCIL_INDEX8 : 'tags this -> GLenum.t) =
      fun (x7389 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7389) "STENCIL_INDEX8")
    let (get_STENCIL_PASS_DEPTH_FAIL : 'tags this -> GLenum.t) =
      fun (x7391 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7391)
             "STENCIL_PASS_DEPTH_FAIL")
    let (get_STENCIL_PASS_DEPTH_PASS : 'tags this -> GLenum.t) =
      fun (x7393 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7393)
             "STENCIL_PASS_DEPTH_PASS")
    let (get_STENCIL_REF : 'tags this -> GLenum.t) =
      fun (x7395 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7395) "STENCIL_REF")
    let (get_STENCIL_TEST : 'tags this -> GLenum.t) =
      fun (x7397 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7397) "STENCIL_TEST")
    let (get_STENCIL_VALUE_MASK : 'tags this -> GLenum.t) =
      fun (x7399 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7399)
             "STENCIL_VALUE_MASK")
    let (get_STENCIL_WRITEMASK : 'tags this -> GLenum.t) =
      fun (x7401 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7401)
             "STENCIL_WRITEMASK")
    let (get_STREAM_DRAW : 'tags this -> GLenum.t) =
      fun (x7403 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7403) "STREAM_DRAW")
    let (get_SUBPIXEL_BITS : 'tags this -> GLenum.t) =
      fun (x7405 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7405) "SUBPIXEL_BITS")
    let (get_TEXTURE : 'tags this -> GLenum.t) =
      fun (x7407 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7407) "TEXTURE")
    let (get_TEXTURE0 : 'tags this -> GLenum.t) =
      fun (x7409 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7409) "TEXTURE0")
    let (get_TEXTURE1 : 'tags this -> GLenum.t) =
      fun (x7411 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7411) "TEXTURE1")
    let (get_TEXTURE10 : 'tags this -> GLenum.t) =
      fun (x7413 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7413) "TEXTURE10")
    let (get_TEXTURE11 : 'tags this -> GLenum.t) =
      fun (x7415 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7415) "TEXTURE11")
    let (get_TEXTURE12 : 'tags this -> GLenum.t) =
      fun (x7417 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7417) "TEXTURE12")
    let (get_TEXTURE13 : 'tags this -> GLenum.t) =
      fun (x7419 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7419) "TEXTURE13")
    let (get_TEXTURE14 : 'tags this -> GLenum.t) =
      fun (x7421 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7421) "TEXTURE14")
    let (get_TEXTURE15 : 'tags this -> GLenum.t) =
      fun (x7423 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7423) "TEXTURE15")
    let (get_TEXTURE16 : 'tags this -> GLenum.t) =
      fun (x7425 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7425) "TEXTURE16")
    let (get_TEXTURE17 : 'tags this -> GLenum.t) =
      fun (x7427 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7427) "TEXTURE17")
    let (get_TEXTURE18 : 'tags this -> GLenum.t) =
      fun (x7429 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7429) "TEXTURE18")
    let (get_TEXTURE19 : 'tags this -> GLenum.t) =
      fun (x7431 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7431) "TEXTURE19")
    let (get_TEXTURE2 : 'tags this -> GLenum.t) =
      fun (x7433 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7433) "TEXTURE2")
    let (get_TEXTURE20 : 'tags this -> GLenum.t) =
      fun (x7435 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7435) "TEXTURE20")
    let (get_TEXTURE21 : 'tags this -> GLenum.t) =
      fun (x7437 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7437) "TEXTURE21")
    let (get_TEXTURE22 : 'tags this -> GLenum.t) =
      fun (x7439 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7439) "TEXTURE22")
    let (get_TEXTURE23 : 'tags this -> GLenum.t) =
      fun (x7441 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7441) "TEXTURE23")
    let (get_TEXTURE24 : 'tags this -> GLenum.t) =
      fun (x7443 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7443) "TEXTURE24")
    let (get_TEXTURE25 : 'tags this -> GLenum.t) =
      fun (x7445 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7445) "TEXTURE25")
    let (get_TEXTURE26 : 'tags this -> GLenum.t) =
      fun (x7447 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7447) "TEXTURE26")
    let (get_TEXTURE27 : 'tags this -> GLenum.t) =
      fun (x7449 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7449) "TEXTURE27")
    let (get_TEXTURE28 : 'tags this -> GLenum.t) =
      fun (x7451 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7451) "TEXTURE28")
    let (get_TEXTURE29 : 'tags this -> GLenum.t) =
      fun (x7453 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7453) "TEXTURE29")
    let (get_TEXTURE3 : 'tags this -> GLenum.t) =
      fun (x7455 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7455) "TEXTURE3")
    let (get_TEXTURE30 : 'tags this -> GLenum.t) =
      fun (x7457 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7457) "TEXTURE30")
    let (get_TEXTURE31 : 'tags this -> GLenum.t) =
      fun (x7459 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7459) "TEXTURE31")
    let (get_TEXTURE4 : 'tags this -> GLenum.t) =
      fun (x7461 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7461) "TEXTURE4")
    let (get_TEXTURE5 : 'tags this -> GLenum.t) =
      fun (x7463 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7463) "TEXTURE5")
    let (get_TEXTURE6 : 'tags this -> GLenum.t) =
      fun (x7465 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7465) "TEXTURE6")
    let (get_TEXTURE7 : 'tags this -> GLenum.t) =
      fun (x7467 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7467) "TEXTURE7")
    let (get_TEXTURE8 : 'tags this -> GLenum.t) =
      fun (x7469 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7469) "TEXTURE8")
    let (get_TEXTURE9 : 'tags this -> GLenum.t) =
      fun (x7471 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7471) "TEXTURE9")
    let (get_TEXTURE_2D : 'tags this -> GLenum.t) =
      fun (x7473 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7473) "TEXTURE_2D")
    let (get_TEXTURE_BINDING_2D : 'tags this -> GLenum.t) =
      fun (x7475 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7475)
             "TEXTURE_BINDING_2D")
    let (get_TEXTURE_BINDING_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x7477 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7477)
             "TEXTURE_BINDING_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP : 'tags this -> GLenum.t) =
      fun (x7479 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7479) "TEXTURE_CUBE_MAP")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_X : 'tags this -> GLenum.t) =
      fun (x7481 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7481)
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Y : 'tags this -> GLenum.t) =
      fun (x7483 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7483)
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (get_TEXTURE_CUBE_MAP_NEGATIVE_Z : 'tags this -> GLenum.t) =
      fun (x7485 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7485)
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_X : 'tags this -> GLenum.t) =
      fun (x7487 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7487)
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Y : 'tags this -> GLenum.t) =
      fun (x7489 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7489)
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (get_TEXTURE_CUBE_MAP_POSITIVE_Z : 'tags this -> GLenum.t) =
      fun (x7491 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7491)
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (get_TEXTURE_MAG_FILTER : 'tags this -> GLenum.t) =
      fun (x7493 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7493)
             "TEXTURE_MAG_FILTER")
    let (get_TEXTURE_MIN_FILTER : 'tags this -> GLenum.t) =
      fun (x7495 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7495)
             "TEXTURE_MIN_FILTER")
    let (get_TEXTURE_WRAP_S : 'tags this -> GLenum.t) =
      fun (x7497 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7497) "TEXTURE_WRAP_S")
    let (get_TEXTURE_WRAP_T : 'tags this -> GLenum.t) =
      fun (x7499 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7499) "TEXTURE_WRAP_T")
    let (get_TRIANGLES : 'tags this -> GLenum.t) =
      fun (x7501 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7501) "TRIANGLES")
    let (get_TRIANGLE_FAN : 'tags this -> GLenum.t) =
      fun (x7503 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7503) "TRIANGLE_FAN")
    let (get_TRIANGLE_STRIP : 'tags this -> GLenum.t) =
      fun (x7505 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7505) "TRIANGLE_STRIP")
    let (get_UNPACK_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x7507 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7507) "UNPACK_ALIGNMENT")
    let (get_UNPACK_COLORSPACE_CONVERSION_WEBGL : 'tags this -> GLenum.t) =
      fun (x7509 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7509)
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (get_UNPACK_FLIP_Y_WEBGL : 'tags this -> GLenum.t) =
      fun (x7511 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7511)
             "UNPACK_FLIP_Y_WEBGL")
    let (get_UNPACK_PREMULTIPLY_ALPHA_WEBGL : 'tags this -> GLenum.t) =
      fun (x7513 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7513)
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (get_UNSIGNED_BYTE : 'tags this -> GLenum.t) =
      fun (x7515 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7515) "UNSIGNED_BYTE")
    let (get_UNSIGNED_INT : 'tags this -> GLenum.t) =
      fun (x7517 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7517) "UNSIGNED_INT")
    let (get_UNSIGNED_SHORT : 'tags this -> GLenum.t) =
      fun (x7519 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7519) "UNSIGNED_SHORT")
    let (get_UNSIGNED_SHORT_4_4_4_4 : 'tags this -> GLenum.t) =
      fun (x7521 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7521)
             "UNSIGNED_SHORT_4_4_4_4")
    let (get_UNSIGNED_SHORT_5_5_5_1 : 'tags this -> GLenum.t) =
      fun (x7523 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7523)
             "UNSIGNED_SHORT_5_5_5_1")
    let (get_UNSIGNED_SHORT_5_6_5 : 'tags this -> GLenum.t) =
      fun (x7525 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7525)
             "UNSIGNED_SHORT_5_6_5")
    let (get_VALIDATE_STATUS : 'tags this -> GLenum.t) =
      fun (x7527 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7527) "VALIDATE_STATUS")
    let (get_VENDOR : 'tags this -> GLenum.t) =
      fun (x7529 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7529) "VENDOR")
    let (get_VERSION : 'tags this -> GLenum.t) =
      fun (x7531 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7531) "VERSION")
    let (get_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x7533 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7533)
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_ENABLED : 'tags this -> GLenum.t) =
      fun (x7535 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7535)
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (get_VERTEX_ATTRIB_ARRAY_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x7537 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7537)
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (get_VERTEX_ATTRIB_ARRAY_POINTER : 'tags this -> GLenum.t) =
      fun (x7539 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7539)
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (get_VERTEX_ATTRIB_ARRAY_SIZE : 'tags this -> GLenum.t) =
      fun (x7541 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7541)
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (get_VERTEX_ATTRIB_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x7543 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7543)
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (get_VERTEX_ATTRIB_ARRAY_TYPE : 'tags this -> GLenum.t) =
      fun (x7545 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7545)
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (get_VERTEX_SHADER : 'tags this -> GLenum.t) =
      fun (x7547 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7547) "VERTEX_SHADER")
    let (get_VIEWPORT : 'tags this -> GLenum.t) =
      fun (x7549 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7549) "VIEWPORT")
    let (get_ZERO : 'tags this -> GLenum.t) =
      fun (x7551 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7551) "ZERO")
    let (vertexAttrib1fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x7556 : 'tags this) ->
        fun ~index:(x7553 : GLuint.t) ->
          fun ~values:(x7554 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7556) "vertexAttrib1fv"
                 [|(GLuint.t_to_js x7553);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x7554)|])
    let (vertexAttrib2fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x7561 : 'tags this) ->
        fun ~index:(x7558 : GLuint.t) ->
          fun ~values:(x7559 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7561) "vertexAttrib2fv"
                 [|(GLuint.t_to_js x7558);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x7559)|])
    let (vertexAttrib3fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x7566 : 'tags this) ->
        fun ~index:(x7563 : GLuint.t) ->
          fun ~values:(x7564 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7566) "vertexAttrib3fv"
                 [|(GLuint.t_to_js x7563);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x7564)|])
    let (vertexAttrib4fv' :
      'tags this -> index:GLuint.t -> values:GLfloat.t Iterable.t_1 -> unit)
      =
      fun (x7571 : 'tags this) ->
        fun ~index:(x7568 : GLuint.t) ->
          fun ~values:(x7569 : GLfloat.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x7571) "vertexAttrib4fv"
                 [|(GLuint.t_to_js x7568);(Iterable.t_1_to_js GLfloat.t_to_js
                                             x7569)|])
    let cast_from = Obj.magic
  end
module WebGLRenderingContext =
  struct
    type t =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7574 : Ojs.t) -> t_of_js x7574
    and t_0_to_js : t_0 -> Ojs.t = fun (x7573 : t) -> t_to_js x7573
    type tags =
      [ `WebGLRenderingContext  | `WebGLRenderingContextBase 
      | `WebGLRenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7577 : Ojs.t) -> intf_of_js __tags_of_js x7577
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7575 : __tags intf) -> intf_to_js __tags_to_js x7575
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") 
             [||])
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLRenderingContext") "ZERO")
  end
module WebGLContextEventInit =
  struct
    type t = [ `EventInit  | `WebGLContextEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7580 : Ojs.t) -> t_of_js x7580
    and t_0_to_js : t_0 -> Ojs.t = fun (x7579 : t) -> t_to_js x7579
    type tags = [ `EventInit  | `WebGLContextEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLContextEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7583 : Ojs.t) -> intf_of_js __tags_of_js x7583
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7581 : __tags intf) -> intf_to_js __tags_to_js x7581
    let (get_statusMessage : 'tags this -> string) =
      fun (x7585 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7585) "statusMessage")
    let (set_statusMessage : 'tags this -> string -> unit) =
      fun (x7587 : 'tags this) ->
        fun (x7588 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x7587) "statusMessage"
            (Ojs.string_to_js x7588)
    let cast_from = Obj.magic
  end
module WebGLContextEvent =
  struct
    type t = [ `Event  | `WebGLContextEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7591 : Ojs.t) -> t_of_js x7591
    and t_0_to_js : t_0 -> Ojs.t = fun (x7590 : t) -> t_to_js x7590
    type tags = [ `Event  | `WebGLContextEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLContextEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7594 : Ojs.t) -> intf_of_js __tags_of_js x7594
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7592 : __tags intf) -> intf_to_js __tags_to_js x7592
    let (get_statusMessage : 'tags this -> string) =
      fun (x7596 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x7596) "statusMessage")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent") "prototype")
    let (create :
      type_:string -> ?eventInit:WebGLContextEventInit.t -> unit -> t) =
      fun ~type_:(x7598 : string) ->
        fun ?eventInit:(x7599 : WebGLContextEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "WebGLContextEvent")
                 (let x7600 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x7600 "push" [|(Ojs.string_to_js x7598)|]);
                  (match x7599 with
                   | Some x7601 ->
                       ignore
                         (Ojs.call x7600 "push"
                            [|(WebGLContextEventInit.t_to_js x7601)|])
                   | None -> ());
                  x7600))
  end
module WebGL2RenderingContextOverloads =
  struct
    type t = [ `WebGL2RenderingContextOverloads ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x7603 : Ojs.t) -> t_of_js x7603
    and t_0_to_js : t_0 -> Ojs.t = fun (x7602 : t) -> t_to_js x7602
    type tags = [ `WebGL2RenderingContextOverloads ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextOverloads ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x7606 : Ojs.t) -> intf_of_js __tags_of_js x7606
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x7604 : __tags intf) -> intf_to_js __tags_to_js x7604
    let (bufferData :
      'tags this ->
        target:GLenum.t -> size:GLsizeiptr.t -> usage:GLenum.t -> unit)
      =
      fun (x7611 : 'tags this) ->
        fun ~target:(x7608 : GLenum.t) ->
          fun ~size:(x7609 : GLsizeiptr.t) ->
            fun ~usage:(x7610 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7611) "bufferData"
                   [|(GLenum.t_to_js x7608);(GLsizeiptr.t_to_js x7609);(
                     GLenum.t_to_js x7610)|])
    let (bufferData' :
      'tags this ->
        target:GLenum.t ->
          srcData:BufferSource.t or_null -> usage:GLenum.t -> unit)
      =
      fun (x7617 : 'tags this) ->
        fun ~target:(x7613 : GLenum.t) ->
          fun ~srcData:(x7614 : BufferSource.t or_null) ->
            fun ~usage:(x7616 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7617) "bufferData"
                   [|(GLenum.t_to_js x7613);(or_null_to_js
                                               BufferSource.t_to_js x7614);(
                     GLenum.t_to_js x7616)|])
    let (bufferData'' :
      'tags this ->
        target:GLenum.t ->
          srcData:ArrayBufferView.t_0 ->
            usage:GLenum.t ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x7626 : 'tags this) ->
        fun ~target:(x7619 : GLenum.t) ->
          fun ~srcData:(x7620 : ArrayBufferView.t_0) ->
            fun ~usage:(x7621 : GLenum.t) ->
              fun ~srcOffset:(x7622 : GLuint.t) ->
                fun ?length:(x7623 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x7628 = this_to_js Obj.magic x7626 in
                       Ojs.call (Ojs.get_prop_ascii x7628 "bufferData")
                         "apply"
                         [|x7628;((let x7624 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x7624 "push"
                                        [|(GLenum.t_to_js x7619)|]);
                                   ignore
                                     (Ojs.call x7624 "push"
                                        [|(ArrayBufferView.t_0_to_js x7620)|]);
                                   ignore
                                     (Ojs.call x7624 "push"
                                        [|(GLenum.t_to_js x7621)|]);
                                   ignore
                                     (Ojs.call x7624 "push"
                                        [|(GLuint.t_to_js x7622)|]);
                                   (match x7623 with
                                    | Some x7625 ->
                                        ignore
                                          (Ojs.call x7624 "push"
                                             [|(GLuint.t_to_js x7625)|])
                                    | None -> ());
                                   x7624))|])
    let (bufferSubData :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t -> srcData:BufferSource.t -> unit)
      =
      fun (x7632 : 'tags this) ->
        fun ~target:(x7629 : GLenum.t) ->
          fun ~dstByteOffset:(x7630 : GLintptr.t) ->
            fun ~srcData:(x7631 : BufferSource.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x7632) "bufferSubData"
                   [|(GLenum.t_to_js x7629);(GLintptr.t_to_js x7630);(
                     BufferSource.t_to_js x7631)|])
    let (bufferSubData' :
      'tags this ->
        target:GLenum.t ->
          dstByteOffset:GLintptr.t ->
            srcData:ArrayBufferView.t_0 ->
              srcOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x7641 : 'tags this) ->
        fun ~target:(x7634 : GLenum.t) ->
          fun ~dstByteOffset:(x7635 : GLintptr.t) ->
            fun ~srcData:(x7636 : ArrayBufferView.t_0) ->
              fun ~srcOffset:(x7637 : GLuint.t) ->
                fun ?length:(x7638 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x7643 = this_to_js Obj.magic x7641 in
                       Ojs.call (Ojs.get_prop_ascii x7643 "bufferSubData")
                         "apply"
                         [|x7643;((let x7639 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x7639 "push"
                                        [|(GLenum.t_to_js x7634)|]);
                                   ignore
                                     (Ojs.call x7639 "push"
                                        [|(GLintptr.t_to_js x7635)|]);
                                   ignore
                                     (Ojs.call x7639 "push"
                                        [|(ArrayBufferView.t_0_to_js x7636)|]);
                                   ignore
                                     (Ojs.call x7639 "push"
                                        [|(GLuint.t_to_js x7637)|]);
                                   (match x7638 with
                                    | Some x7640 ->
                                        ignore
                                          (Ojs.call x7639 "push"
                                             [|(GLuint.t_to_js x7640)|])
                                    | None -> ());
                                   x7639))|])
    let (compressedTexImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x7652 : 'tags this) ->
        fun ~target:(x7644 : GLenum.t) ->
          fun ~level:(x7645 : GLint.t) ->
            fun ~internalformat:(x7646 : GLenum.t) ->
              fun ~width:(x7647 : GLsizei.t) ->
                fun ~height:(x7648 : GLsizei.t) ->
                  fun ~border:(x7649 : GLint.t) ->
                    fun ~imageSize:(x7650 : GLsizei.t) ->
                      fun ~offset:(x7651 : GLintptr.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x7652)
                             "compressedTexImage2D"
                             [|(GLenum.t_to_js x7644);(GLint.t_to_js x7645);(
                               GLenum.t_to_js x7646);(GLsizei.t_to_js x7647);(
                               GLsizei.t_to_js x7648);(GLint.t_to_js x7649);(
                               GLsizei.t_to_js x7650);(GLintptr.t_to_js x7651)|])
    let (compressedTexImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    srcData:ArrayBufferView.t_0 ->
                      ?srcOffset:GLuint.t ->
                        ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x7666 : 'tags this) ->
        fun ~target:(x7654 : GLenum.t) ->
          fun ~level:(x7655 : GLint.t) ->
            fun ~internalformat:(x7656 : GLenum.t) ->
              fun ~width:(x7657 : GLsizei.t) ->
                fun ~height:(x7658 : GLsizei.t) ->
                  fun ~border:(x7659 : GLint.t) ->
                    fun ~srcData:(x7660 : ArrayBufferView.t_0) ->
                      fun ?srcOffset:(x7661 : GLuint.t option) ->
                        fun ?srcLengthOverride:(x7662 : GLuint.t option) ->
                          fun () ->
                            ignore
                              (let x7668 = this_to_js Obj.magic x7666 in
                               Ojs.call
                                 (Ojs.get_prop_ascii x7668
                                    "compressedTexImage2D") "apply"
                                 [|x7668;((let x7663 =
                                             Ojs.new_obj
                                               (Ojs.get_prop_ascii Ojs.global
                                                  "Array") [||] in
                                           ignore
                                             (Ojs.call x7663 "push"
                                                [|(GLenum.t_to_js x7654)|]);
                                           ignore
                                             (Ojs.call x7663 "push"
                                                [|(GLint.t_to_js x7655)|]);
                                           ignore
                                             (Ojs.call x7663 "push"
                                                [|(GLenum.t_to_js x7656)|]);
                                           ignore
                                             (Ojs.call x7663 "push"
                                                [|(GLsizei.t_to_js x7657)|]);
                                           ignore
                                             (Ojs.call x7663 "push"
                                                [|(GLsizei.t_to_js x7658)|]);
                                           ignore
                                             (Ojs.call x7663 "push"
                                                [|(GLint.t_to_js x7659)|]);
                                           ignore
                                             (Ojs.call x7663 "push"
                                                [|(ArrayBufferView.t_0_to_js
                                                     x7660)|]);
                                           (match x7661 with
                                            | Some x7665 ->
                                                ignore
                                                  (Ojs.call x7663 "push"
                                                     [|(GLuint.t_to_js x7665)|])
                                            | None -> ());
                                           (match x7662 with
                                            | Some x7664 ->
                                                ignore
                                                  (Ojs.call x7663 "push"
                                                     [|(GLuint.t_to_js x7664)|])
                                            | None -> ());
                                           x7663))|])
    let (compressedTexSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x7678 : 'tags this) ->
        fun ~target:(x7669 : GLenum.t) ->
          fun ~level:(x7670 : GLint.t) ->
            fun ~xoffset:(x7671 : GLint.t) ->
              fun ~yoffset:(x7672 : GLint.t) ->
                fun ~width:(x7673 : GLsizei.t) ->
                  fun ~height:(x7674 : GLsizei.t) ->
                    fun ~format:(x7675 : GLenum.t) ->
                      fun ~imageSize:(x7676 : GLsizei.t) ->
                        fun ~offset:(x7677 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x7678)
                               "compressedTexSubImage2D"
                               [|(GLenum.t_to_js x7669);(GLint.t_to_js x7670);(
                                 GLint.t_to_js x7671);(GLint.t_to_js x7672);(
                                 GLsizei.t_to_js x7673);(GLsizei.t_to_js
                                                           x7674);(GLenum.t_to_js
                                                                    x7675);(
                                 GLsizei.t_to_js x7676);(GLintptr.t_to_js
                                                           x7677)|])
    let (compressedTexSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x7693 : 'tags this) ->
        fun ~target:(x7680 : GLenum.t) ->
          fun ~level:(x7681 : GLint.t) ->
            fun ~xoffset:(x7682 : GLint.t) ->
              fun ~yoffset:(x7683 : GLint.t) ->
                fun ~width:(x7684 : GLsizei.t) ->
                  fun ~height:(x7685 : GLsizei.t) ->
                    fun ~format:(x7686 : GLenum.t) ->
                      fun ~srcData:(x7687 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x7688 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x7689 : GLuint.t option) ->
                            fun () ->
                              ignore
                                (let x7695 = this_to_js Obj.magic x7693 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x7695
                                      "compressedTexSubImage2D") "apply"
                                   [|x7695;((let x7690 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             ignore
                                               (Ojs.call x7690 "push"
                                                  [|(GLenum.t_to_js x7680)|]);
                                             ignore
                                               (Ojs.call x7690 "push"
                                                  [|(GLint.t_to_js x7681)|]);
                                             ignore
                                               (Ojs.call x7690 "push"
                                                  [|(GLint.t_to_js x7682)|]);
                                             ignore
                                               (Ojs.call x7690 "push"
                                                  [|(GLint.t_to_js x7683)|]);
                                             ignore
                                               (Ojs.call x7690 "push"
                                                  [|(GLsizei.t_to_js x7684)|]);
                                             ignore
                                               (Ojs.call x7690 "push"
                                                  [|(GLsizei.t_to_js x7685)|]);
                                             ignore
                                               (Ojs.call x7690 "push"
                                                  [|(GLenum.t_to_js x7686)|]);
                                             ignore
                                               (Ojs.call x7690 "push"
                                                  [|(ArrayBufferView.t_0_to_js
                                                       x7687)|]);
                                             (match x7688 with
                                              | Some x7692 ->
                                                  ignore
                                                    (Ojs.call x7690 "push"
                                                       [|(GLuint.t_to_js
                                                            x7692)|])
                                              | None -> ());
                                             (match x7689 with
                                              | Some x7691 ->
                                                  ignore
                                                    (Ojs.call x7690 "push"
                                                       [|(GLuint.t_to_js
                                                            x7691)|])
                                              | None -> ());
                                             x7690))|])
    let (readPixels :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x7704 : 'tags this) ->
        fun ~x:(x7696 : GLint.t) ->
          fun ~y:(x7697 : GLint.t) ->
            fun ~width:(x7698 : GLsizei.t) ->
              fun ~height:(x7699 : GLsizei.t) ->
                fun ~format:(x7700 : GLenum.t) ->
                  fun ~type_:(x7701 : GLenum.t) ->
                    fun ~dstData:(x7702 : ArrayBufferView.t_0 or_null) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x7704) "readPixels"
                           [|(GLint.t_to_js x7696);(GLint.t_to_js x7697);(
                             GLsizei.t_to_js x7698);(GLsizei.t_to_js x7699);(
                             GLenum.t_to_js x7700);(GLenum.t_to_js x7701);(
                             or_null_to_js ArrayBufferView.t_0_to_js x7702)|])
    let (readPixels' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x7713 : 'tags this) ->
        fun ~x:(x7706 : GLint.t) ->
          fun ~y:(x7707 : GLint.t) ->
            fun ~width:(x7708 : GLsizei.t) ->
              fun ~height:(x7709 : GLsizei.t) ->
                fun ~format:(x7710 : GLenum.t) ->
                  fun ~type_:(x7711 : GLenum.t) ->
                    fun ~offset:(x7712 : GLintptr.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x7713) "readPixels"
                           [|(GLint.t_to_js x7706);(GLint.t_to_js x7707);(
                             GLsizei.t_to_js x7708);(GLsizei.t_to_js x7709);(
                             GLenum.t_to_js x7710);(GLenum.t_to_js x7711);(
                             GLintptr.t_to_js x7712)|])
    let (readPixels'' :
      'tags this ->
        x:GLint.t ->
          y:GLint.t ->
            width:GLsizei.t ->
              height:GLsizei.t ->
                format:GLenum.t ->
                  type_:GLenum.t ->
                    dstData:ArrayBufferView.t_0 -> dstOffset:GLuint.t -> unit)
      =
      fun (x7723 : 'tags this) ->
        fun ~x:(x7715 : GLint.t) ->
          fun ~y:(x7716 : GLint.t) ->
            fun ~width:(x7717 : GLsizei.t) ->
              fun ~height:(x7718 : GLsizei.t) ->
                fun ~format:(x7719 : GLenum.t) ->
                  fun ~type_:(x7720 : GLenum.t) ->
                    fun ~dstData:(x7721 : ArrayBufferView.t_0) ->
                      fun ~dstOffset:(x7722 : GLuint.t) ->
                        ignore
                          (Ojs.call (this_to_js Obj.magic x7723) "readPixels"
                             [|(GLint.t_to_js x7715);(GLint.t_to_js x7716);(
                               GLsizei.t_to_js x7717);(GLsizei.t_to_js x7718);(
                               GLenum.t_to_js x7719);(GLenum.t_to_js x7720);(
                               ArrayBufferView.t_0_to_js x7721);(GLuint.t_to_js
                                                                   x7722)|])
    let (texImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x7735 : 'tags this) ->
        fun ~target:(x7725 : GLenum.t) ->
          fun ~level:(x7726 : GLint.t) ->
            fun ~internalformat:(x7727 : GLint.t) ->
              fun ~width:(x7728 : GLsizei.t) ->
                fun ~height:(x7729 : GLsizei.t) ->
                  fun ~border:(x7730 : GLint.t) ->
                    fun ~format:(x7731 : GLenum.t) ->
                      fun ~type_:(x7732 : GLenum.t) ->
                        fun ~pixels:(x7733 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x7735)
                               "texImage2D"
                               [|(GLenum.t_to_js x7725);(GLint.t_to_js x7726);(
                                 GLint.t_to_js x7727);(GLsizei.t_to_js x7728);(
                                 GLsizei.t_to_js x7729);(GLint.t_to_js x7730);(
                                 GLenum.t_to_js x7731);(GLenum.t_to_js x7732);(
                                 or_null_to_js ArrayBufferView.t_0_to_js
                                   x7733)|])
    let (texImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              format:GLenum.t ->
                type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x7743 : 'tags this) ->
        fun ~target:(x7737 : GLenum.t) ->
          fun ~level:(x7738 : GLint.t) ->
            fun ~internalformat:(x7739 : GLint.t) ->
              fun ~format:(x7740 : GLenum.t) ->
                fun ~type_:(x7741 : GLenum.t) ->
                  fun ~source:(x7742 : TexImageSource.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x7743) "texImage2D"
                         [|(GLenum.t_to_js x7737);(GLint.t_to_js x7738);(
                           GLint.t_to_js x7739);(GLenum.t_to_js x7740);(
                           GLenum.t_to_js x7741);(TexImageSource.t_to_js
                                                    x7742)|])
    let (texImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x7754 : 'tags this) ->
        fun ~target:(x7745 : GLenum.t) ->
          fun ~level:(x7746 : GLint.t) ->
            fun ~internalformat:(x7747 : GLint.t) ->
              fun ~width:(x7748 : GLsizei.t) ->
                fun ~height:(x7749 : GLsizei.t) ->
                  fun ~border:(x7750 : GLint.t) ->
                    fun ~format:(x7751 : GLenum.t) ->
                      fun ~type_:(x7752 : GLenum.t) ->
                        fun ~pboOffset:(x7753 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x7754)
                               "texImage2D"
                               [|(GLenum.t_to_js x7745);(GLint.t_to_js x7746);(
                                 GLint.t_to_js x7747);(GLsizei.t_to_js x7748);(
                                 GLsizei.t_to_js x7749);(GLint.t_to_js x7750);(
                                 GLenum.t_to_js x7751);(GLenum.t_to_js x7752);(
                                 GLintptr.t_to_js x7753)|])
    let (texImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x7765 : 'tags this) ->
        fun ~target:(x7756 : GLenum.t) ->
          fun ~level:(x7757 : GLint.t) ->
            fun ~internalformat:(x7758 : GLint.t) ->
              fun ~width:(x7759 : GLsizei.t) ->
                fun ~height:(x7760 : GLsizei.t) ->
                  fun ~border:(x7761 : GLint.t) ->
                    fun ~format:(x7762 : GLenum.t) ->
                      fun ~type_:(x7763 : GLenum.t) ->
                        fun ~source:(x7764 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x7765)
                               "texImage2D"
                               [|(GLenum.t_to_js x7756);(GLint.t_to_js x7757);(
                                 GLint.t_to_js x7758);(GLsizei.t_to_js x7759);(
                                 GLsizei.t_to_js x7760);(GLint.t_to_js x7761);(
                                 GLenum.t_to_js x7762);(GLenum.t_to_js x7763);(
                                 TexImageSource.t_to_js x7764)|])
    let (texImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  border:GLint.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x7777 : 'tags this) ->
        fun ~target:(x7767 : GLenum.t) ->
          fun ~level:(x7768 : GLint.t) ->
            fun ~internalformat:(x7769 : GLint.t) ->
              fun ~width:(x7770 : GLsizei.t) ->
                fun ~height:(x7771 : GLsizei.t) ->
                  fun ~border:(x7772 : GLint.t) ->
                    fun ~format:(x7773 : GLenum.t) ->
                      fun ~type_:(x7774 : GLenum.t) ->
                        fun ~srcData:(x7775 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x7776 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x7777)
                                 "texImage2D"
                                 [|(GLenum.t_to_js x7767);(GLint.t_to_js
                                                             x7768);(
                                   GLint.t_to_js x7769);(GLsizei.t_to_js
                                                           x7770);(GLsizei.t_to_js
                                                                    x7771);(
                                   GLint.t_to_js x7772);(GLenum.t_to_js x7773);(
                                   GLenum.t_to_js x7774);(ArrayBufferView.t_0_to_js
                                                            x7775);(GLuint.t_to_js
                                                                    x7776)|])
    let (texSubImage2D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        pixels:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x7789 : 'tags this) ->
        fun ~target:(x7779 : GLenum.t) ->
          fun ~level:(x7780 : GLint.t) ->
            fun ~xoffset:(x7781 : GLint.t) ->
              fun ~yoffset:(x7782 : GLint.t) ->
                fun ~width:(x7783 : GLsizei.t) ->
                  fun ~height:(x7784 : GLsizei.t) ->
                    fun ~format:(x7785 : GLenum.t) ->
                      fun ~type_:(x7786 : GLenum.t) ->
                        fun ~pixels:(x7787 : ArrayBufferView.t_0 or_null) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x7789)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x7779);(GLint.t_to_js x7780);(
                                 GLint.t_to_js x7781);(GLint.t_to_js x7782);(
                                 GLsizei.t_to_js x7783);(GLsizei.t_to_js
                                                           x7784);(GLenum.t_to_js
                                                                    x7785);(
                                 GLenum.t_to_js x7786);(or_null_to_js
                                                          ArrayBufferView.t_0_to_js
                                                          x7787)|])
    let (texSubImage2D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                format:GLenum.t ->
                  type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x7798 : 'tags this) ->
        fun ~target:(x7791 : GLenum.t) ->
          fun ~level:(x7792 : GLint.t) ->
            fun ~xoffset:(x7793 : GLint.t) ->
              fun ~yoffset:(x7794 : GLint.t) ->
                fun ~format:(x7795 : GLenum.t) ->
                  fun ~type_:(x7796 : GLenum.t) ->
                    fun ~source:(x7797 : TexImageSource.t) ->
                      ignore
                        (Ojs.call (this_to_js Obj.magic x7798)
                           "texSubImage2D"
                           [|(GLenum.t_to_js x7791);(GLint.t_to_js x7792);(
                             GLint.t_to_js x7793);(GLint.t_to_js x7794);(
                             GLenum.t_to_js x7795);(GLenum.t_to_js x7796);(
                             TexImageSource.t_to_js x7797)|])
    let (texSubImage2D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x7809 : 'tags this) ->
        fun ~target:(x7800 : GLenum.t) ->
          fun ~level:(x7801 : GLint.t) ->
            fun ~xoffset:(x7802 : GLint.t) ->
              fun ~yoffset:(x7803 : GLint.t) ->
                fun ~width:(x7804 : GLsizei.t) ->
                  fun ~height:(x7805 : GLsizei.t) ->
                    fun ~format:(x7806 : GLenum.t) ->
                      fun ~type_:(x7807 : GLenum.t) ->
                        fun ~pboOffset:(x7808 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x7809)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x7800);(GLint.t_to_js x7801);(
                                 GLint.t_to_js x7802);(GLint.t_to_js x7803);(
                                 GLsizei.t_to_js x7804);(GLsizei.t_to_js
                                                           x7805);(GLenum.t_to_js
                                                                    x7806);(
                                 GLenum.t_to_js x7807);(GLintptr.t_to_js
                                                          x7808)|])
    let (texSubImage2D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x7820 : 'tags this) ->
        fun ~target:(x7811 : GLenum.t) ->
          fun ~level:(x7812 : GLint.t) ->
            fun ~xoffset:(x7813 : GLint.t) ->
              fun ~yoffset:(x7814 : GLint.t) ->
                fun ~width:(x7815 : GLsizei.t) ->
                  fun ~height:(x7816 : GLsizei.t) ->
                    fun ~format:(x7817 : GLenum.t) ->
                      fun ~type_:(x7818 : GLenum.t) ->
                        fun ~source:(x7819 : TexImageSource.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x7820)
                               "texSubImage2D"
                               [|(GLenum.t_to_js x7811);(GLint.t_to_js x7812);(
                                 GLint.t_to_js x7813);(GLint.t_to_js x7814);(
                                 GLsizei.t_to_js x7815);(GLsizei.t_to_js
                                                           x7816);(GLenum.t_to_js
                                                                    x7817);(
                                 GLenum.t_to_js x7818);(TexImageSource.t_to_js
                                                          x7819)|])
    let (texSubImage2D'''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                width:GLsizei.t ->
                  height:GLsizei.t ->
                    format:GLenum.t ->
                      type_:GLenum.t ->
                        srcData:ArrayBufferView.t_0 ->
                          srcOffset:GLuint.t -> unit)
      =
      fun (x7832 : 'tags this) ->
        fun ~target:(x7822 : GLenum.t) ->
          fun ~level:(x7823 : GLint.t) ->
            fun ~xoffset:(x7824 : GLint.t) ->
              fun ~yoffset:(x7825 : GLint.t) ->
                fun ~width:(x7826 : GLsizei.t) ->
                  fun ~height:(x7827 : GLsizei.t) ->
                    fun ~format:(x7828 : GLenum.t) ->
                      fun ~type_:(x7829 : GLenum.t) ->
                        fun ~srcData:(x7830 : ArrayBufferView.t_0) ->
                          fun ~srcOffset:(x7831 : GLuint.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x7832)
                                 "texSubImage2D"
                                 [|(GLenum.t_to_js x7822);(GLint.t_to_js
                                                             x7823);(
                                   GLint.t_to_js x7824);(GLint.t_to_js x7825);(
                                   GLsizei.t_to_js x7826);(GLsizei.t_to_js
                                                             x7827);(
                                   GLenum.t_to_js x7828);(GLenum.t_to_js
                                                            x7829);(ArrayBufferView.t_0_to_js
                                                                    x7830);(
                                   GLuint.t_to_js x7831)|])
    let (uniform1fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x7842 : 'tags this) ->
        fun ~location:(x7834 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x7835 : Float32List.t) ->
            fun ?srcOffset:(x7836 : GLuint.t option) ->
              fun ?srcLength:(x7837 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x7844 = this_to_js Obj.magic x7842 in
                     Ojs.call (Ojs.get_prop_ascii x7844 "uniform1fv") "apply"
                       [|x7844;((let x7838 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x7838 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x7834)|]);
                                 ignore
                                   (Ojs.call x7838 "push"
                                      [|(Float32List.t_to_js x7835)|]);
                                 (match x7836 with
                                  | Some x7840 ->
                                      ignore
                                        (Ojs.call x7838 "push"
                                           [|(GLuint.t_to_js x7840)|])
                                  | None -> ());
                                 (match x7837 with
                                  | Some x7839 ->
                                      ignore
                                        (Ojs.call x7838 "push"
                                           [|(GLuint.t_to_js x7839)|])
                                  | None -> ());
                                 x7838))|])
    let (uniform1iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x7853 : 'tags this) ->
        fun ~location:(x7845 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x7846 : Int32List.t) ->
            fun ?srcOffset:(x7847 : GLuint.t option) ->
              fun ?srcLength:(x7848 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x7855 = this_to_js Obj.magic x7853 in
                     Ojs.call (Ojs.get_prop_ascii x7855 "uniform1iv") "apply"
                       [|x7855;((let x7849 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x7849 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x7845)|]);
                                 ignore
                                   (Ojs.call x7849 "push"
                                      [|(Int32List.t_to_js x7846)|]);
                                 (match x7847 with
                                  | Some x7851 ->
                                      ignore
                                        (Ojs.call x7849 "push"
                                           [|(GLuint.t_to_js x7851)|])
                                  | None -> ());
                                 (match x7848 with
                                  | Some x7850 ->
                                      ignore
                                        (Ojs.call x7849 "push"
                                           [|(GLuint.t_to_js x7850)|])
                                  | None -> ());
                                 x7849))|])
    let (uniform2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x7864 : 'tags this) ->
        fun ~location:(x7856 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x7857 : Float32List.t) ->
            fun ?srcOffset:(x7858 : GLuint.t option) ->
              fun ?srcLength:(x7859 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x7866 = this_to_js Obj.magic x7864 in
                     Ojs.call (Ojs.get_prop_ascii x7866 "uniform2fv") "apply"
                       [|x7866;((let x7860 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x7860 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x7856)|]);
                                 ignore
                                   (Ojs.call x7860 "push"
                                      [|(Float32List.t_to_js x7857)|]);
                                 (match x7858 with
                                  | Some x7862 ->
                                      ignore
                                        (Ojs.call x7860 "push"
                                           [|(GLuint.t_to_js x7862)|])
                                  | None -> ());
                                 (match x7859 with
                                  | Some x7861 ->
                                      ignore
                                        (Ojs.call x7860 "push"
                                           [|(GLuint.t_to_js x7861)|])
                                  | None -> ());
                                 x7860))|])
    let (uniform2iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x7875 : 'tags this) ->
        fun ~location:(x7867 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x7868 : Int32List.t) ->
            fun ?srcOffset:(x7869 : GLuint.t option) ->
              fun ?srcLength:(x7870 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x7877 = this_to_js Obj.magic x7875 in
                     Ojs.call (Ojs.get_prop_ascii x7877 "uniform2iv") "apply"
                       [|x7877;((let x7871 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x7871 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x7867)|]);
                                 ignore
                                   (Ojs.call x7871 "push"
                                      [|(Int32List.t_to_js x7868)|]);
                                 (match x7869 with
                                  | Some x7873 ->
                                      ignore
                                        (Ojs.call x7871 "push"
                                           [|(GLuint.t_to_js x7873)|])
                                  | None -> ());
                                 (match x7870 with
                                  | Some x7872 ->
                                      ignore
                                        (Ojs.call x7871 "push"
                                           [|(GLuint.t_to_js x7872)|])
                                  | None -> ());
                                 x7871))|])
    let (uniform3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x7886 : 'tags this) ->
        fun ~location:(x7878 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x7879 : Float32List.t) ->
            fun ?srcOffset:(x7880 : GLuint.t option) ->
              fun ?srcLength:(x7881 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x7888 = this_to_js Obj.magic x7886 in
                     Ojs.call (Ojs.get_prop_ascii x7888 "uniform3fv") "apply"
                       [|x7888;((let x7882 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x7882 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x7878)|]);
                                 ignore
                                   (Ojs.call x7882 "push"
                                      [|(Float32List.t_to_js x7879)|]);
                                 (match x7880 with
                                  | Some x7884 ->
                                      ignore
                                        (Ojs.call x7882 "push"
                                           [|(GLuint.t_to_js x7884)|])
                                  | None -> ());
                                 (match x7881 with
                                  | Some x7883 ->
                                      ignore
                                        (Ojs.call x7882 "push"
                                           [|(GLuint.t_to_js x7883)|])
                                  | None -> ());
                                 x7882))|])
    let (uniform3iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x7897 : 'tags this) ->
        fun ~location:(x7889 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x7890 : Int32List.t) ->
            fun ?srcOffset:(x7891 : GLuint.t option) ->
              fun ?srcLength:(x7892 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x7899 = this_to_js Obj.magic x7897 in
                     Ojs.call (Ojs.get_prop_ascii x7899 "uniform3iv") "apply"
                       [|x7899;((let x7893 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x7893 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x7889)|]);
                                 ignore
                                   (Ojs.call x7893 "push"
                                      [|(Int32List.t_to_js x7890)|]);
                                 (match x7891 with
                                  | Some x7895 ->
                                      ignore
                                        (Ojs.call x7893 "push"
                                           [|(GLuint.t_to_js x7895)|])
                                  | None -> ());
                                 (match x7892 with
                                  | Some x7894 ->
                                      ignore
                                        (Ojs.call x7893 "push"
                                           [|(GLuint.t_to_js x7894)|])
                                  | None -> ());
                                 x7893))|])
    let (uniform4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Float32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x7908 : 'tags this) ->
        fun ~location:(x7900 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x7901 : Float32List.t) ->
            fun ?srcOffset:(x7902 : GLuint.t option) ->
              fun ?srcLength:(x7903 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x7910 = this_to_js Obj.magic x7908 in
                     Ojs.call (Ojs.get_prop_ascii x7910 "uniform4fv") "apply"
                       [|x7910;((let x7904 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x7904 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x7900)|]);
                                 ignore
                                   (Ojs.call x7904 "push"
                                      [|(Float32List.t_to_js x7901)|]);
                                 (match x7902 with
                                  | Some x7906 ->
                                      ignore
                                        (Ojs.call x7904 "push"
                                           [|(GLuint.t_to_js x7906)|])
                                  | None -> ());
                                 (match x7903 with
                                  | Some x7905 ->
                                      ignore
                                        (Ojs.call x7904 "push"
                                           [|(GLuint.t_to_js x7905)|])
                                  | None -> ());
                                 x7904))|])
    let (uniform4iv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Int32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x7919 : 'tags this) ->
        fun ~location:(x7911 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x7912 : Int32List.t) ->
            fun ?srcOffset:(x7913 : GLuint.t option) ->
              fun ?srcLength:(x7914 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x7921 = this_to_js Obj.magic x7919 in
                     Ojs.call (Ojs.get_prop_ascii x7921 "uniform4iv") "apply"
                       [|x7921;((let x7915 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x7915 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x7911)|]);
                                 ignore
                                   (Ojs.call x7915 "push"
                                      [|(Int32List.t_to_js x7912)|]);
                                 (match x7913 with
                                  | Some x7917 ->
                                      ignore
                                        (Ojs.call x7915 "push"
                                           [|(GLuint.t_to_js x7917)|])
                                  | None -> ());
                                 (match x7914 with
                                  | Some x7916 ->
                                      ignore
                                        (Ojs.call x7915 "push"
                                           [|(GLuint.t_to_js x7916)|])
                                  | None -> ());
                                 x7915))|])
    let (uniformMatrix2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x7931 : 'tags this) ->
        fun ~location:(x7922 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x7923 : GLboolean.t) ->
            fun ~data:(x7924 : Float32List.t) ->
              fun ?srcOffset:(x7925 : GLuint.t option) ->
                fun ?srcLength:(x7926 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x7933 = this_to_js Obj.magic x7931 in
                       Ojs.call (Ojs.get_prop_ascii x7933 "uniformMatrix2fv")
                         "apply"
                         [|x7933;((let x7927 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x7927 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x7922)|]);
                                   ignore
                                     (Ojs.call x7927 "push"
                                        [|(GLboolean.t_to_js x7923)|]);
                                   ignore
                                     (Ojs.call x7927 "push"
                                        [|(Float32List.t_to_js x7924)|]);
                                   (match x7925 with
                                    | Some x7929 ->
                                        ignore
                                          (Ojs.call x7927 "push"
                                             [|(GLuint.t_to_js x7929)|])
                                    | None -> ());
                                   (match x7926 with
                                    | Some x7928 ->
                                        ignore
                                          (Ojs.call x7927 "push"
                                             [|(GLuint.t_to_js x7928)|])
                                    | None -> ());
                                   x7927))|])
    let (uniformMatrix3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x7943 : 'tags this) ->
        fun ~location:(x7934 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x7935 : GLboolean.t) ->
            fun ~data:(x7936 : Float32List.t) ->
              fun ?srcOffset:(x7937 : GLuint.t option) ->
                fun ?srcLength:(x7938 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x7945 = this_to_js Obj.magic x7943 in
                       Ojs.call (Ojs.get_prop_ascii x7945 "uniformMatrix3fv")
                         "apply"
                         [|x7945;((let x7939 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x7939 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x7934)|]);
                                   ignore
                                     (Ojs.call x7939 "push"
                                        [|(GLboolean.t_to_js x7935)|]);
                                   ignore
                                     (Ojs.call x7939 "push"
                                        [|(Float32List.t_to_js x7936)|]);
                                   (match x7937 with
                                    | Some x7941 ->
                                        ignore
                                          (Ojs.call x7939 "push"
                                             [|(GLuint.t_to_js x7941)|])
                                    | None -> ());
                                   (match x7938 with
                                    | Some x7940 ->
                                        ignore
                                          (Ojs.call x7939 "push"
                                             [|(GLuint.t_to_js x7940)|])
                                    | None -> ());
                                   x7939))|])
    let (uniformMatrix4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x7955 : 'tags this) ->
        fun ~location:(x7946 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x7947 : GLboolean.t) ->
            fun ~data:(x7948 : Float32List.t) ->
              fun ?srcOffset:(x7949 : GLuint.t option) ->
                fun ?srcLength:(x7950 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x7957 = this_to_js Obj.magic x7955 in
                       Ojs.call (Ojs.get_prop_ascii x7957 "uniformMatrix4fv")
                         "apply"
                         [|x7957;((let x7951 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x7951 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x7946)|]);
                                   ignore
                                     (Ojs.call x7951 "push"
                                        [|(GLboolean.t_to_js x7947)|]);
                                   ignore
                                     (Ojs.call x7951 "push"
                                        [|(Float32List.t_to_js x7948)|]);
                                   (match x7949 with
                                    | Some x7953 ->
                                        ignore
                                          (Ojs.call x7951 "push"
                                             [|(GLuint.t_to_js x7953)|])
                                    | None -> ());
                                   (match x7950 with
                                    | Some x7952 ->
                                        ignore
                                          (Ojs.call x7951 "push"
                                             [|(GLuint.t_to_js x7952)|])
                                    | None -> ());
                                   x7951))|])
    let (uniform1fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x7967 : 'tags this) ->
        fun ~location:(x7958 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x7959 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x7960 : GLuint.t option) ->
              fun ?srcLength:(x7961 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x7969 = this_to_js Obj.magic x7967 in
                     Ojs.call (Ojs.get_prop_ascii x7969 "uniform1fv") "apply"
                       [|x7969;((let x7962 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x7962 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x7958)|]);
                                 ignore
                                   (Ojs.call x7962 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x7959)|]);
                                 (match x7960 with
                                  | Some x7964 ->
                                      ignore
                                        (Ojs.call x7962 "push"
                                           [|(GLuint.t_to_js x7964)|])
                                  | None -> ());
                                 (match x7961 with
                                  | Some x7963 ->
                                      ignore
                                        (Ojs.call x7962 "push"
                                           [|(GLuint.t_to_js x7963)|])
                                  | None -> ());
                                 x7962))|])
    let (uniform1iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x7979 : 'tags this) ->
        fun ~location:(x7970 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x7971 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x7972 : GLuint.t option) ->
              fun ?srcLength:(x7973 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x7981 = this_to_js Obj.magic x7979 in
                     Ojs.call (Ojs.get_prop_ascii x7981 "uniform1iv") "apply"
                       [|x7981;((let x7974 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x7974 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x7970)|]);
                                 ignore
                                   (Ojs.call x7974 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x7971)|]);
                                 (match x7972 with
                                  | Some x7976 ->
                                      ignore
                                        (Ojs.call x7974 "push"
                                           [|(GLuint.t_to_js x7976)|])
                                  | None -> ());
                                 (match x7973 with
                                  | Some x7975 ->
                                      ignore
                                        (Ojs.call x7974 "push"
                                           [|(GLuint.t_to_js x7975)|])
                                  | None -> ());
                                 x7974))|])
    let (uniform2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x7991 : 'tags this) ->
        fun ~location:(x7982 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x7983 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x7984 : GLuint.t option) ->
              fun ?srcLength:(x7985 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x7993 = this_to_js Obj.magic x7991 in
                     Ojs.call (Ojs.get_prop_ascii x7993 "uniform2fv") "apply"
                       [|x7993;((let x7986 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x7986 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x7982)|]);
                                 ignore
                                   (Ojs.call x7986 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x7983)|]);
                                 (match x7984 with
                                  | Some x7988 ->
                                      ignore
                                        (Ojs.call x7986 "push"
                                           [|(GLuint.t_to_js x7988)|])
                                  | None -> ());
                                 (match x7985 with
                                  | Some x7987 ->
                                      ignore
                                        (Ojs.call x7986 "push"
                                           [|(GLuint.t_to_js x7987)|])
                                  | None -> ());
                                 x7986))|])
    let (uniform2iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8003 : 'tags this) ->
        fun ~location:(x7994 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x7995 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x7996 : GLuint.t option) ->
              fun ?srcLength:(x7997 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8005 = this_to_js Obj.magic x8003 in
                     Ojs.call (Ojs.get_prop_ascii x8005 "uniform2iv") "apply"
                       [|x8005;((let x7998 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x7998 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x7994)|]);
                                 ignore
                                   (Ojs.call x7998 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x7995)|]);
                                 (match x7996 with
                                  | Some x8000 ->
                                      ignore
                                        (Ojs.call x7998 "push"
                                           [|(GLuint.t_to_js x8000)|])
                                  | None -> ());
                                 (match x7997 with
                                  | Some x7999 ->
                                      ignore
                                        (Ojs.call x7998 "push"
                                           [|(GLuint.t_to_js x7999)|])
                                  | None -> ());
                                 x7998))|])
    let (uniform3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8015 : 'tags this) ->
        fun ~location:(x8006 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8007 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8008 : GLuint.t option) ->
              fun ?srcLength:(x8009 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8017 = this_to_js Obj.magic x8015 in
                     Ojs.call (Ojs.get_prop_ascii x8017 "uniform3fv") "apply"
                       [|x8017;((let x8010 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8010 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8006)|]);
                                 ignore
                                   (Ojs.call x8010 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8007)|]);
                                 (match x8008 with
                                  | Some x8012 ->
                                      ignore
                                        (Ojs.call x8010 "push"
                                           [|(GLuint.t_to_js x8012)|])
                                  | None -> ());
                                 (match x8009 with
                                  | Some x8011 ->
                                      ignore
                                        (Ojs.call x8010 "push"
                                           [|(GLuint.t_to_js x8011)|])
                                  | None -> ());
                                 x8010))|])
    let (uniform3iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8027 : 'tags this) ->
        fun ~location:(x8018 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8019 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8020 : GLuint.t option) ->
              fun ?srcLength:(x8021 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8029 = this_to_js Obj.magic x8027 in
                     Ojs.call (Ojs.get_prop_ascii x8029 "uniform3iv") "apply"
                       [|x8029;((let x8022 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8022 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8018)|]);
                                 ignore
                                   (Ojs.call x8022 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8019)|]);
                                 (match x8020 with
                                  | Some x8024 ->
                                      ignore
                                        (Ojs.call x8022 "push"
                                           [|(GLuint.t_to_js x8024)|])
                                  | None -> ());
                                 (match x8021 with
                                  | Some x8023 ->
                                      ignore
                                        (Ojs.call x8022 "push"
                                           [|(GLuint.t_to_js x8023)|])
                                  | None -> ());
                                 x8022))|])
    let (uniform4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLfloat.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8039 : 'tags this) ->
        fun ~location:(x8030 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8031 : GLfloat.t Iterable.t_1) ->
            fun ?srcOffset:(x8032 : GLuint.t option) ->
              fun ?srcLength:(x8033 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8041 = this_to_js Obj.magic x8039 in
                     Ojs.call (Ojs.get_prop_ascii x8041 "uniform4fv") "apply"
                       [|x8041;((let x8034 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8034 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8030)|]);
                                 ignore
                                   (Ojs.call x8034 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x8031)|]);
                                 (match x8032 with
                                  | Some x8036 ->
                                      ignore
                                        (Ojs.call x8034 "push"
                                           [|(GLuint.t_to_js x8036)|])
                                  | None -> ());
                                 (match x8033 with
                                  | Some x8035 ->
                                      ignore
                                        (Ojs.call x8034 "push"
                                           [|(GLuint.t_to_js x8035)|])
                                  | None -> ());
                                 x8034))|])
    let (uniform4iv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8051 : 'tags this) ->
        fun ~location:(x8042 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8043 : GLint.t Iterable.t_1) ->
            fun ?srcOffset:(x8044 : GLuint.t option) ->
              fun ?srcLength:(x8045 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8053 = this_to_js Obj.magic x8051 in
                     Ojs.call (Ojs.get_prop_ascii x8053 "uniform4iv") "apply"
                       [|x8053;((let x8046 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8046 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8042)|]);
                                 ignore
                                   (Ojs.call x8046 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x8043)|]);
                                 (match x8044 with
                                  | Some x8048 ->
                                      ignore
                                        (Ojs.call x8046 "push"
                                           [|(GLuint.t_to_js x8048)|])
                                  | None -> ());
                                 (match x8045 with
                                  | Some x8047 ->
                                      ignore
                                        (Ojs.call x8046 "push"
                                           [|(GLuint.t_to_js x8047)|])
                                  | None -> ());
                                 x8046))|])
    let (uniformMatrix2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8064 : 'tags this) ->
        fun ~location:(x8054 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8055 : GLboolean.t) ->
            fun ~data:(x8056 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8057 : GLuint.t option) ->
                fun ?srcLength:(x8058 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8066 = this_to_js Obj.magic x8064 in
                       Ojs.call (Ojs.get_prop_ascii x8066 "uniformMatrix2fv")
                         "apply"
                         [|x8066;((let x8059 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8059 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8054)|]);
                                   ignore
                                     (Ojs.call x8059 "push"
                                        [|(GLboolean.t_to_js x8055)|]);
                                   ignore
                                     (Ojs.call x8059 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8056)|]);
                                   (match x8057 with
                                    | Some x8061 ->
                                        ignore
                                          (Ojs.call x8059 "push"
                                             [|(GLuint.t_to_js x8061)|])
                                    | None -> ());
                                   (match x8058 with
                                    | Some x8060 ->
                                        ignore
                                          (Ojs.call x8059 "push"
                                             [|(GLuint.t_to_js x8060)|])
                                    | None -> ());
                                   x8059))|])
    let (uniformMatrix3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8077 : 'tags this) ->
        fun ~location:(x8067 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8068 : GLboolean.t) ->
            fun ~data:(x8069 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8070 : GLuint.t option) ->
                fun ?srcLength:(x8071 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8079 = this_to_js Obj.magic x8077 in
                       Ojs.call (Ojs.get_prop_ascii x8079 "uniformMatrix3fv")
                         "apply"
                         [|x8079;((let x8072 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8072 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8067)|]);
                                   ignore
                                     (Ojs.call x8072 "push"
                                        [|(GLboolean.t_to_js x8068)|]);
                                   ignore
                                     (Ojs.call x8072 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8069)|]);
                                   (match x8070 with
                                    | Some x8074 ->
                                        ignore
                                          (Ojs.call x8072 "push"
                                             [|(GLuint.t_to_js x8074)|])
                                    | None -> ());
                                   (match x8071 with
                                    | Some x8073 ->
                                        ignore
                                          (Ojs.call x8072 "push"
                                             [|(GLuint.t_to_js x8073)|])
                                    | None -> ());
                                   x8072))|])
    let (uniformMatrix4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8090 : 'tags this) ->
        fun ~location:(x8080 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8081 : GLboolean.t) ->
            fun ~data:(x8082 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x8083 : GLuint.t option) ->
                fun ?srcLength:(x8084 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8092 = this_to_js Obj.magic x8090 in
                       Ojs.call (Ojs.get_prop_ascii x8092 "uniformMatrix4fv")
                         "apply"
                         [|x8092;((let x8085 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8085 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8080)|]);
                                   ignore
                                     (Ojs.call x8085 "push"
                                        [|(GLboolean.t_to_js x8081)|]);
                                   ignore
                                     (Ojs.call x8085 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x8082)|]);
                                   (match x8083 with
                                    | Some x8087 ->
                                        ignore
                                          (Ojs.call x8085 "push"
                                             [|(GLuint.t_to_js x8087)|])
                                    | None -> ());
                                   (match x8084 with
                                    | Some x8086 ->
                                        ignore
                                          (Ojs.call x8085 "push"
                                             [|(GLuint.t_to_js x8086)|])
                                    | None -> ());
                                   x8085))|])
    let cast_from = Obj.magic
  end
module WebGLVertexArrayObject =
  struct
    type t = [ `WebGLVertexArrayObject ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8094 : Ojs.t) -> t_of_js x8094
    and t_0_to_js : t_0 -> Ojs.t = fun (x8093 : t) -> t_to_js x8093
    type tags = [ `WebGLVertexArrayObject ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLVertexArrayObject ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8097 : Ojs.t) -> intf_of_js __tags_of_js x8097
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8095 : __tags intf) -> intf_to_js __tags_to_js x8095
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLVertexArrayObject") 
             [||])
  end
module WebGLTransformFeedback =
  struct
    type t = [ `WebGLTransformFeedback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8100 : Ojs.t) -> t_of_js x8100
    and t_0_to_js : t_0 -> Ojs.t = fun (x8099 : t) -> t_to_js x8099
    type tags = [ `WebGLTransformFeedback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGLTransformFeedback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8103 : Ojs.t) -> intf_of_js __tags_of_js x8103
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8101 : __tags intf) -> intf_to_js __tags_to_js x8101
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGLTransformFeedback") 
             [||])
  end
module WebGLSync =
  struct
    type t = [ `WebGLSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8106 : Ojs.t) -> t_of_js x8106
    and t_0_to_js : t_0 -> Ojs.t = fun (x8105 : t) -> t_to_js x8105
    type tags = [ `WebGLSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8109 : Ojs.t) -> intf_of_js __tags_of_js x8109
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8107 : __tags intf) -> intf_to_js __tags_to_js x8107
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSync")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSync") [||])
  end
module WebGLSampler =
  struct
    type t = [ `WebGLSampler ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8112 : Ojs.t) -> t_of_js x8112
    and t_0_to_js : t_0 -> Ojs.t = fun (x8111 : t) -> t_to_js x8111
    type tags = [ `WebGLSampler ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLSampler ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8115 : Ojs.t) -> intf_of_js __tags_of_js x8115
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8113 : __tags intf) -> intf_to_js __tags_to_js x8113
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLSampler")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLSampler") [||])
  end
module WebGLQuery =
  struct
    type t = [ `WebGLQuery ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8118 : Ojs.t) -> t_of_js x8118
    and t_0_to_js : t_0 -> Ojs.t = fun (x8117 : t) -> t_to_js x8117
    type tags = [ `WebGLQuery ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WebGLQuery ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8121 : Ojs.t) -> intf_of_js __tags_of_js x8121
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8119 : __tags intf) -> intf_to_js __tags_to_js x8119
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WebGLQuery")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WebGLQuery") [||])
  end
module Uint32List =
  struct
    type t = (Uint32Array.t_0, GLuint.t) or_array
    let rec t_of_js : Ojs.t -> t =
      fun (x8126 : Ojs.t) ->
        or_array_of_js Uint32Array.t_0_of_js GLuint.t_of_js x8126
    and t_to_js : t -> Ojs.t =
      fun (x8123 : (Uint32Array.t_0, GLuint.t) or_array) ->
        or_array_to_js Uint32Array.t_0_to_js GLuint.t_to_js x8123
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8130 : Ojs.t) -> t_of_js x8130
    and t_0_to_js : t_0 -> Ojs.t = fun (x8129 : t) -> t_to_js x8129
  end
module GLuint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x8132 : Ojs.t) -> Ojs.float_of_js x8132
    and t_to_js : t -> Ojs.t = fun (x8131 : float) -> Ojs.float_to_js x8131
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8134 : Ojs.t) -> t_of_js x8134
    and t_0_to_js : t_0 -> Ojs.t = fun (x8133 : t) -> t_to_js x8133
  end
module GLint64 =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x8136 : Ojs.t) -> Ojs.float_of_js x8136
    and t_to_js : t -> Ojs.t = fun (x8135 : float) -> Ojs.float_to_js x8135
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8138 : Ojs.t) -> t_of_js x8138
    and t_0_to_js : t_0 -> Ojs.t = fun (x8137 : t) -> t_to_js x8137
  end
module WebGL2RenderingContextBase =
  struct
    type t = [ `WebGL2RenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x8140 : Ojs.t) -> t_of_js x8140
    and t_0_to_js : t_0 -> Ojs.t = fun (x8139 : t) -> t_to_js x8139
    type tags = [ `WebGL2RenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContextBase ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x8143 : Ojs.t) -> intf_of_js __tags_of_js x8143
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x8141 : __tags intf) -> intf_to_js __tags_to_js x8141
    let (beginQuery :
      'tags this -> target:GLenum.t -> query:WebGLQuery.t -> unit) =
      fun (x8147 : 'tags this) ->
        fun ~target:(x8145 : GLenum.t) ->
          fun ~query:(x8146 : WebGLQuery.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8147) "beginQuery"
                 [|(GLenum.t_to_js x8145);(WebGLQuery.t_to_js x8146)|])
    let (beginTransformFeedback :
      'tags this -> primitiveMode:GLenum.t -> unit) =
      fun (x8150 : 'tags this) ->
        fun ~primitiveMode:(x8149 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8150) "beginTransformFeedback"
               [|(GLenum.t_to_js x8149)|])
    let (bindBufferBase :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t -> buffer:WebGLBuffer.t or_null -> unit)
      =
      fun (x8156 : 'tags this) ->
        fun ~target:(x8152 : GLenum.t) ->
          fun ~index:(x8153 : GLuint.t) ->
            fun ~buffer:(x8154 : WebGLBuffer.t or_null) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8156) "bindBufferBase"
                   [|(GLenum.t_to_js x8152);(GLuint.t_to_js x8153);(or_null_to_js
                                                                    WebGLBuffer.t_to_js
                                                                    x8154)|])
    let (bindBufferRange :
      'tags this ->
        target:GLenum.t ->
          index:GLuint.t ->
            buffer:WebGLBuffer.t or_null ->
              offset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x8164 : 'tags this) ->
        fun ~target:(x8158 : GLenum.t) ->
          fun ~index:(x8159 : GLuint.t) ->
            fun ~buffer:(x8160 : WebGLBuffer.t or_null) ->
              fun ~offset:(x8162 : GLintptr.t) ->
                fun ~size:(x8163 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8164) "bindBufferRange"
                       [|(GLenum.t_to_js x8158);(GLuint.t_to_js x8159);(
                         or_null_to_js WebGLBuffer.t_to_js x8160);(GLintptr.t_to_js
                                                                    x8162);(
                         GLsizeiptr.t_to_js x8163)|])
    let (bindSampler :
      'tags this -> unit:GLuint.t -> sampler:WebGLSampler.t or_null -> unit)
      =
      fun (x8169 : 'tags this) ->
        fun ~unit:(x8166 : GLuint.t) ->
          fun ~sampler:(x8167 : WebGLSampler.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8169) "bindSampler"
                 [|(GLuint.t_to_js x8166);(or_null_to_js WebGLSampler.t_to_js
                                             x8167)|])
    let (bindTransformFeedback :
      'tags this ->
        target:GLenum.t -> tf:WebGLTransformFeedback.t or_null -> unit)
      =
      fun (x8174 : 'tags this) ->
        fun ~target:(x8171 : GLenum.t) ->
          fun ~tf:(x8172 : WebGLTransformFeedback.t or_null) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8174) "bindTransformFeedback"
                 [|(GLenum.t_to_js x8171);(or_null_to_js
                                             WebGLTransformFeedback.t_to_js
                                             x8172)|])
    let (bindVertexArray :
      'tags this -> array:WebGLVertexArrayObject.t or_null -> unit) =
      fun (x8178 : 'tags this) ->
        fun ~array:(x8176 : WebGLVertexArrayObject.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8178) "bindVertexArray"
               [|(or_null_to_js WebGLVertexArrayObject.t_to_js x8176)|])
    let (blitFramebuffer :
      'tags this ->
        srcX0:GLint.t ->
          srcY0:GLint.t ->
            srcX1:GLint.t ->
              srcY1:GLint.t ->
                dstX0:GLint.t ->
                  dstY0:GLint.t ->
                    dstX1:GLint.t ->
                      dstY1:GLint.t ->
                        mask:GLbitfield.t -> filter:GLenum.t -> unit)
      =
      fun (x8190 : 'tags this) ->
        fun ~srcX0:(x8180 : GLint.t) ->
          fun ~srcY0:(x8181 : GLint.t) ->
            fun ~srcX1:(x8182 : GLint.t) ->
              fun ~srcY1:(x8183 : GLint.t) ->
                fun ~dstX0:(x8184 : GLint.t) ->
                  fun ~dstY0:(x8185 : GLint.t) ->
                    fun ~dstX1:(x8186 : GLint.t) ->
                      fun ~dstY1:(x8187 : GLint.t) ->
                        fun ~mask:(x8188 : GLbitfield.t) ->
                          fun ~filter:(x8189 : GLenum.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8190)
                                 "blitFramebuffer"
                                 [|(GLint.t_to_js x8180);(GLint.t_to_js x8181);(
                                   GLint.t_to_js x8182);(GLint.t_to_js x8183);(
                                   GLint.t_to_js x8184);(GLint.t_to_js x8185);(
                                   GLint.t_to_js x8186);(GLint.t_to_js x8187);(
                                   GLbitfield.t_to_js x8188);(GLenum.t_to_js
                                                                x8189)|])
    let (clearBufferfi :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t -> depth:GLfloat.t -> stencil:GLint.t -> unit)
      =
      fun (x8196 : 'tags this) ->
        fun ~buffer:(x8192 : GLenum.t) ->
          fun ~drawbuffer:(x8193 : GLint.t) ->
            fun ~depth:(x8194 : GLfloat.t) ->
              fun ~stencil:(x8195 : GLint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x8196) "clearBufferfi"
                     [|(GLenum.t_to_js x8192);(GLint.t_to_js x8193);(
                       GLfloat.t_to_js x8194);(GLint.t_to_js x8195)|])
    let (clearBufferfv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Float32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x8204 : 'tags this) ->
        fun ~buffer:(x8198 : GLenum.t) ->
          fun ~drawbuffer:(x8199 : GLint.t) ->
            fun ~values:(x8200 : Float32List.t) ->
              fun ?srcOffset:(x8201 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8206 = this_to_js Obj.magic x8204 in
                     Ojs.call (Ojs.get_prop_ascii x8206 "clearBufferfv")
                       "apply"
                       [|x8206;((let x8202 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8202 "push"
                                      [|(GLenum.t_to_js x8198)|]);
                                 ignore
                                   (Ojs.call x8202 "push"
                                      [|(GLint.t_to_js x8199)|]);
                                 ignore
                                   (Ojs.call x8202 "push"
                                      [|(Float32List.t_to_js x8200)|]);
                                 (match x8201 with
                                  | Some x8203 ->
                                      ignore
                                        (Ojs.call x8202 "push"
                                           [|(GLuint.t_to_js x8203)|])
                                  | None -> ());
                                 x8202))|])
    let (clearBufferiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Int32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x8213 : 'tags this) ->
        fun ~buffer:(x8207 : GLenum.t) ->
          fun ~drawbuffer:(x8208 : GLint.t) ->
            fun ~values:(x8209 : Int32List.t) ->
              fun ?srcOffset:(x8210 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8215 = this_to_js Obj.magic x8213 in
                     Ojs.call (Ojs.get_prop_ascii x8215 "clearBufferiv")
                       "apply"
                       [|x8215;((let x8211 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8211 "push"
                                      [|(GLenum.t_to_js x8207)|]);
                                 ignore
                                   (Ojs.call x8211 "push"
                                      [|(GLint.t_to_js x8208)|]);
                                 ignore
                                   (Ojs.call x8211 "push"
                                      [|(Int32List.t_to_js x8209)|]);
                                 (match x8210 with
                                  | Some x8212 ->
                                      ignore
                                        (Ojs.call x8211 "push"
                                           [|(GLuint.t_to_js x8212)|])
                                  | None -> ());
                                 x8211))|])
    let (clearBufferuiv :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:Uint32List.t -> ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x8222 : 'tags this) ->
        fun ~buffer:(x8216 : GLenum.t) ->
          fun ~drawbuffer:(x8217 : GLint.t) ->
            fun ~values:(x8218 : Uint32List.t) ->
              fun ?srcOffset:(x8219 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8224 = this_to_js Obj.magic x8222 in
                     Ojs.call (Ojs.get_prop_ascii x8224 "clearBufferuiv")
                       "apply"
                       [|x8224;((let x8220 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8220 "push"
                                      [|(GLenum.t_to_js x8216)|]);
                                 ignore
                                   (Ojs.call x8220 "push"
                                      [|(GLint.t_to_js x8217)|]);
                                 ignore
                                   (Ojs.call x8220 "push"
                                      [|(Uint32List.t_to_js x8218)|]);
                                 (match x8219 with
                                  | Some x8221 ->
                                      ignore
                                        (Ojs.call x8220 "push"
                                           [|(GLuint.t_to_js x8221)|])
                                  | None -> ());
                                 x8220))|])
    let (clientWaitSync :
      'tags this ->
        sync:WebGLSync.t ->
          flags:GLbitfield.t -> timeout:GLuint64.t -> GLenum.t)
      =
      fun (x8228 : 'tags this) ->
        fun ~sync:(x8225 : WebGLSync.t) ->
          fun ~flags:(x8226 : GLbitfield.t) ->
            fun ~timeout:(x8227 : GLuint64.t) ->
              GLenum.t_of_js
                (Ojs.call (this_to_js Obj.magic x8228) "clientWaitSync"
                   [|(WebGLSync.t_to_js x8225);(GLbitfield.t_to_js x8226);(
                     GLuint64.t_to_js x8227)|])
    let (compressedTexImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8239 : 'tags this) ->
        fun ~target:(x8230 : GLenum.t) ->
          fun ~level:(x8231 : GLint.t) ->
            fun ~internalformat:(x8232 : GLenum.t) ->
              fun ~width:(x8233 : GLsizei.t) ->
                fun ~height:(x8234 : GLsizei.t) ->
                  fun ~depth:(x8235 : GLsizei.t) ->
                    fun ~border:(x8236 : GLint.t) ->
                      fun ~imageSize:(x8237 : GLsizei.t) ->
                        fun ~offset:(x8238 : GLintptr.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8239)
                               "compressedTexImage3D"
                               [|(GLenum.t_to_js x8230);(GLint.t_to_js x8231);(
                                 GLenum.t_to_js x8232);(GLsizei.t_to_js x8233);(
                                 GLsizei.t_to_js x8234);(GLsizei.t_to_js
                                                           x8235);(GLint.t_to_js
                                                                    x8236);(
                                 GLsizei.t_to_js x8237);(GLintptr.t_to_js
                                                           x8238)|])
    let (compressedTexImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      srcData:ArrayBufferView.t_0 ->
                        ?srcOffset:GLuint.t ->
                          ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x8254 : 'tags this) ->
        fun ~target:(x8241 : GLenum.t) ->
          fun ~level:(x8242 : GLint.t) ->
            fun ~internalformat:(x8243 : GLenum.t) ->
              fun ~width:(x8244 : GLsizei.t) ->
                fun ~height:(x8245 : GLsizei.t) ->
                  fun ~depth:(x8246 : GLsizei.t) ->
                    fun ~border:(x8247 : GLint.t) ->
                      fun ~srcData:(x8248 : ArrayBufferView.t_0) ->
                        fun ?srcOffset:(x8249 : GLuint.t option) ->
                          fun ?srcLengthOverride:(x8250 : GLuint.t option) ->
                            fun () ->
                              ignore
                                (let x8256 = this_to_js Obj.magic x8254 in
                                 Ojs.call
                                   (Ojs.get_prop_ascii x8256
                                      "compressedTexImage3D") "apply"
                                   [|x8256;((let x8251 =
                                               Ojs.new_obj
                                                 (Ojs.get_prop_ascii
                                                    Ojs.global "Array") 
                                                 [||] in
                                             ignore
                                               (Ojs.call x8251 "push"
                                                  [|(GLenum.t_to_js x8241)|]);
                                             ignore
                                               (Ojs.call x8251 "push"
                                                  [|(GLint.t_to_js x8242)|]);
                                             ignore
                                               (Ojs.call x8251 "push"
                                                  [|(GLenum.t_to_js x8243)|]);
                                             ignore
                                               (Ojs.call x8251 "push"
                                                  [|(GLsizei.t_to_js x8244)|]);
                                             ignore
                                               (Ojs.call x8251 "push"
                                                  [|(GLsizei.t_to_js x8245)|]);
                                             ignore
                                               (Ojs.call x8251 "push"
                                                  [|(GLsizei.t_to_js x8246)|]);
                                             ignore
                                               (Ojs.call x8251 "push"
                                                  [|(GLint.t_to_js x8247)|]);
                                             ignore
                                               (Ojs.call x8251 "push"
                                                  [|(ArrayBufferView.t_0_to_js
                                                       x8248)|]);
                                             (match x8249 with
                                              | Some x8253 ->
                                                  ignore
                                                    (Ojs.call x8251 "push"
                                                       [|(GLuint.t_to_js
                                                            x8253)|])
                                              | None -> ());
                                             (match x8250 with
                                              | Some x8252 ->
                                                  ignore
                                                    (Ojs.call x8251 "push"
                                                       [|(GLuint.t_to_js
                                                            x8252)|])
                                              | None -> ());
                                             x8251))|])
    let (compressedTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          imageSize:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8268 : 'tags this) ->
        fun ~target:(x8257 : GLenum.t) ->
          fun ~level:(x8258 : GLint.t) ->
            fun ~xoffset:(x8259 : GLint.t) ->
              fun ~yoffset:(x8260 : GLint.t) ->
                fun ~zoffset:(x8261 : GLint.t) ->
                  fun ~width:(x8262 : GLsizei.t) ->
                    fun ~height:(x8263 : GLsizei.t) ->
                      fun ~depth:(x8264 : GLsizei.t) ->
                        fun ~format:(x8265 : GLenum.t) ->
                          fun ~imageSize:(x8266 : GLsizei.t) ->
                            fun ~offset:(x8267 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x8268)
                                   "compressedTexSubImage3D"
                                   [|(GLenum.t_to_js x8257);(GLint.t_to_js
                                                               x8258);(
                                     GLint.t_to_js x8259);(GLint.t_to_js
                                                             x8260);(
                                     GLint.t_to_js x8261);(GLsizei.t_to_js
                                                             x8262);(
                                     GLsizei.t_to_js x8263);(GLsizei.t_to_js
                                                               x8264);(
                                     GLenum.t_to_js x8265);(GLsizei.t_to_js
                                                              x8266);(
                                     GLintptr.t_to_js x8267)|])
    let (compressedTexSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            ?srcOffset:GLuint.t ->
                              ?srcLengthOverride:GLuint.t -> unit -> unit)
      =
      fun (x8285 : 'tags this) ->
        fun ~target:(x8270 : GLenum.t) ->
          fun ~level:(x8271 : GLint.t) ->
            fun ~xoffset:(x8272 : GLint.t) ->
              fun ~yoffset:(x8273 : GLint.t) ->
                fun ~zoffset:(x8274 : GLint.t) ->
                  fun ~width:(x8275 : GLsizei.t) ->
                    fun ~height:(x8276 : GLsizei.t) ->
                      fun ~depth:(x8277 : GLsizei.t) ->
                        fun ~format:(x8278 : GLenum.t) ->
                          fun ~srcData:(x8279 : ArrayBufferView.t_0) ->
                            fun ?srcOffset:(x8280 : GLuint.t option) ->
                              fun
                                ?srcLengthOverride:(x8281 : GLuint.t option)
                                ->
                                fun () ->
                                  ignore
                                    (let x8287 = this_to_js Obj.magic x8285 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x8287
                                          "compressedTexSubImage3D") "apply"
                                       [|x8287;((let x8282 =
                                                   Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Array")
                                                     [||] in
                                                 ignore
                                                   (Ojs.call x8282 "push"
                                                      [|(GLenum.t_to_js x8270)|]);
                                                 ignore
                                                   (Ojs.call x8282 "push"
                                                      [|(GLint.t_to_js x8271)|]);
                                                 ignore
                                                   (Ojs.call x8282 "push"
                                                      [|(GLint.t_to_js x8272)|]);
                                                 ignore
                                                   (Ojs.call x8282 "push"
                                                      [|(GLint.t_to_js x8273)|]);
                                                 ignore
                                                   (Ojs.call x8282 "push"
                                                      [|(GLint.t_to_js x8274)|]);
                                                 ignore
                                                   (Ojs.call x8282 "push"
                                                      [|(GLsizei.t_to_js
                                                           x8275)|]);
                                                 ignore
                                                   (Ojs.call x8282 "push"
                                                      [|(GLsizei.t_to_js
                                                           x8276)|]);
                                                 ignore
                                                   (Ojs.call x8282 "push"
                                                      [|(GLsizei.t_to_js
                                                           x8277)|]);
                                                 ignore
                                                   (Ojs.call x8282 "push"
                                                      [|(GLenum.t_to_js x8278)|]);
                                                 ignore
                                                   (Ojs.call x8282 "push"
                                                      [|(ArrayBufferView.t_0_to_js
                                                           x8279)|]);
                                                 (match x8280 with
                                                  | Some x8284 ->
                                                      ignore
                                                        (Ojs.call x8282
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x8284)|])
                                                  | None -> ());
                                                 (match x8281 with
                                                  | Some x8283 ->
                                                      ignore
                                                        (Ojs.call x8282
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x8283)|])
                                                  | None -> ());
                                                 x8282))|])
    let (copyBufferSubData :
      'tags this ->
        readTarget:GLenum.t ->
          writeTarget:GLenum.t ->
            readOffset:GLintptr.t ->
              writeOffset:GLintptr.t -> size:GLsizeiptr.t -> unit)
      =
      fun (x8293 : 'tags this) ->
        fun ~readTarget:(x8288 : GLenum.t) ->
          fun ~writeTarget:(x8289 : GLenum.t) ->
            fun ~readOffset:(x8290 : GLintptr.t) ->
              fun ~writeOffset:(x8291 : GLintptr.t) ->
                fun ~size:(x8292 : GLsizeiptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8293)
                       "copyBufferSubData"
                       [|(GLenum.t_to_js x8288);(GLenum.t_to_js x8289);(
                         GLintptr.t_to_js x8290);(GLintptr.t_to_js x8291);(
                         GLsizeiptr.t_to_js x8292)|])
    let (copyTexSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  x:GLint.t ->
                    y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x8304 : 'tags this) ->
        fun ~target:(x8295 : GLenum.t) ->
          fun ~level:(x8296 : GLint.t) ->
            fun ~xoffset:(x8297 : GLint.t) ->
              fun ~yoffset:(x8298 : GLint.t) ->
                fun ~zoffset:(x8299 : GLint.t) ->
                  fun ~x:(x8300 : GLint.t) ->
                    fun ~y:(x8301 : GLint.t) ->
                      fun ~width:(x8302 : GLsizei.t) ->
                        fun ~height:(x8303 : GLsizei.t) ->
                          ignore
                            (Ojs.call (this_to_js Obj.magic x8304)
                               "copyTexSubImage3D"
                               [|(GLenum.t_to_js x8295);(GLint.t_to_js x8296);(
                                 GLint.t_to_js x8297);(GLint.t_to_js x8298);(
                                 GLint.t_to_js x8299);(GLint.t_to_js x8300);(
                                 GLint.t_to_js x8301);(GLsizei.t_to_js x8302);(
                                 GLsizei.t_to_js x8303)|])
    let (createQuery : 'tags this -> WebGLQuery.t or_null) =
      fun (x8306 : 'tags this) ->
        or_null_of_js WebGLQuery.t_of_js
          (Ojs.call (this_to_js Obj.magic x8306) "createQuery" [||])
    let (createSampler : 'tags this -> WebGLSampler.t or_null) =
      fun (x8309 : 'tags this) ->
        or_null_of_js WebGLSampler.t_of_js
          (Ojs.call (this_to_js Obj.magic x8309) "createSampler" [||])
    let (createTransformFeedback :
      'tags this -> WebGLTransformFeedback.t or_null) =
      fun (x8312 : 'tags this) ->
        or_null_of_js WebGLTransformFeedback.t_of_js
          (Ojs.call (this_to_js Obj.magic x8312) "createTransformFeedback"
             [||])
    let (createVertexArray : 'tags this -> WebGLVertexArrayObject.t or_null)
      =
      fun (x8315 : 'tags this) ->
        or_null_of_js WebGLVertexArrayObject.t_of_js
          (Ojs.call (this_to_js Obj.magic x8315) "createVertexArray" [||])
    let (deleteQuery : 'tags this -> query:WebGLQuery.t or_null -> unit) =
      fun (x8320 : 'tags this) ->
        fun ~query:(x8318 : WebGLQuery.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8320) "deleteQuery"
               [|(or_null_to_js WebGLQuery.t_to_js x8318)|])
    let (deleteSampler :
      'tags this -> sampler:WebGLSampler.t or_null -> unit) =
      fun (x8324 : 'tags this) ->
        fun ~sampler:(x8322 : WebGLSampler.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8324) "deleteSampler"
               [|(or_null_to_js WebGLSampler.t_to_js x8322)|])
    let (deleteSync : 'tags this -> sync:WebGLSync.t or_null -> unit) =
      fun (x8328 : 'tags this) ->
        fun ~sync:(x8326 : WebGLSync.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8328) "deleteSync"
               [|(or_null_to_js WebGLSync.t_to_js x8326)|])
    let (deleteTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t or_null -> unit) =
      fun (x8332 : 'tags this) ->
        fun ~tf:(x8330 : WebGLTransformFeedback.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8332) "deleteTransformFeedback"
               [|(or_null_to_js WebGLTransformFeedback.t_to_js x8330)|])
    let (deleteVertexArray :
      'tags this -> vertexArray:WebGLVertexArrayObject.t or_null -> unit) =
      fun (x8336 : 'tags this) ->
        fun ~vertexArray:(x8334 : WebGLVertexArrayObject.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8336) "deleteVertexArray"
               [|(or_null_to_js WebGLVertexArrayObject.t_to_js x8334)|])
    let (drawArraysInstanced :
      'tags this ->
        mode:GLenum.t ->
          first:GLint.t -> count:GLsizei.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x8342 : 'tags this) ->
        fun ~mode:(x8338 : GLenum.t) ->
          fun ~first:(x8339 : GLint.t) ->
            fun ~count:(x8340 : GLsizei.t) ->
              fun ~instanceCount:(x8341 : GLsizei.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x8342)
                     "drawArraysInstanced"
                     [|(GLenum.t_to_js x8338);(GLint.t_to_js x8339);(
                       GLsizei.t_to_js x8340);(GLsizei.t_to_js x8341)|])
    let (drawBuffers : 'tags this -> buffers:GLenum.t list -> unit) =
      fun (x8346 : 'tags this) ->
        fun ~buffers:(x8344 : GLenum.t list) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8346) "drawBuffers"
               [|(Ojs.list_to_js GLenum.t_to_js x8344)|])
    let (drawElementsInstanced :
      'tags this ->
        mode:GLenum.t ->
          count:GLsizei.t ->
            type_:GLenum.t ->
              offset:GLintptr.t -> instanceCount:GLsizei.t -> unit)
      =
      fun (x8353 : 'tags this) ->
        fun ~mode:(x8348 : GLenum.t) ->
          fun ~count:(x8349 : GLsizei.t) ->
            fun ~type_:(x8350 : GLenum.t) ->
              fun ~offset:(x8351 : GLintptr.t) ->
                fun ~instanceCount:(x8352 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8353)
                       "drawElementsInstanced"
                       [|(GLenum.t_to_js x8348);(GLsizei.t_to_js x8349);(
                         GLenum.t_to_js x8350);(GLintptr.t_to_js x8351);(
                         GLsizei.t_to_js x8352)|])
    let (drawRangeElements :
      'tags this ->
        mode:GLenum.t ->
          start:GLuint.t ->
            end_:GLuint.t ->
              count:GLsizei.t -> type_:GLenum.t -> offset:GLintptr.t -> unit)
      =
      fun (x8361 : 'tags this) ->
        fun ~mode:(x8355 : GLenum.t) ->
          fun ~start:(x8356 : GLuint.t) ->
            fun ~end_:(x8357 : GLuint.t) ->
              fun ~count:(x8358 : GLsizei.t) ->
                fun ~type_:(x8359 : GLenum.t) ->
                  fun ~offset:(x8360 : GLintptr.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x8361)
                         "drawRangeElements"
                         [|(GLenum.t_to_js x8355);(GLuint.t_to_js x8356);(
                           GLuint.t_to_js x8357);(GLsizei.t_to_js x8358);(
                           GLenum.t_to_js x8359);(GLintptr.t_to_js x8360)|])
    let (endQuery : 'tags this -> target:GLenum.t -> unit) =
      fun (x8364 : 'tags this) ->
        fun ~target:(x8363 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8364) "endQuery"
               [|(GLenum.t_to_js x8363)|])
    let (endTransformFeedback : 'tags this -> unit) =
      fun (x8366 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x8366) "endTransformFeedback" [||])
    let (fenceSync :
      'tags this ->
        condition:GLenum.t -> flags:GLbitfield.t -> WebGLSync.t or_null)
      =
      fun (x8370 : 'tags this) ->
        fun ~condition:(x8368 : GLenum.t) ->
          fun ~flags:(x8369 : GLbitfield.t) ->
            or_null_of_js WebGLSync.t_of_js
              (Ojs.call (this_to_js Obj.magic x8370) "fenceSync"
                 [|(GLenum.t_to_js x8368);(GLbitfield.t_to_js x8369)|])
    let (framebufferTextureLayer :
      'tags this ->
        target:GLenum.t ->
          attachment:GLenum.t ->
            texture:WebGLTexture.t or_null ->
              level:GLint.t -> layer:GLint.t -> unit)
      =
      fun (x8379 : 'tags this) ->
        fun ~target:(x8373 : GLenum.t) ->
          fun ~attachment:(x8374 : GLenum.t) ->
            fun ~texture:(x8375 : WebGLTexture.t or_null) ->
              fun ~level:(x8377 : GLint.t) ->
                fun ~layer:(x8378 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8379)
                       "framebufferTextureLayer"
                       [|(GLenum.t_to_js x8373);(GLenum.t_to_js x8374);(
                         or_null_to_js WebGLTexture.t_to_js x8375);(GLint.t_to_js
                                                                    x8377);(
                         GLint.t_to_js x8378)|])
    let (getActiveUniformBlockName :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> string or_null)
      =
      fun (x8383 : 'tags this) ->
        fun ~program:(x8381 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x8382 : GLuint.t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.call (this_to_js Obj.magic x8383)
                 "getActiveUniformBlockName"
                 [|(WebGLProgram.t_to_js x8381);(GLuint.t_to_js x8382)|])
    let (getActiveUniformBlockParameter :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> pname:GLenum.t -> any)
      =
      fun (x8389 : 'tags this) ->
        fun ~program:(x8386 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x8387 : GLuint.t) ->
            fun ~pname:(x8388 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x8389)
                   "getActiveUniformBlockParameter"
                   [|(WebGLProgram.t_to_js x8386);(GLuint.t_to_js x8387);(
                     GLenum.t_to_js x8388)|])
    let (getActiveUniforms :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t list -> pname:GLenum.t -> any)
      =
      fun (x8395 : 'tags this) ->
        fun ~program:(x8391 : WebGLProgram.t) ->
          fun ~uniformIndices:(x8392 : GLuint.t list) ->
            fun ~pname:(x8394 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x8395) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x8391);(Ojs.list_to_js
                                                     GLuint.t_to_js x8392);(
                     GLenum.t_to_js x8394)|])
    let (getBufferSubData :
      'tags this ->
        target:GLenum.t ->
          srcByteOffset:GLintptr.t ->
            dstBuffer:ArrayBufferView.t_0 ->
              ?dstOffset:GLuint.t -> ?length:GLuint.t -> unit -> unit)
      =
      fun (x8405 : 'tags this) ->
        fun ~target:(x8397 : GLenum.t) ->
          fun ~srcByteOffset:(x8398 : GLintptr.t) ->
            fun ~dstBuffer:(x8399 : ArrayBufferView.t_0) ->
              fun ?dstOffset:(x8400 : GLuint.t option) ->
                fun ?length:(x8401 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8407 = this_to_js Obj.magic x8405 in
                       Ojs.call (Ojs.get_prop_ascii x8407 "getBufferSubData")
                         "apply"
                         [|x8407;((let x8402 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8402 "push"
                                        [|(GLenum.t_to_js x8397)|]);
                                   ignore
                                     (Ojs.call x8402 "push"
                                        [|(GLintptr.t_to_js x8398)|]);
                                   ignore
                                     (Ojs.call x8402 "push"
                                        [|(ArrayBufferView.t_0_to_js x8399)|]);
                                   (match x8400 with
                                    | Some x8404 ->
                                        ignore
                                          (Ojs.call x8402 "push"
                                             [|(GLuint.t_to_js x8404)|])
                                    | None -> ());
                                   (match x8401 with
                                    | Some x8403 ->
                                        ignore
                                          (Ojs.call x8402 "push"
                                             [|(GLuint.t_to_js x8403)|])
                                    | None -> ());
                                   x8402))|])
    let (getFragDataLocation :
      'tags this -> program:WebGLProgram.t -> name:string -> GLint.t) =
      fun (x8410 : 'tags this) ->
        fun ~program:(x8408 : WebGLProgram.t) ->
          fun ~name:(x8409 : string) ->
            GLint.t_of_js
              (Ojs.call (this_to_js Obj.magic x8410) "getFragDataLocation"
                 [|(WebGLProgram.t_to_js x8408);(Ojs.string_to_js x8409)|])
    let (getIndexedParameter :
      'tags this -> target:GLenum.t -> index:GLuint.t -> any) =
      fun (x8414 : 'tags this) ->
        fun ~target:(x8412 : GLenum.t) ->
          fun ~index:(x8413 : GLuint.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x8414) "getIndexedParameter"
                 [|(GLenum.t_to_js x8412);(GLuint.t_to_js x8413)|])
    let (getInternalformatParameter :
      'tags this ->
        target:GLenum.t -> internalformat:GLenum.t -> pname:GLenum.t -> any)
      =
      fun (x8419 : 'tags this) ->
        fun ~target:(x8416 : GLenum.t) ->
          fun ~internalformat:(x8417 : GLenum.t) ->
            fun ~pname:(x8418 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x8419)
                   "getInternalformatParameter"
                   [|(GLenum.t_to_js x8416);(GLenum.t_to_js x8417);(GLenum.t_to_js
                                                                    x8418)|])
    let (getQuery :
      'tags this -> target:GLenum.t -> pname:GLenum.t -> WebGLQuery.t or_null)
      =
      fun (x8423 : 'tags this) ->
        fun ~target:(x8421 : GLenum.t) ->
          fun ~pname:(x8422 : GLenum.t) ->
            or_null_of_js WebGLQuery.t_of_js
              (Ojs.call (this_to_js Obj.magic x8423) "getQuery"
                 [|(GLenum.t_to_js x8421);(GLenum.t_to_js x8422)|])
    let (getQueryParameter :
      'tags this -> query:WebGLQuery.t -> pname:GLenum.t -> any) =
      fun (x8428 : 'tags this) ->
        fun ~query:(x8426 : WebGLQuery.t) ->
          fun ~pname:(x8427 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x8428) "getQueryParameter"
                 [|(WebGLQuery.t_to_js x8426);(GLenum.t_to_js x8427)|])
    let (getSamplerParameter :
      'tags this -> sampler:WebGLSampler.t -> pname:GLenum.t -> any) =
      fun (x8432 : 'tags this) ->
        fun ~sampler:(x8430 : WebGLSampler.t) ->
          fun ~pname:(x8431 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x8432) "getSamplerParameter"
                 [|(WebGLSampler.t_to_js x8430);(GLenum.t_to_js x8431)|])
    let (getSyncParameter :
      'tags this -> sync:WebGLSync.t -> pname:GLenum.t -> any) =
      fun (x8436 : 'tags this) ->
        fun ~sync:(x8434 : WebGLSync.t) ->
          fun ~pname:(x8435 : GLenum.t) ->
            any_of_js
              (Ojs.call (this_to_js Obj.magic x8436) "getSyncParameter"
                 [|(WebGLSync.t_to_js x8434);(GLenum.t_to_js x8435)|])
    let (getTransformFeedbackVarying :
      'tags this ->
        program:WebGLProgram.t -> index:GLuint.t -> WebGLActiveInfo.t or_null)
      =
      fun (x8440 : 'tags this) ->
        fun ~program:(x8438 : WebGLProgram.t) ->
          fun ~index:(x8439 : GLuint.t) ->
            or_null_of_js WebGLActiveInfo.t_of_js
              (Ojs.call (this_to_js Obj.magic x8440)
                 "getTransformFeedbackVarying"
                 [|(WebGLProgram.t_to_js x8438);(GLuint.t_to_js x8439)|])
    let (getUniformBlockIndex :
      'tags this ->
        program:WebGLProgram.t -> uniformBlockName:string -> GLuint.t)
      =
      fun (x8445 : 'tags this) ->
        fun ~program:(x8443 : WebGLProgram.t) ->
          fun ~uniformBlockName:(x8444 : string) ->
            GLuint.t_of_js
              (Ojs.call (this_to_js Obj.magic x8445) "getUniformBlockIndex"
                 [|(WebGLProgram.t_to_js x8443);(Ojs.string_to_js x8444)|])
    let (getUniformIndices :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string list -> GLuint.t list or_null)
      =
      fun (x8450 : 'tags this) ->
        fun ~program:(x8447 : WebGLProgram.t) ->
          fun ~uniformNames:(x8448 : string list) ->
            or_null_of_js
              (fun (x8452 : Ojs.t) -> Ojs.list_of_js GLuint.t_of_js x8452)
              (Ojs.call (this_to_js Obj.magic x8450) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x8447);(Ojs.list_to_js
                                                   Ojs.string_to_js x8448)|])
    let (invalidateFramebuffer :
      'tags this -> target:GLenum.t -> attachments:GLenum.t list -> unit) =
      fun (x8457 : 'tags this) ->
        fun ~target:(x8454 : GLenum.t) ->
          fun ~attachments:(x8455 : GLenum.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8457) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x8454);(Ojs.list_to_js GLenum.t_to_js
                                             x8455)|])
    let (invalidateSubFramebuffer :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t list ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x8466 : 'tags this) ->
        fun ~target:(x8459 : GLenum.t) ->
          fun ~attachments:(x8460 : GLenum.t list) ->
            fun ~x:(x8462 : GLint.t) ->
              fun ~y:(x8463 : GLint.t) ->
                fun ~width:(x8464 : GLsizei.t) ->
                  fun ~height:(x8465 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x8466)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x8459);(Ojs.list_to_js
                                                     GLenum.t_to_js x8460);(
                           GLint.t_to_js x8462);(GLint.t_to_js x8463);(
                           GLsizei.t_to_js x8464);(GLsizei.t_to_js x8465)|])
    let (isQuery : 'tags this -> query:WebGLQuery.t or_null -> GLboolean.t) =
      fun (x8470 : 'tags this) ->
        fun ~query:(x8468 : WebGLQuery.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x8470) "isQuery"
               [|(or_null_to_js WebGLQuery.t_to_js x8468)|])
    let (isSampler :
      'tags this -> sampler:WebGLSampler.t or_null -> GLboolean.t) =
      fun (x8474 : 'tags this) ->
        fun ~sampler:(x8472 : WebGLSampler.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x8474) "isSampler"
               [|(or_null_to_js WebGLSampler.t_to_js x8472)|])
    let (isSync : 'tags this -> sync:WebGLSync.t or_null -> GLboolean.t) =
      fun (x8478 : 'tags this) ->
        fun ~sync:(x8476 : WebGLSync.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x8478) "isSync"
               [|(or_null_to_js WebGLSync.t_to_js x8476)|])
    let (isTransformFeedback :
      'tags this -> tf:WebGLTransformFeedback.t or_null -> GLboolean.t) =
      fun (x8482 : 'tags this) ->
        fun ~tf:(x8480 : WebGLTransformFeedback.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x8482) "isTransformFeedback"
               [|(or_null_to_js WebGLTransformFeedback.t_to_js x8480)|])
    let (isVertexArray :
      'tags this ->
        vertexArray:WebGLVertexArrayObject.t or_null -> GLboolean.t)
      =
      fun (x8486 : 'tags this) ->
        fun ~vertexArray:(x8484 : WebGLVertexArrayObject.t or_null) ->
          GLboolean.t_of_js
            (Ojs.call (this_to_js Obj.magic x8486) "isVertexArray"
               [|(or_null_to_js WebGLVertexArrayObject.t_to_js x8484)|])
    let (pauseTransformFeedback : 'tags this -> unit) =
      fun (x8488 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x8488) "pauseTransformFeedback"
             [||])
    let (readBuffer : 'tags this -> src:GLenum.t -> unit) =
      fun (x8491 : 'tags this) ->
        fun ~src:(x8490 : GLenum.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x8491) "readBuffer"
               [|(GLenum.t_to_js x8490)|])
    let (renderbufferStorageMultisample :
      'tags this ->
        target:GLenum.t ->
          samples:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x8498 : 'tags this) ->
        fun ~target:(x8493 : GLenum.t) ->
          fun ~samples:(x8494 : GLsizei.t) ->
            fun ~internalformat:(x8495 : GLenum.t) ->
              fun ~width:(x8496 : GLsizei.t) ->
                fun ~height:(x8497 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8498)
                       "renderbufferStorageMultisample"
                       [|(GLenum.t_to_js x8493);(GLsizei.t_to_js x8494);(
                         GLenum.t_to_js x8495);(GLsizei.t_to_js x8496);(
                         GLsizei.t_to_js x8497)|])
    let (resumeTransformFeedback : 'tags this -> unit) =
      fun (x8500 : 'tags this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic x8500) "resumeTransformFeedback"
             [||])
    let (samplerParameterf :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLfloat.t -> unit)
      =
      fun (x8505 : 'tags this) ->
        fun ~sampler:(x8502 : WebGLSampler.t) ->
          fun ~pname:(x8503 : GLenum.t) ->
            fun ~param:(x8504 : GLfloat.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8505) "samplerParameterf"
                   [|(WebGLSampler.t_to_js x8502);(GLenum.t_to_js x8503);(
                     GLfloat.t_to_js x8504)|])
    let (samplerParameteri :
      'tags this ->
        sampler:WebGLSampler.t -> pname:GLenum.t -> param:GLint.t -> unit)
      =
      fun (x8510 : 'tags this) ->
        fun ~sampler:(x8507 : WebGLSampler.t) ->
          fun ~pname:(x8508 : GLenum.t) ->
            fun ~param:(x8509 : GLint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8510) "samplerParameteri"
                   [|(WebGLSampler.t_to_js x8507);(GLenum.t_to_js x8508);(
                     GLint.t_to_js x8509)|])
    let (texImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x8522 : 'tags this) ->
        fun ~target:(x8512 : GLenum.t) ->
          fun ~level:(x8513 : GLint.t) ->
            fun ~internalformat:(x8514 : GLint.t) ->
              fun ~width:(x8515 : GLsizei.t) ->
                fun ~height:(x8516 : GLsizei.t) ->
                  fun ~depth:(x8517 : GLsizei.t) ->
                    fun ~border:(x8518 : GLint.t) ->
                      fun ~format:(x8519 : GLenum.t) ->
                        fun ~type_:(x8520 : GLenum.t) ->
                          fun ~pboOffset:(x8521 : GLintptr.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8522)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x8512);(GLint.t_to_js
                                                             x8513);(
                                   GLint.t_to_js x8514);(GLsizei.t_to_js
                                                           x8515);(GLsizei.t_to_js
                                                                    x8516);(
                                   GLsizei.t_to_js x8517);(GLint.t_to_js
                                                             x8518);(
                                   GLenum.t_to_js x8519);(GLenum.t_to_js
                                                            x8520);(GLintptr.t_to_js
                                                                    x8521)|])
    let (texImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8534 : 'tags this) ->
        fun ~target:(x8524 : GLenum.t) ->
          fun ~level:(x8525 : GLint.t) ->
            fun ~internalformat:(x8526 : GLint.t) ->
              fun ~width:(x8527 : GLsizei.t) ->
                fun ~height:(x8528 : GLsizei.t) ->
                  fun ~depth:(x8529 : GLsizei.t) ->
                    fun ~border:(x8530 : GLint.t) ->
                      fun ~format:(x8531 : GLenum.t) ->
                        fun ~type_:(x8532 : GLenum.t) ->
                          fun ~source:(x8533 : TexImageSource.t) ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8534)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x8524);(GLint.t_to_js
                                                             x8525);(
                                   GLint.t_to_js x8526);(GLsizei.t_to_js
                                                           x8527);(GLsizei.t_to_js
                                                                    x8528);(
                                   GLsizei.t_to_js x8529);(GLint.t_to_js
                                                             x8530);(
                                   GLenum.t_to_js x8531);(GLenum.t_to_js
                                                            x8532);(TexImageSource.t_to_js
                                                                    x8533)|])
    let (texImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 or_null -> unit)
      =
      fun (x8547 : 'tags this) ->
        fun ~target:(x8536 : GLenum.t) ->
          fun ~level:(x8537 : GLint.t) ->
            fun ~internalformat:(x8538 : GLint.t) ->
              fun ~width:(x8539 : GLsizei.t) ->
                fun ~height:(x8540 : GLsizei.t) ->
                  fun ~depth:(x8541 : GLsizei.t) ->
                    fun ~border:(x8542 : GLint.t) ->
                      fun ~format:(x8543 : GLenum.t) ->
                        fun ~type_:(x8544 : GLenum.t) ->
                          fun ~srcData:(x8545 : ArrayBufferView.t_0 or_null)
                            ->
                            ignore
                              (Ojs.call (this_to_js Obj.magic x8547)
                                 "texImage3D"
                                 [|(GLenum.t_to_js x8536);(GLint.t_to_js
                                                             x8537);(
                                   GLint.t_to_js x8538);(GLsizei.t_to_js
                                                           x8539);(GLsizei.t_to_js
                                                                    x8540);(
                                   GLsizei.t_to_js x8541);(GLint.t_to_js
                                                             x8542);(
                                   GLenum.t_to_js x8543);(GLenum.t_to_js
                                                            x8544);(or_null_to_js
                                                                    ArrayBufferView.t_0_to_js
                                                                    x8545)|])
    let (texImage3D''' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            internalformat:GLint.t ->
              width:GLsizei.t ->
                height:GLsizei.t ->
                  depth:GLsizei.t ->
                    border:GLint.t ->
                      format:GLenum.t ->
                        type_:GLenum.t ->
                          srcData:ArrayBufferView.t_0 ->
                            srcOffset:GLuint.t -> unit)
      =
      fun (x8560 : 'tags this) ->
        fun ~target:(x8549 : GLenum.t) ->
          fun ~level:(x8550 : GLint.t) ->
            fun ~internalformat:(x8551 : GLint.t) ->
              fun ~width:(x8552 : GLsizei.t) ->
                fun ~height:(x8553 : GLsizei.t) ->
                  fun ~depth:(x8554 : GLsizei.t) ->
                    fun ~border:(x8555 : GLint.t) ->
                      fun ~format:(x8556 : GLenum.t) ->
                        fun ~type_:(x8557 : GLenum.t) ->
                          fun ~srcData:(x8558 : ArrayBufferView.t_0) ->
                            fun ~srcOffset:(x8559 : GLuint.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x8560)
                                   "texImage3D"
                                   [|(GLenum.t_to_js x8549);(GLint.t_to_js
                                                               x8550);(
                                     GLint.t_to_js x8551);(GLsizei.t_to_js
                                                             x8552);(
                                     GLsizei.t_to_js x8553);(GLsizei.t_to_js
                                                               x8554);(
                                     GLint.t_to_js x8555);(GLenum.t_to_js
                                                             x8556);(
                                     GLenum.t_to_js x8557);(ArrayBufferView.t_0_to_js
                                                              x8558);(
                                     GLuint.t_to_js x8559)|])
    let (texStorage2D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x8567 : 'tags this) ->
        fun ~target:(x8562 : GLenum.t) ->
          fun ~levels:(x8563 : GLsizei.t) ->
            fun ~internalformat:(x8564 : GLenum.t) ->
              fun ~width:(x8565 : GLsizei.t) ->
                fun ~height:(x8566 : GLsizei.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8567) "texStorage2D"
                       [|(GLenum.t_to_js x8562);(GLsizei.t_to_js x8563);(
                         GLenum.t_to_js x8564);(GLsizei.t_to_js x8565);(
                         GLsizei.t_to_js x8566)|])
    let (texStorage3D :
      'tags this ->
        target:GLenum.t ->
          levels:GLsizei.t ->
            internalformat:GLenum.t ->
              width:GLsizei.t -> height:GLsizei.t -> depth:GLsizei.t -> unit)
      =
      fun (x8575 : 'tags this) ->
        fun ~target:(x8569 : GLenum.t) ->
          fun ~levels:(x8570 : GLsizei.t) ->
            fun ~internalformat:(x8571 : GLenum.t) ->
              fun ~width:(x8572 : GLsizei.t) ->
                fun ~height:(x8573 : GLsizei.t) ->
                  fun ~depth:(x8574 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x8575) "texStorage3D"
                         [|(GLenum.t_to_js x8569);(GLsizei.t_to_js x8570);(
                           GLenum.t_to_js x8571);(GLsizei.t_to_js x8572);(
                           GLsizei.t_to_js x8573);(GLsizei.t_to_js x8574)|])
    let (texSubImage3D :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> pboOffset:GLintptr.t -> unit)
      =
      fun (x8588 : 'tags this) ->
        fun ~target:(x8577 : GLenum.t) ->
          fun ~level:(x8578 : GLint.t) ->
            fun ~xoffset:(x8579 : GLint.t) ->
              fun ~yoffset:(x8580 : GLint.t) ->
                fun ~zoffset:(x8581 : GLint.t) ->
                  fun ~width:(x8582 : GLsizei.t) ->
                    fun ~height:(x8583 : GLsizei.t) ->
                      fun ~depth:(x8584 : GLsizei.t) ->
                        fun ~format:(x8585 : GLenum.t) ->
                          fun ~type_:(x8586 : GLenum.t) ->
                            fun ~pboOffset:(x8587 : GLintptr.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x8588)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x8577);(GLint.t_to_js
                                                               x8578);(
                                     GLint.t_to_js x8579);(GLint.t_to_js
                                                             x8580);(
                                     GLint.t_to_js x8581);(GLsizei.t_to_js
                                                             x8582);(
                                     GLsizei.t_to_js x8583);(GLsizei.t_to_js
                                                               x8584);(
                                     GLenum.t_to_js x8585);(GLenum.t_to_js
                                                              x8586);(
                                     GLintptr.t_to_js x8587)|])
    let (texSubImage3D' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t -> source:TexImageSource.t -> unit)
      =
      fun (x8601 : 'tags this) ->
        fun ~target:(x8590 : GLenum.t) ->
          fun ~level:(x8591 : GLint.t) ->
            fun ~xoffset:(x8592 : GLint.t) ->
              fun ~yoffset:(x8593 : GLint.t) ->
                fun ~zoffset:(x8594 : GLint.t) ->
                  fun ~width:(x8595 : GLsizei.t) ->
                    fun ~height:(x8596 : GLsizei.t) ->
                      fun ~depth:(x8597 : GLsizei.t) ->
                        fun ~format:(x8598 : GLenum.t) ->
                          fun ~type_:(x8599 : GLenum.t) ->
                            fun ~source:(x8600 : TexImageSource.t) ->
                              ignore
                                (Ojs.call (this_to_js Obj.magic x8601)
                                   "texSubImage3D"
                                   [|(GLenum.t_to_js x8590);(GLint.t_to_js
                                                               x8591);(
                                     GLint.t_to_js x8592);(GLint.t_to_js
                                                             x8593);(
                                     GLint.t_to_js x8594);(GLsizei.t_to_js
                                                             x8595);(
                                     GLsizei.t_to_js x8596);(GLsizei.t_to_js
                                                               x8597);(
                                     GLenum.t_to_js x8598);(GLenum.t_to_js
                                                              x8599);(
                                     TexImageSource.t_to_js x8600)|])
    let (texSubImage3D'' :
      'tags this ->
        target:GLenum.t ->
          level:GLint.t ->
            xoffset:GLint.t ->
              yoffset:GLint.t ->
                zoffset:GLint.t ->
                  width:GLsizei.t ->
                    height:GLsizei.t ->
                      depth:GLsizei.t ->
                        format:GLenum.t ->
                          type_:GLenum.t ->
                            srcData:ArrayBufferView.t_0 or_null ->
                              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x8618 : 'tags this) ->
        fun ~target:(x8603 : GLenum.t) ->
          fun ~level:(x8604 : GLint.t) ->
            fun ~xoffset:(x8605 : GLint.t) ->
              fun ~yoffset:(x8606 : GLint.t) ->
                fun ~zoffset:(x8607 : GLint.t) ->
                  fun ~width:(x8608 : GLsizei.t) ->
                    fun ~height:(x8609 : GLsizei.t) ->
                      fun ~depth:(x8610 : GLsizei.t) ->
                        fun ~format:(x8611 : GLenum.t) ->
                          fun ~type_:(x8612 : GLenum.t) ->
                            fun
                              ~srcData:(x8613 : ArrayBufferView.t_0 or_null)
                              ->
                              fun ?srcOffset:(x8614 : GLuint.t option) ->
                                fun () ->
                                  ignore
                                    (let x8620 = this_to_js Obj.magic x8618 in
                                     Ojs.call
                                       (Ojs.get_prop_ascii x8620
                                          "texSubImage3D") "apply"
                                       [|x8620;((let x8615 =
                                                   Ojs.new_obj
                                                     (Ojs.get_prop_ascii
                                                        Ojs.global "Array")
                                                     [||] in
                                                 ignore
                                                   (Ojs.call x8615 "push"
                                                      [|(GLenum.t_to_js x8603)|]);
                                                 ignore
                                                   (Ojs.call x8615 "push"
                                                      [|(GLint.t_to_js x8604)|]);
                                                 ignore
                                                   (Ojs.call x8615 "push"
                                                      [|(GLint.t_to_js x8605)|]);
                                                 ignore
                                                   (Ojs.call x8615 "push"
                                                      [|(GLint.t_to_js x8606)|]);
                                                 ignore
                                                   (Ojs.call x8615 "push"
                                                      [|(GLint.t_to_js x8607)|]);
                                                 ignore
                                                   (Ojs.call x8615 "push"
                                                      [|(GLsizei.t_to_js
                                                           x8608)|]);
                                                 ignore
                                                   (Ojs.call x8615 "push"
                                                      [|(GLsizei.t_to_js
                                                           x8609)|]);
                                                 ignore
                                                   (Ojs.call x8615 "push"
                                                      [|(GLsizei.t_to_js
                                                           x8610)|]);
                                                 ignore
                                                   (Ojs.call x8615 "push"
                                                      [|(GLenum.t_to_js x8611)|]);
                                                 ignore
                                                   (Ojs.call x8615 "push"
                                                      [|(GLenum.t_to_js x8612)|]);
                                                 ignore
                                                   (Ojs.call x8615 "push"
                                                      [|(or_null_to_js
                                                           ArrayBufferView.t_0_to_js
                                                           x8613)|]);
                                                 (match x8614 with
                                                  | Some x8616 ->
                                                      ignore
                                                        (Ojs.call x8615
                                                           "push"
                                                           [|(GLuint.t_to_js
                                                                x8616)|])
                                                  | None -> ());
                                                 x8615))|])
    let (transformFeedbackVaryings :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string list -> bufferMode:GLenum.t -> unit)
      =
      fun (x8625 : 'tags this) ->
        fun ~program:(x8621 : WebGLProgram.t) ->
          fun ~varyings:(x8622 : string list) ->
            fun ~bufferMode:(x8624 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8625)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x8621);(Ojs.list_to_js
                                                     Ojs.string_to_js x8622);(
                     GLenum.t_to_js x8624)|])
    let (uniform1ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null -> v0:GLuint.t -> unit)
      =
      fun (x8630 : 'tags this) ->
        fun ~location:(x8627 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x8629 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8630) "uniform1ui"
                 [|(or_null_to_js WebGLUniformLocation.t_to_js x8627);(
                   GLuint.t_to_js x8629)|])
    let (uniform1uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8640 : 'tags this) ->
        fun ~location:(x8632 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8633 : Uint32List.t) ->
            fun ?srcOffset:(x8634 : GLuint.t option) ->
              fun ?srcLength:(x8635 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8642 = this_to_js Obj.magic x8640 in
                     Ojs.call (Ojs.get_prop_ascii x8642 "uniform1uiv")
                       "apply"
                       [|x8642;((let x8636 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8636 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8632)|]);
                                 ignore
                                   (Ojs.call x8636 "push"
                                      [|(Uint32List.t_to_js x8633)|]);
                                 (match x8634 with
                                  | Some x8638 ->
                                      ignore
                                        (Ojs.call x8636 "push"
                                           [|(GLuint.t_to_js x8638)|])
                                  | None -> ());
                                 (match x8635 with
                                  | Some x8637 ->
                                      ignore
                                        (Ojs.call x8636 "push"
                                           [|(GLuint.t_to_js x8637)|])
                                  | None -> ());
                                 x8636))|])
    let (uniform2ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v0:GLuint.t -> v1:GLuint.t -> unit)
      =
      fun (x8647 : 'tags this) ->
        fun ~location:(x8643 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x8645 : GLuint.t) ->
            fun ~v1:(x8646 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8647) "uniform2ui"
                   [|(or_null_to_js WebGLUniformLocation.t_to_js x8643);(
                     GLuint.t_to_js x8645);(GLuint.t_to_js x8646)|])
    let (uniform2uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8657 : 'tags this) ->
        fun ~location:(x8649 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8650 : Uint32List.t) ->
            fun ?srcOffset:(x8651 : GLuint.t option) ->
              fun ?srcLength:(x8652 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8659 = this_to_js Obj.magic x8657 in
                     Ojs.call (Ojs.get_prop_ascii x8659 "uniform2uiv")
                       "apply"
                       [|x8659;((let x8653 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8653 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8649)|]);
                                 ignore
                                   (Ojs.call x8653 "push"
                                      [|(Uint32List.t_to_js x8650)|]);
                                 (match x8651 with
                                  | Some x8655 ->
                                      ignore
                                        (Ojs.call x8653 "push"
                                           [|(GLuint.t_to_js x8655)|])
                                  | None -> ());
                                 (match x8652 with
                                  | Some x8654 ->
                                      ignore
                                        (Ojs.call x8653 "push"
                                           [|(GLuint.t_to_js x8654)|])
                                  | None -> ());
                                 x8653))|])
    let (uniform3ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> unit)
      =
      fun (x8665 : 'tags this) ->
        fun ~location:(x8660 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x8662 : GLuint.t) ->
            fun ~v1:(x8663 : GLuint.t) ->
              fun ~v2:(x8664 : GLuint.t) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x8665) "uniform3ui"
                     [|(or_null_to_js WebGLUniformLocation.t_to_js x8660);(
                       GLuint.t_to_js x8662);(GLuint.t_to_js x8663);(
                       GLuint.t_to_js x8664)|])
    let (uniform3uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8675 : 'tags this) ->
        fun ~location:(x8667 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8668 : Uint32List.t) ->
            fun ?srcOffset:(x8669 : GLuint.t option) ->
              fun ?srcLength:(x8670 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8677 = this_to_js Obj.magic x8675 in
                     Ojs.call (Ojs.get_prop_ascii x8677 "uniform3uiv")
                       "apply"
                       [|x8677;((let x8671 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8671 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8667)|]);
                                 ignore
                                   (Ojs.call x8671 "push"
                                      [|(Uint32List.t_to_js x8668)|]);
                                 (match x8669 with
                                  | Some x8673 ->
                                      ignore
                                        (Ojs.call x8671 "push"
                                           [|(GLuint.t_to_js x8673)|])
                                  | None -> ());
                                 (match x8670 with
                                  | Some x8672 ->
                                      ignore
                                        (Ojs.call x8671 "push"
                                           [|(GLuint.t_to_js x8672)|])
                                  | None -> ());
                                 x8671))|])
    let (uniform4ui :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          v0:GLuint.t -> v1:GLuint.t -> v2:GLuint.t -> v3:GLuint.t -> unit)
      =
      fun (x8684 : 'tags this) ->
        fun ~location:(x8678 : WebGLUniformLocation.t or_null) ->
          fun ~v0:(x8680 : GLuint.t) ->
            fun ~v1:(x8681 : GLuint.t) ->
              fun ~v2:(x8682 : GLuint.t) ->
                fun ~v3:(x8683 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8684) "uniform4ui"
                       [|(or_null_to_js WebGLUniformLocation.t_to_js x8678);(
                         GLuint.t_to_js x8680);(GLuint.t_to_js x8681);(
                         GLuint.t_to_js x8682);(GLuint.t_to_js x8683)|])
    let (uniform4uiv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:Uint32List.t ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8694 : 'tags this) ->
        fun ~location:(x8686 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x8687 : Uint32List.t) ->
            fun ?srcOffset:(x8688 : GLuint.t option) ->
              fun ?srcLength:(x8689 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x8696 = this_to_js Obj.magic x8694 in
                     Ojs.call (Ojs.get_prop_ascii x8696 "uniform4uiv")
                       "apply"
                       [|x8696;((let x8690 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x8690 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x8686)|]);
                                 ignore
                                   (Ojs.call x8690 "push"
                                      [|(Uint32List.t_to_js x8687)|]);
                                 (match x8688 with
                                  | Some x8692 ->
                                      ignore
                                        (Ojs.call x8690 "push"
                                           [|(GLuint.t_to_js x8692)|])
                                  | None -> ());
                                 (match x8689 with
                                  | Some x8691 ->
                                      ignore
                                        (Ojs.call x8690 "push"
                                           [|(GLuint.t_to_js x8691)|])
                                  | None -> ());
                                 x8690))|])
    let (uniformBlockBinding :
      'tags this ->
        program:WebGLProgram.t ->
          uniformBlockIndex:GLuint.t -> uniformBlockBinding:GLuint.t -> unit)
      =
      fun (x8700 : 'tags this) ->
        fun ~program:(x8697 : WebGLProgram.t) ->
          fun ~uniformBlockIndex:(x8698 : GLuint.t) ->
            fun ~uniformBlockBinding:(x8699 : GLuint.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8700) "uniformBlockBinding"
                   [|(WebGLProgram.t_to_js x8697);(GLuint.t_to_js x8698);(
                     GLuint.t_to_js x8699)|])
    let (uniformMatrix2x3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8711 : 'tags this) ->
        fun ~location:(x8702 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8703 : GLboolean.t) ->
            fun ~data:(x8704 : Float32List.t) ->
              fun ?srcOffset:(x8705 : GLuint.t option) ->
                fun ?srcLength:(x8706 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8713 = this_to_js Obj.magic x8711 in
                       Ojs.call
                         (Ojs.get_prop_ascii x8713 "uniformMatrix2x3fv")
                         "apply"
                         [|x8713;((let x8707 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8707 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8702)|]);
                                   ignore
                                     (Ojs.call x8707 "push"
                                        [|(GLboolean.t_to_js x8703)|]);
                                   ignore
                                     (Ojs.call x8707 "push"
                                        [|(Float32List.t_to_js x8704)|]);
                                   (match x8705 with
                                    | Some x8709 ->
                                        ignore
                                          (Ojs.call x8707 "push"
                                             [|(GLuint.t_to_js x8709)|])
                                    | None -> ());
                                   (match x8706 with
                                    | Some x8708 ->
                                        ignore
                                          (Ojs.call x8707 "push"
                                             [|(GLuint.t_to_js x8708)|])
                                    | None -> ());
                                   x8707))|])
    let (uniformMatrix2x4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8723 : 'tags this) ->
        fun ~location:(x8714 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8715 : GLboolean.t) ->
            fun ~data:(x8716 : Float32List.t) ->
              fun ?srcOffset:(x8717 : GLuint.t option) ->
                fun ?srcLength:(x8718 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8725 = this_to_js Obj.magic x8723 in
                       Ojs.call
                         (Ojs.get_prop_ascii x8725 "uniformMatrix2x4fv")
                         "apply"
                         [|x8725;((let x8719 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8719 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8714)|]);
                                   ignore
                                     (Ojs.call x8719 "push"
                                        [|(GLboolean.t_to_js x8715)|]);
                                   ignore
                                     (Ojs.call x8719 "push"
                                        [|(Float32List.t_to_js x8716)|]);
                                   (match x8717 with
                                    | Some x8721 ->
                                        ignore
                                          (Ojs.call x8719 "push"
                                             [|(GLuint.t_to_js x8721)|])
                                    | None -> ());
                                   (match x8718 with
                                    | Some x8720 ->
                                        ignore
                                          (Ojs.call x8719 "push"
                                             [|(GLuint.t_to_js x8720)|])
                                    | None -> ());
                                   x8719))|])
    let (uniformMatrix3x2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8735 : 'tags this) ->
        fun ~location:(x8726 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8727 : GLboolean.t) ->
            fun ~data:(x8728 : Float32List.t) ->
              fun ?srcOffset:(x8729 : GLuint.t option) ->
                fun ?srcLength:(x8730 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8737 = this_to_js Obj.magic x8735 in
                       Ojs.call
                         (Ojs.get_prop_ascii x8737 "uniformMatrix3x2fv")
                         "apply"
                         [|x8737;((let x8731 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8731 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8726)|]);
                                   ignore
                                     (Ojs.call x8731 "push"
                                        [|(GLboolean.t_to_js x8727)|]);
                                   ignore
                                     (Ojs.call x8731 "push"
                                        [|(Float32List.t_to_js x8728)|]);
                                   (match x8729 with
                                    | Some x8733 ->
                                        ignore
                                          (Ojs.call x8731 "push"
                                             [|(GLuint.t_to_js x8733)|])
                                    | None -> ());
                                   (match x8730 with
                                    | Some x8732 ->
                                        ignore
                                          (Ojs.call x8731 "push"
                                             [|(GLuint.t_to_js x8732)|])
                                    | None -> ());
                                   x8731))|])
    let (uniformMatrix3x4fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8747 : 'tags this) ->
        fun ~location:(x8738 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8739 : GLboolean.t) ->
            fun ~data:(x8740 : Float32List.t) ->
              fun ?srcOffset:(x8741 : GLuint.t option) ->
                fun ?srcLength:(x8742 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8749 = this_to_js Obj.magic x8747 in
                       Ojs.call
                         (Ojs.get_prop_ascii x8749 "uniformMatrix3x4fv")
                         "apply"
                         [|x8749;((let x8743 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8743 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8738)|]);
                                   ignore
                                     (Ojs.call x8743 "push"
                                        [|(GLboolean.t_to_js x8739)|]);
                                   ignore
                                     (Ojs.call x8743 "push"
                                        [|(Float32List.t_to_js x8740)|]);
                                   (match x8741 with
                                    | Some x8745 ->
                                        ignore
                                          (Ojs.call x8743 "push"
                                             [|(GLuint.t_to_js x8745)|])
                                    | None -> ());
                                   (match x8742 with
                                    | Some x8744 ->
                                        ignore
                                          (Ojs.call x8743 "push"
                                             [|(GLuint.t_to_js x8744)|])
                                    | None -> ());
                                   x8743))|])
    let (uniformMatrix4x2fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8759 : 'tags this) ->
        fun ~location:(x8750 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8751 : GLboolean.t) ->
            fun ~data:(x8752 : Float32List.t) ->
              fun ?srcOffset:(x8753 : GLuint.t option) ->
                fun ?srcLength:(x8754 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8761 = this_to_js Obj.magic x8759 in
                       Ojs.call
                         (Ojs.get_prop_ascii x8761 "uniformMatrix4x2fv")
                         "apply"
                         [|x8761;((let x8755 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8755 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8750)|]);
                                   ignore
                                     (Ojs.call x8755 "push"
                                        [|(GLboolean.t_to_js x8751)|]);
                                   ignore
                                     (Ojs.call x8755 "push"
                                        [|(Float32List.t_to_js x8752)|]);
                                   (match x8753 with
                                    | Some x8757 ->
                                        ignore
                                          (Ojs.call x8755 "push"
                                             [|(GLuint.t_to_js x8757)|])
                                    | None -> ());
                                   (match x8754 with
                                    | Some x8756 ->
                                        ignore
                                          (Ojs.call x8755 "push"
                                             [|(GLuint.t_to_js x8756)|])
                                    | None -> ());
                                   x8755))|])
    let (uniformMatrix4x3fv :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:Float32List.t ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x8771 : 'tags this) ->
        fun ~location:(x8762 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x8763 : GLboolean.t) ->
            fun ~data:(x8764 : Float32List.t) ->
              fun ?srcOffset:(x8765 : GLuint.t option) ->
                fun ?srcLength:(x8766 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x8773 = this_to_js Obj.magic x8771 in
                       Ojs.call
                         (Ojs.get_prop_ascii x8773 "uniformMatrix4x3fv")
                         "apply"
                         [|x8773;((let x8767 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x8767 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x8762)|]);
                                   ignore
                                     (Ojs.call x8767 "push"
                                        [|(GLboolean.t_to_js x8763)|]);
                                   ignore
                                     (Ojs.call x8767 "push"
                                        [|(Float32List.t_to_js x8764)|]);
                                   (match x8765 with
                                    | Some x8769 ->
                                        ignore
                                          (Ojs.call x8767 "push"
                                             [|(GLuint.t_to_js x8769)|])
                                    | None -> ());
                                   (match x8766 with
                                    | Some x8768 ->
                                        ignore
                                          (Ojs.call x8767 "push"
                                             [|(GLuint.t_to_js x8768)|])
                                    | None -> ());
                                   x8767))|])
    let (vertexAttribDivisor :
      'tags this -> index:GLuint.t -> divisor:GLuint.t -> unit) =
      fun (x8776 : 'tags this) ->
        fun ~index:(x8774 : GLuint.t) ->
          fun ~divisor:(x8775 : GLuint.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8776) "vertexAttribDivisor"
                 [|(GLuint.t_to_js x8774);(GLuint.t_to_js x8775)|])
    let (vertexAttribI4i :
      'tags this ->
        index:GLuint.t ->
          x:GLint.t -> y:GLint.t -> z:GLint.t -> w:GLint.t -> unit)
      =
      fun (x8783 : 'tags this) ->
        fun ~index:(x8778 : GLuint.t) ->
          fun ~x:(x8779 : GLint.t) ->
            fun ~y:(x8780 : GLint.t) ->
              fun ~z:(x8781 : GLint.t) ->
                fun ~w:(x8782 : GLint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8783) "vertexAttribI4i"
                       [|(GLuint.t_to_js x8778);(GLint.t_to_js x8779);(
                         GLint.t_to_js x8780);(GLint.t_to_js x8781);(
                         GLint.t_to_js x8782)|])
    let (vertexAttribI4iv :
      'tags this -> index:GLuint.t -> values:Int32List.t -> unit) =
      fun (x8787 : 'tags this) ->
        fun ~index:(x8785 : GLuint.t) ->
          fun ~values:(x8786 : Int32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8787) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x8785);(Int32List.t_to_js x8786)|])
    let (vertexAttribI4ui :
      'tags this ->
        index:GLuint.t ->
          x:GLuint.t -> y:GLuint.t -> z:GLuint.t -> w:GLuint.t -> unit)
      =
      fun (x8794 : 'tags this) ->
        fun ~index:(x8789 : GLuint.t) ->
          fun ~x:(x8790 : GLuint.t) ->
            fun ~y:(x8791 : GLuint.t) ->
              fun ~z:(x8792 : GLuint.t) ->
                fun ~w:(x8793 : GLuint.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8794) "vertexAttribI4ui"
                       [|(GLuint.t_to_js x8789);(GLuint.t_to_js x8790);(
                         GLuint.t_to_js x8791);(GLuint.t_to_js x8792);(
                         GLuint.t_to_js x8793)|])
    let (vertexAttribI4uiv :
      'tags this -> index:GLuint.t -> values:Uint32List.t -> unit) =
      fun (x8798 : 'tags this) ->
        fun ~index:(x8796 : GLuint.t) ->
          fun ~values:(x8797 : Uint32List.t) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x8798) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x8796);(Uint32List.t_to_js x8797)|])
    let (vertexAttribIPointer :
      'tags this ->
        index:GLuint.t ->
          size:GLint.t ->
            type_:GLenum.t -> stride:GLsizei.t -> offset:GLintptr.t -> unit)
      =
      fun (x8805 : 'tags this) ->
        fun ~index:(x8800 : GLuint.t) ->
          fun ~size:(x8801 : GLint.t) ->
            fun ~type_:(x8802 : GLenum.t) ->
              fun ~stride:(x8803 : GLsizei.t) ->
                fun ~offset:(x8804 : GLintptr.t) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x8805)
                       "vertexAttribIPointer"
                       [|(GLuint.t_to_js x8800);(GLint.t_to_js x8801);(
                         GLenum.t_to_js x8802);(GLsizei.t_to_js x8803);(
                         GLintptr.t_to_js x8804)|])
    let (waitSync :
      'tags this ->
        sync:WebGLSync.t -> flags:GLbitfield.t -> timeout:GLint64.t -> unit)
      =
      fun (x8810 : 'tags this) ->
        fun ~sync:(x8807 : WebGLSync.t) ->
          fun ~flags:(x8808 : GLbitfield.t) ->
            fun ~timeout:(x8809 : GLint64.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x8810) "waitSync"
                   [|(WebGLSync.t_to_js x8807);(GLbitfield.t_to_js x8808);(
                     GLint64.t_to_js x8809)|])
    let (get_ACTIVE_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x8812 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8812)
             "ACTIVE_UNIFORM_BLOCKS")
    let (get_ALREADY_SIGNALED : 'tags this -> GLenum.t) =
      fun (x8814 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8814) "ALREADY_SIGNALED")
    let (get_ANY_SAMPLES_PASSED : 'tags this -> GLenum.t) =
      fun (x8816 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8816)
             "ANY_SAMPLES_PASSED")
    let (get_ANY_SAMPLES_PASSED_CONSERVATIVE : 'tags this -> GLenum.t) =
      fun (x8818 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8818)
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (get_COLOR : 'tags this -> GLenum.t) =
      fun (x8820 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8820) "COLOR")
    let (get_COLOR_ATTACHMENT1 : 'tags this -> GLenum.t) =
      fun (x8822 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8822)
             "COLOR_ATTACHMENT1")
    let (get_COLOR_ATTACHMENT10 : 'tags this -> GLenum.t) =
      fun (x8824 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8824)
             "COLOR_ATTACHMENT10")
    let (get_COLOR_ATTACHMENT11 : 'tags this -> GLenum.t) =
      fun (x8826 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8826)
             "COLOR_ATTACHMENT11")
    let (get_COLOR_ATTACHMENT12 : 'tags this -> GLenum.t) =
      fun (x8828 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8828)
             "COLOR_ATTACHMENT12")
    let (get_COLOR_ATTACHMENT13 : 'tags this -> GLenum.t) =
      fun (x8830 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8830)
             "COLOR_ATTACHMENT13")
    let (get_COLOR_ATTACHMENT14 : 'tags this -> GLenum.t) =
      fun (x8832 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8832)
             "COLOR_ATTACHMENT14")
    let (get_COLOR_ATTACHMENT15 : 'tags this -> GLenum.t) =
      fun (x8834 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8834)
             "COLOR_ATTACHMENT15")
    let (get_COLOR_ATTACHMENT2 : 'tags this -> GLenum.t) =
      fun (x8836 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8836)
             "COLOR_ATTACHMENT2")
    let (get_COLOR_ATTACHMENT3 : 'tags this -> GLenum.t) =
      fun (x8838 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8838)
             "COLOR_ATTACHMENT3")
    let (get_COLOR_ATTACHMENT4 : 'tags this -> GLenum.t) =
      fun (x8840 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8840)
             "COLOR_ATTACHMENT4")
    let (get_COLOR_ATTACHMENT5 : 'tags this -> GLenum.t) =
      fun (x8842 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8842)
             "COLOR_ATTACHMENT5")
    let (get_COLOR_ATTACHMENT6 : 'tags this -> GLenum.t) =
      fun (x8844 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8844)
             "COLOR_ATTACHMENT6")
    let (get_COLOR_ATTACHMENT7 : 'tags this -> GLenum.t) =
      fun (x8846 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8846)
             "COLOR_ATTACHMENT7")
    let (get_COLOR_ATTACHMENT8 : 'tags this -> GLenum.t) =
      fun (x8848 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8848)
             "COLOR_ATTACHMENT8")
    let (get_COLOR_ATTACHMENT9 : 'tags this -> GLenum.t) =
      fun (x8850 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8850)
             "COLOR_ATTACHMENT9")
    let (get_COMPARE_REF_TO_TEXTURE : 'tags this -> GLenum.t) =
      fun (x8852 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8852)
             "COMPARE_REF_TO_TEXTURE")
    let (get_CONDITION_SATISFIED : 'tags this -> GLenum.t) =
      fun (x8854 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8854)
             "CONDITION_SATISFIED")
    let (get_COPY_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x8856 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8856) "COPY_READ_BUFFER")
    let (get_COPY_READ_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x8858 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8858)
             "COPY_READ_BUFFER_BINDING")
    let (get_COPY_WRITE_BUFFER : 'tags this -> GLenum.t) =
      fun (x8860 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8860)
             "COPY_WRITE_BUFFER")
    let (get_COPY_WRITE_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x8862 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8862)
             "COPY_WRITE_BUFFER_BINDING")
    let (get_CURRENT_QUERY : 'tags this -> GLenum.t) =
      fun (x8864 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8864) "CURRENT_QUERY")
    let (get_DEPTH : 'tags this -> GLenum.t) =
      fun (x8866 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8866) "DEPTH")
    let (get_DEPTH24_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x8868 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8868) "DEPTH24_STENCIL8")
    let (get_DEPTH32F_STENCIL8 : 'tags this -> GLenum.t) =
      fun (x8870 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8870)
             "DEPTH32F_STENCIL8")
    let (get_DEPTH_COMPONENT24 : 'tags this -> GLenum.t) =
      fun (x8872 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8872)
             "DEPTH_COMPONENT24")
    let (get_DEPTH_COMPONENT32F : 'tags this -> GLenum.t) =
      fun (x8874 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8874)
             "DEPTH_COMPONENT32F")
    let (get_DRAW_BUFFER0 : 'tags this -> GLenum.t) =
      fun (x8876 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8876) "DRAW_BUFFER0")
    let (get_DRAW_BUFFER1 : 'tags this -> GLenum.t) =
      fun (x8878 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8878) "DRAW_BUFFER1")
    let (get_DRAW_BUFFER10 : 'tags this -> GLenum.t) =
      fun (x8880 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8880) "DRAW_BUFFER10")
    let (get_DRAW_BUFFER11 : 'tags this -> GLenum.t) =
      fun (x8882 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8882) "DRAW_BUFFER11")
    let (get_DRAW_BUFFER12 : 'tags this -> GLenum.t) =
      fun (x8884 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8884) "DRAW_BUFFER12")
    let (get_DRAW_BUFFER13 : 'tags this -> GLenum.t) =
      fun (x8886 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8886) "DRAW_BUFFER13")
    let (get_DRAW_BUFFER14 : 'tags this -> GLenum.t) =
      fun (x8888 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8888) "DRAW_BUFFER14")
    let (get_DRAW_BUFFER15 : 'tags this -> GLenum.t) =
      fun (x8890 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8890) "DRAW_BUFFER15")
    let (get_DRAW_BUFFER2 : 'tags this -> GLenum.t) =
      fun (x8892 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8892) "DRAW_BUFFER2")
    let (get_DRAW_BUFFER3 : 'tags this -> GLenum.t) =
      fun (x8894 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8894) "DRAW_BUFFER3")
    let (get_DRAW_BUFFER4 : 'tags this -> GLenum.t) =
      fun (x8896 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8896) "DRAW_BUFFER4")
    let (get_DRAW_BUFFER5 : 'tags this -> GLenum.t) =
      fun (x8898 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8898) "DRAW_BUFFER5")
    let (get_DRAW_BUFFER6 : 'tags this -> GLenum.t) =
      fun (x8900 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8900) "DRAW_BUFFER6")
    let (get_DRAW_BUFFER7 : 'tags this -> GLenum.t) =
      fun (x8902 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8902) "DRAW_BUFFER7")
    let (get_DRAW_BUFFER8 : 'tags this -> GLenum.t) =
      fun (x8904 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8904) "DRAW_BUFFER8")
    let (get_DRAW_BUFFER9 : 'tags this -> GLenum.t) =
      fun (x8906 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8906) "DRAW_BUFFER9")
    let (get_DRAW_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x8908 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8908) "DRAW_FRAMEBUFFER")
    let (get_DRAW_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x8910 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8910)
             "DRAW_FRAMEBUFFER_BINDING")
    let (get_DYNAMIC_COPY : 'tags this -> GLenum.t) =
      fun (x8912 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8912) "DYNAMIC_COPY")
    let (get_DYNAMIC_READ : 'tags this -> GLenum.t) =
      fun (x8914 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8914) "DYNAMIC_READ")
    let (get_FLOAT_32_UNSIGNED_INT_24_8_REV : 'tags this -> GLenum.t) =
      fun (x8916 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8916)
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (get_FLOAT_MAT2x3 : 'tags this -> GLenum.t) =
      fun (x8918 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8918) "FLOAT_MAT2x3")
    let (get_FLOAT_MAT2x4 : 'tags this -> GLenum.t) =
      fun (x8920 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8920) "FLOAT_MAT2x4")
    let (get_FLOAT_MAT3x2 : 'tags this -> GLenum.t) =
      fun (x8922 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8922) "FLOAT_MAT3x2")
    let (get_FLOAT_MAT3x4 : 'tags this -> GLenum.t) =
      fun (x8924 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8924) "FLOAT_MAT3x4")
    let (get_FLOAT_MAT4x2 : 'tags this -> GLenum.t) =
      fun (x8926 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8926) "FLOAT_MAT4x2")
    let (get_FLOAT_MAT4x3 : 'tags this -> GLenum.t) =
      fun (x8928 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8928) "FLOAT_MAT4x3")
    let (get_FRAGMENT_SHADER_DERIVATIVE_HINT : 'tags this -> GLenum.t) =
      fun (x8930 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8930)
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (get_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : 'tags this -> GLenum.t) =
      fun (x8932 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8932)
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : 'tags this -> GLenum.t) =
      fun (x8934 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8934)
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : 'tags this -> GLenum.t)
      =
      fun (x8936 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8936)
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (get_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : 'tags this -> GLenum.t)
      =
      fun (x8938 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8938)
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (get_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : 'tags this -> GLenum.t) =
      fun (x8940 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8940)
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : 'tags this -> GLenum.t) =
      fun (x8942 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8942)
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_RED_SIZE : 'tags this -> GLenum.t) =
      fun (x8944 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8944)
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : 'tags this -> GLenum.t) =
      fun (x8946 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8946)
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (get_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : 'tags this -> GLenum.t) =
      fun (x8948 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8948)
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (get_FRAMEBUFFER_DEFAULT : 'tags this -> GLenum.t) =
      fun (x8950 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8950)
             "FRAMEBUFFER_DEFAULT")
    let (get_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : 'tags this -> GLenum.t) =
      fun (x8952 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8952)
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (get_HALF_FLOAT : 'tags this -> GLenum.t) =
      fun (x8954 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8954) "HALF_FLOAT")
    let (get_INTERLEAVED_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x8956 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8956)
             "INTERLEAVED_ATTRIBS")
    let (get_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x8958 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8958)
             "INT_2_10_10_10_REV")
    let (get_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x8960 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8960) "INT_SAMPLER_2D")
    let (get_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x8962 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8962)
             "INT_SAMPLER_2D_ARRAY")
    let (get_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x8964 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8964) "INT_SAMPLER_3D")
    let (get_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x8966 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8966) "INT_SAMPLER_CUBE")
    let (get_INVALID_INDEX : 'tags this -> GLenum.t) =
      fun (x8968 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8968) "INVALID_INDEX")
    let (get_MAX : 'tags this -> GLenum.t) =
      fun (x8970 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8970) "MAX")
    let (get_MAX_3D_TEXTURE_SIZE : 'tags this -> GLenum.t) =
      fun (x8972 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8972)
             "MAX_3D_TEXTURE_SIZE")
    let (get_MAX_ARRAY_TEXTURE_LAYERS : 'tags this -> GLenum.t) =
      fun (x8974 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8974)
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (get_MAX_CLIENT_WAIT_TIMEOUT_WEBGL : 'tags this -> GLenum.t) =
      fun (x8976 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8976)
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (get_MAX_COLOR_ATTACHMENTS : 'tags this -> GLenum.t) =
      fun (x8978 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8978)
             "MAX_COLOR_ATTACHMENTS")
    let (get_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x8980 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8980)
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_COMBINED_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x8982 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8982)
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (get_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t)
      =
      fun (x8984 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8984)
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (get_MAX_DRAW_BUFFERS : 'tags this -> GLenum.t) =
      fun (x8986 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8986) "MAX_DRAW_BUFFERS")
    let (get_MAX_ELEMENTS_INDICES : 'tags this -> GLenum.t) =
      fun (x8988 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8988)
             "MAX_ELEMENTS_INDICES")
    let (get_MAX_ELEMENTS_VERTICES : 'tags this -> GLenum.t) =
      fun (x8990 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8990)
             "MAX_ELEMENTS_VERTICES")
    let (get_MAX_ELEMENT_INDEX : 'tags this -> GLenum.t) =
      fun (x8992 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8992)
             "MAX_ELEMENT_INDEX")
    let (get_MAX_FRAGMENT_INPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x8994 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8994)
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (get_MAX_FRAGMENT_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x8996 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8996)
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (get_MAX_FRAGMENT_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x8998 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x8998)
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (get_MAX_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x9000 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9000)
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (get_MAX_SAMPLES : 'tags this -> GLenum.t) =
      fun (x9002 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9002) "MAX_SAMPLES")
    let (get_MAX_SERVER_WAIT_TIMEOUT : 'tags this -> GLenum.t) =
      fun (x9004 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9004)
             "MAX_SERVER_WAIT_TIMEOUT")
    let (get_MAX_TEXTURE_LOD_BIAS : 'tags this -> GLenum.t) =
      fun (x9006 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9006)
             "MAX_TEXTURE_LOD_BIAS")
    let (get_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x9008 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9008)
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS :
      'tags this -> GLenum.t) =
      fun (x9010 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9010)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (get_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS :
      'tags this -> GLenum.t) =
      fun (x9012 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9012)
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (get_MAX_UNIFORM_BLOCK_SIZE : 'tags this -> GLenum.t) =
      fun (x9014 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9014)
             "MAX_UNIFORM_BLOCK_SIZE")
    let (get_MAX_UNIFORM_BUFFER_BINDINGS : 'tags this -> GLenum.t) =
      fun (x9016 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9016)
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (get_MAX_VARYING_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9018 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9018)
             "MAX_VARYING_COMPONENTS")
    let (get_MAX_VERTEX_OUTPUT_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9020 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9020)
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (get_MAX_VERTEX_UNIFORM_BLOCKS : 'tags this -> GLenum.t) =
      fun (x9022 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9022)
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (get_MAX_VERTEX_UNIFORM_COMPONENTS : 'tags this -> GLenum.t) =
      fun (x9024 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9024)
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (get_MIN : 'tags this -> GLenum.t) =
      fun (x9026 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9026) "MIN")
    let (get_MIN_PROGRAM_TEXEL_OFFSET : 'tags this -> GLenum.t) =
      fun (x9028 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9028)
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (get_OBJECT_TYPE : 'tags this -> GLenum.t) =
      fun (x9030 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9030) "OBJECT_TYPE")
    let (get_PACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x9032 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9032) "PACK_ROW_LENGTH")
    let (get_PACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x9034 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9034) "PACK_SKIP_PIXELS")
    let (get_PACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x9036 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9036) "PACK_SKIP_ROWS")
    let (get_PIXEL_PACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x9038 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9038)
             "PIXEL_PACK_BUFFER")
    let (get_PIXEL_PACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9040 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9040)
             "PIXEL_PACK_BUFFER_BINDING")
    let (get_PIXEL_UNPACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x9042 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9042)
             "PIXEL_UNPACK_BUFFER")
    let (get_PIXEL_UNPACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9044 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9044)
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (get_QUERY_RESULT : 'tags this -> GLenum.t) =
      fun (x9046 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9046) "QUERY_RESULT")
    let (get_QUERY_RESULT_AVAILABLE : 'tags this -> GLenum.t) =
      fun (x9048 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9048)
             "QUERY_RESULT_AVAILABLE")
    let (get_R11F_G11F_B10F : 'tags this -> GLenum.t) =
      fun (x9050 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9050) "R11F_G11F_B10F")
    let (get_R16F : 'tags this -> GLenum.t) =
      fun (x9052 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9052) "R16F")
    let (get_R16I : 'tags this -> GLenum.t) =
      fun (x9054 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9054) "R16I")
    let (get_R16UI : 'tags this -> GLenum.t) =
      fun (x9056 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9056) "R16UI")
    let (get_R32F : 'tags this -> GLenum.t) =
      fun (x9058 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9058) "R32F")
    let (get_R32I : 'tags this -> GLenum.t) =
      fun (x9060 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9060) "R32I")
    let (get_R32UI : 'tags this -> GLenum.t) =
      fun (x9062 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9062) "R32UI")
    let (get_R8 : 'tags this -> GLenum.t) =
      fun (x9064 : 'tags this) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9064) "R8")
    let (get_R8I : 'tags this -> GLenum.t) =
      fun (x9066 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9066) "R8I")
    let (get_R8UI : 'tags this -> GLenum.t) =
      fun (x9068 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9068) "R8UI")
    let (get_R8_SNORM : 'tags this -> GLenum.t) =
      fun (x9070 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9070) "R8_SNORM")
    let (get_RASTERIZER_DISCARD : 'tags this -> GLenum.t) =
      fun (x9072 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9072)
             "RASTERIZER_DISCARD")
    let (get_READ_BUFFER : 'tags this -> GLenum.t) =
      fun (x9074 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9074) "READ_BUFFER")
    let (get_READ_FRAMEBUFFER : 'tags this -> GLenum.t) =
      fun (x9076 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9076) "READ_FRAMEBUFFER")
    let (get_READ_FRAMEBUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9078 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9078)
             "READ_FRAMEBUFFER_BINDING")
    let (get_RED : 'tags this -> GLenum.t) =
      fun (x9080 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9080) "RED")
    let (get_RED_INTEGER : 'tags this -> GLenum.t) =
      fun (x9082 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9082) "RED_INTEGER")
    let (get_RENDERBUFFER_SAMPLES : 'tags this -> GLenum.t) =
      fun (x9084 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9084)
             "RENDERBUFFER_SAMPLES")
    let (get_RG : 'tags this -> GLenum.t) =
      fun (x9086 : 'tags this) ->
        GLenum.t_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x9086) "RG")
    let (get_RG16F : 'tags this -> GLenum.t) =
      fun (x9088 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9088) "RG16F")
    let (get_RG16I : 'tags this -> GLenum.t) =
      fun (x9090 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9090) "RG16I")
    let (get_RG16UI : 'tags this -> GLenum.t) =
      fun (x9092 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9092) "RG16UI")
    let (get_RG32F : 'tags this -> GLenum.t) =
      fun (x9094 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9094) "RG32F")
    let (get_RG32I : 'tags this -> GLenum.t) =
      fun (x9096 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9096) "RG32I")
    let (get_RG32UI : 'tags this -> GLenum.t) =
      fun (x9098 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9098) "RG32UI")
    let (get_RG8 : 'tags this -> GLenum.t) =
      fun (x9100 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9100) "RG8")
    let (get_RG8I : 'tags this -> GLenum.t) =
      fun (x9102 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9102) "RG8I")
    let (get_RG8UI : 'tags this -> GLenum.t) =
      fun (x9104 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9104) "RG8UI")
    let (get_RG8_SNORM : 'tags this -> GLenum.t) =
      fun (x9106 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9106) "RG8_SNORM")
    let (get_RGB10_A2 : 'tags this -> GLenum.t) =
      fun (x9108 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9108) "RGB10_A2")
    let (get_RGB10_A2UI : 'tags this -> GLenum.t) =
      fun (x9110 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9110) "RGB10_A2UI")
    let (get_RGB16F : 'tags this -> GLenum.t) =
      fun (x9112 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9112) "RGB16F")
    let (get_RGB16I : 'tags this -> GLenum.t) =
      fun (x9114 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9114) "RGB16I")
    let (get_RGB16UI : 'tags this -> GLenum.t) =
      fun (x9116 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9116) "RGB16UI")
    let (get_RGB32F : 'tags this -> GLenum.t) =
      fun (x9118 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9118) "RGB32F")
    let (get_RGB32I : 'tags this -> GLenum.t) =
      fun (x9120 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9120) "RGB32I")
    let (get_RGB32UI : 'tags this -> GLenum.t) =
      fun (x9122 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9122) "RGB32UI")
    let (get_RGB8 : 'tags this -> GLenum.t) =
      fun (x9124 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9124) "RGB8")
    let (get_RGB8I : 'tags this -> GLenum.t) =
      fun (x9126 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9126) "RGB8I")
    let (get_RGB8UI : 'tags this -> GLenum.t) =
      fun (x9128 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9128) "RGB8UI")
    let (get_RGB8_SNORM : 'tags this -> GLenum.t) =
      fun (x9130 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9130) "RGB8_SNORM")
    let (get_RGB9_E5 : 'tags this -> GLenum.t) =
      fun (x9132 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9132) "RGB9_E5")
    let (get_RGBA16F : 'tags this -> GLenum.t) =
      fun (x9134 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9134) "RGBA16F")
    let (get_RGBA16I : 'tags this -> GLenum.t) =
      fun (x9136 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9136) "RGBA16I")
    let (get_RGBA16UI : 'tags this -> GLenum.t) =
      fun (x9138 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9138) "RGBA16UI")
    let (get_RGBA32F : 'tags this -> GLenum.t) =
      fun (x9140 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9140) "RGBA32F")
    let (get_RGBA32I : 'tags this -> GLenum.t) =
      fun (x9142 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9142) "RGBA32I")
    let (get_RGBA32UI : 'tags this -> GLenum.t) =
      fun (x9144 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9144) "RGBA32UI")
    let (get_RGBA8 : 'tags this -> GLenum.t) =
      fun (x9146 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9146) "RGBA8")
    let (get_RGBA8I : 'tags this -> GLenum.t) =
      fun (x9148 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9148) "RGBA8I")
    let (get_RGBA8UI : 'tags this -> GLenum.t) =
      fun (x9150 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9150) "RGBA8UI")
    let (get_RGBA8_SNORM : 'tags this -> GLenum.t) =
      fun (x9152 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9152) "RGBA8_SNORM")
    let (get_RGBA_INTEGER : 'tags this -> GLenum.t) =
      fun (x9154 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9154) "RGBA_INTEGER")
    let (get_RGB_INTEGER : 'tags this -> GLenum.t) =
      fun (x9156 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9156) "RGB_INTEGER")
    let (get_RG_INTEGER : 'tags this -> GLenum.t) =
      fun (x9158 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9158) "RG_INTEGER")
    let (get_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x9160 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9160) "SAMPLER_2D_ARRAY")
    let (get_SAMPLER_2D_ARRAY_SHADOW : 'tags this -> GLenum.t) =
      fun (x9162 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9162)
             "SAMPLER_2D_ARRAY_SHADOW")
    let (get_SAMPLER_2D_SHADOW : 'tags this -> GLenum.t) =
      fun (x9164 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9164)
             "SAMPLER_2D_SHADOW")
    let (get_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x9166 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9166) "SAMPLER_3D")
    let (get_SAMPLER_BINDING : 'tags this -> GLenum.t) =
      fun (x9168 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9168) "SAMPLER_BINDING")
    let (get_SAMPLER_CUBE_SHADOW : 'tags this -> GLenum.t) =
      fun (x9170 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9170)
             "SAMPLER_CUBE_SHADOW")
    let (get_SEPARATE_ATTRIBS : 'tags this -> GLenum.t) =
      fun (x9172 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9172) "SEPARATE_ATTRIBS")
    let (get_SIGNALED : 'tags this -> GLenum.t) =
      fun (x9174 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9174) "SIGNALED")
    let (get_SIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x9176 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9176)
             "SIGNED_NORMALIZED")
    let (get_SRGB : 'tags this -> GLenum.t) =
      fun (x9178 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9178) "SRGB")
    let (get_SRGB8 : 'tags this -> GLenum.t) =
      fun (x9180 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9180) "SRGB8")
    let (get_SRGB8_ALPHA8 : 'tags this -> GLenum.t) =
      fun (x9182 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9182) "SRGB8_ALPHA8")
    let (get_STATIC_COPY : 'tags this -> GLenum.t) =
      fun (x9184 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9184) "STATIC_COPY")
    let (get_STATIC_READ : 'tags this -> GLenum.t) =
      fun (x9186 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9186) "STATIC_READ")
    let (get_STENCIL : 'tags this -> GLenum.t) =
      fun (x9188 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9188) "STENCIL")
    let (get_STREAM_COPY : 'tags this -> GLenum.t) =
      fun (x9190 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9190) "STREAM_COPY")
    let (get_STREAM_READ : 'tags this -> GLenum.t) =
      fun (x9192 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9192) "STREAM_READ")
    let (get_SYNC_CONDITION : 'tags this -> GLenum.t) =
      fun (x9194 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9194) "SYNC_CONDITION")
    let (get_SYNC_FENCE : 'tags this -> GLenum.t) =
      fun (x9196 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9196) "SYNC_FENCE")
    let (get_SYNC_FLAGS : 'tags this -> GLenum.t) =
      fun (x9198 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9198) "SYNC_FLAGS")
    let (get_SYNC_FLUSH_COMMANDS_BIT : 'tags this -> GLenum.t) =
      fun (x9200 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9200)
             "SYNC_FLUSH_COMMANDS_BIT")
    let (get_SYNC_GPU_COMMANDS_COMPLETE : 'tags this -> GLenum.t) =
      fun (x9202 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9202)
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (get_SYNC_STATUS : 'tags this -> GLenum.t) =
      fun (x9204 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9204) "SYNC_STATUS")
    let (get_TEXTURE_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x9206 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9206) "TEXTURE_2D_ARRAY")
    let (get_TEXTURE_3D : 'tags this -> GLenum.t) =
      fun (x9208 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9208) "TEXTURE_3D")
    let (get_TEXTURE_BASE_LEVEL : 'tags this -> GLenum.t) =
      fun (x9210 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9210)
             "TEXTURE_BASE_LEVEL")
    let (get_TEXTURE_BINDING_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x9212 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9212)
             "TEXTURE_BINDING_2D_ARRAY")
    let (get_TEXTURE_BINDING_3D : 'tags this -> GLenum.t) =
      fun (x9214 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9214)
             "TEXTURE_BINDING_3D")
    let (get_TEXTURE_COMPARE_FUNC : 'tags this -> GLenum.t) =
      fun (x9216 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9216)
             "TEXTURE_COMPARE_FUNC")
    let (get_TEXTURE_COMPARE_MODE : 'tags this -> GLenum.t) =
      fun (x9218 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9218)
             "TEXTURE_COMPARE_MODE")
    let (get_TEXTURE_IMMUTABLE_FORMAT : 'tags this -> GLenum.t) =
      fun (x9220 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9220)
             "TEXTURE_IMMUTABLE_FORMAT")
    let (get_TEXTURE_IMMUTABLE_LEVELS : 'tags this -> GLenum.t) =
      fun (x9222 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9222)
             "TEXTURE_IMMUTABLE_LEVELS")
    let (get_TEXTURE_MAX_LEVEL : 'tags this -> GLenum.t) =
      fun (x9224 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9224)
             "TEXTURE_MAX_LEVEL")
    let (get_TEXTURE_MAX_LOD : 'tags this -> GLenum.t) =
      fun (x9226 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9226) "TEXTURE_MAX_LOD")
    let (get_TEXTURE_MIN_LOD : 'tags this -> GLenum.t) =
      fun (x9228 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9228) "TEXTURE_MIN_LOD")
    let (get_TEXTURE_WRAP_R : 'tags this -> GLenum.t) =
      fun (x9230 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9230) "TEXTURE_WRAP_R")
    let (get_TIMEOUT_EXPIRED : 'tags this -> GLenum.t) =
      fun (x9232 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9232) "TIMEOUT_EXPIRED")
    let (get_TIMEOUT_IGNORED : 'tags this -> GLint64.t) =
      fun (x9234 : 'tags this) ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9234) "TIMEOUT_IGNORED")
    let (get_TRANSFORM_FEEDBACK : 'tags this -> GLenum.t) =
      fun (x9236 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9236)
             "TRANSFORM_FEEDBACK")
    let (get_TRANSFORM_FEEDBACK_ACTIVE : 'tags this -> GLenum.t) =
      fun (x9238 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9238)
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (get_TRANSFORM_FEEDBACK_BINDING : 'tags this -> GLenum.t) =
      fun (x9240 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9240)
             "TRANSFORM_FEEDBACK_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER : 'tags this -> GLenum.t) =
      fun (x9242 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9242)
             "TRANSFORM_FEEDBACK_BUFFER")
    let (get_TRANSFORM_FEEDBACK_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9244 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9244)
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (get_TRANSFORM_FEEDBACK_BUFFER_MODE : 'tags this -> GLenum.t) =
      fun (x9246 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9246)
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x9248 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9248)
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (get_TRANSFORM_FEEDBACK_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x9250 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9250)
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (get_TRANSFORM_FEEDBACK_PAUSED : 'tags this -> GLenum.t) =
      fun (x9252 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9252)
             "TRANSFORM_FEEDBACK_PAUSED")
    let (get_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : 'tags this -> GLenum.t)
      =
      fun (x9254 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9254)
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (get_TRANSFORM_FEEDBACK_VARYINGS : 'tags this -> GLenum.t) =
      fun (x9256 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9256)
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (get_UNIFORM_ARRAY_STRIDE : 'tags this -> GLenum.t) =
      fun (x9258 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9258)
             "UNIFORM_ARRAY_STRIDE")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORMS : 'tags this -> GLenum.t) =
      fun (x9260 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9260)
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (get_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES : 'tags this -> GLenum.t) =
      fun (x9262 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9262)
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (get_UNIFORM_BLOCK_BINDING : 'tags this -> GLenum.t) =
      fun (x9264 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9264)
             "UNIFORM_BLOCK_BINDING")
    let (get_UNIFORM_BLOCK_DATA_SIZE : 'tags this -> GLenum.t) =
      fun (x9266 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9266)
             "UNIFORM_BLOCK_DATA_SIZE")
    let (get_UNIFORM_BLOCK_INDEX : 'tags this -> GLenum.t) =
      fun (x9268 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9268)
             "UNIFORM_BLOCK_INDEX")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER :
      'tags this -> GLenum.t) =
      fun (x9270 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9270)
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (get_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER :
      'tags this -> GLenum.t) =
      fun (x9272 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9272)
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (get_UNIFORM_BUFFER : 'tags this -> GLenum.t) =
      fun (x9274 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9274) "UNIFORM_BUFFER")
    let (get_UNIFORM_BUFFER_BINDING : 'tags this -> GLenum.t) =
      fun (x9276 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9276)
             "UNIFORM_BUFFER_BINDING")
    let (get_UNIFORM_BUFFER_OFFSET_ALIGNMENT : 'tags this -> GLenum.t) =
      fun (x9278 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9278)
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (get_UNIFORM_BUFFER_SIZE : 'tags this -> GLenum.t) =
      fun (x9280 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9280)
             "UNIFORM_BUFFER_SIZE")
    let (get_UNIFORM_BUFFER_START : 'tags this -> GLenum.t) =
      fun (x9282 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9282)
             "UNIFORM_BUFFER_START")
    let (get_UNIFORM_IS_ROW_MAJOR : 'tags this -> GLenum.t) =
      fun (x9284 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9284)
             "UNIFORM_IS_ROW_MAJOR")
    let (get_UNIFORM_MATRIX_STRIDE : 'tags this -> GLenum.t) =
      fun (x9286 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9286)
             "UNIFORM_MATRIX_STRIDE")
    let (get_UNIFORM_OFFSET : 'tags this -> GLenum.t) =
      fun (x9288 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9288) "UNIFORM_OFFSET")
    let (get_UNIFORM_SIZE : 'tags this -> GLenum.t) =
      fun (x9290 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9290) "UNIFORM_SIZE")
    let (get_UNIFORM_TYPE : 'tags this -> GLenum.t) =
      fun (x9292 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9292) "UNIFORM_TYPE")
    let (get_UNPACK_IMAGE_HEIGHT : 'tags this -> GLenum.t) =
      fun (x9294 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9294)
             "UNPACK_IMAGE_HEIGHT")
    let (get_UNPACK_ROW_LENGTH : 'tags this -> GLenum.t) =
      fun (x9296 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9296)
             "UNPACK_ROW_LENGTH")
    let (get_UNPACK_SKIP_IMAGES : 'tags this -> GLenum.t) =
      fun (x9298 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9298)
             "UNPACK_SKIP_IMAGES")
    let (get_UNPACK_SKIP_PIXELS : 'tags this -> GLenum.t) =
      fun (x9300 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9300)
             "UNPACK_SKIP_PIXELS")
    let (get_UNPACK_SKIP_ROWS : 'tags this -> GLenum.t) =
      fun (x9302 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9302) "UNPACK_SKIP_ROWS")
    let (get_UNSIGNALED : 'tags this -> GLenum.t) =
      fun (x9304 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9304) "UNSIGNALED")
    let (get_UNSIGNED_INT_10F_11F_11F_REV : 'tags this -> GLenum.t) =
      fun (x9306 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9306)
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (get_UNSIGNED_INT_24_8 : 'tags this -> GLenum.t) =
      fun (x9308 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9308)
             "UNSIGNED_INT_24_8")
    let (get_UNSIGNED_INT_2_10_10_10_REV : 'tags this -> GLenum.t) =
      fun (x9310 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9310)
             "UNSIGNED_INT_2_10_10_10_REV")
    let (get_UNSIGNED_INT_5_9_9_9_REV : 'tags this -> GLenum.t) =
      fun (x9312 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9312)
             "UNSIGNED_INT_5_9_9_9_REV")
    let (get_UNSIGNED_INT_SAMPLER_2D : 'tags this -> GLenum.t) =
      fun (x9314 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9314)
             "UNSIGNED_INT_SAMPLER_2D")
    let (get_UNSIGNED_INT_SAMPLER_2D_ARRAY : 'tags this -> GLenum.t) =
      fun (x9316 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9316)
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (get_UNSIGNED_INT_SAMPLER_3D : 'tags this -> GLenum.t) =
      fun (x9318 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9318)
             "UNSIGNED_INT_SAMPLER_3D")
    let (get_UNSIGNED_INT_SAMPLER_CUBE : 'tags this -> GLenum.t) =
      fun (x9320 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9320)
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (get_UNSIGNED_INT_VEC2 : 'tags this -> GLenum.t) =
      fun (x9322 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9322)
             "UNSIGNED_INT_VEC2")
    let (get_UNSIGNED_INT_VEC3 : 'tags this -> GLenum.t) =
      fun (x9324 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9324)
             "UNSIGNED_INT_VEC3")
    let (get_UNSIGNED_INT_VEC4 : 'tags this -> GLenum.t) =
      fun (x9326 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9326)
             "UNSIGNED_INT_VEC4")
    let (get_UNSIGNED_NORMALIZED : 'tags this -> GLenum.t) =
      fun (x9328 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9328)
             "UNSIGNED_NORMALIZED")
    let (get_VERTEX_ARRAY_BINDING : 'tags this -> GLenum.t) =
      fun (x9330 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9330)
             "VERTEX_ARRAY_BINDING")
    let (get_VERTEX_ATTRIB_ARRAY_DIVISOR : 'tags this -> GLenum.t) =
      fun (x9332 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9332)
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (get_VERTEX_ATTRIB_ARRAY_INTEGER : 'tags this -> GLenum.t) =
      fun (x9334 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9334)
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (get_WAIT_FAILED : 'tags this -> GLenum.t) =
      fun (x9336 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x9336) "WAIT_FAILED")
    let (clearBufferfv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9345 : 'tags this) ->
        fun ~buffer:(x9338 : GLenum.t) ->
          fun ~drawbuffer:(x9339 : GLint.t) ->
            fun ~values:(x9340 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9341 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9347 = this_to_js Obj.magic x9345 in
                     Ojs.call (Ojs.get_prop_ascii x9347 "clearBufferfv")
                       "apply"
                       [|x9347;((let x9342 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9342 "push"
                                      [|(GLenum.t_to_js x9338)|]);
                                 ignore
                                   (Ojs.call x9342 "push"
                                      [|(GLint.t_to_js x9339)|]);
                                 ignore
                                   (Ojs.call x9342 "push"
                                      [|(Iterable.t_1_to_js GLfloat.t_to_js
                                           x9340)|]);
                                 (match x9341 with
                                  | Some x9343 ->
                                      ignore
                                        (Ojs.call x9342 "push"
                                           [|(GLuint.t_to_js x9343)|])
                                  | None -> ());
                                 x9342))|])
    let (clearBufferiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9355 : 'tags this) ->
        fun ~buffer:(x9348 : GLenum.t) ->
          fun ~drawbuffer:(x9349 : GLint.t) ->
            fun ~values:(x9350 : GLint.t Iterable.t_1) ->
              fun ?srcOffset:(x9351 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9357 = this_to_js Obj.magic x9355 in
                     Ojs.call (Ojs.get_prop_ascii x9357 "clearBufferiv")
                       "apply"
                       [|x9357;((let x9352 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9352 "push"
                                      [|(GLenum.t_to_js x9348)|]);
                                 ignore
                                   (Ojs.call x9352 "push"
                                      [|(GLint.t_to_js x9349)|]);
                                 ignore
                                   (Ojs.call x9352 "push"
                                      [|(Iterable.t_1_to_js GLint.t_to_js
                                           x9350)|]);
                                 (match x9351 with
                                  | Some x9353 ->
                                      ignore
                                        (Ojs.call x9352 "push"
                                           [|(GLuint.t_to_js x9353)|])
                                  | None -> ());
                                 x9352))|])
    let (clearBufferuiv' :
      'tags this ->
        buffer:GLenum.t ->
          drawbuffer:GLint.t ->
            values:GLuint.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> unit -> unit)
      =
      fun (x9365 : 'tags this) ->
        fun ~buffer:(x9358 : GLenum.t) ->
          fun ~drawbuffer:(x9359 : GLint.t) ->
            fun ~values:(x9360 : GLuint.t Iterable.t_1) ->
              fun ?srcOffset:(x9361 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9367 = this_to_js Obj.magic x9365 in
                     Ojs.call (Ojs.get_prop_ascii x9367 "clearBufferuiv")
                       "apply"
                       [|x9367;((let x9362 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9362 "push"
                                      [|(GLenum.t_to_js x9358)|]);
                                 ignore
                                   (Ojs.call x9362 "push"
                                      [|(GLint.t_to_js x9359)|]);
                                 ignore
                                   (Ojs.call x9362 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x9360)|]);
                                 (match x9361 with
                                  | Some x9363 ->
                                      ignore
                                        (Ojs.call x9362 "push"
                                           [|(GLuint.t_to_js x9363)|])
                                  | None -> ());
                                 x9362))|])
    let (drawBuffers' : 'tags this -> buffers:GLenum.t Iterable.t_1 -> unit)
      =
      fun (x9370 : 'tags this) ->
        fun ~buffers:(x9368 : GLenum.t Iterable.t_1) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x9370) "drawBuffers"
               [|(Iterable.t_1_to_js GLenum.t_to_js x9368)|])
    let (getActiveUniforms' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformIndices:GLuint.t Iterable.t_1 -> pname:GLenum.t -> any)
      =
      fun (x9376 : 'tags this) ->
        fun ~program:(x9372 : WebGLProgram.t) ->
          fun ~uniformIndices:(x9373 : GLuint.t Iterable.t_1) ->
            fun ~pname:(x9375 : GLenum.t) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9376) "getActiveUniforms"
                   [|(WebGLProgram.t_to_js x9372);(Iterable.t_1_to_js
                                                     GLuint.t_to_js x9373);(
                     GLenum.t_to_js x9375)|])
    let (getUniformIndices' :
      'tags this ->
        program:WebGLProgram.t ->
          uniformNames:string Iterable.t_1 -> GLuint.t Iterable.t_1 or_null)
      =
      fun (x9381 : 'tags this) ->
        fun ~program:(x9378 : WebGLProgram.t) ->
          fun ~uniformNames:(x9379 : string Iterable.t_1) ->
            or_null_of_js
              (fun (x9383 : Ojs.t) -> Iterable.t_1_of_js GLuint.t_of_js x9383)
              (Ojs.call (this_to_js Obj.magic x9381) "getUniformIndices"
                 [|(WebGLProgram.t_to_js x9378);(Iterable.t_1_to_js
                                                   Ojs.string_to_js x9379)|])
    let (invalidateFramebuffer' :
      'tags this ->
        target:GLenum.t -> attachments:GLenum.t Iterable.t_1 -> unit)
      =
      fun (x9388 : 'tags this) ->
        fun ~target:(x9385 : GLenum.t) ->
          fun ~attachments:(x9386 : GLenum.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9388) "invalidateFramebuffer"
                 [|(GLenum.t_to_js x9385);(Iterable.t_1_to_js GLenum.t_to_js
                                             x9386)|])
    let (invalidateSubFramebuffer' :
      'tags this ->
        target:GLenum.t ->
          attachments:GLenum.t Iterable.t_1 ->
            x:GLint.t ->
              y:GLint.t -> width:GLsizei.t -> height:GLsizei.t -> unit)
      =
      fun (x9397 : 'tags this) ->
        fun ~target:(x9390 : GLenum.t) ->
          fun ~attachments:(x9391 : GLenum.t Iterable.t_1) ->
            fun ~x:(x9393 : GLint.t) ->
              fun ~y:(x9394 : GLint.t) ->
                fun ~width:(x9395 : GLsizei.t) ->
                  fun ~height:(x9396 : GLsizei.t) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x9397)
                         "invalidateSubFramebuffer"
                         [|(GLenum.t_to_js x9390);(Iterable.t_1_to_js
                                                     GLenum.t_to_js x9391);(
                           GLint.t_to_js x9393);(GLint.t_to_js x9394);(
                           GLsizei.t_to_js x9395);(GLsizei.t_to_js x9396)|])
    let (transformFeedbackVaryings' :
      'tags this ->
        program:WebGLProgram.t ->
          varyings:string Iterable.t_1 -> bufferMode:GLenum.t -> unit)
      =
      fun (x9403 : 'tags this) ->
        fun ~program:(x9399 : WebGLProgram.t) ->
          fun ~varyings:(x9400 : string Iterable.t_1) ->
            fun ~bufferMode:(x9402 : GLenum.t) ->
              ignore
                (Ojs.call (this_to_js Obj.magic x9403)
                   "transformFeedbackVaryings"
                   [|(WebGLProgram.t_to_js x9399);(Iterable.t_1_to_js
                                                     Ojs.string_to_js x9400);(
                     GLenum.t_to_js x9402)|])
    let (uniform1uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9414 : 'tags this) ->
        fun ~location:(x9405 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x9406 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x9407 : GLuint.t option) ->
              fun ?srcLength:(x9408 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9416 = this_to_js Obj.magic x9414 in
                     Ojs.call (Ojs.get_prop_ascii x9416 "uniform1uiv")
                       "apply"
                       [|x9416;((let x9409 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9409 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x9405)|]);
                                 ignore
                                   (Ojs.call x9409 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x9406)|]);
                                 (match x9407 with
                                  | Some x9411 ->
                                      ignore
                                        (Ojs.call x9409 "push"
                                           [|(GLuint.t_to_js x9411)|])
                                  | None -> ());
                                 (match x9408 with
                                  | Some x9410 ->
                                      ignore
                                        (Ojs.call x9409 "push"
                                           [|(GLuint.t_to_js x9410)|])
                                  | None -> ());
                                 x9409))|])
    let (uniform2uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9426 : 'tags this) ->
        fun ~location:(x9417 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x9418 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x9419 : GLuint.t option) ->
              fun ?srcLength:(x9420 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9428 = this_to_js Obj.magic x9426 in
                     Ojs.call (Ojs.get_prop_ascii x9428 "uniform2uiv")
                       "apply"
                       [|x9428;((let x9421 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9421 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x9417)|]);
                                 ignore
                                   (Ojs.call x9421 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x9418)|]);
                                 (match x9419 with
                                  | Some x9423 ->
                                      ignore
                                        (Ojs.call x9421 "push"
                                           [|(GLuint.t_to_js x9423)|])
                                  | None -> ());
                                 (match x9420 with
                                  | Some x9422 ->
                                      ignore
                                        (Ojs.call x9421 "push"
                                           [|(GLuint.t_to_js x9422)|])
                                  | None -> ());
                                 x9421))|])
    let (uniform3uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9438 : 'tags this) ->
        fun ~location:(x9429 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x9430 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x9431 : GLuint.t option) ->
              fun ?srcLength:(x9432 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9440 = this_to_js Obj.magic x9438 in
                     Ojs.call (Ojs.get_prop_ascii x9440 "uniform3uiv")
                       "apply"
                       [|x9440;((let x9433 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9433 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x9429)|]);
                                 ignore
                                   (Ojs.call x9433 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x9430)|]);
                                 (match x9431 with
                                  | Some x9435 ->
                                      ignore
                                        (Ojs.call x9433 "push"
                                           [|(GLuint.t_to_js x9435)|])
                                  | None -> ());
                                 (match x9432 with
                                  | Some x9434 ->
                                      ignore
                                        (Ojs.call x9433 "push"
                                           [|(GLuint.t_to_js x9434)|])
                                  | None -> ());
                                 x9433))|])
    let (uniform4uiv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          data:GLuint.t Iterable.t_1 ->
            ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9450 : 'tags this) ->
        fun ~location:(x9441 : WebGLUniformLocation.t or_null) ->
          fun ~data:(x9442 : GLuint.t Iterable.t_1) ->
            fun ?srcOffset:(x9443 : GLuint.t option) ->
              fun ?srcLength:(x9444 : GLuint.t option) ->
                fun () ->
                  ignore
                    (let x9452 = this_to_js Obj.magic x9450 in
                     Ojs.call (Ojs.get_prop_ascii x9452 "uniform4uiv")
                       "apply"
                       [|x9452;((let x9445 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9445 "push"
                                      [|(or_null_to_js
                                           WebGLUniformLocation.t_to_js x9441)|]);
                                 ignore
                                   (Ojs.call x9445 "push"
                                      [|(Iterable.t_1_to_js GLuint.t_to_js
                                           x9442)|]);
                                 (match x9443 with
                                  | Some x9447 ->
                                      ignore
                                        (Ojs.call x9445 "push"
                                           [|(GLuint.t_to_js x9447)|])
                                  | None -> ());
                                 (match x9444 with
                                  | Some x9446 ->
                                      ignore
                                        (Ojs.call x9445 "push"
                                           [|(GLuint.t_to_js x9446)|])
                                  | None -> ());
                                 x9445))|])
    let (uniformMatrix2x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9463 : 'tags this) ->
        fun ~location:(x9453 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9454 : GLboolean.t) ->
            fun ~data:(x9455 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9456 : GLuint.t option) ->
                fun ?srcLength:(x9457 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9465 = this_to_js Obj.magic x9463 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9465 "uniformMatrix2x3fv")
                         "apply"
                         [|x9465;((let x9458 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9458 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9453)|]);
                                   ignore
                                     (Ojs.call x9458 "push"
                                        [|(GLboolean.t_to_js x9454)|]);
                                   ignore
                                     (Ojs.call x9458 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9455)|]);
                                   (match x9456 with
                                    | Some x9460 ->
                                        ignore
                                          (Ojs.call x9458 "push"
                                             [|(GLuint.t_to_js x9460)|])
                                    | None -> ());
                                   (match x9457 with
                                    | Some x9459 ->
                                        ignore
                                          (Ojs.call x9458 "push"
                                             [|(GLuint.t_to_js x9459)|])
                                    | None -> ());
                                   x9458))|])
    let (uniformMatrix2x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9476 : 'tags this) ->
        fun ~location:(x9466 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9467 : GLboolean.t) ->
            fun ~data:(x9468 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9469 : GLuint.t option) ->
                fun ?srcLength:(x9470 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9478 = this_to_js Obj.magic x9476 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9478 "uniformMatrix2x4fv")
                         "apply"
                         [|x9478;((let x9471 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9471 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9466)|]);
                                   ignore
                                     (Ojs.call x9471 "push"
                                        [|(GLboolean.t_to_js x9467)|]);
                                   ignore
                                     (Ojs.call x9471 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9468)|]);
                                   (match x9469 with
                                    | Some x9473 ->
                                        ignore
                                          (Ojs.call x9471 "push"
                                             [|(GLuint.t_to_js x9473)|])
                                    | None -> ());
                                   (match x9470 with
                                    | Some x9472 ->
                                        ignore
                                          (Ojs.call x9471 "push"
                                             [|(GLuint.t_to_js x9472)|])
                                    | None -> ());
                                   x9471))|])
    let (uniformMatrix3x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9489 : 'tags this) ->
        fun ~location:(x9479 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9480 : GLboolean.t) ->
            fun ~data:(x9481 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9482 : GLuint.t option) ->
                fun ?srcLength:(x9483 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9491 = this_to_js Obj.magic x9489 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9491 "uniformMatrix3x2fv")
                         "apply"
                         [|x9491;((let x9484 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9484 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9479)|]);
                                   ignore
                                     (Ojs.call x9484 "push"
                                        [|(GLboolean.t_to_js x9480)|]);
                                   ignore
                                     (Ojs.call x9484 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9481)|]);
                                   (match x9482 with
                                    | Some x9486 ->
                                        ignore
                                          (Ojs.call x9484 "push"
                                             [|(GLuint.t_to_js x9486)|])
                                    | None -> ());
                                   (match x9483 with
                                    | Some x9485 ->
                                        ignore
                                          (Ojs.call x9484 "push"
                                             [|(GLuint.t_to_js x9485)|])
                                    | None -> ());
                                   x9484))|])
    let (uniformMatrix3x4fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9502 : 'tags this) ->
        fun ~location:(x9492 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9493 : GLboolean.t) ->
            fun ~data:(x9494 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9495 : GLuint.t option) ->
                fun ?srcLength:(x9496 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9504 = this_to_js Obj.magic x9502 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9504 "uniformMatrix3x4fv")
                         "apply"
                         [|x9504;((let x9497 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9497 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9492)|]);
                                   ignore
                                     (Ojs.call x9497 "push"
                                        [|(GLboolean.t_to_js x9493)|]);
                                   ignore
                                     (Ojs.call x9497 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9494)|]);
                                   (match x9495 with
                                    | Some x9499 ->
                                        ignore
                                          (Ojs.call x9497 "push"
                                             [|(GLuint.t_to_js x9499)|])
                                    | None -> ());
                                   (match x9496 with
                                    | Some x9498 ->
                                        ignore
                                          (Ojs.call x9497 "push"
                                             [|(GLuint.t_to_js x9498)|])
                                    | None -> ());
                                   x9497))|])
    let (uniformMatrix4x2fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9515 : 'tags this) ->
        fun ~location:(x9505 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9506 : GLboolean.t) ->
            fun ~data:(x9507 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9508 : GLuint.t option) ->
                fun ?srcLength:(x9509 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9517 = this_to_js Obj.magic x9515 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9517 "uniformMatrix4x2fv")
                         "apply"
                         [|x9517;((let x9510 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9510 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9505)|]);
                                   ignore
                                     (Ojs.call x9510 "push"
                                        [|(GLboolean.t_to_js x9506)|]);
                                   ignore
                                     (Ojs.call x9510 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9507)|]);
                                   (match x9508 with
                                    | Some x9512 ->
                                        ignore
                                          (Ojs.call x9510 "push"
                                             [|(GLuint.t_to_js x9512)|])
                                    | None -> ());
                                   (match x9509 with
                                    | Some x9511 ->
                                        ignore
                                          (Ojs.call x9510 "push"
                                             [|(GLuint.t_to_js x9511)|])
                                    | None -> ());
                                   x9510))|])
    let (uniformMatrix4x3fv' :
      'tags this ->
        location:WebGLUniformLocation.t or_null ->
          transpose:GLboolean.t ->
            data:GLfloat.t Iterable.t_1 ->
              ?srcOffset:GLuint.t -> ?srcLength:GLuint.t -> unit -> unit)
      =
      fun (x9528 : 'tags this) ->
        fun ~location:(x9518 : WebGLUniformLocation.t or_null) ->
          fun ~transpose:(x9519 : GLboolean.t) ->
            fun ~data:(x9520 : GLfloat.t Iterable.t_1) ->
              fun ?srcOffset:(x9521 : GLuint.t option) ->
                fun ?srcLength:(x9522 : GLuint.t option) ->
                  fun () ->
                    ignore
                      (let x9530 = this_to_js Obj.magic x9528 in
                       Ojs.call
                         (Ojs.get_prop_ascii x9530 "uniformMatrix4x3fv")
                         "apply"
                         [|x9530;((let x9523 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x9523 "push"
                                        [|(or_null_to_js
                                             WebGLUniformLocation.t_to_js
                                             x9518)|]);
                                   ignore
                                     (Ojs.call x9523 "push"
                                        [|(GLboolean.t_to_js x9519)|]);
                                   ignore
                                     (Ojs.call x9523 "push"
                                        [|(Iterable.t_1_to_js GLfloat.t_to_js
                                             x9520)|]);
                                   (match x9521 with
                                    | Some x9525 ->
                                        ignore
                                          (Ojs.call x9523 "push"
                                             [|(GLuint.t_to_js x9525)|])
                                    | None -> ());
                                   (match x9522 with
                                    | Some x9524 ->
                                        ignore
                                          (Ojs.call x9523 "push"
                                             [|(GLuint.t_to_js x9524)|])
                                    | None -> ());
                                   x9523))|])
    let (vertexAttribI4iv' :
      'tags this -> index:GLuint.t -> values:GLint.t Iterable.t_1 -> unit) =
      fun (x9534 : 'tags this) ->
        fun ~index:(x9531 : GLuint.t) ->
          fun ~values:(x9532 : GLint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9534) "vertexAttribI4iv"
                 [|(GLuint.t_to_js x9531);(Iterable.t_1_to_js GLint.t_to_js
                                             x9532)|])
    let (vertexAttribI4uiv' :
      'tags this -> index:GLuint.t -> values:GLuint.t Iterable.t_1 -> unit) =
      fun (x9539 : 'tags this) ->
        fun ~index:(x9536 : GLuint.t) ->
          fun ~values:(x9537 : GLuint.t Iterable.t_1) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x9539) "vertexAttribI4uiv"
                 [|(GLuint.t_to_js x9536);(Iterable.t_1_to_js GLuint.t_to_js
                                             x9537)|])
    let cast_from = Obj.magic
  end
module WebGL2RenderingContext =
  struct
    type t =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x9542 : Ojs.t) -> t_of_js x9542
    and t_0_to_js : t_0 -> Ojs.t = fun (x9541 : t) -> t_to_js x9541
    type tags =
      [ `WebGL2RenderingContext  | `WebGL2RenderingContextBase 
      | `WebGL2RenderingContextOverloads  | `WebGLRenderingContextBase ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WebGL2RenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x9545 : Ojs.t) -> intf_of_js __tags_of_js x9545
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x9543 : __tags intf) -> intf_to_js __tags_to_js x9543
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") 
             [||])
    let (active_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORM_BLOCKS")
    let (already_signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALREADY_SIGNALED")
    let (any_samples_passed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED")
    let (any_samples_passed_conservative : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ANY_SAMPLES_PASSED_CONSERVATIVE")
    let (color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "COLOR")
    let (color_attachment1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT1")
    let (color_attachment10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT10")
    let (color_attachment11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT11")
    let (color_attachment12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT12")
    let (color_attachment13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT13")
    let (color_attachment14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT14")
    let (color_attachment15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT15")
    let (color_attachment2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT2")
    let (color_attachment3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT3")
    let (color_attachment4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT4")
    let (color_attachment5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT5")
    let (color_attachment6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT6")
    let (color_attachment7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT7")
    let (color_attachment8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT8")
    let (color_attachment9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT9")
    let (compare_ref_to_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPARE_REF_TO_TEXTURE")
    let (condition_satisfied : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONDITION_SATISFIED")
    let (copy_read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER")
    let (copy_read_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_READ_BUFFER_BINDING")
    let (copy_write_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER")
    let (copy_write_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COPY_WRITE_BUFFER_BINDING")
    let (current_query : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_QUERY")
    let (depth : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DEPTH")
    let (depth24_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH24_STENCIL8")
    let (depth32f_stencil8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH32F_STENCIL8")
    let (depth_component24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT24")
    let (depth_component32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT32F")
    let (draw_buffer0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER0")
    let (draw_buffer1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER1")
    let (draw_buffer10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER10")
    let (draw_buffer11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER11")
    let (draw_buffer12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER12")
    let (draw_buffer13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER13")
    let (draw_buffer14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER14")
    let (draw_buffer15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER15")
    let (draw_buffer2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER2")
    let (draw_buffer3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER3")
    let (draw_buffer4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER4")
    let (draw_buffer5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER5")
    let (draw_buffer6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER6")
    let (draw_buffer7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER7")
    let (draw_buffer8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER8")
    let (draw_buffer9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_BUFFER9")
    let (draw_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER")
    let (draw_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DRAW_FRAMEBUFFER_BINDING")
    let (dynamic_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_COPY")
    let (dynamic_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_READ")
    let (float_32_unsigned_int_24_8_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_32_UNSIGNED_INT_24_8_REV")
    let (fLOAT_MAT2x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x3")
    let (fLOAT_MAT2x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2x4")
    let (fLOAT_MAT3x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x2")
    let (fLOAT_MAT3x4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3x4")
    let (fLOAT_MAT4x2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x2")
    let (fLOAT_MAT4x3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4x3")
    let (fragment_shader_derivative_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER_DERIVATIVE_HINT")
    let (framebuffer_attachment_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE")
    let (framebuffer_attachment_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE")
    let (framebuffer_attachment_color_encoding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING")
    let (framebuffer_attachment_component_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE")
    let (framebuffer_attachment_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE")
    let (framebuffer_attachment_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE")
    let (framebuffer_attachment_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_RED_SIZE")
    let (framebuffer_attachment_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE")
    let (framebuffer_attachment_texture_layer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER")
    let (framebuffer_default : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_DEFAULT")
    let (framebuffer_incomplete_multisample : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE")
    let (half_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HALF_FLOAT")
    let (interleaved_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INTERLEAVED_ATTRIBS")
    let (int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_2_10_10_10_REV")
    let (int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D")
    let (int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_2D_ARRAY")
    let (int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_3D")
    let (int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_SAMPLER_CUBE")
    let (invalid_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_INDEX")
    let (max : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MAX")
    let (max_3d_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_3D_TEXTURE_SIZE")
    let (max_array_texture_layers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ARRAY_TEXTURE_LAYERS")
    let (max_client_wait_timeout_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CLIENT_WAIT_TIMEOUT_WEBGL")
    let (max_color_attachments : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COLOR_ATTACHMENTS")
    let (max_combined_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_combined_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_UNIFORM_BLOCKS")
    let (max_combined_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS")
    let (max_draw_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_DRAW_BUFFERS")
    let (max_elements_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_INDICES")
    let (max_elements_vertices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENTS_VERTICES")
    let (max_element_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_ELEMENT_INDEX")
    let (max_fragment_input_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_INPUT_COMPONENTS")
    let (max_fragment_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_BLOCKS")
    let (max_fragment_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_COMPONENTS")
    let (max_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_PROGRAM_TEXEL_OFFSET")
    let (max_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SAMPLES")
    let (max_server_wait_timeout : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_SERVER_WAIT_TIMEOUT")
    let (max_texture_lod_bias : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_LOD_BIAS")
    let (max_transform_feedback_interleaved_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS")
    let (max_transform_feedback_separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS")
    let (max_transform_feedback_separate_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS")
    let (max_uniform_block_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BLOCK_SIZE")
    let (max_uniform_buffer_bindings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_UNIFORM_BUFFER_BINDINGS")
    let (max_varying_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_COMPONENTS")
    let (max_vertex_output_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_OUTPUT_COMPONENTS")
    let (max_vertex_uniform_blocks : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_BLOCKS")
    let (max_vertex_uniform_components : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_COMPONENTS")
    let (min : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "MIN")
    let (min_program_texel_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIN_PROGRAM_TEXEL_OFFSET")
    let (object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OBJECT_TYPE")
    let (pack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ROW_LENGTH")
    let (pack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_PIXELS")
    let (pack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_SKIP_ROWS")
    let (pixel_pack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER")
    let (pixel_pack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_PACK_BUFFER_BINDING")
    let (pixel_unpack_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER")
    let (pixel_unpack_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PIXEL_UNPACK_BUFFER_BINDING")
    let (query_result : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT")
    let (query_result_available : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "QUERY_RESULT_AVAILABLE")
    let (r11f_g11f_b10f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R11F_G11F_B10F")
    let (r16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16F")
    let (r16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16I")
    let (r16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R16UI")
    let (r32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32F")
    let (r32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32I")
    let (r32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R32UI")
    let (r8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8")
    let (r8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8I")
    let (r8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "R8UI")
    let (r8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "R8_SNORM")
    let (rasterizer_discard : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RASTERIZER_DISCARD")
    let (read_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_BUFFER")
    let (read_framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER")
    let (read_framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "READ_FRAMEBUFFER_BINDING")
    let (red : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RED")
    let (red_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_INTEGER")
    let (renderbuffer_samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_SAMPLES")
    let (rg : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG")
    let (rg16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16F")
    let (rg16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG16I")
    let (rg16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG16UI")
    let (rg32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32F")
    let (rg32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG32I")
    let (rg32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG32UI")
    let (rg8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8")
    let (rg8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8I")
    let (rg8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RG8UI")
    let (rg8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG8_SNORM")
    let (rgb10_a2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2")
    let (rgb10_a2ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB10_A2UI")
    let (rgb16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16F")
    let (rgb16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16I")
    let (rgb16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB16UI")
    let (rgb32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32F")
    let (rgb32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32I")
    let (rgb32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB32UI")
    let (rgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8")
    let (rgb8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB8I")
    let (rgb8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8UI")
    let (rgb8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB8_SNORM")
    let (rgb9_e5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB9_E5")
    let (rgba16f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16F")
    let (rgba16i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16I")
    let (rgba16ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA16UI")
    let (rgba32f : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32F")
    let (rgba32i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32I")
    let (rgba32ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA32UI")
    let (rgba8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA8")
    let (rgba8i : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8I")
    let (rgba8ui : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8UI")
    let (rgba8_snorm : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA8_SNORM")
    let (rgba_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGBA_INTEGER")
    let (rgb_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB_INTEGER")
    let (rg_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RG_INTEGER")
    let (sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY")
    let (sampler_2d_array_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_ARRAY_SHADOW")
    let (sampler_2d_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D_SHADOW")
    let (sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_3D")
    let (sampler_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_BINDING")
    let (sampler_cube_shadow : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE_SHADOW")
    let (separate_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SEPARATE_ATTRIBS")
    let (signaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNALED")
    let (signed_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SIGNED_NORMALIZED")
    let (srgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB")
    let (srgb8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SRGB8")
    let (srgb8_alpha8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRGB8_ALPHA8")
    let (static_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_COPY")
    let (static_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_READ")
    let (stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL")
    let (stream_copy : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_COPY")
    let (stream_read : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_READ")
    let (sync_condition : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_CONDITION")
    let (sync_fence : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FENCE")
    let (sync_flags : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLAGS")
    let (sync_flush_commands_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_FLUSH_COMMANDS_BIT")
    let (sync_gpu_commands_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_GPU_COMMANDS_COMPLETE")
    let (sync_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SYNC_STATUS")
    let (texture_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D_ARRAY")
    let (texture_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_3D")
    let (texture_base_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BASE_LEVEL")
    let (texture_binding_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D_ARRAY")
    let (texture_binding_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_3D")
    let (texture_compare_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_FUNC")
    let (texture_compare_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_COMPARE_MODE")
    let (texture_immutable_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_FORMAT")
    let (texture_immutable_levels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_IMMUTABLE_LEVELS")
    let (texture_max_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LEVEL")
    let (texture_max_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAX_LOD")
    let (texture_min_lod : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_LOD")
    let (texture_wrap_r : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_R")
    let (timeout_expired : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_EXPIRED")
    let (timeout_ignored : unit -> GLint64.t) =
      fun () ->
        GLint64.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TIMEOUT_IGNORED")
    let (transform_feedback : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK")
    let (transform_feedback_active : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_ACTIVE")
    let (transform_feedback_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BINDING")
    let (transform_feedback_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER")
    let (transform_feedback_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_BINDING")
    let (transform_feedback_buffer_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_MODE")
    let (transform_feedback_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_SIZE")
    let (transform_feedback_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_BUFFER_START")
    let (transform_feedback_paused : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PAUSED")
    let (transform_feedback_primitives_written : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN")
    let (transform_feedback_varyings : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRANSFORM_FEEDBACK_VARYINGS")
    let (uniform_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_ARRAY_STRIDE")
    let (uniform_block_active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORMS")
    let (uniform_block_active_uniform_indices : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES")
    let (uniform_block_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_BINDING")
    let (uniform_block_data_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_DATA_SIZE")
    let (uniform_block_index : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_INDEX")
    let (uniform_block_referenced_by_fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER")
    let (uniform_block_referenced_by_vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER")
    let (uniform_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER")
    let (uniform_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_BINDING")
    let (uniform_buffer_offset_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_OFFSET_ALIGNMENT")
    let (uniform_buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_SIZE")
    let (uniform_buffer_start : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_BUFFER_START")
    let (uniform_is_row_major : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_IS_ROW_MAJOR")
    let (uniform_matrix_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_MATRIX_STRIDE")
    let (uniform_offset : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_OFFSET")
    let (uniform_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_SIZE")
    let (uniform_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNIFORM_TYPE")
    let (unpack_image_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_IMAGE_HEIGHT")
    let (unpack_row_length : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ROW_LENGTH")
    let (unpack_skip_images : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_IMAGES")
    let (unpack_skip_pixels : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_PIXELS")
    let (unpack_skip_rows : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_SKIP_ROWS")
    let (unsignaled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNALED")
    let (unsigned_int_10f_11f_11f_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_10F_11F_11F_REV")
    let (unsigned_int_24_8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_24_8")
    let (unsigned_int_2_10_10_10_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_2_10_10_10_REV")
    let (unsigned_int_5_9_9_9_rev : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_5_9_9_9_REV")
    let (unsigned_int_sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D")
    let (unsigned_int_sampler_2d_array : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_2D_ARRAY")
    let (unsigned_int_sampler_3d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_3D")
    let (unsigned_int_sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_SAMPLER_CUBE")
    let (unsigned_int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC2")
    let (unsigned_int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC3")
    let (unsigned_int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT_VEC4")
    let (unsigned_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_NORMALIZED")
    let (vertex_array_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ARRAY_BINDING")
    let (vertex_attrib_array_divisor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_DIVISOR")
    let (vertex_attrib_array_integer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_INTEGER")
    let (wait_failed : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "WAIT_FAILED")
    let (active_attributes : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_ATTRIBUTES")
    let (active_texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_TEXTURE")
    let (active_uniforms : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ACTIVE_UNIFORMS")
    let (aliased_line_width_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_LINE_WIDTH_RANGE")
    let (aliased_point_size_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALIASED_POINT_SIZE_RANGE")
    let (alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ALPHA")
    let (alpha_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALPHA_BITS")
    let (always : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ALWAYS")
    let (array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER")
    let (array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ARRAY_BUFFER_BINDING")
    let (attached_shaders : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ATTACHED_SHADERS")
    let (back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BACK")
    let (blend : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BLEND")
    let (blend_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_COLOR")
    let (blend_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_ALPHA")
    let (blend_dst_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_DST_RGB")
    let (blend_equation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION")
    let (blend_equation_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_ALPHA")
    let (blend_equation_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_EQUATION_RGB")
    let (blend_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_ALPHA")
    let (blend_src_rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLEND_SRC_RGB")
    let (blue_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BLUE_BITS")
    let (bool : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BOOL")
    let (bool_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC2")
    let (bool_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC3")
    let (bool_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BOOL_VEC4")
    let (browser_default_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BROWSER_DEFAULT_WEBGL")
    let (buffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_SIZE")
    let (buffer_usage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "BUFFER_USAGE")
    let (byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "BYTE")
    let (ccw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CCW")
    let (clamp_to_edge : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CLAMP_TO_EDGE")
    let (color_attachment0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_ATTACHMENT0")
    let (color_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_BUFFER_BIT")
    let (color_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_CLEAR_VALUE")
    let (color_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COLOR_WRITEMASK")
    let (compile_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPILE_STATUS")
    let (compressed_texture_formats : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "COMPRESSED_TEXTURE_FORMATS")
    let (constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_ALPHA")
    let (constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONSTANT_COLOR")
    let (context_lost_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CONTEXT_LOST_WEBGL")
    let (cull_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE")
    let (cull_face_mode : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CULL_FACE_MODE")
    let (current_program : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_PROGRAM")
    let (current_vertex_attrib : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "CURRENT_VERTEX_ATTRIB")
    let (cw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "CW")
    let (decr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "DECR")
    let (decr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DECR_WRAP")
    let (delete_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DELETE_STATUS")
    let (depth_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_ATTACHMENT")
    let (depth_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BITS")
    let (depth_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_BUFFER_BIT")
    let (depth_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_CLEAR_VALUE")
    let (depth_component : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT")
    let (depth_component16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_COMPONENT16")
    let (depth_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_FUNC")
    let (depth_range : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_RANGE")
    let (depth_stencil : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL")
    let (depth_stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_STENCIL_ATTACHMENT")
    let (depth_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_TEST")
    let (depth_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DEPTH_WRITEMASK")
    let (dither : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DITHER")
    let (dont_care : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DONT_CARE")
    let (dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_ALPHA")
    let (dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DST_COLOR")
    let (dynamic_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "DYNAMIC_DRAW")
    let (element_array_buffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER")
    let (element_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ELEMENT_ARRAY_BUFFER_BINDING")
    let (equal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "EQUAL")
    let (fastest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FASTEST")
    let (float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FLOAT")
    let (float_mat2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT2")
    let (float_mat3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT3")
    let (float_mat4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_MAT4")
    let (float_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC2")
    let (float_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC3")
    let (float_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FLOAT_VEC4")
    let (fragment_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAGMENT_SHADER")
    let (framebuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER")
    let (framebuffer_attachment_object_name : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME")
    let (framebuffer_attachment_object_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE")
    let (framebuffer_attachment_texture_cube_map_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE")
    let (framebuffer_attachment_texture_level : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL")
    let (framebuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_BINDING")
    let (framebuffer_complete : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_COMPLETE")
    let (framebuffer_incomplete_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_ATTACHMENT")
    let (framebuffer_incomplete_dimensions : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_DIMENSIONS")
    let (framebuffer_incomplete_missing_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT")
    let (framebuffer_unsupported : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRAMEBUFFER_UNSUPPORTED")
    let (front : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "FRONT")
    let (front_and_back : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_AND_BACK")
    let (front_face : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FRONT_FACE")
    let (func_add : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_ADD")
    let (func_reverse_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_REVERSE_SUBTRACT")
    let (func_subtract : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "FUNC_SUBTRACT")
    let (generate_mipmap_hint : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GENERATE_MIPMAP_HINT")
    let (gequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GEQUAL")
    let (greater : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREATER")
    let (green_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "GREEN_BITS")
    let (high_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_FLOAT")
    let (high_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "HIGH_INT")
    let (implementation_color_read_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_FORMAT")
    let (implementation_color_read_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "IMPLEMENTATION_COLOR_READ_TYPE")
    let (incr : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INCR")
    let (incr_wrap : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INCR_WRAP")
    let (int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "INT")
    let (int_vec2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC2")
    let (int_vec3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC3")
    let (int_vec4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INT_VEC4")
    let (invalid_enum : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_ENUM")
    let (invalid_framebuffer_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_FRAMEBUFFER_OPERATION")
    let (invalid_operation : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_OPERATION")
    let (invalid_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVALID_VALUE")
    let (invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "INVERT")
    let (keep : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "KEEP")
    let (lequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LEQUAL")
    let (less : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LESS")
    let (linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR")
    let (linear_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_LINEAR")
    let (linear_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINEAR_MIPMAP_NEAREST")
    let (lines : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "LINES")
    let (line_loop : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_LOOP")
    let (line_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_STRIP")
    let (line_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINE_WIDTH")
    let (link_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LINK_STATUS")
    let (low_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_FLOAT")
    let (low_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LOW_INT")
    let (luminance : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE")
    let (luminance_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "LUMINANCE_ALPHA")
    let (max_combined_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_COMBINED_TEXTURE_IMAGE_UNITS")
    let (max_cube_map_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_CUBE_MAP_TEXTURE_SIZE")
    let (max_fragment_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_FRAGMENT_UNIFORM_VECTORS")
    let (max_renderbuffer_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_RENDERBUFFER_SIZE")
    let (max_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_IMAGE_UNITS")
    let (max_texture_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_TEXTURE_SIZE")
    let (max_varying_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VARYING_VECTORS")
    let (max_vertex_attribs : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_ATTRIBS")
    let (max_vertex_texture_image_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_TEXTURE_IMAGE_UNITS")
    let (max_vertex_uniform_vectors : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VERTEX_UNIFORM_VECTORS")
    let (max_viewport_dims : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MAX_VIEWPORT_DIMS")
    let (medium_float : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_FLOAT")
    let (medium_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MEDIUM_INT")
    let (mirrored_repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "MIRRORED_REPEAT")
    let (nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST")
    let (nearest_mipmap_linear : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_LINEAR")
    let (nearest_mipmap_nearest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NEAREST_MIPMAP_NEAREST")
    let (never : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NEVER")
    let (nicest : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NICEST")
    let (none : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "NONE")
    let (notequal : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NOTEQUAL")
    let (no_error : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "NO_ERROR")
    let (one : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ONE")
    let (one_minus_constant_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_ALPHA")
    let (one_minus_constant_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_CONSTANT_COLOR")
    let (one_minus_dst_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_ALPHA")
    let (one_minus_dst_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_DST_COLOR")
    let (one_minus_src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_ALPHA")
    let (one_minus_src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "ONE_MINUS_SRC_COLOR")
    let (out_of_memory : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "OUT_OF_MEMORY")
    let (pack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "PACK_ALIGNMENT")
    let (points : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POINTS")
    let (polygon_offset_factor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FACTOR")
    let (polygon_offset_fill : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_FILL")
    let (polygon_offset_units : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "POLYGON_OFFSET_UNITS")
    let (red_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RED_BITS")
    let (renderbuffer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER")
    let (renderbuffer_alpha_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_ALPHA_SIZE")
    let (renderbuffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BINDING")
    let (renderbuffer_blue_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_BLUE_SIZE")
    let (renderbuffer_depth_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_DEPTH_SIZE")
    let (renderbuffer_green_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_GREEN_SIZE")
    let (renderbuffer_height : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_HEIGHT")
    let (renderbuffer_internal_format : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_INTERNAL_FORMAT")
    let (renderbuffer_red_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_RED_SIZE")
    let (renderbuffer_stencil_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_STENCIL_SIZE")
    let (renderbuffer_width : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERBUFFER_WIDTH")
    let (renderer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RENDERER")
    let (repeat : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPEAT")
    let (replace : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "REPLACE")
    let (rgb : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGB")
    let (rgb565 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB565")
    let (rgb5_a1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "RGB5_A1")
    let (rgba : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA")
    let (rgba4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "RGBA4")
    let (sampler_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_2D")
    let (sampler_cube : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLER_CUBE")
    let (samples : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLES")
    let (sample_alpha_to_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_ALPHA_TO_COVERAGE")
    let (sample_buffers : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_BUFFERS")
    let (sample_coverage : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE")
    let (sample_coverage_invert : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_INVERT")
    let (sample_coverage_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SAMPLE_COVERAGE_VALUE")
    let (scissor_box : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_BOX")
    let (scissor_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SCISSOR_TEST")
    let (shader_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADER_TYPE")
    let (shading_language_version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SHADING_LANGUAGE_VERSION")
    let (short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "SHORT")
    let (src_alpha : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA")
    let (src_alpha_saturate : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_ALPHA_SATURATE")
    let (src_color : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SRC_COLOR")
    let (static_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STATIC_DRAW")
    let (stencil_attachment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_ATTACHMENT")
    let (stencil_back_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FAIL")
    let (stencil_back_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_FUNC")
    let (stencil_back_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_FAIL")
    let (stencil_back_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_PASS_DEPTH_PASS")
    let (stencil_back_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_REF")
    let (stencil_back_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_VALUE_MASK")
    let (stencil_back_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BACK_WRITEMASK")
    let (stencil_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BITS")
    let (stencil_buffer_bit : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_BUFFER_BIT")
    let (stencil_clear_value : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_CLEAR_VALUE")
    let (stencil_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FAIL")
    let (stencil_func : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_FUNC")
    let (stencil_index8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_INDEX8")
    let (stencil_pass_depth_fail : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_FAIL")
    let (stencil_pass_depth_pass : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_PASS_DEPTH_PASS")
    let (stencil_ref : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_REF")
    let (stencil_test : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_TEST")
    let (stencil_value_mask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_VALUE_MASK")
    let (stencil_writemask : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STENCIL_WRITEMASK")
    let (stream_draw : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "STREAM_DRAW")
    let (subpixel_bits : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "SUBPIXEL_BITS")
    let (texture : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE")
    let (texture0 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE0")
    let (texture1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE1")
    let (texture10 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE10")
    let (texture11 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE11")
    let (texture12 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE12")
    let (texture13 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE13")
    let (texture14 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE14")
    let (texture15 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE15")
    let (texture16 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE16")
    let (texture17 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE17")
    let (texture18 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE18")
    let (texture19 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE19")
    let (texture2 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE2")
    let (texture20 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE20")
    let (texture21 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE21")
    let (texture22 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE22")
    let (texture23 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE23")
    let (texture24 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE24")
    let (texture25 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE25")
    let (texture26 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE26")
    let (texture27 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE27")
    let (texture28 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE28")
    let (texture29 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE29")
    let (texture3 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE3")
    let (texture30 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE30")
    let (texture31 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE31")
    let (texture4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE4")
    let (texture5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE5")
    let (texture6 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE6")
    let (texture7 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE7")
    let (texture8 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE8")
    let (texture9 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE9")
    let (texture_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_2D")
    let (texture_binding_2d : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_2D")
    let (texture_binding_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_BINDING_CUBE_MAP")
    let (texture_cube_map : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP")
    let (texture_cube_map_negative_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_X")
    let (texture_cube_map_negative_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Y")
    let (texture_cube_map_negative_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_NEGATIVE_Z")
    let (texture_cube_map_positive_x : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_X")
    let (texture_cube_map_positive_y : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Y")
    let (texture_cube_map_positive_z : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_CUBE_MAP_POSITIVE_Z")
    let (texture_mag_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MAG_FILTER")
    let (texture_min_filter : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_MIN_FILTER")
    let (texture_wrap_s : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_S")
    let (texture_wrap_t : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TEXTURE_WRAP_T")
    let (triangles : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLES")
    let (triangle_fan : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_FAN")
    let (triangle_strip : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "TRIANGLE_STRIP")
    let (unpack_alignment : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_ALIGNMENT")
    let (unpack_colorspace_conversion_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_COLORSPACE_CONVERSION_WEBGL")
    let (unpack_flip_y_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_FLIP_Y_WEBGL")
    let (unpack_premultiply_alpha_webgl : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNPACK_PREMULTIPLY_ALPHA_WEBGL")
    let (unsigned_byte : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_BYTE")
    let (unsigned_int : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_INT")
    let (unsigned_short : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT")
    let (unsigned_short_4_4_4_4 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_4_4_4_4")
    let (unsigned_short_5_5_5_1 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_5_5_1")
    let (unsigned_short_5_6_5 : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "UNSIGNED_SHORT_5_6_5")
    let (validate_status : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VALIDATE_STATUS")
    let (vendor : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VENDOR")
    let (version : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERSION")
    let (vertex_attrib_array_buffer_binding : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING")
    let (vertex_attrib_array_enabled : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_ENABLED")
    let (vertex_attrib_array_normalized : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_NORMALIZED")
    let (vertex_attrib_array_pointer : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_POINTER")
    let (vertex_attrib_array_size : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_SIZE")
    let (vertex_attrib_array_stride : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_STRIDE")
    let (vertex_attrib_array_type : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_ATTRIB_ARRAY_TYPE")
    let (vertex_shader : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VERTEX_SHADER")
    let (viewport : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext")
             "VIEWPORT")
    let (zero : unit -> GLenum.t) =
      fun () ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WebGL2RenderingContext") "ZERO")
  end
module WebAssembly =
  struct
    module ImportExportKind =
      struct
        type t =
          [ `L_s113_memory  | `L_s189_table  | `L_s79_function 
          | `L_s81_global ]
        let rec t_of_js : Ojs.t -> t =
          fun (x9548 : Ojs.t) ->
            let x9549 = x9548 in
            match Ojs.string_of_js x9549 with
            | "memory" -> `L_s113_memory
            | "table" -> `L_s189_table
            | "function" -> `L_s79_function
            | "global" -> `L_s81_global
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x9547 :
              [ `L_s113_memory  | `L_s189_table  | `L_s79_function 
              | `L_s81_global ])
            ->
            match x9547 with
            | `L_s113_memory -> Ojs.string_to_js "memory"
            | `L_s189_table -> Ojs.string_to_js "table"
            | `L_s79_function -> Ojs.string_to_js "function"
            | `L_s81_global -> Ojs.string_to_js "global"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9551 : Ojs.t) -> t_of_js x9551
        and t_0_to_js : t_0 -> Ojs.t = fun (x9550 : t) -> t_to_js x9550
      end
    module ModuleImportDescriptor =
      struct
        type t = [ `WebAssembly_ModuleImportDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9553 : Ojs.t) -> t_of_js x9553
        and t_0_to_js : t_0 -> Ojs.t = fun (x9552 : t) -> t_to_js x9552
        type tags = [ `WebAssembly_ModuleImportDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_ModuleImportDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x9556 : Ojs.t) -> intf_of_js __tags_of_js x9556
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x9554 : __tags intf) -> intf_to_js __tags_to_js x9554
        let (get_kind : 'tags this -> ImportExportKind.t) =
          fun (x9558 : 'tags this) ->
            ImportExportKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9558) "kind")
        let (set_kind : 'tags this -> ImportExportKind.t -> unit) =
          fun (x9560 : 'tags this) ->
            fun (x9561 : ImportExportKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9560) "kind"
                (ImportExportKind.t_to_js x9561)
        let (get_module : 'tags this -> string) =
          fun (x9563 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9563) "module")
        let (set_module : 'tags this -> string -> unit) =
          fun (x9565 : 'tags this) ->
            fun (x9566 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9565) "module"
                (Ojs.string_to_js x9566)
        let (get_name : 'tags this -> string) =
          fun (x9568 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9568) "name")
        let (set_name : 'tags this -> string -> unit) =
          fun (x9570 : 'tags this) ->
            fun (x9571 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9570) "name"
                (Ojs.string_to_js x9571)
        let cast_from = Obj.magic
      end
    module ModuleExportDescriptor =
      struct
        type t = [ `WebAssembly_ModuleExportDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9574 : Ojs.t) -> t_of_js x9574
        and t_0_to_js : t_0 -> Ojs.t = fun (x9573 : t) -> t_to_js x9573
        type tags = [ `WebAssembly_ModuleExportDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_ModuleExportDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x9577 : Ojs.t) -> intf_of_js __tags_of_js x9577
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x9575 : __tags intf) -> intf_to_js __tags_to_js x9575
        let (get_kind : 'tags this -> ImportExportKind.t) =
          fun (x9579 : 'tags this) ->
            ImportExportKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9579) "kind")
        let (set_kind : 'tags this -> ImportExportKind.t -> unit) =
          fun (x9581 : 'tags this) ->
            fun (x9582 : ImportExportKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9581) "kind"
                (ImportExportKind.t_to_js x9582)
        let (get_name : 'tags this -> string) =
          fun (x9584 : 'tags this) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9584) "name")
        let (set_name : 'tags this -> string -> unit) =
          fun (x9586 : 'tags this) ->
            fun (x9587 : string) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9586) "name"
                (Ojs.string_to_js x9587)
        let cast_from = Obj.magic
      end
    module Module =
      struct
        type t = [ `WebAssembly_Module ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9590 : Ojs.t) -> t_of_js x9590
        and t_0_to_js : t_0 -> Ojs.t = fun (x9589 : t) -> t_to_js x9589
        type tags = [ `WebAssembly_Module ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Module ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x9593 : Ojs.t) -> intf_of_js __tags_of_js x9593
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x9591 : __tags intf) -> intf_to_js __tags_to_js x9591
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "prototype")
        let (create : BufferSource.t -> t) =
          fun (x9595 : BufferSource.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 [|(BufferSource.t_to_js x9595)|])
        let (customSections :
          moduleObject:t -> sectionName:string -> ArrayBuffer.t_0 list) =
          fun ~moduleObject:(x9596 : t) ->
            fun ~sectionName:(x9597 : string) ->
              Ojs.list_of_js ArrayBuffer.t_0_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                   "customSections"
                   [|(t_to_js x9596);(Ojs.string_to_js x9597)|])
        let (exports : t -> ModuleExportDescriptor.t list) =
          fun (x9599 : t) ->
            Ojs.list_of_js ModuleExportDescriptor.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "exports" [|(t_to_js x9599)|])
        let (imports : t -> ModuleImportDescriptor.t list) =
          fun (x9601 : t) ->
            Ojs.list_of_js ModuleImportDescriptor.t_of_js
              (Ojs.call
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Module")
                 "imports" [|(t_to_js x9601)|])
      end
    module TableKind =
      struct
        type t = [ `L_s36_anyfunc  | `L_s69_externref ]
        let rec t_of_js : Ojs.t -> t =
          fun (x9604 : Ojs.t) ->
            let x9605 = x9604 in
            match Ojs.string_of_js x9605 with
            | "anyfunc" -> `L_s36_anyfunc
            | "externref" -> `L_s69_externref
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x9603 : [ `L_s36_anyfunc  | `L_s69_externref ]) ->
            match x9603 with
            | `L_s36_anyfunc -> Ojs.string_to_js "anyfunc"
            | `L_s69_externref -> Ojs.string_to_js "externref"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9607 : Ojs.t) -> t_of_js x9607
        and t_0_to_js : t_0 -> Ojs.t = fun (x9606 : t) -> t_to_js x9606
      end
    module TableDescriptor =
      struct
        type t = [ `WebAssembly_TableDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9609 : Ojs.t) -> t_of_js x9609
        and t_0_to_js : t_0 -> Ojs.t = fun (x9608 : t) -> t_to_js x9608
        type tags = [ `WebAssembly_TableDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_TableDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x9612 : Ojs.t) -> intf_of_js __tags_of_js x9612
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x9610 : __tags intf) -> intf_to_js __tags_to_js x9610
        let (get_element : 'tags this -> TableKind.t) =
          fun (x9614 : 'tags this) ->
            TableKind.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9614) "element")
        let (set_element : 'tags this -> TableKind.t -> unit) =
          fun (x9616 : 'tags this) ->
            fun (x9617 : TableKind.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9616) "element"
                (TableKind.t_to_js x9617)
        let (get_initial : 'tags this -> float) =
          fun (x9619 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9619) "initial")
        let (set_initial : 'tags this -> float -> unit) =
          fun (x9621 : 'tags this) ->
            fun (x9622 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9621) "initial"
                (Ojs.float_to_js x9622)
        let (get_maximum : 'tags this -> float) =
          fun (x9624 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9624) "maximum")
        let (set_maximum : 'tags this -> float -> unit) =
          fun (x9626 : 'tags this) ->
            fun (x9627 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9626) "maximum"
                (Ojs.float_to_js x9627)
        let cast_from = Obj.magic
      end
    module Table =
      struct
        type t = [ `WebAssembly_Table ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9630 : Ojs.t) -> t_of_js x9630
        and t_0_to_js : t_0 -> Ojs.t = fun (x9629 : t) -> t_to_js x9629
        type tags = [ `WebAssembly_Table ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Table ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x9633 : Ojs.t) -> intf_of_js __tags_of_js x9633
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x9631 : __tags intf) -> intf_to_js __tags_to_js x9631
        let (get_length : 'tags this -> float) =
          fun (x9635 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9635) "length")
        let (get_ : 'tags this -> index:float -> any) =
          fun (x9638 : 'tags this) ->
            fun ~index:(x9637 : float) ->
              any_of_js
                (Ojs.call (this_to_js Obj.magic x9638) "get"
                   [|(Ojs.float_to_js x9637)|])
        let (grow : 'tags this -> delta:float -> ?value:any -> unit -> float)
          =
          fun (x9644 : 'tags this) ->
            fun ~delta:(x9640 : float) ->
              fun ?value:(x9641 : any option) ->
                fun () ->
                  Ojs.float_of_js
                    (let x9646 = this_to_js Obj.magic x9644 in
                     Ojs.call (Ojs.get_prop_ascii x9646 "grow") "apply"
                       [|x9646;((let x9642 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9642 "push"
                                      [|(Ojs.float_to_js x9640)|]);
                                 (match x9641 with
                                  | Some x9643 ->
                                      ignore
                                        (Ojs.call x9642 "push"
                                           [|(any_to_js x9643)|])
                                  | None -> ());
                                 x9642))|])
        let (set_ : 'tags this -> index:float -> ?value:any -> unit -> unit)
          =
          fun (x9651 : 'tags this) ->
            fun ~index:(x9647 : float) ->
              fun ?value:(x9648 : any option) ->
                fun () ->
                  ignore
                    (let x9653 = this_to_js Obj.magic x9651 in
                     Ojs.call (Ojs.get_prop_ascii x9653 "set") "apply"
                       [|x9653;((let x9649 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x9649 "push"
                                      [|(Ojs.float_to_js x9647)|]);
                                 (match x9648 with
                                  | Some x9650 ->
                                      ignore
                                        (Ojs.call x9649 "push"
                                           [|(any_to_js x9650)|])
                                  | None -> ());
                                 x9649))|])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Table")
                 "prototype")
        let (create :
          descriptor:TableDescriptor.t -> ?value:any -> unit -> t) =
          fun ~descriptor:(x9654 : TableDescriptor.t) ->
            fun ?value:(x9655 : any option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Table")
                     (let x9656 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x9656 "push"
                           [|(TableDescriptor.t_to_js x9654)|]);
                      (match x9655 with
                       | Some x9657 ->
                           ignore
                             (Ojs.call x9656 "push" [|(any_to_js x9657)|])
                       | None -> ());
                      x9656))
      end
    module MemoryDescriptor =
      struct
        type t = [ `WebAssembly_MemoryDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9659 : Ojs.t) -> t_of_js x9659
        and t_0_to_js : t_0 -> Ojs.t = fun (x9658 : t) -> t_to_js x9658
        type tags = [ `WebAssembly_MemoryDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_MemoryDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x9662 : Ojs.t) -> intf_of_js __tags_of_js x9662
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x9660 : __tags intf) -> intf_to_js __tags_to_js x9660
        let (get_initial : 'tags this -> float) =
          fun (x9664 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9664) "initial")
        let (set_initial : 'tags this -> float -> unit) =
          fun (x9666 : 'tags this) ->
            fun (x9667 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9666) "initial"
                (Ojs.float_to_js x9667)
        let (get_maximum : 'tags this -> float) =
          fun (x9669 : 'tags this) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9669) "maximum")
        let (set_maximum : 'tags this -> float -> unit) =
          fun (x9671 : 'tags this) ->
            fun (x9672 : float) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9671) "maximum"
                (Ojs.float_to_js x9672)
        let (get_shared : 'tags this -> bool) =
          fun (x9674 : 'tags this) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9674) "shared")
        let (set_shared : 'tags this -> bool -> unit) =
          fun (x9676 : 'tags this) ->
            fun (x9677 : bool) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9676) "shared"
                (Ojs.bool_to_js x9677)
        let cast_from = Obj.magic
      end
    module Memory =
      struct
        type t = [ `WebAssembly_Memory ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9680 : Ojs.t) -> t_of_js x9680
        and t_0_to_js : t_0 -> Ojs.t = fun (x9679 : t) -> t_to_js x9679
        type tags = [ `WebAssembly_Memory ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Memory ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x9683 : Ojs.t) -> intf_of_js __tags_of_js x9683
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x9681 : __tags intf) -> intf_to_js __tags_to_js x9681
        let (get_buffer : 'tags this -> ArrayBuffer.t_0) =
          fun (x9685 : 'tags this) ->
            ArrayBuffer.t_0_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9685) "buffer")
        let (grow : 'tags this -> delta:float -> float) =
          fun (x9688 : 'tags this) ->
            fun ~delta:(x9687 : float) ->
              Ojs.float_of_js
                (Ojs.call (this_to_js Obj.magic x9688) "grow"
                   [|(Ojs.float_to_js x9687)|])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Memory")
                 "prototype")
        let (create : MemoryDescriptor.t -> t) =
          fun (x9690 : MemoryDescriptor.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Memory")
                 [|(MemoryDescriptor.t_to_js x9690)|])
      end
    module ValueType =
      struct
        type t =
          [ `L_s36_anyfunc  | `L_s69_externref  | `L_s70_f32  | `L_s71_f64 
          | `L_s87_i32  | `L_s88_i64 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x9692 : Ojs.t) ->
            let x9693 = x9692 in
            match Ojs.string_of_js x9693 with
            | "anyfunc" -> `L_s36_anyfunc
            | "externref" -> `L_s69_externref
            | "f32" -> `L_s70_f32
            | "f64" -> `L_s71_f64
            | "i32" -> `L_s87_i32
            | "i64" -> `L_s88_i64
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x9691 :
              [ `L_s36_anyfunc  | `L_s69_externref  | `L_s70_f32 
              | `L_s71_f64  | `L_s87_i32  | `L_s88_i64 ])
            ->
            match x9691 with
            | `L_s36_anyfunc -> Ojs.string_to_js "anyfunc"
            | `L_s69_externref -> Ojs.string_to_js "externref"
            | `L_s70_f32 -> Ojs.string_to_js "f32"
            | `L_s71_f64 -> Ojs.string_to_js "f64"
            | `L_s87_i32 -> Ojs.string_to_js "i32"
            | `L_s88_i64 -> Ojs.string_to_js "i64"
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9695 : Ojs.t) -> t_of_js x9695
        and t_0_to_js : t_0 -> Ojs.t = fun (x9694 : t) -> t_to_js x9694
      end
    module GlobalDescriptor =
      struct
        type t = [ `WebAssembly_GlobalDescriptor ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9697 : Ojs.t) -> t_of_js x9697
        and t_0_to_js : t_0 -> Ojs.t = fun (x9696 : t) -> t_to_js x9696
        type tags = [ `WebAssembly_GlobalDescriptor ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_GlobalDescriptor ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x9700 : Ojs.t) -> intf_of_js __tags_of_js x9700
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x9698 : __tags intf) -> intf_to_js __tags_to_js x9698
        let (get_mutable : 'tags this -> bool) =
          fun (x9702 : 'tags this) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9702) "mutable")
        let (set_mutable : 'tags this -> bool -> unit) =
          fun (x9704 : 'tags this) ->
            fun (x9705 : bool) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9704) "mutable"
                (Ojs.bool_to_js x9705)
        let (get_value : 'tags this -> ValueType.t) =
          fun (x9707 : 'tags this) ->
            ValueType.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9707) "value")
        let (set_value : 'tags this -> ValueType.t -> unit) =
          fun (x9709 : 'tags this) ->
            fun (x9710 : ValueType.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9709) "value"
                (ValueType.t_to_js x9710)
        let cast_from = Obj.magic
      end
    module Global =
      struct
        type t = [ `WebAssembly_Global ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9713 : Ojs.t) -> t_of_js x9713
        and t_0_to_js : t_0 -> Ojs.t = fun (x9712 : t) -> t_to_js x9712
        type tags = [ `WebAssembly_Global ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Global ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x9716 : Ojs.t) -> intf_of_js __tags_of_js x9716
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x9714 : __tags intf) -> intf_to_js __tags_to_js x9714
        let (get_value : 'tags this -> any) =
          fun (x9718 : 'tags this) ->
            any_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9718) "value")
        let (set_value : 'tags this -> any -> unit) =
          fun (x9720 : 'tags this) ->
            fun (x9721 : any) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9720) "value"
                (any_to_js x9721)
        let (valueOf : 'tags this -> any) =
          fun (x9723 : 'tags this) ->
            any_of_js (Ojs.call (this_to_js Obj.magic x9723) "valueOf" [||])
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Global")
                 "prototype")
        let (create : descriptor:GlobalDescriptor.t -> ?v:any -> unit -> t) =
          fun ~descriptor:(x9725 : GlobalDescriptor.t) ->
            fun ?v:(x9726 : any option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                        "Global")
                     (let x9727 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x9727 "push"
                           [|(GlobalDescriptor.t_to_js x9725)|]);
                      (match x9726 with
                       | Some x9728 ->
                           ignore
                             (Ojs.call x9727 "push" [|(any_to_js x9728)|])
                       | None -> ());
                      x9727))
      end
    module ExportValue =
      struct
        type t = (Global.t, Memory.t, Table.t) union3
        let rec t_of_js : Ojs.t -> t =
          fun (x9733 : Ojs.t) ->
            union3_of_js Global.t_of_js Memory.t_of_js Table.t_of_js x9733
        and t_to_js : t -> Ojs.t =
          fun (x9729 : (Global.t, Memory.t, Table.t) union3) ->
            union3_to_js Global.t_to_js Memory.t_to_js Table.t_to_js x9729
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9738 : Ojs.t) -> t_of_js x9738
        and t_0_to_js : t_0 -> Ojs.t = fun (x9737 : t) -> t_to_js x9737
      end
    module ImportValue =
      struct
        type t = ExportValue.t or_number
        let rec t_of_js : Ojs.t -> t =
          fun (x9741 : Ojs.t) -> or_number_of_js ExportValue.t_of_js x9741
        and t_to_js : t -> Ojs.t =
          fun (x9739 : ExportValue.t or_number) ->
            or_number_to_js ExportValue.t_to_js x9739
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9744 : Ojs.t) -> t_of_js x9744
        and t_0_to_js : t_0 -> Ojs.t = fun (x9743 : t) -> t_to_js x9743
      end
    module ModuleImports =
      struct
        type t = (string, ImportValue.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x9748 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ImportValue.t_of_js x9748
        and t_to_js : t -> Ojs.t =
          fun (x9745 : (string, ImportValue.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ImportValue.t_to_js x9745
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9752 : Ojs.t) -> t_of_js x9752
        and t_0_to_js : t_0 -> Ojs.t = fun (x9751 : t) -> t_to_js x9751
      end
    module Imports =
      struct
        type t = (string, ModuleImports.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x9756 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ModuleImports.t_of_js x9756
        and t_to_js : t -> Ojs.t =
          fun (x9753 : (string, ModuleImports.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ModuleImports.t_to_js x9753
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9760 : Ojs.t) -> t_of_js x9760
        and t_0_to_js : t_0 -> Ojs.t = fun (x9759 : t) -> t_to_js x9759
      end
    module Exports =
      struct
        type t = (string, ExportValue.t) Record.t_2
        let rec t_of_js : Ojs.t -> t =
          fun (x9764 : Ojs.t) ->
            Record.t_2_of_js Ojs.string_of_js ExportValue.t_of_js x9764
        and t_to_js : t -> Ojs.t =
          fun (x9761 : (string, ExportValue.t) Record.t_2) ->
            Record.t_2_to_js Ojs.string_to_js ExportValue.t_to_js x9761
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9768 : Ojs.t) -> t_of_js x9768
        and t_0_to_js : t_0 -> Ojs.t = fun (x9767 : t) -> t_to_js x9767
      end
    module Instance =
      struct
        type t = [ `WebAssembly_Instance ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9770 : Ojs.t) -> t_of_js x9770
        and t_0_to_js : t_0 -> Ojs.t = fun (x9769 : t) -> t_to_js x9769
        type tags = [ `WebAssembly_Instance ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_Instance ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x9773 : Ojs.t) -> intf_of_js __tags_of_js x9773
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x9771 : __tags intf) -> intf_to_js __tags_to_js x9771
        let (get_exports : 'tags this -> Exports.t) =
          fun (x9775 : 'tags this) ->
            Exports.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9775) "exports")
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "Instance")
                 "prototype")
        let (create :
          module_:Module.t -> ?importObject:Imports.t -> unit -> t) =
          fun ~module_:(x9777 : Module.t) ->
            fun ?importObject:(x9778 : Imports.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                        "Instance")
                     (let x9779 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x9779 "push" [|(Module.t_to_js x9777)|]);
                      (match x9778 with
                       | Some x9780 ->
                           ignore
                             (Ojs.call x9779 "push"
                                [|(Imports.t_to_js x9780)|])
                       | None -> ());
                      x9779))
      end
    module WebAssemblyInstantiatedSource =
      struct
        type t = [ `WebAssembly_WebAssemblyInstantiatedSource ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9782 : Ojs.t) -> t_of_js x9782
        and t_0_to_js : t_0 -> Ojs.t = fun (x9781 : t) -> t_to_js x9781
        type tags = [ `WebAssembly_WebAssemblyInstantiatedSource ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags =
                      [> `WebAssembly_WebAssemblyInstantiatedSource ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x9785 : Ojs.t) -> intf_of_js __tags_of_js x9785
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x9783 : __tags intf) -> intf_to_js __tags_to_js x9783
        let (get_instance : 'tags this -> Instance.t) =
          fun (x9787 : 'tags this) ->
            Instance.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9787) "instance")
        let (set_instance : 'tags this -> Instance.t -> unit) =
          fun (x9789 : 'tags this) ->
            fun (x9790 : Instance.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9789) "instance"
                (Instance.t_to_js x9790)
        let (get_module : 'tags this -> Module.t) =
          fun (x9792 : 'tags this) ->
            Module.t_of_js
              (Ojs.get_prop_ascii (this_to_js Obj.magic x9792) "module")
        let (set_module : 'tags this -> Module.t -> unit) =
          fun (x9794 : 'tags this) ->
            fun (x9795 : Module.t) ->
              Ojs.set_prop_ascii (this_to_js Obj.magic x9794) "module"
                (Module.t_to_js x9795)
        let cast_from = Obj.magic
      end
    module RuntimeError =
      struct
        type t = [ `WebAssembly_RuntimeError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9798 : Ojs.t) -> t_of_js x9798
        and t_0_to_js : t_0 -> Ojs.t = fun (x9797 : t) -> t_to_js x9797
        type tags = [ `WebAssembly_RuntimeError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_RuntimeError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x9801 : Ojs.t) -> intf_of_js __tags_of_js x9801
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x9799 : __tags intf) -> intf_to_js __tags_to_js x9799
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                    "RuntimeError") "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x9803 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "RuntimeError")
                   (let x9804 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x9803 with
                     | Some x9805 ->
                         ignore
                           (Ojs.call x9804 "push"
                              [|(Ojs.string_to_js x9805)|])
                     | None -> ());
                    x9804))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x9806 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "RuntimeError") "apply"
                   [|Ojs.null;((let x9807 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x9806 with
                                 | Some x9808 ->
                                     ignore
                                       (Ojs.call x9807 "push"
                                          [|(Ojs.string_to_js x9808)|])
                                 | None -> ());
                                x9807))|])
      end
    module LinkError =
      struct
        type t = [ `WebAssembly_LinkError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9810 : Ojs.t) -> t_of_js x9810
        and t_0_to_js : t_0 -> Ojs.t = fun (x9809 : t) -> t_to_js x9809
        type tags = [ `WebAssembly_LinkError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_LinkError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x9813 : Ojs.t) -> intf_of_js __tags_of_js x9813
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x9811 : __tags intf) -> intf_to_js __tags_to_js x9811
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly") "LinkError")
                 "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x9815 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "LinkError")
                   (let x9816 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x9815 with
                     | Some x9817 ->
                         ignore
                           (Ojs.call x9816 "push"
                              [|(Ojs.string_to_js x9817)|])
                     | None -> ());
                    x9816))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x9818 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "LinkError") "apply"
                   [|Ojs.null;((let x9819 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x9818 with
                                 | Some x9820 ->
                                     ignore
                                       (Ojs.call x9819 "push"
                                          [|(Ojs.string_to_js x9820)|])
                                 | None -> ());
                                x9819))|])
      end
    module CompileError =
      struct
        type t = [ `WebAssembly_CompileError ] intf
        let rec t_of_js : Ojs.t -> t = Obj.magic
        and t_to_js : t -> Ojs.t = Obj.magic
        type t_0 = t
        let rec t_0_of_js : Ojs.t -> t_0 =
          fun (x9822 : Ojs.t) -> t_of_js x9822
        and t_0_to_js : t_0 -> Ojs.t = fun (x9821 : t) -> t_to_js x9821
        type tags = [ `WebAssembly_CompileError ]
        type tags_0 = tags
        type 'tags this =
          'tags intf constraint 'tags = [> `WebAssembly_CompileError ]
        let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this
          = fun (type __tags) ->
          fun (__tags_of_js : Ojs.t -> __tags) ->
            fun (x9825 : Ojs.t) -> intf_of_js __tags_of_js x9825
        and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t =
          fun (type __tags) ->
          fun (__tags_to_js : __tags -> Ojs.t) ->
            fun (x9823 : __tags intf) -> intf_to_js __tags_to_js x9823
        let cast_from = Obj.magic
        let (prototype : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                    "CompileError") "prototype")
        let (create : ?message:string -> unit -> t) =
          fun ?message:(x9827 : string option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "CompileError")
                   (let x9828 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x9827 with
                     | Some x9829 ->
                         ignore
                           (Ojs.call x9828 "push"
                              [|(Ojs.string_to_js x9829)|])
                     | None -> ());
                    x9828))
        let (invoke : ?message:string -> unit -> t) =
          fun ?message:(x9830 : string option) ->
            fun () ->
              t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Ojs.global "WebAssembly")
                      "CompileError") "apply"
                   [|Ojs.null;((let x9831 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x9830 with
                                 | Some x9832 ->
                                     ignore
                                       (Ojs.call x9831 "push"
                                          [|(Ojs.string_to_js x9832)|])
                                 | None -> ());
                                x9831))|])
      end
    let (compile : BufferSource.t -> Module.t Promise.t_1) =
      fun (x9833 : BufferSource.t) ->
        Promise.t_1_of_js Module.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly") "compile"
             [|(BufferSource.t_to_js x9833)|])
    let (compileStreaming : Response.t -> Module.t Promise.t_1) =
      fun (x9835 : Response.t) ->
        Promise.t_1_of_js Module.t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly")
             "compileStreaming" [|(Response.t_to_js x9835)|])
    let (instantiate :
      bytes:BufferSource.t ->
        ?importObject:Imports.t ->
          unit -> WebAssemblyInstantiatedSource.t Promise.t_1)
      =
      fun ~bytes:(x9837 : BufferSource.t) ->
        fun ?importObject:(x9838 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js WebAssemblyInstantiatedSource.t_of_js
              (let x9841 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x9841 "instantiate") "apply"
                 [|x9841;((let x9839 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x9839 "push"
                                [|(BufferSource.t_to_js x9837)|]);
                           (match x9838 with
                            | Some x9840 ->
                                ignore
                                  (Ojs.call x9839 "push"
                                     [|(Imports.t_to_js x9840)|])
                            | None -> ());
                           x9839))|])
    let (instantiate' :
      moduleObject:Module.t ->
        ?importObject:Imports.t -> unit -> Instance.t Promise.t_1)
      =
      fun ~moduleObject:(x9843 : Module.t) ->
        fun ?importObject:(x9844 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js Instance.t_of_js
              (let x9847 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x9847 "instantiate") "apply"
                 [|x9847;((let x9845 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x9845 "push"
                                [|(Module.t_to_js x9843)|]);
                           (match x9844 with
                            | Some x9846 ->
                                ignore
                                  (Ojs.call x9845 "push"
                                     [|(Imports.t_to_js x9846)|])
                            | None -> ());
                           x9845))|])
    let (instantiateStreaming :
      source:Response.t ->
        ?importObject:Imports.t ->
          unit -> WebAssemblyInstantiatedSource.t Promise.t_1)
      =
      fun ~source:(x9849 : Response.t) ->
        fun ?importObject:(x9850 : Imports.t option) ->
          fun () ->
            Promise.t_1_of_js WebAssemblyInstantiatedSource.t_of_js
              (let x9853 = Ojs.get_prop_ascii Ojs.global "WebAssembly" in
               Ojs.call (Ojs.get_prop_ascii x9853 "instantiateStreaming")
                 "apply"
                 [|x9853;((let x9851 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x9851 "push"
                                [|(Response.t_to_js x9849)|]);
                           (match x9850 with
                            | Some x9852 ->
                                ignore
                                  (Ojs.call x9851 "push"
                                     [|(Imports.t_to_js x9852)|])
                            | None -> ());
                           x9851))|])
    let (validate : BufferSource.t -> bool) =
      fun (x9855 : BufferSource.t) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "WebAssembly") "validate"
             [|(BufferSource.t_to_js x9855)|])
  end
module TransformStreamDefaultController =
  struct
    type 'O t = [ `TransformStreamDefaultController of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x9858 : Ojs.t) -> t_of_js __O_of_js x9858
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x9856 : __O t) -> t_to_js __O_to_js x9856
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x9862 : Ojs.t) -> t_of_js any_of_js x9862
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x9860 : any t) -> t_to_js any_to_js x9860
    type 'O tags = [ `TransformStreamDefaultController of 'O ]
    type 'O tags_1 = 'O tags
    type tags_0 = any tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformStreamDefaultController of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x9866 : Ojs.t) -> intf_of_js __tags_of_js x9866
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x9864 : __tags intf) -> intf_to_js __tags_to_js x9864
    let (get_desiredSize : ('tags, 'O) this -> float or_null) =
      fun (x9868 : ('tags, 'O) this) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x9868)
             "desiredSize")
    let (enqueue : ('tags, 'O) this -> ?chunk:'O -> unit -> unit) =
      fun (x9875 : ('tags, 'O) this) ->
        fun ?chunk:(x9872 : 'O option) ->
          fun () ->
            ignore
              (let x9878 = this_to_js Obj.magic Obj.magic x9875 in
               Ojs.call (Ojs.get_prop_ascii x9878 "enqueue") "apply"
                 [|x9878;((let x9873 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9872 with
                            | Some x9874 ->
                                ignore
                                  (Ojs.call x9873 "push"
                                     [|(Obj.magic x9874)|])
                            | None -> ());
                           x9873))|])
    let (error : ('tags, 'O) this -> ?reason:any -> unit -> unit) =
      fun (x9882 : ('tags, 'O) this) ->
        fun ?reason:(x9879 : any option) ->
          fun () ->
            ignore
              (let x9885 = this_to_js Obj.magic Obj.magic x9882 in
               Ojs.call (Ojs.get_prop_ascii x9885 "error") "apply"
                 [|x9885;((let x9880 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           (match x9879 with
                            | Some x9881 ->
                                ignore
                                  (Ojs.call x9880 "push"
                                     [|(any_to_js x9881)|])
                            | None -> ());
                           x9880))|])
    let (terminate : ('tags, 'O) this -> unit) =
      fun (x9886 : ('tags, 'O) this) ->
        ignore
          (Ojs.call (this_to_js Obj.magic Obj.magic x9886) "terminate" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") "prototype")
    let (create : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global
                "TransformStreamDefaultController") [||])
  end
module TransformerTransformCallback =
  struct
    type ('I, 'O) t = [ `TransformerTransformCallback of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x9892 : Ojs.t) -> t_of_js __I_of_js __O_of_js x9892
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x9889 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x9889
    type ('I, 'O) tags = [ `TransformerTransformCallback of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags =
                  [> `TransformerTransformCallback of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x9897 : Ojs.t) -> intf_of_js __tags_of_js x9897
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x9895 : __tags intf) -> intf_to_js __tags_to_js x9895
    let (apply :
      ('tags, 'I, 'O) this ->
        chunk:'I -> controller:'O TransformStreamDefaultController.t -> unit)
      =
      fun (x9902 : ('tags, 'I, 'O) this) ->
        fun ~chunk:(x9899 : 'I) ->
          fun ~controller:(x9900 : 'O TransformStreamDefaultController.t) ->
            ignore
              (Ojs.apply (this_to_js Obj.magic Obj.magic Obj.magic x9902)
                 [|(Obj.magic x9899);(TransformStreamDefaultController.t_to_js
                                        Obj.magic x9900)|])
    let cast_from = Obj.magic
  end
module TransformerStartCallback =
  struct
    type 'O t = [ `TransformerStartCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x9908 : Ojs.t) -> t_of_js __O_of_js x9908
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x9906 : __O t) -> t_to_js __O_to_js x9906
    type 'O tags = [ `TransformerStartCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerStartCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x9912 : Ojs.t) -> intf_of_js __tags_of_js x9912
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x9910 : __tags intf) -> intf_to_js __tags_to_js x9910
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t -> any)
      =
      fun (x9916 : ('tags, 'O) this) ->
        fun ~controller:(x9914 : 'O TransformStreamDefaultController.t) ->
          any_of_js
            (Ojs.apply (this_to_js Obj.magic Obj.magic x9916)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x9914)|])
    let cast_from = Obj.magic
  end
module TransformerFlushCallback =
  struct
    type 'O t = [ `TransformerFlushCallback of 'O ] intf
    let rec t_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t =
      fun _O -> Obj.magic
    and t_to_js : 'O . ('O -> Ojs.t) -> 'O t -> Ojs.t = fun _O -> Obj.magic
    type 'O t_1 = 'O t
    let rec t_1_of_js : 'O . (Ojs.t -> 'O) -> Ojs.t -> 'O t_1 = fun (type
      __O) ->
      fun (__O_of_js : Ojs.t -> __O) ->
        fun (x9921 : Ojs.t) -> t_of_js __O_of_js x9921
    and t_1_to_js : 'O . ('O -> Ojs.t) -> 'O t_1 -> Ojs.t = fun (type __O) ->
      fun (__O_to_js : __O -> Ojs.t) ->
        fun (x9919 : __O t) -> t_to_js __O_to_js x9919
    type 'O tags = [ `TransformerFlushCallback of 'O ]
    type 'O tags_1 = 'O tags
    type ('tags, 'O) this =
      'tags intf constraint 'tags = [> `TransformerFlushCallback of 'O ]
    let rec this_of_js :
      'tags 'O .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'O) this
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x9925 : Ojs.t) -> intf_of_js __tags_of_js x9925
    and this_to_js :
      'tags 'O .
        ('tags -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x9923 : __tags intf) -> intf_to_js __tags_to_js x9923
    let (apply :
      ('tags, 'O) this ->
        controller:'O TransformStreamDefaultController.t -> unit)
      =
      fun (x9929 : ('tags, 'O) this) ->
        fun ~controller:(x9927 : 'O TransformStreamDefaultController.t) ->
          ignore
            (Ojs.apply (this_to_js Obj.magic Obj.magic x9929)
               [|(TransformStreamDefaultController.t_to_js Obj.magic x9927)|])
    let cast_from = Obj.magic
  end
module Transformer =
  struct
    type ('I, 'O) t = [ `Transformer of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x9935 : Ojs.t) -> t_of_js __I_of_js __O_of_js x9935
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x9932 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x9932
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 = fun (type
      __I) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (x9941 : Ojs.t) -> t_of_js __I_of_js any_of_js x9941
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t = fun (type __I) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (x9938 : (__I, any) t) -> t_to_js __I_to_js any_to_js x9938
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x9947 : Ojs.t) -> t_of_js any_of_js any_of_js x9947
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x9944 : (any, any) t) -> t_to_js any_to_js any_to_js x9944
    type ('I, 'O) tags = [ `Transformer of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `Transformer of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x9952 : Ojs.t) -> intf_of_js __tags_of_js x9952
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x9950 : __tags intf) -> intf_to_js __tags_to_js x9950
    let (get_flush : ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t) =
      fun (x9954 : ('tags, 'I, 'O) this) ->
        TransformerFlushCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x9954) "flush")
    let (set_flush :
      ('tags, 'I, 'O) this -> 'O TransformerFlushCallback.t -> unit) =
      fun (x9959 : ('tags, 'I, 'O) this) ->
        fun (x9960 : 'O TransformerFlushCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic Obj.magic x9959)
            "flush" (TransformerFlushCallback.t_to_js Obj.magic x9960)
    let (get_readableType : ('tags, 'I, 'O) this -> never or_undefined) =
      fun (x9965 : ('tags, 'I, 'O) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x9965) "readableType")
    let (set_readableType :
      ('tags, 'I, 'O) this -> never or_undefined -> unit) =
      fun (x9970 : ('tags, 'I, 'O) this) ->
        fun (x9971 : never or_undefined) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic Obj.magic x9970)
            "readableType" (or_undefined_to_js never_to_js x9971)
    let (get_start : ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t) =
      fun (x9976 : ('tags, 'I, 'O) this) ->
        TransformerStartCallback.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x9976) "start")
    let (set_start :
      ('tags, 'I, 'O) this -> 'O TransformerStartCallback.t -> unit) =
      fun (x9981 : ('tags, 'I, 'O) this) ->
        fun (x9982 : 'O TransformerStartCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic Obj.magic x9981)
            "start" (TransformerStartCallback.t_to_js Obj.magic x9982)
    let (get_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t) =
      fun (x9987 : ('tags, 'I, 'O) this) ->
        TransformerTransformCallback.t_of_js Obj.magic Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x9987) "transform")
    let (set_transform :
      ('tags, 'I, 'O) this -> ('I, 'O) TransformerTransformCallback.t -> unit)
      =
      fun (x9993 : ('tags, 'I, 'O) this) ->
        fun (x9994 : ('I, 'O) TransformerTransformCallback.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic Obj.magic x9993)
            "transform"
            (TransformerTransformCallback.t_to_js Obj.magic Obj.magic x9994)
    let (get_writableType : ('tags, 'I, 'O) this -> never or_undefined) =
      fun (x10000 : ('tags, 'I, 'O) this) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10000) "writableType")
    let (set_writableType :
      ('tags, 'I, 'O) this -> never or_undefined -> unit) =
      fun (x10005 : ('tags, 'I, 'O) this) ->
        fun (x10006 : never or_undefined) ->
          Ojs.set_prop_ascii
            (this_to_js Obj.magic Obj.magic Obj.magic x10005) "writableType"
            (or_undefined_to_js never_to_js x10006)
    let cast_from = Obj.magic
  end
module TransformStream =
  struct
    type ('I, 'O) t = [ `TransformStream of ('I * 'O) ] intf
    let rec t_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t =
      fun _I -> fun _O -> Obj.magic
    and t_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t -> Ojs.t =
      fun _I -> fun _O -> Obj.magic
    type ('I, 'O) t_2 = ('I, 'O) t
    let rec t_2_of_js :
      'I 'O . (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('I, 'O) t_2 = fun
      (type __I) -> fun (type __O) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (__O_of_js : Ojs.t -> __O) ->
          fun (x10014 : Ojs.t) -> t_of_js __I_of_js __O_of_js x10014
    and t_2_to_js :
      'I 'O . ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('I, 'O) t_2 -> Ojs.t = fun
      (type __I) -> fun (type __O) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (__O_to_js : __O -> Ojs.t) ->
          fun (x10011 : (__I, __O) t) -> t_to_js __I_to_js __O_to_js x10011
    type 'I t_1 = ('I, any) t
    let rec t_1_of_js : 'I . (Ojs.t -> 'I) -> Ojs.t -> 'I t_1 = fun (type
      __I) ->
      fun (__I_of_js : Ojs.t -> __I) ->
        fun (x10020 : Ojs.t) -> t_of_js __I_of_js any_of_js x10020
    and t_1_to_js : 'I . ('I -> Ojs.t) -> 'I t_1 -> Ojs.t = fun (type __I) ->
      fun (__I_to_js : __I -> Ojs.t) ->
        fun (x10017 : (__I, any) t) -> t_to_js __I_to_js any_to_js x10017
    type t_0 = (any, any) t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x10026 : Ojs.t) -> t_of_js any_of_js any_of_js x10026
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x10023 : (any, any) t) -> t_to_js any_to_js any_to_js x10023
    type ('I, 'O) tags = [ `TransformStream of ('I * 'O) ]
    type ('I, 'O) tags_2 = ('I, 'O) tags
    type 'I tags_1 = ('I, any) tags
    type tags_0 = (any, any) tags
    type ('tags, 'I, 'O) this =
      'tags intf constraint 'tags = [> `TransformStream of ('I * 'O) ]
    let rec this_of_js :
      'tags 'I 'O .
        (Ojs.t -> 'tags) ->
          (Ojs.t -> 'I) -> (Ojs.t -> 'O) -> Ojs.t -> ('tags, 'I, 'O) this
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__I_of_js : Ojs.t -> __I) ->
          fun (__O_of_js : Ojs.t -> __O) ->
            fun (x10031 : Ojs.t) -> intf_of_js __tags_of_js x10031
    and this_to_js :
      'tags 'I 'O .
        ('tags -> Ojs.t) ->
          ('I -> Ojs.t) -> ('O -> Ojs.t) -> ('tags, 'I, 'O) this -> Ojs.t
      = fun (type __tags) -> fun (type __I) -> fun (type __O) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__I_to_js : __I -> Ojs.t) ->
          fun (__O_to_js : __O -> Ojs.t) ->
            fun (x10029 : __tags intf) -> intf_to_js __tags_to_js x10029
    let (get_readable : ('tags, 'I, 'O) this -> 'O ReadableStream.t) =
      fun (x10033 : ('tags, 'I, 'O) this) ->
        ReadableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10033) "readable")
    let (get_writable : ('tags, 'I, 'O) this -> 'I WritableStream.t) =
      fun (x10038 : ('tags, 'I, 'O) this) ->
        WritableStream.t_of_js Obj.magic
          (Ojs.get_prop_ascii
             (this_to_js Obj.magic Obj.magic Obj.magic x10038) "writable")
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TransformStream") "prototype")
    let (create :
      ?transformer:('I, 'O) Transformer.t ->
        ?writableStrategy:'I QueuingStrategy.t ->
          ?readableStrategy:'O QueuingStrategy.t -> unit -> ('I, 'O) t)
      =
      fun ?transformer:(x10043 : ('I, 'O) Transformer.t option) ->
        fun ?writableStrategy:(x10044 : 'I QueuingStrategy.t option) ->
          fun ?readableStrategy:(x10045 : 'O QueuingStrategy.t option) ->
            fun () ->
              t_of_js Obj.magic Obj.magic
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "TransformStream")
                   (let x10046 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x10043 with
                     | Some x10051 ->
                         ignore
                           (Ojs.call x10046 "push"
                              [|(Transformer.t_to_js Obj.magic Obj.magic
                                   x10051)|])
                     | None -> ());
                    (match x10044 with
                     | Some x10049 ->
                         ignore
                           (Ojs.call x10046 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x10049)|])
                     | None -> ());
                    (match x10045 with
                     | Some x10047 ->
                         ignore
                           (Ojs.call x10046 "push"
                              [|(QueuingStrategy.t_to_js Obj.magic x10047)|])
                     | None -> ());
                    x10046))
  end
module TextMetrics =
  struct
    type t = [ `TextMetrics ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10057 : Ojs.t) -> t_of_js x10057
    and t_0_to_js : t_0 -> Ojs.t = fun (x10056 : t) -> t_to_js x10056
    type tags = [ `TextMetrics ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextMetrics ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10060 : Ojs.t) -> intf_of_js __tags_of_js x10060
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10058 : __tags intf) -> intf_to_js __tags_to_js x10058
    let (get_actualBoundingBoxAscent : 'tags this -> float) =
      fun (x10062 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10062)
             "actualBoundingBoxAscent")
    let (get_actualBoundingBoxDescent : 'tags this -> float) =
      fun (x10064 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10064)
             "actualBoundingBoxDescent")
    let (get_actualBoundingBoxLeft : 'tags this -> float) =
      fun (x10066 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10066)
             "actualBoundingBoxLeft")
    let (get_actualBoundingBoxRight : 'tags this -> float) =
      fun (x10068 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10068)
             "actualBoundingBoxRight")
    let (get_fontBoundingBoxAscent : 'tags this -> float) =
      fun (x10070 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10070)
             "fontBoundingBoxAscent")
    let (get_fontBoundingBoxDescent : 'tags this -> float) =
      fun (x10072 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10072)
             "fontBoundingBoxDescent")
    let (get_width : 'tags this -> float) =
      fun (x10074 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10074) "width")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextMetrics")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextMetrics") [||])
  end
module TextEncoderCommon =
  struct
    type t = [ `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10077 : Ojs.t) -> t_of_js x10077
    and t_0_to_js : t_0 -> Ojs.t = fun (x10076 : t) -> t_to_js x10076
    type tags = [ `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10080 : Ojs.t) -> intf_of_js __tags_of_js x10080
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10078 : __tags intf) -> intf_to_js __tags_to_js x10078
    let (get_encoding : 'tags this -> string) =
      fun (x10082 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10082) "encoding")
    let cast_from = Obj.magic
  end
module GenericTransformStream =
  struct
    type t = [ `GenericTransformStream ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10085 : Ojs.t) -> t_of_js x10085
    and t_0_to_js : t_0 -> Ojs.t = fun (x10084 : t) -> t_to_js x10084
    type tags = [ `GenericTransformStream ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GenericTransformStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10088 : Ojs.t) -> intf_of_js __tags_of_js x10088
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10086 : __tags intf) -> intf_to_js __tags_to_js x10086
    let (get_readable : 'tags this -> ReadableStream.t_0) =
      fun (x10090 : 'tags this) ->
        ReadableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10090) "readable")
    let (get_writable : 'tags this -> WritableStream.t_0) =
      fun (x10092 : 'tags this) ->
        WritableStream.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10092) "writable")
    let cast_from = Obj.magic
  end
module TextEncoderStream =
  struct
    type t =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10095 : Ojs.t) -> t_of_js x10095
    and t_0_to_js : t_0 -> Ojs.t = fun (x10094 : t) -> t_to_js x10094
    type tags =
      [ `GenericTransformStream  | `TextEncoderCommon  | `TextEncoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10098 : Ojs.t) -> intf_of_js __tags_of_js x10098
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10096 : __tags intf) -> intf_to_js __tags_to_js x10096
    let (get_readable : 'tags this -> Uint8Array.t_0 ReadableStream.t) =
      fun (x10100 : 'tags this) ->
        ReadableStream.t_of_js Uint8Array.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10100) "readable")
    let (get_writable : 'tags this -> string WritableStream.t) =
      fun (x10103 : 'tags this) ->
        WritableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10103) "writable")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextEncoderStream") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoderStream")
             [||])
  end
module TextEncoderEncodeIntoResult =
  struct
    type t = [ `TextEncoderEncodeIntoResult ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10107 : Ojs.t) -> t_of_js x10107
    and t_0_to_js : t_0 -> Ojs.t = fun (x10106 : t) -> t_to_js x10106
    type tags = [ `TextEncoderEncodeIntoResult ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `TextEncoderEncodeIntoResult ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10110 : Ojs.t) -> intf_of_js __tags_of_js x10110
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10108 : __tags intf) -> intf_to_js __tags_to_js x10108
    let (get_read : 'tags this -> float) =
      fun (x10112 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10112) "read")
    let (set_read : 'tags this -> float -> unit) =
      fun (x10114 : 'tags this) ->
        fun (x10115 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10114) "read"
            (Ojs.float_to_js x10115)
    let (get_written : 'tags this -> float) =
      fun (x10117 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10117) "written")
    let (set_written : 'tags this -> float -> unit) =
      fun (x10119 : 'tags this) ->
        fun (x10120 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10119) "written"
            (Ojs.float_to_js x10120)
    let cast_from = Obj.magic
  end
module TextEncoder =
  struct
    type t = [ `TextEncoder  | `TextEncoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10123 : Ojs.t) -> t_of_js x10123
    and t_0_to_js : t_0 -> Ojs.t = fun (x10122 : t) -> t_to_js x10122
    type tags = [ `TextEncoder  | `TextEncoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextEncoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10126 : Ojs.t) -> intf_of_js __tags_of_js x10126
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10124 : __tags intf) -> intf_to_js __tags_to_js x10124
    let (encode : 'tags this -> ?input:string -> unit -> Uint8Array.t_0) =
      fun (x10131 : 'tags this) ->
        fun ?input:(x10128 : string option) ->
          fun () ->
            Uint8Array.t_0_of_js
              (let x10133 = this_to_js Obj.magic x10131 in
               Ojs.call (Ojs.get_prop_ascii x10133 "encode") "apply"
                 [|x10133;((let x10129 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x10128 with
                             | Some x10130 ->
                                 ignore
                                   (Ojs.call x10129 "push"
                                      [|(Ojs.string_to_js x10130)|])
                             | None -> ());
                            x10129))|])
    let (encodeInto :
      'tags this ->
        source:string ->
          destination:Uint8Array.t_0 -> TextEncoderEncodeIntoResult.t)
      =
      fun (x10136 : 'tags this) ->
        fun ~source:(x10134 : string) ->
          fun ~destination:(x10135 : Uint8Array.t_0) ->
            TextEncoderEncodeIntoResult.t_of_js
              (Ojs.call (this_to_js Obj.magic x10136) "encodeInto"
                 [|(Ojs.string_to_js x10134);(Uint8Array.t_0_to_js x10135)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextEncoder")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "TextEncoder") [||])
  end
module TextDecoderOptions =
  struct
    type t = [ `TextDecoderOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10139 : Ojs.t) -> t_of_js x10139
    and t_0_to_js : t_0 -> Ojs.t = fun (x10138 : t) -> t_to_js x10138
    type tags = [ `TextDecoderOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10142 : Ojs.t) -> intf_of_js __tags_of_js x10142
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10140 : __tags intf) -> intf_to_js __tags_to_js x10140
    let (get_fatal : 'tags this -> bool) =
      fun (x10144 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10144) "fatal")
    let (set_fatal : 'tags this -> bool -> unit) =
      fun (x10146 : 'tags this) ->
        fun (x10147 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10146) "fatal"
            (Ojs.bool_to_js x10147)
    let (get_ignoreBOM : 'tags this -> bool) =
      fun (x10149 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10149) "ignoreBOM")
    let (set_ignoreBOM : 'tags this -> bool -> unit) =
      fun (x10151 : 'tags this) ->
        fun (x10152 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10151) "ignoreBOM"
            (Ojs.bool_to_js x10152)
    let cast_from = Obj.magic
  end
module TextDecoderCommon =
  struct
    type t = [ `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10155 : Ojs.t) -> t_of_js x10155
    and t_0_to_js : t_0 -> Ojs.t = fun (x10154 : t) -> t_to_js x10154
    type tags = [ `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderCommon ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10158 : Ojs.t) -> intf_of_js __tags_of_js x10158
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10156 : __tags intf) -> intf_to_js __tags_to_js x10156
    let (get_encoding : 'tags this -> string) =
      fun (x10160 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10160) "encoding")
    let (get_fatal : 'tags this -> bool) =
      fun (x10162 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10162) "fatal")
    let (get_ignoreBOM : 'tags this -> bool) =
      fun (x10164 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10164) "ignoreBOM")
    let cast_from = Obj.magic
  end
module TextDecoderStream =
  struct
    type t =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10167 : Ojs.t) -> t_of_js x10167
    and t_0_to_js : t_0 -> Ojs.t = fun (x10166 : t) -> t_to_js x10166
    type tags =
      [ `GenericTransformStream  | `TextDecoderCommon  | `TextDecoderStream ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoderStream ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10170 : Ojs.t) -> intf_of_js __tags_of_js x10170
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10168 : __tags intf) -> intf_to_js __tags_to_js x10168
    let (get_readable : 'tags this -> string ReadableStream.t) =
      fun (x10172 : 'tags this) ->
        ReadableStream.t_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10172) "readable")
    let (get_writable : 'tags this -> BufferSource.t WritableStream.t) =
      fun (x10175 : 'tags this) ->
        WritableStream.t_of_js BufferSource.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10175) "writable")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "TextDecoderStream") "prototype")
    let (create :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x10178 : string option) ->
        fun ?options:(x10179 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "TextDecoderStream")
                 (let x10180 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x10178 with
                   | Some x10182 ->
                       ignore
                         (Ojs.call x10180 "push"
                            [|(Ojs.string_to_js x10182)|])
                   | None -> ());
                  (match x10179 with
                   | Some x10181 ->
                       ignore
                         (Ojs.call x10180 "push"
                            [|(TextDecoderOptions.t_to_js x10181)|])
                   | None -> ());
                  x10180))
  end
module TextDecodeOptions =
  struct
    type t = [ `TextDecodeOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10184 : Ojs.t) -> t_of_js x10184
    and t_0_to_js : t_0 -> Ojs.t = fun (x10183 : t) -> t_to_js x10183
    type tags = [ `TextDecodeOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecodeOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10187 : Ojs.t) -> intf_of_js __tags_of_js x10187
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10185 : __tags intf) -> intf_to_js __tags_to_js x10185
    let (get_stream : 'tags this -> bool) =
      fun (x10189 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10189) "stream")
    let (set_stream : 'tags this -> bool -> unit) =
      fun (x10191 : 'tags this) ->
        fun (x10192 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10191) "stream"
            (Ojs.bool_to_js x10192)
    let cast_from = Obj.magic
  end
module TextDecoder =
  struct
    type t = [ `TextDecoder  | `TextDecoderCommon ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10195 : Ojs.t) -> t_of_js x10195
    and t_0_to_js : t_0 -> Ojs.t = fun (x10194 : t) -> t_to_js x10194
    type tags = [ `TextDecoder  | `TextDecoderCommon ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `TextDecoder ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10198 : Ojs.t) -> intf_of_js __tags_of_js x10198
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10196 : __tags intf) -> intf_to_js __tags_to_js x10196
    let (decode :
      'tags this ->
        ?input:BufferSource.t ->
          ?options:TextDecodeOptions.t -> unit -> string)
      =
      fun (x10205 : 'tags this) ->
        fun ?input:(x10200 : BufferSource.t option) ->
          fun ?options:(x10201 : TextDecodeOptions.t option) ->
            fun () ->
              Ojs.string_of_js
                (let x10207 = this_to_js Obj.magic x10205 in
                 Ojs.call (Ojs.get_prop_ascii x10207 "decode") "apply"
                   [|x10207;((let x10202 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x10200 with
                               | Some x10204 ->
                                   ignore
                                     (Ojs.call x10202 "push"
                                        [|(BufferSource.t_to_js x10204)|])
                               | None -> ());
                              (match x10201 with
                               | Some x10203 ->
                                   ignore
                                     (Ojs.call x10202 "push"
                                        [|(TextDecodeOptions.t_to_js x10203)|])
                               | None -> ());
                              x10202))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TextDecoder")
             "prototype")
    let (create :
      ?label:string -> ?options:TextDecoderOptions.t -> unit -> t) =
      fun ?label:(x10208 : string option) ->
        fun ?options:(x10209 : TextDecoderOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "TextDecoder")
                 (let x10210 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  (match x10208 with
                   | Some x10212 ->
                       ignore
                         (Ojs.call x10210 "push"
                            [|(Ojs.string_to_js x10212)|])
                   | None -> ());
                  (match x10209 with
                   | Some x10211 ->
                       ignore
                         (Ojs.call x10210 "push"
                            [|(TextDecoderOptions.t_to_js x10211)|])
                   | None -> ());
                  x10210))
  end
module PromiseRejectionEventInit =
  struct
    type t = [ `EventInit  | `PromiseRejectionEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10214 : Ojs.t) -> t_of_js x10214
    and t_0_to_js : t_0 -> Ojs.t = fun (x10213 : t) -> t_to_js x10213
    type tags = [ `EventInit  | `PromiseRejectionEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10217 : Ojs.t) -> intf_of_js __tags_of_js x10217
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10215 : __tags intf) -> intf_to_js __tags_to_js x10215
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x10219 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10219) "promise")
    let (set_promise : 'tags this -> any Promise.t_1 -> unit) =
      fun (x10222 : 'tags this) ->
        fun (x10223 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10222) "promise"
            (Promise.t_1_to_js any_to_js x10223)
    let (get_reason : 'tags this -> any) =
      fun (x10226 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x10226) "reason")
    let (set_reason : 'tags this -> any -> unit) =
      fun (x10228 : 'tags this) ->
        fun (x10229 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10228) "reason"
            (any_to_js x10229)
    let cast_from = Obj.magic
  end
module PromiseRejectionEvent =
  struct
    type t = [ `Event  | `PromiseRejectionEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10232 : Ojs.t) -> t_of_js x10232
    and t_0_to_js : t_0 -> Ojs.t = fun (x10231 : t) -> t_to_js x10231
    type tags = [ `Event  | `PromiseRejectionEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PromiseRejectionEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10235 : Ojs.t) -> intf_of_js __tags_of_js x10235
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10233 : __tags intf) -> intf_to_js __tags_to_js x10233
    let (get_promise : 'tags this -> any Promise.t_1) =
      fun (x10237 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10237) "promise")
    let (get_reason : 'tags this -> any) =
      fun (x10240 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x10240) "reason")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
             "prototype")
    let (create :
      type_:string -> eventInitDict:PromiseRejectionEventInit.t -> t) =
      fun ~type_:(x10242 : string) ->
        fun ~eventInitDict:(x10243 : PromiseRejectionEventInit.t) ->
          t_of_js
            (Ojs.new_obj
               (Ojs.get_prop_ascii Ojs.global "PromiseRejectionEvent")
               [|(Ojs.string_to_js x10242);(PromiseRejectionEventInit.t_to_js
                                              x10243)|])
  end
module WorkerGlobalScopeEventMap =
  struct
    type t = [ `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10245 : Ojs.t) -> t_of_js x10245
    and t_0_to_js : t_0 -> Ojs.t = fun (x10244 : t) -> t_to_js x10244
    type tags = [ `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10248 : Ojs.t) -> intf_of_js __tags_of_js x10248
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10246 : __tags intf) -> intf_to_js __tags_to_js x10246
    let (get_error : 'tags this -> ErrorEvent.t) =
      fun (x10250 : 'tags this) ->
        ErrorEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10250) "error")
    let (set_error : 'tags this -> ErrorEvent.t -> unit) =
      fun (x10252 : 'tags this) ->
        fun (x10253 : ErrorEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10252) "error"
            (ErrorEvent.t_to_js x10253)
    let (get_languagechange : 'tags this -> Event.t) =
      fun (x10255 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10255) "languagechange")
    let (set_languagechange : 'tags this -> Event.t -> unit) =
      fun (x10257 : 'tags this) ->
        fun (x10258 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10257) "languagechange"
            (Event.t_to_js x10258)
    let (get_offline : 'tags this -> Event.t) =
      fun (x10260 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10260) "offline")
    let (set_offline : 'tags this -> Event.t -> unit) =
      fun (x10262 : 'tags this) ->
        fun (x10263 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10262) "offline"
            (Event.t_to_js x10263)
    let (get_online : 'tags this -> Event.t) =
      fun (x10265 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10265) "online")
    let (set_online : 'tags this -> Event.t -> unit) =
      fun (x10267 : 'tags this) ->
        fun (x10268 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10267) "online"
            (Event.t_to_js x10268)
    let (get_rejectionhandled : 'tags this -> PromiseRejectionEvent.t) =
      fun (x10270 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10270)
             "rejectionhandled")
    let (set_rejectionhandled :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x10272 : 'tags this) ->
        fun (x10273 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10272) "rejectionhandled"
            (PromiseRejectionEvent.t_to_js x10273)
    let (get_unhandledrejection : 'tags this -> PromiseRejectionEvent.t) =
      fun (x10275 : 'tags this) ->
        PromiseRejectionEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10275)
             "unhandledrejection")
    let (set_unhandledrejection :
      'tags this -> PromiseRejectionEvent.t -> unit) =
      fun (x10277 : 'tags this) ->
        fun (x10278 : PromiseRejectionEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10277)
            "unhandledrejection" (PromiseRejectionEvent.t_to_js x10278)
    let cast_from = Obj.magic
  end
module SharedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10281 : Ojs.t) -> t_of_js x10281
    and t_0_to_js : t_0 -> Ojs.t = fun (x10280 : t) -> t_to_js x10280
    type tags =
      [ `SharedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10284 : Ojs.t) -> intf_of_js __tags_of_js x10284
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10282 : __tags intf) -> intf_to_js __tags_to_js x10282
    let (get_connect : 'tags this -> MessageEvent.t_0) =
      fun (x10286 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10286) "connect")
    let (set_connect : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x10288 : 'tags this) ->
        fun (x10289 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10288) "connect"
            (MessageEvent.t_0_to_js x10289)
    let cast_from = Obj.magic
  end
module WorkerNavigator =
  struct
    type t =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10292 : Ojs.t) -> t_of_js x10292
    and t_0_to_js : t_0 -> Ojs.t = fun (x10291 : t) -> t_to_js x10291
    type tags =
      [ `NavigatorConcurrentHardware  | `NavigatorID  | `NavigatorLanguage 
      | `NavigatorNetworkInformation  | `NavigatorOnLine 
      | `NavigatorStorage  | `WorkerNavigator ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerNavigator ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10295 : Ojs.t) -> intf_of_js __tags_of_js x10295
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10293 : __tags intf) -> intf_to_js __tags_to_js x10293
    let (get_mediaCapabilities : 'tags this -> MediaCapabilities.t) =
      fun (x10297 : 'tags this) ->
        MediaCapabilities.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10297)
             "mediaCapabilities")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerNavigator") [||])
  end
module WorkerLocation =
  struct
    type t = [ `WorkerLocation ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10300 : Ojs.t) -> t_of_js x10300
    and t_0_to_js : t_0 -> Ojs.t = fun (x10299 : t) -> t_to_js x10299
    type tags = [ `WorkerLocation ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerLocation ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10303 : Ojs.t) -> intf_of_js __tags_of_js x10303
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10301 : __tags intf) -> intf_to_js __tags_to_js x10301
    let (get_hash : 'tags this -> string) =
      fun (x10305 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10305) "hash")
    let (get_host : 'tags this -> string) =
      fun (x10307 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10307) "host")
    let (get_hostname : 'tags this -> string) =
      fun (x10309 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10309) "hostname")
    let (get_href : 'tags this -> string) =
      fun (x10311 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10311) "href")
    let (toString : 'tags this -> string) =
      fun (x10313 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.call (this_to_js Obj.magic x10313) "toString" [||])
    let (get_origin : 'tags this -> string) =
      fun (x10315 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10315) "origin")
    let (get_pathname : 'tags this -> string) =
      fun (x10317 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10317) "pathname")
    let (get_port : 'tags this -> string) =
      fun (x10319 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10319) "port")
    let (get_protocol : 'tags this -> string) =
      fun (x10321 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10321) "protocol")
    let (get_search : 'tags this -> string) =
      fun (x10323 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10323) "search")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerLocation") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerLocation") [||])
  end
module VoidFunction =
  struct
    type t = [ `VoidFunction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10326 : Ojs.t) -> t_of_js x10326
    and t_0_to_js : t_0 -> Ojs.t = fun (x10325 : t) -> t_to_js x10325
    type tags = [ `VoidFunction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `VoidFunction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10329 : Ojs.t) -> intf_of_js __tags_of_js x10329
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10327 : __tags intf) -> intf_to_js __tags_to_js x10327
    let (apply : 'tags this -> unit) =
      fun (x10331 : 'tags this) ->
        ignore (Ojs.apply (this_to_js Obj.magic x10331) [||])
    let cast_from = Obj.magic
  end
module TimerHandler =
  struct
    type t = untyped_function or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x10335 : Ojs.t) -> or_string_of_js untyped_function_of_js x10335
    and t_to_js : t -> Ojs.t =
      fun (x10333 : untyped_function or_string) ->
        or_string_to_js untyped_function_to_js x10333
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10338 : Ojs.t) -> t_of_js x10338
    and t_0_to_js : t_0 -> Ojs.t = fun (x10337 : t) -> t_to_js x10337
  end
module CanvasImageSource =
  struct
    type t = (ImageBitmap.t, OffscreenCanvas.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x10342 : Ojs.t) ->
        union2_of_js ImageBitmap.t_of_js OffscreenCanvas.t_of_js x10342
    and t_to_js : t -> Ojs.t =
      fun (x10339 : (ImageBitmap.t, OffscreenCanvas.t) union2) ->
        union2_to_js ImageBitmap.t_to_js OffscreenCanvas.t_to_js x10339
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10346 : Ojs.t) -> t_of_js x10346
    and t_0_to_js : t_0 -> Ojs.t = fun (x10345 : t) -> t_to_js x10345
  end
module ImageBitmapSource =
  struct
    type t = (Blob.t, CanvasImageSource.t, ImageData.t) union3
    let rec t_of_js : Ojs.t -> t =
      fun (x10351 : Ojs.t) ->
        union3_of_js Blob.t_of_js CanvasImageSource.t_of_js ImageData.t_of_js
          x10351
    and t_to_js : t -> Ojs.t =
      fun (x10347 : (Blob.t, CanvasImageSource.t, ImageData.t) union3) ->
        union3_to_js Blob.t_to_js CanvasImageSource.t_to_js ImageData.t_to_js
          x10347
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10356 : Ojs.t) -> t_of_js x10356
    and t_0_to_js : t_0 -> Ojs.t = fun (x10355 : t) -> t_to_js x10355
  end
module ResizeQuality =
  struct
    type t =
      [ `L_s106_low  | `L_s112_medium  | `L_s149_pixelated  | `L_s84_high ]
    let rec t_of_js : Ojs.t -> t =
      fun (x10358 : Ojs.t) ->
        let x10359 = x10358 in
        match Ojs.string_of_js x10359 with
        | "low" -> `L_s106_low
        | "medium" -> `L_s112_medium
        | "pixelated" -> `L_s149_pixelated
        | "high" -> `L_s84_high
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x10357 :
          [ `L_s106_low  | `L_s112_medium  | `L_s149_pixelated 
          | `L_s84_high ])
        ->
        match x10357 with
        | `L_s106_low -> Ojs.string_to_js "low"
        | `L_s112_medium -> Ojs.string_to_js "medium"
        | `L_s149_pixelated -> Ojs.string_to_js "pixelated"
        | `L_s84_high -> Ojs.string_to_js "high"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10361 : Ojs.t) -> t_of_js x10361
    and t_0_to_js : t_0 -> Ojs.t = fun (x10360 : t) -> t_to_js x10360
  end
module PremultiplyAlpha =
  struct
    type t = [ `L_s128_none  | `L_s152_premultiply  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x10363 : Ojs.t) ->
        let x10364 = x10363 in
        match Ojs.string_of_js x10364 with
        | "none" -> `L_s128_none
        | "premultiply" -> `L_s152_premultiply
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x10362 : [ `L_s128_none  | `L_s152_premultiply  | `L_s57_default ])
        ->
        match x10362 with
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s152_premultiply -> Ojs.string_to_js "premultiply"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10366 : Ojs.t) -> t_of_js x10366
    and t_0_to_js : t_0 -> Ojs.t = fun (x10365 : t) -> t_to_js x10365
  end
module ImageOrientation =
  struct
    type t = [ `L_s128_none  | `L_s74_flipY ]
    let rec t_of_js : Ojs.t -> t =
      fun (x10368 : Ojs.t) ->
        let x10369 = x10368 in
        match Ojs.string_of_js x10369 with
        | "none" -> `L_s128_none
        | "flipY" -> `L_s74_flipY
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x10367 : [ `L_s128_none  | `L_s74_flipY ]) ->
        match x10367 with
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s74_flipY -> Ojs.string_to_js "flipY"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10371 : Ojs.t) -> t_of_js x10371
    and t_0_to_js : t_0 -> Ojs.t = fun (x10370 : t) -> t_to_js x10370
  end
module ColorSpaceConversion =
  struct
    type t = [ `L_s128_none  | `L_s57_default ]
    let rec t_of_js : Ojs.t -> t =
      fun (x10373 : Ojs.t) ->
        let x10374 = x10373 in
        match Ojs.string_of_js x10374 with
        | "none" -> `L_s128_none
        | "default" -> `L_s57_default
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x10372 : [ `L_s128_none  | `L_s57_default ]) ->
        match x10372 with
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s57_default -> Ojs.string_to_js "default"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10376 : Ojs.t) -> t_of_js x10376
    and t_0_to_js : t_0 -> Ojs.t = fun (x10375 : t) -> t_to_js x10375
  end
module ImageBitmapOptions =
  struct
    type t = [ `ImageBitmapOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10378 : Ojs.t) -> t_of_js x10378
    and t_0_to_js : t_0 -> Ojs.t = fun (x10377 : t) -> t_to_js x10377
    type tags = [ `ImageBitmapOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImageBitmapOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10381 : Ojs.t) -> intf_of_js __tags_of_js x10381
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10379 : __tags intf) -> intf_to_js __tags_to_js x10379
    let (get_colorSpaceConversion : 'tags this -> ColorSpaceConversion.t) =
      fun (x10383 : 'tags this) ->
        ColorSpaceConversion.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10383)
             "colorSpaceConversion")
    let (set_colorSpaceConversion :
      'tags this -> ColorSpaceConversion.t -> unit) =
      fun (x10385 : 'tags this) ->
        fun (x10386 : ColorSpaceConversion.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10385)
            "colorSpaceConversion" (ColorSpaceConversion.t_to_js x10386)
    let (get_imageOrientation : 'tags this -> ImageOrientation.t) =
      fun (x10388 : 'tags this) ->
        ImageOrientation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10388)
             "imageOrientation")
    let (set_imageOrientation : 'tags this -> ImageOrientation.t -> unit) =
      fun (x10390 : 'tags this) ->
        fun (x10391 : ImageOrientation.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10390) "imageOrientation"
            (ImageOrientation.t_to_js x10391)
    let (get_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t) =
      fun (x10393 : 'tags this) ->
        PremultiplyAlpha.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10393)
             "premultiplyAlpha")
    let (set_premultiplyAlpha : 'tags this -> PremultiplyAlpha.t -> unit) =
      fun (x10395 : 'tags this) ->
        fun (x10396 : PremultiplyAlpha.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10395) "premultiplyAlpha"
            (PremultiplyAlpha.t_to_js x10396)
    let (get_resizeHeight : 'tags this -> float) =
      fun (x10398 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10398) "resizeHeight")
    let (set_resizeHeight : 'tags this -> float -> unit) =
      fun (x10400 : 'tags this) ->
        fun (x10401 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10400) "resizeHeight"
            (Ojs.float_to_js x10401)
    let (get_resizeQuality : 'tags this -> ResizeQuality.t) =
      fun (x10403 : 'tags this) ->
        ResizeQuality.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10403) "resizeQuality")
    let (set_resizeQuality : 'tags this -> ResizeQuality.t -> unit) =
      fun (x10405 : 'tags this) ->
        fun (x10406 : ResizeQuality.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10405) "resizeQuality"
            (ResizeQuality.t_to_js x10406)
    let (get_resizeWidth : 'tags this -> float) =
      fun (x10408 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10408) "resizeWidth")
    let (set_resizeWidth : 'tags this -> float -> unit) =
      fun (x10410 : 'tags this) ->
        fun (x10411 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10410) "resizeWidth"
            (Ojs.float_to_js x10411)
    let cast_from = Obj.magic
  end
module IDBFactory =
  struct
    type t = [ `IDBFactory ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10414 : Ojs.t) -> t_of_js x10414
    and t_0_to_js : t_0 -> Ojs.t = fun (x10413 : t) -> t_to_js x10413
    type tags = [ `IDBFactory ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBFactory ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10417 : Ojs.t) -> intf_of_js __tags_of_js x10417
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10415 : __tags intf) -> intf_to_js __tags_to_js x10415
    let (cmp : 'tags this -> first:any -> second:any -> float) =
      fun (x10421 : 'tags this) ->
        fun ~first:(x10419 : any) ->
          fun ~second:(x10420 : any) ->
            Ojs.float_of_js
              (Ojs.call (this_to_js Obj.magic x10421) "cmp"
                 [|(any_to_js x10419);(any_to_js x10420)|])
    let (databases : 'tags this -> IDBDatabaseInfo.t list Promise.t_1) =
      fun (x10423 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x10425 : Ojs.t) ->
             Ojs.list_of_js IDBDatabaseInfo.t_of_js x10425)
          (Ojs.call (this_to_js Obj.magic x10423) "databases" [||])
    let (deleteDatabase : 'tags this -> name:string -> IDBOpenDBRequest.t) =
      fun (x10428 : 'tags this) ->
        fun ~name:(x10427 : string) ->
          IDBOpenDBRequest.t_of_js
            (Ojs.call (this_to_js Obj.magic x10428) "deleteDatabase"
               [|(Ojs.string_to_js x10427)|])
    let (open_ :
      'tags this ->
        name:string -> ?version:float -> unit -> IDBOpenDBRequest.t)
      =
      fun (x10434 : 'tags this) ->
        fun ~name:(x10430 : string) ->
          fun ?version:(x10431 : float option) ->
            fun () ->
              IDBOpenDBRequest.t_of_js
                (let x10436 = this_to_js Obj.magic x10434 in
                 Ojs.call (Ojs.get_prop_ascii x10436 "open") "apply"
                   [|x10436;((let x10432 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x10432 "push"
                                   [|(Ojs.string_to_js x10430)|]);
                              (match x10431 with
                               | Some x10433 ->
                                   ignore
                                     (Ojs.call x10432 "push"
                                        [|(Ojs.float_to_js x10433)|])
                               | None -> ());
                              x10432))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "IDBFactory")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "IDBFactory") [||])
  end
module Crypto =
  struct
    type t = [ `Crypto ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10438 : Ojs.t) -> t_of_js x10438
    and t_0_to_js : t_0 -> Ojs.t = fun (x10437 : t) -> t_to_js x10437
    type tags = [ `Crypto ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Crypto ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10441 : Ojs.t) -> intf_of_js __tags_of_js x10441
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10439 : __tags intf) -> intf_to_js __tags_to_js x10439
    let (get_subtle : 'tags this -> SubtleCrypto.t) =
      fun (x10443 : 'tags this) ->
        SubtleCrypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10443) "subtle")
    let (getRandomValues : 'tags this -> array:'T -> 'T) =
      fun (x10446 : 'tags this) ->
        fun ~array:(x10445 : 'T) ->
          Obj.magic
            (Ojs.call (this_to_js Obj.magic x10446) "getRandomValues"
               [|(Obj.magic x10445)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Crypto")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Crypto") [||])
  end
module CacheStorage =
  struct
    type t = [ `CacheStorage ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10449 : Ojs.t) -> t_of_js x10449
    and t_0_to_js : t_0 -> Ojs.t = fun (x10448 : t) -> t_to_js x10448
    type tags = [ `CacheStorage ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CacheStorage ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10452 : Ojs.t) -> intf_of_js __tags_of_js x10452
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10450 : __tags intf) -> intf_to_js __tags_to_js x10450
    let (delete : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x10455 : 'tags this) ->
        fun ~cacheName:(x10454 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x10455) "delete"
               [|(Ojs.string_to_js x10454)|])
    let (has : 'tags this -> cacheName:string -> bool Promise.t_1) =
      fun (x10459 : 'tags this) ->
        fun ~cacheName:(x10458 : string) ->
          Promise.t_1_of_js Ojs.bool_of_js
            (Ojs.call (this_to_js Obj.magic x10459) "has"
               [|(Ojs.string_to_js x10458)|])
    let (keys : 'tags this -> string list Promise.t_1) =
      fun (x10462 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x10464 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x10464)
          (Ojs.call (this_to_js Obj.magic x10462) "keys" [||])
    let (match_ :
      'tags this ->
        request:RequestInfo.t ->
          ?options:MultiCacheQueryOptions.t ->
            unit -> Response.t or_undefined Promise.t_1)
      =
      fun (x10470 : 'tags this) ->
        fun ~request:(x10466 : RequestInfo.t) ->
          fun ?options:(x10467 : MultiCacheQueryOptions.t option) ->
            fun () ->
              Promise.t_1_of_js
                (fun (x10473 : Ojs.t) ->
                   or_undefined_of_js Response.t_of_js x10473)
                (let x10472 = this_to_js Obj.magic x10470 in
                 Ojs.call (Ojs.get_prop_ascii x10472 "match") "apply"
                   [|x10472;((let x10468 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x10468 "push"
                                   [|(RequestInfo.t_to_js x10466)|]);
                              (match x10467 with
                               | Some x10469 ->
                                   ignore
                                     (Ojs.call x10468 "push"
                                        [|(MultiCacheQueryOptions.t_to_js
                                             x10469)|])
                               | None -> ());
                              x10468))|])
    let (open_ : 'tags this -> cacheName:string -> Cache.t Promise.t_1) =
      fun (x10476 : 'tags this) ->
        fun ~cacheName:(x10475 : string) ->
          Promise.t_1_of_js Cache.t_of_js
            (Ojs.call (this_to_js Obj.magic x10476) "open"
               [|(Ojs.string_to_js x10475)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CacheStorage")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CacheStorage") [||])
  end
module WindowOrWorkerGlobalScope =
  struct
    type t = [ `WindowOrWorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10480 : Ojs.t) -> t_of_js x10480
    and t_0_to_js : t_0 -> Ojs.t = fun (x10479 : t) -> t_to_js x10479
    type tags = [ `WindowOrWorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `WindowOrWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10483 : Ojs.t) -> intf_of_js __tags_of_js x10483
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10481 : __tags intf) -> intf_to_js __tags_to_js x10481
    let (get_caches : 'tags this -> CacheStorage.t) =
      fun (x10485 : 'tags this) ->
        CacheStorage.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10485) "caches")
    let (get_crossOriginIsolated : 'tags this -> bool) =
      fun (x10487 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10487)
             "crossOriginIsolated")
    let (get_crypto : 'tags this -> Crypto.t) =
      fun (x10489 : 'tags this) ->
        Crypto.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10489) "crypto")
    let (get_indexedDB : 'tags this -> IDBFactory.t) =
      fun (x10491 : 'tags this) ->
        IDBFactory.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10491) "indexedDB")
    let (get_isSecureContext : 'tags this -> bool) =
      fun (x10493 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10493) "isSecureContext")
    let (get_origin : 'tags this -> string) =
      fun (x10495 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10495) "origin")
    let (get_performance : 'tags this -> Performance.t) =
      fun (x10497 : 'tags this) ->
        Performance.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10497) "performance")
    let (atob : 'tags this -> data:string -> string) =
      fun (x10500 : 'tags this) ->
        fun ~data:(x10499 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x10500) "atob"
               [|(Ojs.string_to_js x10499)|])
    let (btoa : 'tags this -> data:string -> string) =
      fun (x10503 : 'tags this) ->
        fun ~data:(x10502 : string) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x10503) "btoa"
               [|(Ojs.string_to_js x10502)|])
    let (clearInterval : 'tags this -> ?handle:float -> unit -> unit) =
      fun (x10508 : 'tags this) ->
        fun ?handle:(x10505 : float option) ->
          fun () ->
            ignore
              (let x10510 = this_to_js Obj.magic x10508 in
               Ojs.call (Ojs.get_prop_ascii x10510 "clearInterval") "apply"
                 [|x10510;((let x10506 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x10505 with
                             | Some x10507 ->
                                 ignore
                                   (Ojs.call x10506 "push"
                                      [|(Ojs.float_to_js x10507)|])
                             | None -> ());
                            x10506))|])
    let (clearTimeout : 'tags this -> ?handle:float -> unit -> unit) =
      fun (x10514 : 'tags this) ->
        fun ?handle:(x10511 : float option) ->
          fun () ->
            ignore
              (let x10516 = this_to_js Obj.magic x10514 in
               Ojs.call (Ojs.get_prop_ascii x10516 "clearTimeout") "apply"
                 [|x10516;((let x10512 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x10511 with
                             | Some x10513 ->
                                 ignore
                                   (Ojs.call x10512 "push"
                                      [|(Ojs.float_to_js x10513)|])
                             | None -> ());
                            x10512))|])
    let (createImageBitmap :
      'tags this ->
        image:ImageBitmapSource.t ->
          ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x10521 : 'tags this) ->
        fun ~image:(x10517 : ImageBitmapSource.t) ->
          fun ?options:(x10518 : ImageBitmapOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ImageBitmap.t_of_js
                (let x10523 = this_to_js Obj.magic x10521 in
                 Ojs.call (Ojs.get_prop_ascii x10523 "createImageBitmap")
                   "apply"
                   [|x10523;((let x10519 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x10519 "push"
                                   [|(ImageBitmapSource.t_to_js x10517)|]);
                              (match x10518 with
                               | Some x10520 ->
                                   ignore
                                     (Ojs.call x10519 "push"
                                        [|(ImageBitmapOptions.t_to_js x10520)|])
                               | None -> ());
                              x10519))|])
    let (createImageBitmap' :
      'tags this ->
        image:ImageBitmapSource.t ->
          sx:float ->
            sy:float ->
              sw:float ->
                sh:float ->
                  ?options:ImageBitmapOptions.t ->
                    unit -> ImageBitmap.t Promise.t_1)
      =
      fun (x10533 : 'tags this) ->
        fun ~image:(x10525 : ImageBitmapSource.t) ->
          fun ~sx:(x10526 : float) ->
            fun ~sy:(x10527 : float) ->
              fun ~sw:(x10528 : float) ->
                fun ~sh:(x10529 : float) ->
                  fun ?options:(x10530 : ImageBitmapOptions.t option) ->
                    fun () ->
                      Promise.t_1_of_js ImageBitmap.t_of_js
                        (let x10535 = this_to_js Obj.magic x10533 in
                         Ojs.call
                           (Ojs.get_prop_ascii x10535 "createImageBitmap")
                           "apply"
                           [|x10535;((let x10531 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x10531 "push"
                                           [|(ImageBitmapSource.t_to_js
                                                x10525)|]);
                                      ignore
                                        (Ojs.call x10531 "push"
                                           [|(Ojs.float_to_js x10526)|]);
                                      ignore
                                        (Ojs.call x10531 "push"
                                           [|(Ojs.float_to_js x10527)|]);
                                      ignore
                                        (Ojs.call x10531 "push"
                                           [|(Ojs.float_to_js x10528)|]);
                                      ignore
                                        (Ojs.call x10531 "push"
                                           [|(Ojs.float_to_js x10529)|]);
                                      (match x10530 with
                                       | Some x10532 ->
                                           ignore
                                             (Ojs.call x10531 "push"
                                                [|(ImageBitmapOptions.t_to_js
                                                     x10532)|])
                                       | None -> ());
                                      x10531))|])
    let (fetch :
      'tags this ->
        input:RequestInfo.t ->
          ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
      =
      fun (x10541 : 'tags this) ->
        fun ~input:(x10537 : RequestInfo.t) ->
          fun ?init:(x10538 : RequestInit.t option) ->
            fun () ->
              Promise.t_1_of_js Response.t_of_js
                (let x10543 = this_to_js Obj.magic x10541 in
                 Ojs.call (Ojs.get_prop_ascii x10543 "fetch") "apply"
                   [|x10543;((let x10539 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x10539 "push"
                                   [|(RequestInfo.t_to_js x10537)|]);
                              (match x10538 with
                               | Some x10540 ->
                                   ignore
                                     (Ojs.call x10539 "push"
                                        [|(RequestInit.t_to_js x10540)|])
                               | None -> ());
                              x10539))|])
    let (queueMicrotask : 'tags this -> callback:VoidFunction.t -> unit) =
      fun (x10546 : 'tags this) ->
        fun ~callback:(x10545 : VoidFunction.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x10546) "queueMicrotask"
               [|(VoidFunction.t_to_js x10545)|])
    let (setInterval :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x10554 : 'tags this) ->
        fun ~handler:(x10548 : TimerHandler.t) ->
          fun ?timeout:(x10549 : float option) ->
            fun ~arguments:(x10550 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x10556 = this_to_js Obj.magic x10554 in
                   Ojs.call (Ojs.get_prop_ascii x10556 "setInterval") "apply"
                     [|x10556;((let x10551 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10551 "push"
                                     [|(TimerHandler.t_to_js x10548)|]);
                                (match x10549 with
                                 | Some x10553 ->
                                     ignore
                                       (Ojs.call x10551 "push"
                                          [|(Ojs.float_to_js x10553)|])
                                 | None -> ());
                                List.iter
                                  (fun (x10552 : any) ->
                                     ignore
                                       (Ojs.call x10551 "push"
                                          [|(any_to_js x10552)|])) x10550;
                                x10551))|])
    let (setTimeout :
      'tags this ->
        handler:TimerHandler.t ->
          ?timeout:float -> arguments:any list -> unit -> float)
      =
      fun (x10563 : 'tags this) ->
        fun ~handler:(x10557 : TimerHandler.t) ->
          fun ?timeout:(x10558 : float option) ->
            fun ~arguments:(x10559 : any list) ->
              fun () ->
                Ojs.float_of_js
                  (let x10565 = this_to_js Obj.magic x10563 in
                   Ojs.call (Ojs.get_prop_ascii x10565 "setTimeout") "apply"
                     [|x10565;((let x10560 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10560 "push"
                                     [|(TimerHandler.t_to_js x10557)|]);
                                (match x10558 with
                                 | Some x10562 ->
                                     ignore
                                       (Ojs.call x10560 "push"
                                          [|(Ojs.float_to_js x10562)|])
                                 | None -> ());
                                List.iter
                                  (fun (x10561 : any) ->
                                     ignore
                                       (Ojs.call x10560 "push"
                                          [|(any_to_js x10561)|])) x10559;
                                x10560))|])
    let cast_from = Obj.magic
  end
module FontFaceSource =
  struct
    type t = [ `FontFaceSource ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10567 : Ojs.t) -> t_of_js x10567
    and t_0_to_js : t_0 -> Ojs.t = fun (x10566 : t) -> t_to_js x10566
    type tags = [ `FontFaceSource ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10570 : Ojs.t) -> intf_of_js __tags_of_js x10570
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10568 : __tags intf) -> intf_to_js __tags_to_js x10568
    let (get_fonts : 'tags this -> FontFaceSet.t) =
      fun (x10572 : 'tags this) ->
        FontFaceSet.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10572) "fonts")
    let cast_from = Obj.magic
  end
module WorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10575 : Ojs.t) -> t_of_js x10575
    and t_0_to_js : t_0 -> Ojs.t = fun (x10574 : t) -> t_to_js x10574
    type tags =
      [ `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10578 : Ojs.t) -> intf_of_js __tags_of_js x10578
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10576 : __tags intf) -> intf_to_js __tags_to_js x10576
    let (get_location : 'tags this -> WorkerLocation.t) =
      fun (x10580 : 'tags this) ->
        WorkerLocation.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10580) "location")
    let (get_navigator : 'tags this -> WorkerNavigator.t) =
      fun (x10582 : 'tags this) ->
        WorkerNavigator.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10582) "navigator")
    let (get_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null) =
      fun (x10584 : 'tags this) ->
        or_null_of_js
          (fun (x10586 : Ojs.t) ->
             fun ~this:(x10587 : t) ->
               fun ~ev:(x10588 : ErrorEvent.t) ->
                 any_of_js
                   (Ojs.apply x10586
                      [|(t_to_js x10587);(ErrorEvent.t_to_js x10588)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10584) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:ErrorEvent.t -> any) or_null -> unit) =
      fun (x10589 : 'tags this) ->
        fun (x10590 : (this:t -> ev:ErrorEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10589) "onerror"
            (or_null_to_js
               (fun (x10591 : this:t -> ev:ErrorEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10592 : Ojs.t) ->
                       fun (x10593 : Ojs.t) ->
                         any_to_js
                           (x10591 ~this:(t_of_js x10592)
                              ~ev:(ErrorEvent.t_of_js x10593)))) x10590)
    let (get_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x10595 : 'tags this) ->
        or_null_of_js
          (fun (x10597 : Ojs.t) ->
             fun ~this:(x10598 : t) ->
               fun ~ev:(x10599 : Event.t) ->
                 any_of_js
                   (Ojs.apply x10597
                      [|(t_to_js x10598);(Event.t_to_js x10599)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10595)
             "onlanguagechange")
    let (set_onlanguagechange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x10600 : 'tags this) ->
        fun (x10601 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10600) "onlanguagechange"
            (or_null_to_js
               (fun (x10602 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10603 : Ojs.t) ->
                       fun (x10604 : Ojs.t) ->
                         any_to_js
                           (x10602 ~this:(t_of_js x10603)
                              ~ev:(Event.t_of_js x10604)))) x10601)
    let (get_onoffline : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x10606 : 'tags this) ->
        or_null_of_js
          (fun (x10608 : Ojs.t) ->
             fun ~this:(x10609 : t) ->
               fun ~ev:(x10610 : Event.t) ->
                 any_of_js
                   (Ojs.apply x10608
                      [|(t_to_js x10609);(Event.t_to_js x10610)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10606) "onoffline")
    let (set_onoffline :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x10611 : 'tags this) ->
        fun (x10612 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10611) "onoffline"
            (or_null_to_js
               (fun (x10613 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10614 : Ojs.t) ->
                       fun (x10615 : Ojs.t) ->
                         any_to_js
                           (x10613 ~this:(t_of_js x10614)
                              ~ev:(Event.t_of_js x10615)))) x10612)
    let (get_ononline : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x10617 : 'tags this) ->
        or_null_of_js
          (fun (x10619 : Ojs.t) ->
             fun ~this:(x10620 : t) ->
               fun ~ev:(x10621 : Event.t) ->
                 any_of_js
                   (Ojs.apply x10619
                      [|(t_to_js x10620);(Event.t_to_js x10621)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10617) "ononline")
    let (set_ononline :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x10622 : 'tags this) ->
        fun (x10623 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10622) "ononline"
            (or_null_to_js
               (fun (x10624 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10625 : Ojs.t) ->
                       fun (x10626 : Ojs.t) ->
                         any_to_js
                           (x10624 ~this:(t_of_js x10625)
                              ~ev:(Event.t_of_js x10626)))) x10623)
    let (get_onrejectionhandled :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) or_null) =
      fun (x10628 : 'tags this) ->
        or_null_of_js
          (fun (x10630 : Ojs.t) ->
             fun ~this:(x10631 : t) ->
               fun ~ev:(x10632 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x10630
                      [|(t_to_js x10631);(PromiseRejectionEvent.t_to_js
                                            x10632)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10628)
             "onrejectionhandled")
    let (set_onrejectionhandled :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) or_null -> unit)
      =
      fun (x10633 : 'tags this) ->
        fun (x10634 : (this:t -> ev:PromiseRejectionEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10633)
            "onrejectionhandled"
            (or_null_to_js
               (fun (x10635 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10636 : Ojs.t) ->
                       fun (x10637 : Ojs.t) ->
                         any_to_js
                           (x10635 ~this:(t_of_js x10636)
                              ~ev:(PromiseRejectionEvent.t_of_js x10637))))
               x10634)
    let (get_onunhandledrejection :
      'tags this -> (this:t -> ev:PromiseRejectionEvent.t -> any) or_null) =
      fun (x10639 : 'tags this) ->
        or_null_of_js
          (fun (x10641 : Ojs.t) ->
             fun ~this:(x10642 : t) ->
               fun ~ev:(x10643 : PromiseRejectionEvent.t) ->
                 any_of_js
                   (Ojs.apply x10641
                      [|(t_to_js x10642);(PromiseRejectionEvent.t_to_js
                                            x10643)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10639)
             "onunhandledrejection")
    let (set_onunhandledrejection :
      'tags this ->
        (this:t -> ev:PromiseRejectionEvent.t -> any) or_null -> unit)
      =
      fun (x10644 : 'tags this) ->
        fun (x10645 : (this:t -> ev:PromiseRejectionEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10644)
            "onunhandledrejection"
            (or_null_to_js
               (fun (x10646 : this:t -> ev:PromiseRejectionEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10647 : Ojs.t) ->
                       fun (x10648 : Ojs.t) ->
                         any_to_js
                           (x10646 ~this:(t_of_js x10647)
                              ~ev:(PromiseRejectionEvent.t_of_js x10648))))
               x10645)
    let (get_self : 'tags this -> (t, any) intersection2) =
      fun (x10650 : 'tags this) ->
        intersection2_of_js t_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10650) "self")
    let (importScripts : 'tags this -> urls:URL.t or_string list -> unit) =
      fun (x10658 : 'tags this) ->
        fun ~urls:(x10654 : URL.t or_string list) ->
          ignore
            (let x10660 = this_to_js Obj.magic x10658 in
             Ojs.call (Ojs.get_prop_ascii x10660 "importScripts") "apply"
               [|x10660;((let x10655 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x10656 : URL.t or_string) ->
                               ignore
                                 (Ojs.call x10655 "push"
                                    [|(or_string_to_js URL.t_to_js x10656)|]))
                            x10654;
                          x10655))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10669 : 'tags this) ->
        fun ~type_:(x10661 : 'K) ->
          fun ~listener:(x10662 : this:t -> ev:any -> any) ->
            fun
              ?options:(x10663 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10671 = this_to_js Obj.magic x10669 in
                   Ojs.call (Ojs.get_prop_ascii x10671 "addEventListener")
                     "apply"
                     [|x10671;((let x10664 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10664 "push"
                                     [|(Obj.magic x10661)|]);
                                ignore
                                  (Ojs.call x10664 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x10667 : Ojs.t) ->
                                             fun (x10668 : Ojs.t) ->
                                               any_to_js
                                                 (x10662
                                                    ~this:(t_of_js x10667)
                                                    ~ev:(any_of_js x10668))))|]);
                                (match x10663 with
                                 | Some x10665 ->
                                     ignore
                                       (Ojs.call x10664 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x10665)|])
                                 | None -> ());
                                x10664))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10678 : 'tags this) ->
        fun ~type_:(x10672 : string) ->
          fun ~listener:(x10673 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x10674 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10680 = this_to_js Obj.magic x10678 in
                   Ojs.call (Ojs.get_prop_ascii x10680 "addEventListener")
                     "apply"
                     [|x10680;((let x10675 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10675 "push"
                                     [|(Ojs.string_to_js x10672)|]);
                                ignore
                                  (Ojs.call x10675 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x10673)|]);
                                (match x10674 with
                                 | Some x10676 ->
                                     ignore
                                       (Ojs.call x10675 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x10676)|])
                                 | None -> ());
                                x10675))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10689 : 'tags this) ->
        fun ~type_:(x10681 : 'K) ->
          fun ~listener:(x10682 : this:t -> ev:any -> any) ->
            fun ?options:(x10683 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10691 = this_to_js Obj.magic x10689 in
                   Ojs.call (Ojs.get_prop_ascii x10691 "removeEventListener")
                     "apply"
                     [|x10691;((let x10684 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10684 "push"
                                     [|(Obj.magic x10681)|]);
                                ignore
                                  (Ojs.call x10684 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x10687 : Ojs.t) ->
                                             fun (x10688 : Ojs.t) ->
                                               any_to_js
                                                 (x10682
                                                    ~this:(t_of_js x10687)
                                                    ~ev:(any_of_js x10688))))|]);
                                (match x10683 with
                                 | Some x10685 ->
                                     ignore
                                       (Ojs.call x10684 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x10685)|])
                                 | None -> ());
                                x10684))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10698 : 'tags this) ->
        fun ~type_:(x10692 : string) ->
          fun ~listener:(x10693 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x10694 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10700 = this_to_js Obj.magic x10698 in
                   Ojs.call (Ojs.get_prop_ascii x10700 "removeEventListener")
                     "apply"
                     [|x10700;((let x10695 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10695 "push"
                                     [|(Ojs.string_to_js x10692)|]);
                                ignore
                                  (Ojs.call x10695 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x10693)|]);
                                (match x10694 with
                                 | Some x10696 ->
                                     ignore
                                       (Ojs.call x10695 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x10696)|])
                                 | None -> ());
                                x10695))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WorkerGlobalScope")
             [||])
  end
module SharedWorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10702 : Ojs.t) -> t_of_js x10702
    and t_0_to_js : t_0 -> Ojs.t = fun (x10701 : t) -> t_to_js x10701
    type tags =
      [ `EventTarget  | `FontFaceSource  | `SharedWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SharedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10705 : Ojs.t) -> intf_of_js __tags_of_js x10705
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10703 : __tags intf) -> intf_to_js __tags_to_js x10703
    let (get_name : 'tags this -> string) =
      fun (x10707 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10707) "name")
    let (get_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x10709 : 'tags this) ->
        or_null_of_js
          (fun (x10711 : Ojs.t) ->
             fun ~this:(x10712 : t) ->
               fun ~ev:(x10713 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x10711
                      [|(t_to_js x10712);(MessageEvent.t_0_to_js x10713)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10709) "onconnect")
    let (set_onconnect :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x10714 : 'tags this) ->
        fun (x10715 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10714) "onconnect"
            (or_null_to_js
               (fun (x10716 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10717 : Ojs.t) ->
                       fun (x10718 : Ojs.t) ->
                         any_to_js
                           (x10716 ~this:(t_of_js x10717)
                              ~ev:(MessageEvent.t_0_of_js x10718)))) x10715)
    let (close : 'tags this -> unit) =
      fun (x10720 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x10720) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10730 : 'tags this) ->
        fun ~type_:(x10722 : 'K) ->
          fun ~listener:(x10723 : this:t -> ev:any -> any) ->
            fun
              ?options:(x10724 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10732 = this_to_js Obj.magic x10730 in
                   Ojs.call (Ojs.get_prop_ascii x10732 "addEventListener")
                     "apply"
                     [|x10732;((let x10725 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10725 "push"
                                     [|(Obj.magic x10722)|]);
                                ignore
                                  (Ojs.call x10725 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x10728 : Ojs.t) ->
                                             fun (x10729 : Ojs.t) ->
                                               any_to_js
                                                 (x10723
                                                    ~this:(t_of_js x10728)
                                                    ~ev:(any_of_js x10729))))|]);
                                (match x10724 with
                                 | Some x10726 ->
                                     ignore
                                       (Ojs.call x10725 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x10726)|])
                                 | None -> ());
                                x10725))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10739 : 'tags this) ->
        fun ~type_:(x10733 : string) ->
          fun ~listener:(x10734 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x10735 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10741 = this_to_js Obj.magic x10739 in
                   Ojs.call (Ojs.get_prop_ascii x10741 "addEventListener")
                     "apply"
                     [|x10741;((let x10736 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10736 "push"
                                     [|(Ojs.string_to_js x10733)|]);
                                ignore
                                  (Ojs.call x10736 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x10734)|]);
                                (match x10735 with
                                 | Some x10737 ->
                                     ignore
                                       (Ojs.call x10736 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x10737)|])
                                 | None -> ());
                                x10736))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10750 : 'tags this) ->
        fun ~type_:(x10742 : 'K) ->
          fun ~listener:(x10743 : this:t -> ev:any -> any) ->
            fun ?options:(x10744 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10752 = this_to_js Obj.magic x10750 in
                   Ojs.call (Ojs.get_prop_ascii x10752 "removeEventListener")
                     "apply"
                     [|x10752;((let x10745 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10745 "push"
                                     [|(Obj.magic x10742)|]);
                                ignore
                                  (Ojs.call x10745 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x10748 : Ojs.t) ->
                                             fun (x10749 : Ojs.t) ->
                                               any_to_js
                                                 (x10743
                                                    ~this:(t_of_js x10748)
                                                    ~ev:(any_of_js x10749))))|]);
                                (match x10744 with
                                 | Some x10746 ->
                                     ignore
                                       (Ojs.call x10745 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x10746)|])
                                 | None -> ());
                                x10745))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x10759 : 'tags this) ->
        fun ~type_:(x10753 : string) ->
          fun ~listener:(x10754 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x10755 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x10761 = this_to_js Obj.magic x10759 in
                   Ojs.call (Ojs.get_prop_ascii x10761 "removeEventListener")
                     "apply"
                     [|x10761;((let x10756 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x10756 "push"
                                     [|(Ojs.string_to_js x10753)|]);
                                ignore
                                  (Ojs.call x10756 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x10754)|]);
                                (match x10755 with
                                 | Some x10757 ->
                                     ignore
                                       (Ojs.call x10756 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x10757)|])
                                 | None -> ());
                                x10756))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "SharedWorkerGlobalScope") 
             [||])
  end
module ServiceWorkerRegistrationEventMap =
  struct
    type t = [ `ServiceWorkerRegistrationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10763 : Ojs.t) -> t_of_js x10763
    and t_0_to_js : t_0 -> Ojs.t = fun (x10762 : t) -> t_to_js x10762
    type tags = [ `ServiceWorkerRegistrationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistrationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10766 : Ojs.t) -> intf_of_js __tags_of_js x10766
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10764 : __tags intf) -> intf_to_js __tags_to_js x10764
    let (get_updatefound : 'tags this -> Event.t) =
      fun (x10768 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10768) "updatefound")
    let (set_updatefound : 'tags this -> Event.t -> unit) =
      fun (x10770 : 'tags this) ->
        fun (x10771 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10770) "updatefound"
            (Event.t_to_js x10771)
    let cast_from = Obj.magic
  end
module PushMessageData =
  struct
    type t = [ `PushMessageData ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10774 : Ojs.t) -> t_of_js x10774
    and t_0_to_js : t_0 -> Ojs.t = fun (x10773 : t) -> t_to_js x10773
    type tags = [ `PushMessageData ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushMessageData ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10777 : Ojs.t) -> intf_of_js __tags_of_js x10777
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10775 : __tags intf) -> intf_to_js __tags_to_js x10775
    let (arrayBuffer : 'tags this -> ArrayBuffer.t_0) =
      fun (x10779 : 'tags this) ->
        ArrayBuffer.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x10779) "arrayBuffer" [||])
    let (blob : 'tags this -> Blob.t) =
      fun (x10781 : 'tags this) ->
        Blob.t_of_js (Ojs.call (this_to_js Obj.magic x10781) "blob" [||])
    let (json : 'tags this -> any) =
      fun (x10783 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x10783) "json" [||])
    let (text : 'tags this -> string) =
      fun (x10785 : 'tags this) ->
        Ojs.string_of_js (Ojs.call (this_to_js Obj.magic x10785) "text" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushMessageData") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushMessageData") [||])
  end
module PushMessageDataInit =
  struct
    type t = BufferSource.t or_string
    let rec t_of_js : Ojs.t -> t =
      fun (x10789 : Ojs.t) -> or_string_of_js BufferSource.t_of_js x10789
    and t_to_js : t -> Ojs.t =
      fun (x10787 : BufferSource.t or_string) ->
        or_string_to_js BufferSource.t_to_js x10787
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10792 : Ojs.t) -> t_of_js x10792
    and t_0_to_js : t_0 -> Ojs.t = fun (x10791 : t) -> t_to_js x10791
  end
module ExtendableEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10794 : Ojs.t) -> t_of_js x10794
    and t_0_to_js : t_0 -> Ojs.t = fun (x10793 : t) -> t_to_js x10793
    type tags = [ `EventInit  | `ExtendableEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10797 : Ojs.t) -> intf_of_js __tags_of_js x10797
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10795 : __tags intf) -> intf_to_js __tags_to_js x10795
    let cast_from = Obj.magic
  end
module PushEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10800 : Ojs.t) -> t_of_js x10800
    and t_0_to_js : t_0 -> Ojs.t = fun (x10799 : t) -> t_to_js x10799
    type tags = [ `EventInit  | `ExtendableEventInit  | `PushEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10803 : Ojs.t) -> intf_of_js __tags_of_js x10803
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10801 : __tags intf) -> intf_to_js __tags_to_js x10801
    let (get_data : 'tags this -> PushMessageDataInit.t) =
      fun (x10805 : 'tags this) ->
        PushMessageDataInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10805) "data")
    let (set_data : 'tags this -> PushMessageDataInit.t -> unit) =
      fun (x10807 : 'tags this) ->
        fun (x10808 : PushMessageDataInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10807) "data"
            (PushMessageDataInit.t_to_js x10808)
    let cast_from = Obj.magic
  end
module ExtendableEvent =
  struct
    type t = [ `Event  | `ExtendableEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10811 : Ojs.t) -> t_of_js x10811
    and t_0_to_js : t_0 -> Ojs.t = fun (x10810 : t) -> t_to_js x10810
    type tags = [ `Event  | `ExtendableEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ExtendableEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10814 : Ojs.t) -> intf_of_js __tags_of_js x10814
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10812 : __tags intf) -> intf_to_js __tags_to_js x10812
    let (waitUntil : 'tags this -> f:any -> unit) =
      fun (x10817 : 'tags this) ->
        fun ~f:(x10816 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x10817) "waitUntil"
               [|(any_to_js x10816)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableEvent") "prototype")
    let (create :
      type_:string -> ?eventInitDict:ExtendableEventInit.t -> unit -> t) =
      fun ~type_:(x10819 : string) ->
        fun ?eventInitDict:(x10820 : ExtendableEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableEvent")
                 (let x10821 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x10821 "push" [|(Ojs.string_to_js x10819)|]);
                  (match x10820 with
                   | Some x10822 ->
                       ignore
                         (Ojs.call x10821 "push"
                            [|(ExtendableEventInit.t_to_js x10822)|])
                   | None -> ());
                  x10821))
  end
module PushEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `PushEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10824 : Ojs.t) -> t_of_js x10824
    and t_0_to_js : t_0 -> Ojs.t = fun (x10823 : t) -> t_to_js x10823
    type tags = [ `Event  | `ExtendableEvent  | `PushEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10827 : Ojs.t) -> intf_of_js __tags_of_js x10827
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10825 : __tags intf) -> intf_to_js __tags_to_js x10825
    let (get_data : 'tags this -> PushMessageData.t or_null) =
      fun (x10829 : 'tags this) ->
        or_null_of_js PushMessageData.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10829) "data")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:PushEventInit.t -> unit -> t) =
      fun ~type_:(x10832 : string) ->
        fun ?eventInitDict:(x10833 : PushEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "PushEvent")
                 (let x10834 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x10834 "push" [|(Ojs.string_to_js x10832)|]);
                  (match x10833 with
                   | Some x10835 ->
                       ignore
                         (Ojs.call x10834 "push"
                            [|(PushEventInit.t_to_js x10835)|])
                   | None -> ());
                  x10834))
  end
module NotificationPermission =
  struct
    type t = [ `L_s57_default  | `L_s58_denied  | `L_s82_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x10837 : Ojs.t) ->
        let x10838 = x10837 in
        match Ojs.string_of_js x10838 with
        | "default" -> `L_s57_default
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s82_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x10836 : [ `L_s57_default  | `L_s58_denied  | `L_s82_granted ]) ->
        match x10836 with
        | `L_s57_default -> Ojs.string_to_js "default"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s82_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10840 : Ojs.t) -> t_of_js x10840
    and t_0_to_js : t_0 -> Ojs.t = fun (x10839 : t) -> t_to_js x10839
  end
module VibratePattern =
  struct
    type t = float list or_number
    let rec t_of_js : Ojs.t -> t =
      fun (x10844 : Ojs.t) ->
        or_number_of_js
          (fun (x10845 : Ojs.t) -> Ojs.list_of_js Ojs.float_of_js x10845)
          x10844
    and t_to_js : t -> Ojs.t =
      fun (x10841 : float list or_number) ->
        or_number_to_js
          (fun (x10842 : float list) -> Ojs.list_to_js Ojs.float_to_js x10842)
          x10841
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10848 : Ojs.t) -> t_of_js x10848
    and t_0_to_js : t_0 -> Ojs.t = fun (x10847 : t) -> t_to_js x10847
  end
module NotificationAction =
  struct
    type t = [ `NotificationAction ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10850 : Ojs.t) -> t_of_js x10850
    and t_0_to_js : t_0 -> Ojs.t = fun (x10849 : t) -> t_to_js x10849
    type tags = [ `NotificationAction ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationAction ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10853 : Ojs.t) -> intf_of_js __tags_of_js x10853
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10851 : __tags intf) -> intf_to_js __tags_to_js x10851
    let (get_action : 'tags this -> string) =
      fun (x10855 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10855) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x10857 : 'tags this) ->
        fun (x10858 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10857) "action"
            (Ojs.string_to_js x10858)
    let (get_icon : 'tags this -> string) =
      fun (x10860 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10860) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x10862 : 'tags this) ->
        fun (x10863 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10862) "icon"
            (Ojs.string_to_js x10863)
    let (get_title : 'tags this -> string) =
      fun (x10865 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10865) "title")
    let (set_title : 'tags this -> string -> unit) =
      fun (x10867 : 'tags this) ->
        fun (x10868 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10867) "title"
            (Ojs.string_to_js x10868)
    let cast_from = Obj.magic
  end
module NotificationDirection =
  struct
    type t = [ `L_s108_ltr  | `L_s171_rtl  | `L_s41_auto ]
    let rec t_of_js : Ojs.t -> t =
      fun (x10871 : Ojs.t) ->
        let x10872 = x10871 in
        match Ojs.string_of_js x10872 with
        | "ltr" -> `L_s108_ltr
        | "rtl" -> `L_s171_rtl
        | "auto" -> `L_s41_auto
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x10870 : [ `L_s108_ltr  | `L_s171_rtl  | `L_s41_auto ]) ->
        match x10870 with
        | `L_s108_ltr -> Ojs.string_to_js "ltr"
        | `L_s171_rtl -> Ojs.string_to_js "rtl"
        | `L_s41_auto -> Ojs.string_to_js "auto"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10874 : Ojs.t) -> t_of_js x10874
    and t_0_to_js : t_0 -> Ojs.t = fun (x10873 : t) -> t_to_js x10873
  end
module DOMTimeStamp =
  struct
    type t = float
    let rec t_of_js : Ojs.t -> t =
      fun (x10876 : Ojs.t) -> Ojs.float_of_js x10876
    and t_to_js : t -> Ojs.t = fun (x10875 : float) -> Ojs.float_to_js x10875
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10878 : Ojs.t) -> t_of_js x10878
    and t_0_to_js : t_0 -> Ojs.t = fun (x10877 : t) -> t_to_js x10877
  end
module NotificationOptions =
  struct
    type t = [ `NotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10880 : Ojs.t) -> t_of_js x10880
    and t_0_to_js : t_0 -> Ojs.t = fun (x10879 : t) -> t_to_js x10879
    type tags = [ `NotificationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10883 : Ojs.t) -> intf_of_js __tags_of_js x10883
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10881 : __tags intf) -> intf_to_js __tags_to_js x10881
    let (get_actions : 'tags this -> NotificationAction.t list) =
      fun (x10885 : 'tags this) ->
        Ojs.list_of_js NotificationAction.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10885) "actions")
    let (set_actions : 'tags this -> NotificationAction.t list -> unit) =
      fun (x10888 : 'tags this) ->
        fun (x10889 : NotificationAction.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10888) "actions"
            (Ojs.list_to_js NotificationAction.t_to_js x10889)
    let (get_badge : 'tags this -> string) =
      fun (x10892 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10892) "badge")
    let (set_badge : 'tags this -> string -> unit) =
      fun (x10894 : 'tags this) ->
        fun (x10895 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10894) "badge"
            (Ojs.string_to_js x10895)
    let (get_body : 'tags this -> string) =
      fun (x10897 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10897) "body")
    let (set_body : 'tags this -> string -> unit) =
      fun (x10899 : 'tags this) ->
        fun (x10900 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10899) "body"
            (Ojs.string_to_js x10900)
    let (get_data : 'tags this -> any) =
      fun (x10902 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x10902) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x10904 : 'tags this) ->
        fun (x10905 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10904) "data"
            (any_to_js x10905)
    let (get_dir : 'tags this -> NotificationDirection.t) =
      fun (x10907 : 'tags this) ->
        NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10907) "dir")
    let (set_dir : 'tags this -> NotificationDirection.t -> unit) =
      fun (x10909 : 'tags this) ->
        fun (x10910 : NotificationDirection.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10909) "dir"
            (NotificationDirection.t_to_js x10910)
    let (get_icon : 'tags this -> string) =
      fun (x10912 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10912) "icon")
    let (set_icon : 'tags this -> string -> unit) =
      fun (x10914 : 'tags this) ->
        fun (x10915 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10914) "icon"
            (Ojs.string_to_js x10915)
    let (get_image : 'tags this -> string) =
      fun (x10917 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10917) "image")
    let (set_image : 'tags this -> string -> unit) =
      fun (x10919 : 'tags this) ->
        fun (x10920 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10919) "image"
            (Ojs.string_to_js x10920)
    let (get_lang : 'tags this -> string) =
      fun (x10922 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10922) "lang")
    let (set_lang : 'tags this -> string -> unit) =
      fun (x10924 : 'tags this) ->
        fun (x10925 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10924) "lang"
            (Ojs.string_to_js x10925)
    let (get_renotify : 'tags this -> bool) =
      fun (x10927 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10927) "renotify")
    let (set_renotify : 'tags this -> bool -> unit) =
      fun (x10929 : 'tags this) ->
        fun (x10930 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10929) "renotify"
            (Ojs.bool_to_js x10930)
    let (get_requireInteraction : 'tags this -> bool) =
      fun (x10932 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10932)
             "requireInteraction")
    let (set_requireInteraction : 'tags this -> bool -> unit) =
      fun (x10934 : 'tags this) ->
        fun (x10935 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10934)
            "requireInteraction" (Ojs.bool_to_js x10935)
    let (get_silent : 'tags this -> bool) =
      fun (x10937 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10937) "silent")
    let (set_silent : 'tags this -> bool -> unit) =
      fun (x10939 : 'tags this) ->
        fun (x10940 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10939) "silent"
            (Ojs.bool_to_js x10940)
    let (get_tag : 'tags this -> string) =
      fun (x10942 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10942) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x10944 : 'tags this) ->
        fun (x10945 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10944) "tag"
            (Ojs.string_to_js x10945)
    let (get_timestamp : 'tags this -> DOMTimeStamp.t) =
      fun (x10947 : 'tags this) ->
        DOMTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10947) "timestamp")
    let (set_timestamp : 'tags this -> DOMTimeStamp.t -> unit) =
      fun (x10949 : 'tags this) ->
        fun (x10950 : DOMTimeStamp.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10949) "timestamp"
            (DOMTimeStamp.t_to_js x10950)
    let (get_vibrate : 'tags this -> VibratePattern.t) =
      fun (x10952 : 'tags this) ->
        VibratePattern.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10952) "vibrate")
    let (set_vibrate : 'tags this -> VibratePattern.t -> unit) =
      fun (x10954 : 'tags this) ->
        fun (x10955 : VibratePattern.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10954) "vibrate"
            (VibratePattern.t_to_js x10955)
    let cast_from = Obj.magic
  end
module Notification =
  struct
    type t = [ `EventTarget  | `Notification ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x10958 : Ojs.t) -> t_of_js x10958
    and t_0_to_js : t_0 -> Ojs.t = fun (x10957 : t) -> t_to_js x10957
    type tags = [ `EventTarget  | `Notification ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Notification ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x10961 : Ojs.t) -> intf_of_js __tags_of_js x10961
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x10959 : __tags intf) -> intf_to_js __tags_to_js x10959
    let (get_body : 'tags this -> string) =
      fun (x10963 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10963) "body")
    let (get_data : 'tags this -> any) =
      fun (x10965 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x10965) "data")
    let (get_dir : 'tags this -> NotificationDirection.t) =
      fun (x10967 : 'tags this) ->
        NotificationDirection.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10967) "dir")
    let (get_icon : 'tags this -> string) =
      fun (x10969 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10969) "icon")
    let (get_lang : 'tags this -> string) =
      fun (x10971 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10971) "lang")
    let (get_onclick : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x10973 : 'tags this) ->
        or_null_of_js
          (fun (x10975 : Ojs.t) ->
             fun ~this:(x10976 : t) ->
               fun ~ev:(x10977 : Event.t) ->
                 any_of_js
                   (Ojs.apply x10975
                      [|(t_to_js x10976);(Event.t_to_js x10977)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10973) "onclick")
    let (set_onclick :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x10978 : 'tags this) ->
        fun (x10979 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10978) "onclick"
            (or_null_to_js
               (fun (x10980 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10981 : Ojs.t) ->
                       fun (x10982 : Ojs.t) ->
                         any_to_js
                           (x10980 ~this:(t_of_js x10981)
                              ~ev:(Event.t_of_js x10982)))) x10979)
    let (get_onclose : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x10984 : 'tags this) ->
        or_null_of_js
          (fun (x10986 : Ojs.t) ->
             fun ~this:(x10987 : t) ->
               fun ~ev:(x10988 : Event.t) ->
                 any_of_js
                   (Ojs.apply x10986
                      [|(t_to_js x10987);(Event.t_to_js x10988)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10984) "onclose")
    let (set_onclose :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x10989 : 'tags this) ->
        fun (x10990 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x10989) "onclose"
            (or_null_to_js
               (fun (x10991 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x10992 : Ojs.t) ->
                       fun (x10993 : Ojs.t) ->
                         any_to_js
                           (x10991 ~this:(t_of_js x10992)
                              ~ev:(Event.t_of_js x10993)))) x10990)
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x10995 : 'tags this) ->
        or_null_of_js
          (fun (x10997 : Ojs.t) ->
             fun ~this:(x10998 : t) ->
               fun ~ev:(x10999 : Event.t) ->
                 any_of_js
                   (Ojs.apply x10997
                      [|(t_to_js x10998);(Event.t_to_js x10999)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x10995) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x11000 : 'tags this) ->
        fun (x11001 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11000) "onerror"
            (or_null_to_js
               (fun (x11002 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11003 : Ojs.t) ->
                       fun (x11004 : Ojs.t) ->
                         any_to_js
                           (x11002 ~this:(t_of_js x11003)
                              ~ev:(Event.t_of_js x11004)))) x11001)
    let (get_onshow : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x11006 : 'tags this) ->
        or_null_of_js
          (fun (x11008 : Ojs.t) ->
             fun ~this:(x11009 : t) ->
               fun ~ev:(x11010 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11008
                      [|(t_to_js x11009);(Event.t_to_js x11010)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11006) "onshow")
    let (set_onshow :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x11011 : 'tags this) ->
        fun (x11012 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11011) "onshow"
            (or_null_to_js
               (fun (x11013 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11014 : Ojs.t) ->
                       fun (x11015 : Ojs.t) ->
                         any_to_js
                           (x11013 ~this:(t_of_js x11014)
                              ~ev:(Event.t_of_js x11015)))) x11012)
    let (get_tag : 'tags this -> string) =
      fun (x11017 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11017) "tag")
    let (get_title : 'tags this -> string) =
      fun (x11019 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11019) "title")
    let (close : 'tags this -> unit) =
      fun (x11021 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x11021) "close" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11031 : 'tags this) ->
        fun ~type_:(x11023 : 'K) ->
          fun ~listener:(x11024 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11025 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11033 = this_to_js Obj.magic x11031 in
                   Ojs.call (Ojs.get_prop_ascii x11033 "addEventListener")
                     "apply"
                     [|x11033;((let x11026 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11026 "push"
                                     [|(Obj.magic x11023)|]);
                                ignore
                                  (Ojs.call x11026 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11029 : Ojs.t) ->
                                             fun (x11030 : Ojs.t) ->
                                               any_to_js
                                                 (x11024
                                                    ~this:(t_of_js x11029)
                                                    ~ev:(any_of_js x11030))))|]);
                                (match x11025 with
                                 | Some x11027 ->
                                     ignore
                                       (Ojs.call x11026 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x11027)|])
                                 | None -> ());
                                x11026))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11040 : 'tags this) ->
        fun ~type_:(x11034 : string) ->
          fun ~listener:(x11035 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11036 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11042 = this_to_js Obj.magic x11040 in
                   Ojs.call (Ojs.get_prop_ascii x11042 "addEventListener")
                     "apply"
                     [|x11042;((let x11037 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11037 "push"
                                     [|(Ojs.string_to_js x11034)|]);
                                ignore
                                  (Ojs.call x11037 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11035)|]);
                                (match x11036 with
                                 | Some x11038 ->
                                     ignore
                                       (Ojs.call x11037 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x11038)|])
                                 | None -> ());
                                x11037))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11051 : 'tags this) ->
        fun ~type_:(x11043 : 'K) ->
          fun ~listener:(x11044 : this:t -> ev:any -> any) ->
            fun ?options:(x11045 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11053 = this_to_js Obj.magic x11051 in
                   Ojs.call (Ojs.get_prop_ascii x11053 "removeEventListener")
                     "apply"
                     [|x11053;((let x11046 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11046 "push"
                                     [|(Obj.magic x11043)|]);
                                ignore
                                  (Ojs.call x11046 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11049 : Ojs.t) ->
                                             fun (x11050 : Ojs.t) ->
                                               any_to_js
                                                 (x11044
                                                    ~this:(t_of_js x11049)
                                                    ~ev:(any_of_js x11050))))|]);
                                (match x11045 with
                                 | Some x11047 ->
                                     ignore
                                       (Ojs.call x11046 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x11047)|])
                                 | None -> ());
                                x11046))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11060 : 'tags this) ->
        fun ~type_:(x11054 : string) ->
          fun ~listener:(x11055 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x11056 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11062 = this_to_js Obj.magic x11060 in
                   Ojs.call (Ojs.get_prop_ascii x11062 "removeEventListener")
                     "apply"
                     [|x11062;((let x11057 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11057 "push"
                                     [|(Ojs.string_to_js x11054)|]);
                                ignore
                                  (Ojs.call x11057 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11055)|]);
                                (match x11056 with
                                 | Some x11058 ->
                                     ignore
                                       (Ojs.call x11057 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x11058)|])
                                 | None -> ());
                                x11057))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "prototype")
    let (create :
      title:string -> ?options:NotificationOptions.t -> unit -> t) =
      fun ~title:(x11063 : string) ->
        fun ?options:(x11064 : NotificationOptions.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Notification")
                 (let x11065 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x11065 "push" [|(Ojs.string_to_js x11063)|]);
                  (match x11064 with
                   | Some x11066 ->
                       ignore
                         (Ojs.call x11065 "push"
                            [|(NotificationOptions.t_to_js x11066)|])
                   | None -> ());
                  x11065))
    let (permission : unit -> NotificationPermission.t) =
      fun () ->
        NotificationPermission.t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Notification")
             "permission")
  end
module NotificationEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11068 : Ojs.t) -> t_of_js x11068
    and t_0_to_js : t_0 -> Ojs.t = fun (x11067 : t) -> t_to_js x11067
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `NotificationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11071 : Ojs.t) -> intf_of_js __tags_of_js x11071
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11069 : __tags intf) -> intf_to_js __tags_to_js x11069
    let (get_action : 'tags this -> string) =
      fun (x11073 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11073) "action")
    let (set_action : 'tags this -> string -> unit) =
      fun (x11075 : 'tags this) ->
        fun (x11076 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11075) "action"
            (Ojs.string_to_js x11076)
    let (get_notification : 'tags this -> Notification.t) =
      fun (x11078 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11078) "notification")
    let (set_notification : 'tags this -> Notification.t -> unit) =
      fun (x11080 : 'tags this) ->
        fun (x11081 : Notification.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11080) "notification"
            (Notification.t_to_js x11081)
    let cast_from = Obj.magic
  end
module NotificationEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `NotificationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11084 : Ojs.t) -> t_of_js x11084
    and t_0_to_js : t_0 -> Ojs.t = fun (x11083 : t) -> t_to_js x11083
    type tags = [ `Event  | `ExtendableEvent  | `NotificationEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `NotificationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11087 : Ojs.t) -> intf_of_js __tags_of_js x11087
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11085 : __tags intf) -> intf_to_js __tags_to_js x11085
    let (get_action : 'tags this -> string) =
      fun (x11089 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11089) "action")
    let (get_notification : 'tags this -> Notification.t) =
      fun (x11091 : 'tags this) ->
        Notification.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11091) "notification")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "NotificationEvent") "prototype")
    let (create : type_:string -> eventInitDict:NotificationEventInit.t -> t)
      =
      fun ~type_:(x11093 : string) ->
        fun ~eventInitDict:(x11094 : NotificationEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationEvent")
               [|(Ojs.string_to_js x11093);(NotificationEventInit.t_to_js
                                              x11094)|])
  end
module FetchEventInit =
  struct
    type t = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11096 : Ojs.t) -> t_of_js x11096
    and t_0_to_js : t_0 -> Ojs.t = fun (x11095 : t) -> t_to_js x11095
    type tags = [ `EventInit  | `ExtendableEventInit  | `FetchEventInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11099 : Ojs.t) -> intf_of_js __tags_of_js x11099
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11097 : __tags intf) -> intf_to_js __tags_to_js x11097
    let (get_clientId : 'tags this -> string) =
      fun (x11101 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11101) "clientId")
    let (set_clientId : 'tags this -> string -> unit) =
      fun (x11103 : 'tags this) ->
        fun (x11104 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11103) "clientId"
            (Ojs.string_to_js x11104)
    let (get_handled : 'tags this -> never or_undefined Promise.t_1) =
      fun (x11106 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11108 : Ojs.t) -> or_undefined_of_js never_of_js x11108)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11106) "handled")
    let (set_handled : 'tags this -> never or_undefined Promise.t_1 -> unit)
      =
      fun (x11110 : 'tags this) ->
        fun (x11111 : never or_undefined Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11110) "handled"
            (Promise.t_1_to_js
               (fun (x11112 : never or_undefined) ->
                  or_undefined_to_js never_to_js x11112) x11111)
    let (get_preloadResponse : 'tags this -> any Promise.t_1) =
      fun (x11115 : 'tags this) ->
        Promise.t_1_of_js any_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11115) "preloadResponse")
    let (set_preloadResponse : 'tags this -> any Promise.t_1 -> unit) =
      fun (x11118 : 'tags this) ->
        fun (x11119 : any Promise.t_1) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11118) "preloadResponse"
            (Promise.t_1_to_js any_to_js x11119)
    let (get_replacesClientId : 'tags this -> string) =
      fun (x11122 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11122)
             "replacesClientId")
    let (set_replacesClientId : 'tags this -> string -> unit) =
      fun (x11124 : 'tags this) ->
        fun (x11125 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11124) "replacesClientId"
            (Ojs.string_to_js x11125)
    let (get_request : 'tags this -> Request.t) =
      fun (x11127 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11127) "request")
    let (set_request : 'tags this -> Request.t -> unit) =
      fun (x11129 : 'tags this) ->
        fun (x11130 : Request.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11129) "request"
            (Request.t_to_js x11130)
    let (get_resultingClientId : 'tags this -> string) =
      fun (x11132 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11132)
             "resultingClientId")
    let (set_resultingClientId : 'tags this -> string -> unit) =
      fun (x11134 : 'tags this) ->
        fun (x11135 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11134)
            "resultingClientId" (Ojs.string_to_js x11135)
    let cast_from = Obj.magic
  end
module FetchEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `FetchEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11138 : Ojs.t) -> t_of_js x11138
    and t_0_to_js : t_0 -> Ojs.t = fun (x11137 : t) -> t_to_js x11137
    type tags = [ `Event  | `ExtendableEvent  | `FetchEvent ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FetchEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11141 : Ojs.t) -> intf_of_js __tags_of_js x11141
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11139 : __tags intf) -> intf_to_js __tags_to_js x11139
    let (get_clientId : 'tags this -> string) =
      fun (x11143 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11143) "clientId")
    let (get_handled : 'tags this -> never or_undefined Promise.t_1) =
      fun (x11145 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11147 : Ojs.t) -> or_undefined_of_js never_of_js x11147)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11145) "handled")
    let (get_request : 'tags this -> Request.t) =
      fun (x11149 : 'tags this) ->
        Request.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11149) "request")
    let (get_resultingClientId : 'tags this -> string) =
      fun (x11151 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11151)
             "resultingClientId")
    let (respondWith : 'tags this -> r:Response.t -> unit) =
      fun (x11154 : 'tags this) ->
        fun ~r:(x11153 : Response.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x11154) "respondWith"
               [|(Response.t_to_js x11153)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FetchEvent")
             "prototype")
    let (create : type_:string -> eventInitDict:FetchEventInit.t -> t) =
      fun ~type_:(x11156 : string) ->
        fun ~eventInitDict:(x11157 : FetchEventInit.t) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FetchEvent")
               [|(Ojs.string_to_js x11156);(FetchEventInit.t_to_js x11157)|])
  end
module FrameType =
  struct
    type t =
      [ `L_s120_nested  | `L_s128_none  | `L_s192_top_level 
      | `L_s42_auxiliary ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11159 : Ojs.t) ->
        let x11160 = x11159 in
        match Ojs.string_of_js x11160 with
        | "nested" -> `L_s120_nested
        | "none" -> `L_s128_none
        | "top-level" -> `L_s192_top_level
        | "auxiliary" -> `L_s42_auxiliary
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x11158 :
          [ `L_s120_nested  | `L_s128_none  | `L_s192_top_level 
          | `L_s42_auxiliary ])
        ->
        match x11158 with
        | `L_s120_nested -> Ojs.string_to_js "nested"
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s192_top_level -> Ojs.string_to_js "top-level"
        | `L_s42_auxiliary -> Ojs.string_to_js "auxiliary"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11162 : Ojs.t) -> t_of_js x11162
    and t_0_to_js : t_0 -> Ojs.t = fun (x11161 : t) -> t_to_js x11161
  end
module ClientTypes =
  struct
    type t =
      [ `L_s176_sharedworker  | `L_s208_window  | `L_s209_worker 
      | `L_s35_all ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11164 : Ojs.t) ->
        let x11165 = x11164 in
        match Ojs.string_of_js x11165 with
        | "sharedworker" -> `L_s176_sharedworker
        | "window" -> `L_s208_window
        | "worker" -> `L_s209_worker
        | "all" -> `L_s35_all
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x11163 :
          [ `L_s176_sharedworker  | `L_s208_window  | `L_s209_worker 
          | `L_s35_all ])
        ->
        match x11163 with
        | `L_s176_sharedworker -> Ojs.string_to_js "sharedworker"
        | `L_s208_window -> Ojs.string_to_js "window"
        | `L_s209_worker -> Ojs.string_to_js "worker"
        | `L_s35_all -> Ojs.string_to_js "all"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11167 : Ojs.t) -> t_of_js x11167
    and t_0_to_js : t_0 -> Ojs.t = fun (x11166 : t) -> t_to_js x11166
  end
module Client =
  struct
    type t = [ `Client ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11169 : Ojs.t) -> t_of_js x11169
    and t_0_to_js : t_0 -> Ojs.t = fun (x11168 : t) -> t_to_js x11168
    type tags = [ `Client ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Client ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11172 : Ojs.t) -> intf_of_js __tags_of_js x11172
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11170 : __tags intf) -> intf_to_js __tags_to_js x11170
    let (get_frameType : 'tags this -> FrameType.t) =
      fun (x11174 : 'tags this) ->
        FrameType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11174) "frameType")
    let (get_id : 'tags this -> string) =
      fun (x11176 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11176) "id")
    let (get_type : 'tags this -> ClientTypes.t) =
      fun (x11178 : 'tags this) ->
        ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11178) "type")
    let (get_url : 'tags this -> string) =
      fun (x11180 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11180) "url")
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x11185 : 'tags this) ->
        fun ~message:(x11182 : any) ->
          fun ~transfer:(x11183 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x11185) "postMessage"
                 [|(any_to_js x11182);(Ojs.list_to_js Transferable.t_to_js
                                         x11183)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x11191 : 'tags this) ->
        fun ~message:(x11187 : any) ->
          fun ?options:(x11188 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x11193 = this_to_js Obj.magic x11191 in
                 Ojs.call (Ojs.get_prop_ascii x11193 "postMessage") "apply"
                   [|x11193;((let x11189 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11189 "push"
                                   [|(any_to_js x11187)|]);
                              (match x11188 with
                               | Some x11190 ->
                                   ignore
                                     (Ojs.call x11189 "push"
                                        [|(StructuredSerializeOptions.t_to_js
                                             x11190)|])
                               | None -> ());
                              x11189))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Client")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Client") [||])
  end
module ExtendableMessageEventInit =
  struct
    type t =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11195 : Ojs.t) -> t_of_js x11195
    and t_0_to_js : t_0 -> Ojs.t = fun (x11194 : t) -> t_to_js x11194
    type tags =
      [ `EventInit  | `ExtendableEventInit  | `ExtendableMessageEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11198 : Ojs.t) -> intf_of_js __tags_of_js x11198
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11196 : __tags intf) -> intf_to_js __tags_to_js x11196
    let (get_data : 'tags this -> any) =
      fun (x11200 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11200) "data")
    let (set_data : 'tags this -> any -> unit) =
      fun (x11202 : 'tags this) ->
        fun (x11203 : any) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11202) "data"
            (any_to_js x11203)
    let (get_lastEventId : 'tags this -> string) =
      fun (x11205 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11205) "lastEventId")
    let (set_lastEventId : 'tags this -> string -> unit) =
      fun (x11207 : 'tags this) ->
        fun (x11208 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11207) "lastEventId"
            (Ojs.string_to_js x11208)
    let (get_origin : 'tags this -> string) =
      fun (x11210 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11210) "origin")
    let (set_origin : 'tags this -> string -> unit) =
      fun (x11212 : 'tags this) ->
        fun (x11213 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11212) "origin"
            (Ojs.string_to_js x11213)
    let (get_ports : 'tags this -> MessagePort.t list) =
      fun (x11215 : 'tags this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11215) "ports")
    let (set_ports : 'tags this -> MessagePort.t list -> unit) =
      fun (x11218 : 'tags this) ->
        fun (x11219 : MessagePort.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11218) "ports"
            (Ojs.list_to_js MessagePort.t_to_js x11219)
    let (get_source :
      'tags this ->
        (([ `U_s42_auxiliary of Client.t  | `U_s120_nested of Client.t 
          | `U_s128_none of Client.t  | `U_s192_top_level of Client.t ],
           [ `U_s33_activated of ServiceWorker.t 
           | `U_s34_activating of ServiceWorker.t 
           | `U_s94_installed of ServiceWorker.t 
           | `U_s95_installing of ServiceWorker.t 
           | `U_s146_parsed of ServiceWorker.t 
           | `U_s166_redundant of ServiceWorker.t ]) union2,
          MessagePort.t) or_ or_null)
      =
      fun (x11222 : 'tags this) ->
        or_null_of_js
          (fun (x11224 : Ojs.t) ->
             or__of_js
               (fun (x11225 : Ojs.t) ->
                  union2_of_js
                    (fun (x11226 : Ojs.t) ->
                       let x11227 = x11226 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x11227 "frameType")
                       with
                       | "auxiliary" ->
                           `U_s42_auxiliary (Client.t_of_js x11227)
                       | "nested" -> `U_s120_nested (Client.t_of_js x11227)
                       | "none" -> `U_s128_none (Client.t_of_js x11227)
                       | "top-level" ->
                           `U_s192_top_level (Client.t_of_js x11227)
                       | _ -> assert false)
                    (fun (x11228 : Ojs.t) ->
                       let x11229 = x11228 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x11229 "state")
                       with
                       | "activated" ->
                           `U_s33_activated (ServiceWorker.t_of_js x11229)
                       | "activating" ->
                           `U_s34_activating (ServiceWorker.t_of_js x11229)
                       | "installed" ->
                           `U_s94_installed (ServiceWorker.t_of_js x11229)
                       | "installing" ->
                           `U_s95_installing (ServiceWorker.t_of_js x11229)
                       | "parsed" ->
                           `U_s146_parsed (ServiceWorker.t_of_js x11229)
                       | "redundant" ->
                           `U_s166_redundant (ServiceWorker.t_of_js x11229)
                       | _ -> assert false) x11225) MessagePort.t_of_js
               x11224)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11222) "source")
    let (set_source :
      'tags this ->
        (([ `U_s42_auxiliary of Client.t  | `U_s120_nested of Client.t 
          | `U_s128_none of Client.t  | `U_s192_top_level of Client.t ],
           [ `U_s33_activated of ServiceWorker.t 
           | `U_s34_activating of ServiceWorker.t 
           | `U_s94_installed of ServiceWorker.t 
           | `U_s95_installing of ServiceWorker.t 
           | `U_s146_parsed of ServiceWorker.t 
           | `U_s166_redundant of ServiceWorker.t ]) union2,
          MessagePort.t) or_ or_null -> unit)
      =
      fun (x11231 : 'tags this) ->
        fun
          (x11232 :
            (([ `U_s42_auxiliary of Client.t  | `U_s120_nested of Client.t 
              | `U_s128_none of Client.t  | `U_s192_top_level of Client.t ],
               [ `U_s33_activated of ServiceWorker.t 
               | `U_s34_activating of ServiceWorker.t 
               | `U_s94_installed of ServiceWorker.t 
               | `U_s95_installing of ServiceWorker.t 
               | `U_s146_parsed of ServiceWorker.t 
               | `U_s166_redundant of ServiceWorker.t ]) union2,
              MessagePort.t) or_ or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11231) "source"
            (or_null_to_js
               (fun
                  (x11233 :
                    (([ `U_s42_auxiliary of Client.t 
                      | `U_s120_nested of Client.t 
                      | `U_s128_none of Client.t 
                      | `U_s192_top_level of Client.t ],
                       [ `U_s33_activated of ServiceWorker.t 
                       | `U_s34_activating of ServiceWorker.t 
                       | `U_s94_installed of ServiceWorker.t 
                       | `U_s95_installing of ServiceWorker.t 
                       | `U_s146_parsed of ServiceWorker.t 
                       | `U_s166_redundant of ServiceWorker.t ]) union2,
                      MessagePort.t) or_)
                  ->
                  or__to_js
                    (fun
                       (x11234 :
                         ([ `U_s42_auxiliary of Client.t 
                          | `U_s120_nested of Client.t 
                          | `U_s128_none of Client.t 
                          | `U_s192_top_level of Client.t ],
                           [ `U_s33_activated of ServiceWorker.t 
                           | `U_s34_activating of ServiceWorker.t 
                           | `U_s94_installed of ServiceWorker.t 
                           | `U_s95_installing of ServiceWorker.t 
                           | `U_s146_parsed of ServiceWorker.t 
                           | `U_s166_redundant of ServiceWorker.t ]) union2)
                       ->
                       union2_to_js
                         (fun
                            (x11235 :
                              [ `U_s42_auxiliary of Client.t 
                              | `U_s120_nested of Client.t 
                              | `U_s128_none of Client.t 
                              | `U_s192_top_level of Client.t ])
                            ->
                            match x11235 with
                            | `U_s42_auxiliary x11236 ->
                                Client.t_to_js x11236
                            | `U_s120_nested x11237 -> Client.t_to_js x11237
                            | `U_s128_none x11238 -> Client.t_to_js x11238
                            | `U_s192_top_level x11239 ->
                                Client.t_to_js x11239)
                         (fun
                            (x11240 :
                              [ `U_s33_activated of ServiceWorker.t 
                              | `U_s34_activating of ServiceWorker.t 
                              | `U_s94_installed of ServiceWorker.t 
                              | `U_s95_installing of ServiceWorker.t 
                              | `U_s146_parsed of ServiceWorker.t 
                              | `U_s166_redundant of ServiceWorker.t ])
                            ->
                            match x11240 with
                            | `U_s33_activated x11241 ->
                                ServiceWorker.t_to_js x11241
                            | `U_s34_activating x11242 ->
                                ServiceWorker.t_to_js x11242
                            | `U_s94_installed x11243 ->
                                ServiceWorker.t_to_js x11243
                            | `U_s95_installing x11244 ->
                                ServiceWorker.t_to_js x11244
                            | `U_s146_parsed x11245 ->
                                ServiceWorker.t_to_js x11245
                            | `U_s166_redundant x11246 ->
                                ServiceWorker.t_to_js x11246) x11234)
                    MessagePort.t_to_js x11233) x11232)
    let cast_from = Obj.magic
  end
module ExtendableMessageEvent =
  struct
    type t = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11250 : Ojs.t) -> t_of_js x11250
    and t_0_to_js : t_0 -> Ojs.t = fun (x11249 : t) -> t_to_js x11249
    type tags = [ `Event  | `ExtendableEvent  | `ExtendableMessageEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ExtendableMessageEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11253 : Ojs.t) -> intf_of_js __tags_of_js x11253
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11251 : __tags intf) -> intf_to_js __tags_to_js x11251
    let (get_data : 'tags this -> any) =
      fun (x11255 : 'tags this) ->
        any_of_js (Ojs.get_prop_ascii (this_to_js Obj.magic x11255) "data")
    let (get_lastEventId : 'tags this -> string) =
      fun (x11257 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11257) "lastEventId")
    let (get_origin : 'tags this -> string) =
      fun (x11259 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11259) "origin")
    let (get_ports : 'tags this -> MessagePort.t list) =
      fun (x11261 : 'tags this) ->
        Ojs.list_of_js MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11261) "ports")
    let (get_source :
      'tags this ->
        (([ `U_s42_auxiliary of Client.t  | `U_s120_nested of Client.t 
          | `U_s128_none of Client.t  | `U_s192_top_level of Client.t ],
           [ `U_s33_activated of ServiceWorker.t 
           | `U_s34_activating of ServiceWorker.t 
           | `U_s94_installed of ServiceWorker.t 
           | `U_s95_installing of ServiceWorker.t 
           | `U_s146_parsed of ServiceWorker.t 
           | `U_s166_redundant of ServiceWorker.t ]) union2,
          MessagePort.t) or_ or_null)
      =
      fun (x11264 : 'tags this) ->
        or_null_of_js
          (fun (x11266 : Ojs.t) ->
             or__of_js
               (fun (x11267 : Ojs.t) ->
                  union2_of_js
                    (fun (x11268 : Ojs.t) ->
                       let x11269 = x11268 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x11269 "frameType")
                       with
                       | "auxiliary" ->
                           `U_s42_auxiliary (Client.t_of_js x11269)
                       | "nested" -> `U_s120_nested (Client.t_of_js x11269)
                       | "none" -> `U_s128_none (Client.t_of_js x11269)
                       | "top-level" ->
                           `U_s192_top_level (Client.t_of_js x11269)
                       | _ -> assert false)
                    (fun (x11270 : Ojs.t) ->
                       let x11271 = x11270 in
                       match Ojs.string_of_js
                               (Ojs.get_prop_ascii x11271 "state")
                       with
                       | "activated" ->
                           `U_s33_activated (ServiceWorker.t_of_js x11271)
                       | "activating" ->
                           `U_s34_activating (ServiceWorker.t_of_js x11271)
                       | "installed" ->
                           `U_s94_installed (ServiceWorker.t_of_js x11271)
                       | "installing" ->
                           `U_s95_installing (ServiceWorker.t_of_js x11271)
                       | "parsed" ->
                           `U_s146_parsed (ServiceWorker.t_of_js x11271)
                       | "redundant" ->
                           `U_s166_redundant (ServiceWorker.t_of_js x11271)
                       | _ -> assert false) x11267) MessagePort.t_of_js
               x11266)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11264) "source")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
             "prototype")
    let (create :
      type_:string ->
        ?eventInitDict:ExtendableMessageEventInit.t -> unit -> t)
      =
      fun ~type_:(x11273 : string) ->
        fun ?eventInitDict:(x11274 : ExtendableMessageEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "ExtendableMessageEvent")
                 (let x11275 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x11275 "push" [|(Ojs.string_to_js x11273)|]);
                  (match x11274 with
                   | Some x11276 ->
                       ignore
                         (Ojs.call x11275 "push"
                            [|(ExtendableMessageEventInit.t_to_js x11276)|])
                   | None -> ());
                  x11275))
  end
module ServiceWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11278 : Ojs.t) -> t_of_js x11278
    and t_0_to_js : t_0 -> Ojs.t = fun (x11277 : t) -> t_to_js x11277
    type tags =
      [ `ServiceWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11281 : Ojs.t) -> intf_of_js __tags_of_js x11281
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11279 : __tags intf) -> intf_to_js __tags_to_js x11279
    let (get_activate : 'tags this -> ExtendableEvent.t) =
      fun (x11283 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11283) "activate")
    let (set_activate : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x11285 : 'tags this) ->
        fun (x11286 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11285) "activate"
            (ExtendableEvent.t_to_js x11286)
    let (get_fetch : 'tags this -> FetchEvent.t) =
      fun (x11288 : 'tags this) ->
        FetchEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11288) "fetch")
    let (set_fetch : 'tags this -> FetchEvent.t -> unit) =
      fun (x11290 : 'tags this) ->
        fun (x11291 : FetchEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11290) "fetch"
            (FetchEvent.t_to_js x11291)
    let (get_install : 'tags this -> ExtendableEvent.t) =
      fun (x11293 : 'tags this) ->
        ExtendableEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11293) "install")
    let (set_install : 'tags this -> ExtendableEvent.t -> unit) =
      fun (x11295 : 'tags this) ->
        fun (x11296 : ExtendableEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11295) "install"
            (ExtendableEvent.t_to_js x11296)
    let (get_message : 'tags this -> ExtendableMessageEvent.t) =
      fun (x11298 : 'tags this) ->
        ExtendableMessageEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11298) "message")
    let (set_message : 'tags this -> ExtendableMessageEvent.t -> unit) =
      fun (x11300 : 'tags this) ->
        fun (x11301 : ExtendableMessageEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11300) "message"
            (ExtendableMessageEvent.t_to_js x11301)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x11303 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11303) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x11305 : 'tags this) ->
        fun (x11306 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11305) "messageerror"
            (MessageEvent.t_0_to_js x11306)
    let (get_notificationclick : 'tags this -> NotificationEvent.t) =
      fun (x11308 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11308)
             "notificationclick")
    let (set_notificationclick : 'tags this -> NotificationEvent.t -> unit) =
      fun (x11310 : 'tags this) ->
        fun (x11311 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11310)
            "notificationclick" (NotificationEvent.t_to_js x11311)
    let (get_notificationclose : 'tags this -> NotificationEvent.t) =
      fun (x11313 : 'tags this) ->
        NotificationEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11313)
             "notificationclose")
    let (set_notificationclose : 'tags this -> NotificationEvent.t -> unit) =
      fun (x11315 : 'tags this) ->
        fun (x11316 : NotificationEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11315)
            "notificationclose" (NotificationEvent.t_to_js x11316)
    let (get_push : 'tags this -> PushEvent.t) =
      fun (x11318 : 'tags this) ->
        PushEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11318) "push")
    let (set_push : 'tags this -> PushEvent.t -> unit) =
      fun (x11320 : 'tags this) ->
        fun (x11321 : PushEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11320) "push"
            (PushEvent.t_to_js x11321)
    let cast_from = Obj.magic
  end
module ServiceWorkerUpdateViaCache =
  struct
    type t = [ `L_s128_none  | `L_s35_all  | `L_s91_imports ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11324 : Ojs.t) ->
        let x11325 = x11324 in
        match Ojs.string_of_js x11325 with
        | "none" -> `L_s128_none
        | "all" -> `L_s35_all
        | "imports" -> `L_s91_imports
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11323 : [ `L_s128_none  | `L_s35_all  | `L_s91_imports ]) ->
        match x11323 with
        | `L_s128_none -> Ojs.string_to_js "none"
        | `L_s35_all -> Ojs.string_to_js "all"
        | `L_s91_imports -> Ojs.string_to_js "imports"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11327 : Ojs.t) -> t_of_js x11327
    and t_0_to_js : t_0 -> Ojs.t = fun (x11326 : t) -> t_to_js x11326
  end
module PushSubscriptionOptionsInit =
  struct
    type t = [ `PushSubscriptionOptionsInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11329 : Ojs.t) -> t_of_js x11329
    and t_0_to_js : t_0 -> Ojs.t = fun (x11328 : t) -> t_to_js x11328
    type tags = [ `PushSubscriptionOptionsInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptionsInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11332 : Ojs.t) -> intf_of_js __tags_of_js x11332
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11330 : __tags intf) -> intf_to_js __tags_to_js x11330
    let (get_applicationServerKey :
      'tags this -> BufferSource.t or_string or_null) =
      fun (x11334 : 'tags this) ->
        or_null_of_js
          (fun (x11336 : Ojs.t) ->
             or_string_of_js BufferSource.t_of_js x11336)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11334)
             "applicationServerKey")
    let (set_applicationServerKey :
      'tags this -> BufferSource.t or_string or_null -> unit) =
      fun (x11338 : 'tags this) ->
        fun (x11339 : BufferSource.t or_string or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11338)
            "applicationServerKey"
            (or_null_to_js
               (fun (x11340 : BufferSource.t or_string) ->
                  or_string_to_js BufferSource.t_to_js x11340) x11339)
    let (get_userVisibleOnly : 'tags this -> bool) =
      fun (x11343 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11343) "userVisibleOnly")
    let (set_userVisibleOnly : 'tags this -> bool -> unit) =
      fun (x11345 : 'tags this) ->
        fun (x11346 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11345) "userVisibleOnly"
            (Ojs.bool_to_js x11346)
    let cast_from = Obj.magic
  end
module PushSubscriptionOptions =
  struct
    type t = [ `PushSubscriptionOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11349 : Ojs.t) -> t_of_js x11349
    and t_0_to_js : t_0 -> Ojs.t = fun (x11348 : t) -> t_to_js x11348
    type tags = [ `PushSubscriptionOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11352 : Ojs.t) -> intf_of_js __tags_of_js x11352
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11350 : __tags intf) -> intf_to_js __tags_to_js x11350
    let (get_applicationServerKey : 'tags this -> ArrayBuffer.t_0 or_null) =
      fun (x11354 : 'tags this) ->
        or_null_of_js ArrayBuffer.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11354)
             "applicationServerKey")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PushSubscriptionOptions") 
             [||])
  end
module PushSubscriptionJSON =
  struct
    type t = [ `PushSubscriptionJSON ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11358 : Ojs.t) -> t_of_js x11358
    and t_0_to_js : t_0 -> Ojs.t = fun (x11357 : t) -> t_to_js x11357
    type tags = [ `PushSubscriptionJSON ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PushSubscriptionJSON ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11361 : Ojs.t) -> intf_of_js __tags_of_js x11361
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11359 : __tags intf) -> intf_to_js __tags_to_js x11359
    let (get_endpoint : 'tags this -> string) =
      fun (x11363 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11363) "endpoint")
    let (set_endpoint : 'tags this -> string -> unit) =
      fun (x11365 : 'tags this) ->
        fun (x11366 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11365) "endpoint"
            (Ojs.string_to_js x11366)
    let (get_expirationTime : 'tags this -> DOMTimeStamp.t or_null) =
      fun (x11368 : 'tags this) ->
        or_null_of_js DOMTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11368) "expirationTime")
    let (set_expirationTime : 'tags this -> DOMTimeStamp.t or_null -> unit) =
      fun (x11371 : 'tags this) ->
        fun (x11372 : DOMTimeStamp.t or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11371) "expirationTime"
            (or_null_to_js DOMTimeStamp.t_to_js x11372)
    let (get_keys : 'tags this -> (string, string) Record.t_2) =
      fun (x11375 : 'tags this) ->
        Record.t_2_of_js Ojs.string_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11375) "keys")
    let (set_keys : 'tags this -> (string, string) Record.t_2 -> unit) =
      fun (x11379 : 'tags this) ->
        fun (x11380 : (string, string) Record.t_2) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11379) "keys"
            (Record.t_2_to_js Ojs.string_to_js Ojs.string_to_js x11380)
    let cast_from = Obj.magic
  end
module PushEncryptionKeyName =
  struct
    type t = [ `L_s143_p256dh  | `L_s40_auth ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11385 : Ojs.t) ->
        let x11386 = x11385 in
        match Ojs.string_of_js x11386 with
        | "p256dh" -> `L_s143_p256dh
        | "auth" -> `L_s40_auth
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11384 : [ `L_s143_p256dh  | `L_s40_auth ]) ->
        match x11384 with
        | `L_s143_p256dh -> Ojs.string_to_js "p256dh"
        | `L_s40_auth -> Ojs.string_to_js "auth"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11388 : Ojs.t) -> t_of_js x11388
    and t_0_to_js : t_0 -> Ojs.t = fun (x11387 : t) -> t_to_js x11387
  end
module PushSubscription =
  struct
    type t = [ `PushSubscription ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11390 : Ojs.t) -> t_of_js x11390
    and t_0_to_js : t_0 -> Ojs.t = fun (x11389 : t) -> t_to_js x11389
    type tags = [ `PushSubscription ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushSubscription ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11393 : Ojs.t) -> intf_of_js __tags_of_js x11393
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11391 : __tags intf) -> intf_to_js __tags_to_js x11391
    let (get_endpoint : 'tags this -> string) =
      fun (x11395 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11395) "endpoint")
    let (get_options : 'tags this -> PushSubscriptionOptions.t) =
      fun (x11397 : 'tags this) ->
        PushSubscriptionOptions.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11397) "options")
    let (getKey :
      'tags this -> name:PushEncryptionKeyName.t -> ArrayBuffer.t_0 or_null)
      =
      fun (x11400 : 'tags this) ->
        fun ~name:(x11399 : PushEncryptionKeyName.t) ->
          or_null_of_js ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x11400) "getKey"
               [|(PushEncryptionKeyName.t_to_js x11399)|])
    let (toJSON : 'tags this -> PushSubscriptionJSON.t) =
      fun (x11403 : 'tags this) ->
        PushSubscriptionJSON.t_of_js
          (Ojs.call (this_to_js Obj.magic x11403) "toJSON" [||])
    let (unsubscribe : 'tags this -> bool Promise.t_1) =
      fun (x11405 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x11405) "unsubscribe" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PushSubscription") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushSubscription")
             [||])
  end
module PushPermissionState =
  struct
    type t = [ `L_s157_prompt  | `L_s58_denied  | `L_s82_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11409 : Ojs.t) ->
        let x11410 = x11409 in
        match Ojs.string_of_js x11410 with
        | "prompt" -> `L_s157_prompt
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s82_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11408 : [ `L_s157_prompt  | `L_s58_denied  | `L_s82_granted ]) ->
        match x11408 with
        | `L_s157_prompt -> Ojs.string_to_js "prompt"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s82_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11412 : Ojs.t) -> t_of_js x11412
    and t_0_to_js : t_0 -> Ojs.t = fun (x11411 : t) -> t_to_js x11411
  end
module PushManager =
  struct
    type t = [ `PushManager ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11414 : Ojs.t) -> t_of_js x11414
    and t_0_to_js : t_0 -> Ojs.t = fun (x11413 : t) -> t_to_js x11413
    type tags = [ `PushManager ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PushManager ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11417 : Ojs.t) -> intf_of_js __tags_of_js x11417
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11415 : __tags intf) -> intf_to_js __tags_to_js x11415
    let (getSubscription :
      'tags this -> PushSubscription.t or_null Promise.t_1) =
      fun (x11419 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11421 : Ojs.t) ->
             or_null_of_js PushSubscription.t_of_js x11421)
          (Ojs.call (this_to_js Obj.magic x11419) "getSubscription" [||])
    let (permissionState :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PushPermissionState.t Promise.t_1)
      =
      fun (x11426 : 'tags this) ->
        fun ?options:(x11423 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PushPermissionState.t_of_js
              (let x11428 = this_to_js Obj.magic x11426 in
               Ojs.call (Ojs.get_prop_ascii x11428 "permissionState") "apply"
                 [|x11428;((let x11424 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11423 with
                             | Some x11425 ->
                                 ignore
                                   (Ojs.call x11424 "push"
                                      [|(PushSubscriptionOptionsInit.t_to_js
                                           x11425)|])
                             | None -> ());
                            x11424))|])
    let (subscribe :
      'tags this ->
        ?options:PushSubscriptionOptionsInit.t ->
          unit -> PushSubscription.t Promise.t_1)
      =
      fun (x11433 : 'tags this) ->
        fun ?options:(x11430 : PushSubscriptionOptionsInit.t option) ->
          fun () ->
            Promise.t_1_of_js PushSubscription.t_of_js
              (let x11435 = this_to_js Obj.magic x11433 in
               Ojs.call (Ojs.get_prop_ascii x11435 "subscribe") "apply"
                 [|x11435;((let x11431 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11430 with
                             | Some x11432 ->
                                 ignore
                                   (Ojs.call x11431 "push"
                                      [|(PushSubscriptionOptionsInit.t_to_js
                                           x11432)|])
                             | None -> ());
                            x11431))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PushManager") [||])
    let (supportedContentEncodings : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "PushManager")
             "supportedContentEncodings")
  end
module GetNotificationOptions =
  struct
    type t = [ `GetNotificationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11439 : Ojs.t) -> t_of_js x11439
    and t_0_to_js : t_0 -> Ojs.t = fun (x11438 : t) -> t_to_js x11438
    type tags = [ `GetNotificationOptions ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `GetNotificationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11442 : Ojs.t) -> intf_of_js __tags_of_js x11442
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11440 : __tags intf) -> intf_to_js __tags_to_js x11440
    let (get_tag : 'tags this -> string) =
      fun (x11444 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11444) "tag")
    let (set_tag : 'tags this -> string -> unit) =
      fun (x11446 : 'tags this) ->
        fun (x11447 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11446) "tag"
            (Ojs.string_to_js x11447)
    let cast_from = Obj.magic
  end
module ServiceWorkerRegistration =
  struct
    type t = [ `EventTarget  | `ServiceWorkerRegistration ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11450 : Ojs.t) -> t_of_js x11450
    and t_0_to_js : t_0 -> Ojs.t = fun (x11449 : t) -> t_to_js x11449
    type tags = [ `EventTarget  | `ServiceWorkerRegistration ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerRegistration ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11453 : Ojs.t) -> intf_of_js __tags_of_js x11453
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11451 : __tags intf) -> intf_to_js __tags_to_js x11451
    let (get_active : 'tags this -> ServiceWorker.t or_null) =
      fun (x11455 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11455) "active")
    let (get_installing : 'tags this -> ServiceWorker.t or_null) =
      fun (x11458 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11458) "installing")
    let (get_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x11461 : 'tags this) ->
        or_null_of_js
          (fun (x11463 : Ojs.t) ->
             fun ~this:(x11464 : t) ->
               fun ~ev:(x11465 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11463
                      [|(t_to_js x11464);(Event.t_to_js x11465)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11461) "onupdatefound")
    let (set_onupdatefound :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x11466 : 'tags this) ->
        fun (x11467 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11466) "onupdatefound"
            (or_null_to_js
               (fun (x11468 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11469 : Ojs.t) ->
                       fun (x11470 : Ojs.t) ->
                         any_to_js
                           (x11468 ~this:(t_of_js x11469)
                              ~ev:(Event.t_of_js x11470)))) x11467)
    let (get_pushManager : 'tags this -> PushManager.t) =
      fun (x11472 : 'tags this) ->
        PushManager.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11472) "pushManager")
    let (get_scope : 'tags this -> string) =
      fun (x11474 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11474) "scope")
    let (get_updateViaCache : 'tags this -> ServiceWorkerUpdateViaCache.t) =
      fun (x11476 : 'tags this) ->
        ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11476) "updateViaCache")
    let (get_waiting : 'tags this -> ServiceWorker.t or_null) =
      fun (x11478 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11478) "waiting")
    let (getNotifications :
      'tags this ->
        ?filter:GetNotificationOptions.t ->
          unit -> Notification.t list Promise.t_1)
      =
      fun (x11484 : 'tags this) ->
        fun ?filter:(x11481 : GetNotificationOptions.t option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x11487 : Ojs.t) ->
                 Ojs.list_of_js Notification.t_of_js x11487)
              (let x11486 = this_to_js Obj.magic x11484 in
               Ojs.call (Ojs.get_prop_ascii x11486 "getNotifications")
                 "apply"
                 [|x11486;((let x11482 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11481 with
                             | Some x11483 ->
                                 ignore
                                   (Ojs.call x11482 "push"
                                      [|(GetNotificationOptions.t_to_js
                                           x11483)|])
                             | None -> ());
                            x11482))|])
    let (showNotification :
      'tags this ->
        title:string ->
          ?options:NotificationOptions.t -> unit -> unit Promise.t_1)
      =
      fun (x11493 : 'tags this) ->
        fun ~title:(x11489 : string) ->
          fun ?options:(x11490 : NotificationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js Ojs.unit_of_js
                (let x11495 = this_to_js Obj.magic x11493 in
                 Ojs.call (Ojs.get_prop_ascii x11495 "showNotification")
                   "apply"
                   [|x11495;((let x11491 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11491 "push"
                                   [|(Ojs.string_to_js x11489)|]);
                              (match x11490 with
                               | Some x11492 ->
                                   ignore
                                     (Ojs.call x11491 "push"
                                        [|(NotificationOptions.t_to_js x11492)|])
                               | None -> ());
                              x11491))|])
    let (unregister : 'tags this -> bool Promise.t_1) =
      fun (x11497 : 'tags this) ->
        Promise.t_1_of_js Ojs.bool_of_js
          (Ojs.call (this_to_js Obj.magic x11497) "unregister" [||])
    let (update : 'tags this -> unit Promise.t_1) =
      fun (x11500 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x11500) "update" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11511 : 'tags this) ->
        fun ~type_:(x11503 : 'K) ->
          fun ~listener:(x11504 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11505 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11513 = this_to_js Obj.magic x11511 in
                   Ojs.call (Ojs.get_prop_ascii x11513 "addEventListener")
                     "apply"
                     [|x11513;((let x11506 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11506 "push"
                                     [|(Obj.magic x11503)|]);
                                ignore
                                  (Ojs.call x11506 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11509 : Ojs.t) ->
                                             fun (x11510 : Ojs.t) ->
                                               any_to_js
                                                 (x11504
                                                    ~this:(t_of_js x11509)
                                                    ~ev:(any_of_js x11510))))|]);
                                (match x11505 with
                                 | Some x11507 ->
                                     ignore
                                       (Ojs.call x11506 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x11507)|])
                                 | None -> ());
                                x11506))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11520 : 'tags this) ->
        fun ~type_:(x11514 : string) ->
          fun ~listener:(x11515 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11516 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11522 = this_to_js Obj.magic x11520 in
                   Ojs.call (Ojs.get_prop_ascii x11522 "addEventListener")
                     "apply"
                     [|x11522;((let x11517 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11517 "push"
                                     [|(Ojs.string_to_js x11514)|]);
                                ignore
                                  (Ojs.call x11517 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11515)|]);
                                (match x11516 with
                                 | Some x11518 ->
                                     ignore
                                       (Ojs.call x11517 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x11518)|])
                                 | None -> ());
                                x11517))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11531 : 'tags this) ->
        fun ~type_:(x11523 : 'K) ->
          fun ~listener:(x11524 : this:t -> ev:any -> any) ->
            fun ?options:(x11525 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11533 = this_to_js Obj.magic x11531 in
                   Ojs.call (Ojs.get_prop_ascii x11533 "removeEventListener")
                     "apply"
                     [|x11533;((let x11526 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11526 "push"
                                     [|(Obj.magic x11523)|]);
                                ignore
                                  (Ojs.call x11526 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11529 : Ojs.t) ->
                                             fun (x11530 : Ojs.t) ->
                                               any_to_js
                                                 (x11524
                                                    ~this:(t_of_js x11529)
                                                    ~ev:(any_of_js x11530))))|]);
                                (match x11525 with
                                 | Some x11527 ->
                                     ignore
                                       (Ojs.call x11526 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x11527)|])
                                 | None -> ());
                                x11526))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11540 : 'tags this) ->
        fun ~type_:(x11534 : string) ->
          fun ~listener:(x11535 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x11536 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11542 = this_to_js Obj.magic x11540 in
                   Ojs.call (Ojs.get_prop_ascii x11542 "removeEventListener")
                     "apply"
                     [|x11542;((let x11537 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11537 "push"
                                     [|(Ojs.string_to_js x11534)|]);
                                ignore
                                  (Ojs.call x11537 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11535)|]);
                                (match x11536 with
                                 | Some x11538 ->
                                     ignore
                                       (Ojs.call x11537 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x11538)|])
                                 | None -> ());
                                x11537))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerRegistration") 
             [||])
  end
module VisibilityState =
  struct
    type t = [ `L_s205_visible  | `L_s83_hidden ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11544 : Ojs.t) ->
        let x11545 = x11544 in
        match Ojs.string_of_js x11545 with
        | "visible" -> `L_s205_visible
        | "hidden" -> `L_s83_hidden
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11543 : [ `L_s205_visible  | `L_s83_hidden ]) ->
        match x11543 with
        | `L_s205_visible -> Ojs.string_to_js "visible"
        | `L_s83_hidden -> Ojs.string_to_js "hidden"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11547 : Ojs.t) -> t_of_js x11547
    and t_0_to_js : t_0 -> Ojs.t = fun (x11546 : t) -> t_to_js x11546
  end
module WindowClient =
  struct
    type t = [ `Client  | `WindowClient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11549 : Ojs.t) -> t_of_js x11549
    and t_0_to_js : t_0 -> Ojs.t = fun (x11548 : t) -> t_to_js x11548
    type tags = [ `Client  | `WindowClient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `WindowClient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11552 : Ojs.t) -> intf_of_js __tags_of_js x11552
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11550 : __tags intf) -> intf_to_js __tags_to_js x11550
    let (get_focused : 'tags this -> bool) =
      fun (x11554 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11554) "focused")
    let (get_visibilityState : 'tags this -> VisibilityState.t) =
      fun (x11556 : 'tags this) ->
        VisibilityState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11556) "visibilityState")
    let (focus : 'tags this -> t Promise.t_1) =
      fun (x11558 : 'tags this) ->
        Promise.t_1_of_js t_of_js
          (Ojs.call (this_to_js Obj.magic x11558) "focus" [||])
    let (navigate :
      'tags this -> url:URL.t or_string -> t or_null Promise.t_1) =
      fun (x11563 : 'tags this) ->
        fun ~url:(x11561 : URL.t or_string) ->
          Promise.t_1_of_js
            (fun (x11565 : Ojs.t) -> or_null_of_js t_of_js x11565)
            (Ojs.call (this_to_js Obj.magic x11563) "navigate"
               [|(or_string_to_js URL.t_to_js x11561)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "WindowClient")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "WindowClient") [||])
  end
module ClientQueryOptions =
  struct
    type t = [ `ClientQueryOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11568 : Ojs.t) -> t_of_js x11568
    and t_0_to_js : t_0 -> Ojs.t = fun (x11567 : t) -> t_to_js x11567
    type tags = [ `ClientQueryOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ClientQueryOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11571 : Ojs.t) -> intf_of_js __tags_of_js x11571
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11569 : __tags intf) -> intf_to_js __tags_to_js x11569
    let (get_includeUncontrolled : 'tags this -> bool) =
      fun (x11573 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11573)
             "includeUncontrolled")
    let (set_includeUncontrolled : 'tags this -> bool -> unit) =
      fun (x11575 : 'tags this) ->
        fun (x11576 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11575)
            "includeUncontrolled" (Ojs.bool_to_js x11576)
    let (get_type : 'tags this -> ClientTypes.t) =
      fun (x11578 : 'tags this) ->
        ClientTypes.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11578) "type")
    let (set_type : 'tags this -> ClientTypes.t -> unit) =
      fun (x11580 : 'tags this) ->
        fun (x11581 : ClientTypes.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11580) "type"
            (ClientTypes.t_to_js x11581)
    let cast_from = Obj.magic
  end
module Clients =
  struct
    type t = [ `Clients ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11584 : Ojs.t) -> t_of_js x11584
    and t_0_to_js : t_0 -> Ojs.t = fun (x11583 : t) -> t_to_js x11583
    type tags = [ `Clients ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Clients ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11587 : Ojs.t) -> intf_of_js __tags_of_js x11587
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11585 : __tags intf) -> intf_to_js __tags_to_js x11585
    let (claim : 'tags this -> unit Promise.t_1) =
      fun (x11589 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x11589) "claim" [||])
    let (get_ : 'tags this -> id:string -> Client.t or_undefined Promise.t_1)
      =
      fun (x11593 : 'tags this) ->
        fun ~id:(x11592 : string) ->
          Promise.t_1_of_js
            (fun (x11595 : Ojs.t) -> or_undefined_of_js Client.t_of_js x11595)
            (Ojs.call (this_to_js Obj.magic x11593) "get"
               [|(Ojs.string_to_js x11592)|])
    let (matchAll :
      'tags this -> ?options:'T -> unit -> any list Promise.t_1) =
      fun (x11600 : 'tags this) ->
        fun ?options:(x11597 : 'T option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x11603 : Ojs.t) -> Ojs.list_of_js any_of_js x11603)
              (let x11602 = this_to_js Obj.magic x11600 in
               Ojs.call (Ojs.get_prop_ascii x11602 "matchAll") "apply"
                 [|x11602;((let x11598 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11597 with
                             | Some x11599 ->
                                 ignore
                                   (Ojs.call x11598 "push"
                                      [|(Obj.magic x11599)|])
                             | None -> ());
                            x11598))|])
    let (openWindow :
      'tags this -> url:URL.t or_string -> WindowClient.t or_null Promise.t_1)
      =
      fun (x11607 : 'tags this) ->
        fun ~url:(x11605 : URL.t or_string) ->
          Promise.t_1_of_js
            (fun (x11609 : Ojs.t) ->
               or_null_of_js WindowClient.t_of_js x11609)
            (Ojs.call (this_to_js Obj.magic x11607) "openWindow"
               [|(or_string_to_js URL.t_to_js x11605)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Clients")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Clients") [||])
  end
module ServiceWorkerGlobalScope =
  struct
    type t =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11612 : Ojs.t) -> t_of_js x11612
    and t_0_to_js : t_0 -> Ojs.t = fun (x11611 : t) -> t_to_js x11611
    type tags =
      [ `EventTarget  | `FontFaceSource  | `ServiceWorkerGlobalScope 
      | `WindowOrWorkerGlobalScope  | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11615 : Ojs.t) -> intf_of_js __tags_of_js x11615
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11613 : __tags intf) -> intf_to_js __tags_to_js x11613
    let (get_clients : 'tags this -> Clients.t) =
      fun (x11617 : 'tags this) ->
        Clients.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11617) "clients")
    let (get_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null) =
      fun (x11619 : 'tags this) ->
        or_null_of_js
          (fun (x11621 : Ojs.t) ->
             fun ~this:(x11622 : t) ->
               fun ~ev:(x11623 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x11621
                      [|(t_to_js x11622);(ExtendableEvent.t_to_js x11623)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11619) "onactivate")
    let (set_onactivate :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null -> unit)
      =
      fun (x11624 : 'tags this) ->
        fun (x11625 : (this:t -> ev:ExtendableEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11624) "onactivate"
            (or_null_to_js
               (fun (x11626 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11627 : Ojs.t) ->
                       fun (x11628 : Ojs.t) ->
                         any_to_js
                           (x11626 ~this:(t_of_js x11627)
                              ~ev:(ExtendableEvent.t_of_js x11628)))) x11625)
    let (get_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) or_null) =
      fun (x11630 : 'tags this) ->
        or_null_of_js
          (fun (x11632 : Ojs.t) ->
             fun ~this:(x11633 : t) ->
               fun ~ev:(x11634 : FetchEvent.t) ->
                 any_of_js
                   (Ojs.apply x11632
                      [|(t_to_js x11633);(FetchEvent.t_to_js x11634)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11630) "onfetch")
    let (set_onfetch :
      'tags this -> (this:t -> ev:FetchEvent.t -> any) or_null -> unit) =
      fun (x11635 : 'tags this) ->
        fun (x11636 : (this:t -> ev:FetchEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11635) "onfetch"
            (or_null_to_js
               (fun (x11637 : this:t -> ev:FetchEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11638 : Ojs.t) ->
                       fun (x11639 : Ojs.t) ->
                         any_to_js
                           (x11637 ~this:(t_of_js x11638)
                              ~ev:(FetchEvent.t_of_js x11639)))) x11636)
    let (get_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null) =
      fun (x11641 : 'tags this) ->
        or_null_of_js
          (fun (x11643 : Ojs.t) ->
             fun ~this:(x11644 : t) ->
               fun ~ev:(x11645 : ExtendableEvent.t) ->
                 any_of_js
                   (Ojs.apply x11643
                      [|(t_to_js x11644);(ExtendableEvent.t_to_js x11645)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11641) "oninstall")
    let (set_oninstall :
      'tags this -> (this:t -> ev:ExtendableEvent.t -> any) or_null -> unit)
      =
      fun (x11646 : 'tags this) ->
        fun (x11647 : (this:t -> ev:ExtendableEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11646) "oninstall"
            (or_null_to_js
               (fun (x11648 : this:t -> ev:ExtendableEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11649 : Ojs.t) ->
                       fun (x11650 : Ojs.t) ->
                         any_to_js
                           (x11648 ~this:(t_of_js x11649)
                              ~ev:(ExtendableEvent.t_of_js x11650)))) x11647)
    let (get_onmessage :
      'tags this -> (this:t -> ev:ExtendableMessageEvent.t -> any) or_null) =
      fun (x11652 : 'tags this) ->
        or_null_of_js
          (fun (x11654 : Ojs.t) ->
             fun ~this:(x11655 : t) ->
               fun ~ev:(x11656 : ExtendableMessageEvent.t) ->
                 any_of_js
                   (Ojs.apply x11654
                      [|(t_to_js x11655);(ExtendableMessageEvent.t_to_js
                                            x11656)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11652) "onmessage")
    let (set_onmessage :
      'tags this ->
        (this:t -> ev:ExtendableMessageEvent.t -> any) or_null -> unit)
      =
      fun (x11657 : 'tags this) ->
        fun (x11658 : (this:t -> ev:ExtendableMessageEvent.t -> any) or_null)
          ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11657) "onmessage"
            (or_null_to_js
               (fun (x11659 : this:t -> ev:ExtendableMessageEvent.t -> any)
                  ->
                  Ojs.fun_to_js 2
                    (fun (x11660 : Ojs.t) ->
                       fun (x11661 : Ojs.t) ->
                         any_to_js
                           (x11659 ~this:(t_of_js x11660)
                              ~ev:(ExtendableMessageEvent.t_of_js x11661))))
               x11658)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x11663 : 'tags this) ->
        or_null_of_js
          (fun (x11665 : Ojs.t) ->
             fun ~this:(x11666 : t) ->
               fun ~ev:(x11667 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x11665
                      [|(t_to_js x11666);(MessageEvent.t_0_to_js x11667)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11663) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x11668 : 'tags this) ->
        fun (x11669 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11668) "onmessageerror"
            (or_null_to_js
               (fun (x11670 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11671 : Ojs.t) ->
                       fun (x11672 : Ojs.t) ->
                         any_to_js
                           (x11670 ~this:(t_of_js x11671)
                              ~ev:(MessageEvent.t_0_of_js x11672)))) x11669)
    let (get_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null) =
      fun (x11674 : 'tags this) ->
        or_null_of_js
          (fun (x11676 : Ojs.t) ->
             fun ~this:(x11677 : t) ->
               fun ~ev:(x11678 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x11676
                      [|(t_to_js x11677);(NotificationEvent.t_to_js x11678)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11674)
             "onnotificationclick")
    let (set_onnotificationclick :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null -> unit)
      =
      fun (x11679 : 'tags this) ->
        fun (x11680 : (this:t -> ev:NotificationEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11679)
            "onnotificationclick"
            (or_null_to_js
               (fun (x11681 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11682 : Ojs.t) ->
                       fun (x11683 : Ojs.t) ->
                         any_to_js
                           (x11681 ~this:(t_of_js x11682)
                              ~ev:(NotificationEvent.t_of_js x11683))))
               x11680)
    let (get_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null) =
      fun (x11685 : 'tags this) ->
        or_null_of_js
          (fun (x11687 : Ojs.t) ->
             fun ~this:(x11688 : t) ->
               fun ~ev:(x11689 : NotificationEvent.t) ->
                 any_of_js
                   (Ojs.apply x11687
                      [|(t_to_js x11688);(NotificationEvent.t_to_js x11689)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11685)
             "onnotificationclose")
    let (set_onnotificationclose :
      'tags this -> (this:t -> ev:NotificationEvent.t -> any) or_null -> unit)
      =
      fun (x11690 : 'tags this) ->
        fun (x11691 : (this:t -> ev:NotificationEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11690)
            "onnotificationclose"
            (or_null_to_js
               (fun (x11692 : this:t -> ev:NotificationEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11693 : Ojs.t) ->
                       fun (x11694 : Ojs.t) ->
                         any_to_js
                           (x11692 ~this:(t_of_js x11693)
                              ~ev:(NotificationEvent.t_of_js x11694))))
               x11691)
    let (get_onpush :
      'tags this -> (this:t -> ev:PushEvent.t -> any) or_null) =
      fun (x11696 : 'tags this) ->
        or_null_of_js
          (fun (x11698 : Ojs.t) ->
             fun ~this:(x11699 : t) ->
               fun ~ev:(x11700 : PushEvent.t) ->
                 any_of_js
                   (Ojs.apply x11698
                      [|(t_to_js x11699);(PushEvent.t_to_js x11700)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11696) "onpush")
    let (set_onpush :
      'tags this -> (this:t -> ev:PushEvent.t -> any) or_null -> unit) =
      fun (x11701 : 'tags this) ->
        fun (x11702 : (this:t -> ev:PushEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11701) "onpush"
            (or_null_to_js
               (fun (x11703 : this:t -> ev:PushEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11704 : Ojs.t) ->
                       fun (x11705 : Ojs.t) ->
                         any_to_js
                           (x11703 ~this:(t_of_js x11704)
                              ~ev:(PushEvent.t_of_js x11705)))) x11702)
    let (get_registration : 'tags this -> ServiceWorkerRegistration.t) =
      fun (x11707 : 'tags this) ->
        ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11707) "registration")
    let (skipWaiting : 'tags this -> unit Promise.t_1) =
      fun (x11709 : 'tags this) ->
        Promise.t_1_of_js Ojs.unit_of_js
          (Ojs.call (this_to_js Obj.magic x11709) "skipWaiting" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11720 : 'tags this) ->
        fun ~type_:(x11712 : 'K) ->
          fun ~listener:(x11713 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11714 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11722 = this_to_js Obj.magic x11720 in
                   Ojs.call (Ojs.get_prop_ascii x11722 "addEventListener")
                     "apply"
                     [|x11722;((let x11715 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11715 "push"
                                     [|(Obj.magic x11712)|]);
                                ignore
                                  (Ojs.call x11715 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11718 : Ojs.t) ->
                                             fun (x11719 : Ojs.t) ->
                                               any_to_js
                                                 (x11713
                                                    ~this:(t_of_js x11718)
                                                    ~ev:(any_of_js x11719))))|]);
                                (match x11714 with
                                 | Some x11716 ->
                                     ignore
                                       (Ojs.call x11715 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x11716)|])
                                 | None -> ());
                                x11715))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11729 : 'tags this) ->
        fun ~type_:(x11723 : string) ->
          fun ~listener:(x11724 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11725 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11731 = this_to_js Obj.magic x11729 in
                   Ojs.call (Ojs.get_prop_ascii x11731 "addEventListener")
                     "apply"
                     [|x11731;((let x11726 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11726 "push"
                                     [|(Ojs.string_to_js x11723)|]);
                                ignore
                                  (Ojs.call x11726 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11724)|]);
                                (match x11725 with
                                 | Some x11727 ->
                                     ignore
                                       (Ojs.call x11726 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x11727)|])
                                 | None -> ());
                                x11726))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11740 : 'tags this) ->
        fun ~type_:(x11732 : 'K) ->
          fun ~listener:(x11733 : this:t -> ev:any -> any) ->
            fun ?options:(x11734 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11742 = this_to_js Obj.magic x11740 in
                   Ojs.call (Ojs.get_prop_ascii x11742 "removeEventListener")
                     "apply"
                     [|x11742;((let x11735 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11735 "push"
                                     [|(Obj.magic x11732)|]);
                                ignore
                                  (Ojs.call x11735 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11738 : Ojs.t) ->
                                             fun (x11739 : Ojs.t) ->
                                               any_to_js
                                                 (x11733
                                                    ~this:(t_of_js x11738)
                                                    ~ev:(any_of_js x11739))))|]);
                                (match x11734 with
                                 | Some x11736 ->
                                     ignore
                                       (Ojs.call x11735 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x11736)|])
                                 | None -> ());
                                x11735))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11749 : 'tags this) ->
        fun ~type_:(x11743 : string) ->
          fun ~listener:(x11744 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x11745 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11751 = this_to_js Obj.magic x11749 in
                   Ojs.call (Ojs.get_prop_ascii x11751 "removeEventListener")
                     "apply"
                     [|x11751;((let x11746 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11746 "push"
                                     [|(Ojs.string_to_js x11743)|]);
                                ignore
                                  (Ojs.call x11746 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11744)|]);
                                (match x11745 with
                                 | Some x11747 ->
                                     ignore
                                       (Ojs.call x11746 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x11747)|])
                                 | None -> ());
                                x11746))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerGlobalScope") 
             [||])
  end
module ServiceWorkerEventMap =
  struct
    type t = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11753 : Ojs.t) -> t_of_js x11753
    and t_0_to_js : t_0 -> Ojs.t = fun (x11752 : t) -> t_to_js x11752
    type tags = [ `AbstractWorkerEventMap  | `ServiceWorkerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11756 : Ojs.t) -> intf_of_js __tags_of_js x11756
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11754 : __tags intf) -> intf_to_js __tags_to_js x11754
    let (get_statechange : 'tags this -> Event.t) =
      fun (x11758 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11758) "statechange")
    let (set_statechange : 'tags this -> Event.t -> unit) =
      fun (x11760 : 'tags this) ->
        fun (x11761 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11760) "statechange"
            (Event.t_to_js x11761)
    let cast_from = Obj.magic
  end
module ServiceWorkerContainerEventMap =
  struct
    type t = [ `ServiceWorkerContainerEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11764 : Ojs.t) -> t_of_js x11764
    and t_0_to_js : t_0 -> Ojs.t = fun (x11763 : t) -> t_to_js x11763
    type tags = [ `ServiceWorkerContainerEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainerEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11767 : Ojs.t) -> intf_of_js __tags_of_js x11767
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11765 : __tags intf) -> intf_to_js __tags_to_js x11765
    let (get_controllerchange : 'tags this -> Event.t) =
      fun (x11769 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11769)
             "controllerchange")
    let (set_controllerchange : 'tags this -> Event.t -> unit) =
      fun (x11771 : 'tags this) ->
        fun (x11772 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11771) "controllerchange"
            (Event.t_to_js x11772)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x11774 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11774) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x11776 : 'tags this) ->
        fun (x11777 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11776) "message"
            (MessageEvent.t_0_to_js x11777)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x11779 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11779) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x11781 : 'tags this) ->
        fun (x11782 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11781) "messageerror"
            (MessageEvent.t_0_to_js x11782)
    let cast_from = Obj.magic
  end
module RegistrationOptions =
  struct
    type t = [ `RegistrationOptions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11785 : Ojs.t) -> t_of_js x11785
    and t_0_to_js : t_0 -> Ojs.t = fun (x11784 : t) -> t_to_js x11784
    type tags = [ `RegistrationOptions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `RegistrationOptions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11788 : Ojs.t) -> intf_of_js __tags_of_js x11788
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11786 : __tags intf) -> intf_to_js __tags_to_js x11786
    let (get_scope : 'tags this -> string) =
      fun (x11790 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11790) "scope")
    let (set_scope : 'tags this -> string -> unit) =
      fun (x11792 : 'tags this) ->
        fun (x11793 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11792) "scope"
            (Ojs.string_to_js x11793)
    let (get_type : 'tags this -> WorkerType.t) =
      fun (x11795 : 'tags this) ->
        WorkerType.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11795) "type")
    let (set_type : 'tags this -> WorkerType.t -> unit) =
      fun (x11797 : 'tags this) ->
        fun (x11798 : WorkerType.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11797) "type"
            (WorkerType.t_to_js x11798)
    let (get_updateViaCache : 'tags this -> ServiceWorkerUpdateViaCache.t) =
      fun (x11800 : 'tags this) ->
        ServiceWorkerUpdateViaCache.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11800) "updateViaCache")
    let (set_updateViaCache :
      'tags this -> ServiceWorkerUpdateViaCache.t -> unit) =
      fun (x11802 : 'tags this) ->
        fun (x11803 : ServiceWorkerUpdateViaCache.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11802) "updateViaCache"
            (ServiceWorkerUpdateViaCache.t_to_js x11803)
    let cast_from = Obj.magic
  end
module ServiceWorkerContainer =
  struct
    type t = [ `EventTarget  | `ServiceWorkerContainer ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11806 : Ojs.t) -> t_of_js x11806
    and t_0_to_js : t_0 -> Ojs.t = fun (x11805 : t) -> t_to_js x11805
    type tags = [ `EventTarget  | `ServiceWorkerContainer ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ServiceWorkerContainer ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11809 : Ojs.t) -> intf_of_js __tags_of_js x11809
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11807 : __tags intf) -> intf_to_js __tags_to_js x11807
    let (get_controller : 'tags this -> ServiceWorker.t or_null) =
      fun (x11811 : 'tags this) ->
        or_null_of_js ServiceWorker.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11811) "controller")
    let (get_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x11814 : 'tags this) ->
        or_null_of_js
          (fun (x11816 : Ojs.t) ->
             fun ~this:(x11817 : t) ->
               fun ~ev:(x11818 : Event.t) ->
                 any_of_js
                   (Ojs.apply x11816
                      [|(t_to_js x11817);(Event.t_to_js x11818)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11814)
             "oncontrollerchange")
    let (set_oncontrollerchange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x11819 : 'tags this) ->
        fun (x11820 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11819)
            "oncontrollerchange"
            (or_null_to_js
               (fun (x11821 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11822 : Ojs.t) ->
                       fun (x11823 : Ojs.t) ->
                         any_to_js
                           (x11821 ~this:(t_of_js x11822)
                              ~ev:(Event.t_of_js x11823)))) x11820)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x11825 : 'tags this) ->
        or_null_of_js
          (fun (x11827 : Ojs.t) ->
             fun ~this:(x11828 : t) ->
               fun ~ev:(x11829 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x11827
                      [|(t_to_js x11828);(MessageEvent.t_0_to_js x11829)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11825) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x11830 : 'tags this) ->
        fun (x11831 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11830) "onmessage"
            (or_null_to_js
               (fun (x11832 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11833 : Ojs.t) ->
                       fun (x11834 : Ojs.t) ->
                         any_to_js
                           (x11832 ~this:(t_of_js x11833)
                              ~ev:(MessageEvent.t_0_of_js x11834)))) x11831)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x11836 : 'tags this) ->
        or_null_of_js
          (fun (x11838 : Ojs.t) ->
             fun ~this:(x11839 : t) ->
               fun ~ev:(x11840 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x11838
                      [|(t_to_js x11839);(MessageEvent.t_0_to_js x11840)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11836) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x11841 : 'tags this) ->
        fun (x11842 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11841) "onmessageerror"
            (or_null_to_js
               (fun (x11843 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x11844 : Ojs.t) ->
                       fun (x11845 : Ojs.t) ->
                         any_to_js
                           (x11843 ~this:(t_of_js x11844)
                              ~ev:(MessageEvent.t_0_of_js x11845)))) x11842)
    let (get_ready : 'tags this -> ServiceWorkerRegistration.t Promise.t_1) =
      fun (x11847 : 'tags this) ->
        Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11847) "ready")
    let (getRegistration :
      'tags this ->
        ?clientURL:URL.t or_string ->
          unit -> ServiceWorkerRegistration.t or_undefined Promise.t_1)
      =
      fun (x11854 : 'tags this) ->
        fun ?clientURL:(x11850 : URL.t or_string option) ->
          fun () ->
            Promise.t_1_of_js
              (fun (x11857 : Ojs.t) ->
                 or_undefined_of_js ServiceWorkerRegistration.t_of_js x11857)
              (let x11856 = this_to_js Obj.magic x11854 in
               Ojs.call (Ojs.get_prop_ascii x11856 "getRegistration") "apply"
                 [|x11856;((let x11851 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x11850 with
                             | Some x11852 ->
                                 ignore
                                   (Ojs.call x11851 "push"
                                      [|(or_string_to_js URL.t_to_js x11852)|])
                             | None -> ());
                            x11851))|])
    let (getRegistrations :
      'tags this -> ServiceWorkerRegistration.t list Promise.t_1) =
      fun (x11859 : 'tags this) ->
        Promise.t_1_of_js
          (fun (x11861 : Ojs.t) ->
             Ojs.list_of_js ServiceWorkerRegistration.t_of_js x11861)
          (Ojs.call (this_to_js Obj.magic x11859) "getRegistrations" [||])
    let (register :
      'tags this ->
        scriptURL:URL.t or_string ->
          ?options:RegistrationOptions.t ->
            unit -> ServiceWorkerRegistration.t Promise.t_1)
      =
      fun (x11868 : 'tags this) ->
        fun ~scriptURL:(x11863 : URL.t or_string) ->
          fun ?options:(x11864 : RegistrationOptions.t option) ->
            fun () ->
              Promise.t_1_of_js ServiceWorkerRegistration.t_of_js
                (let x11870 = this_to_js Obj.magic x11868 in
                 Ojs.call (Ojs.get_prop_ascii x11870 "register") "apply"
                   [|x11870;((let x11865 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x11865 "push"
                                   [|(or_string_to_js URL.t_to_js x11863)|]);
                              (match x11864 with
                               | Some x11866 ->
                                   ignore
                                     (Ojs.call x11865 "push"
                                        [|(RegistrationOptions.t_to_js x11866)|])
                               | None -> ());
                              x11865))|])
    let (startMessages : 'tags this -> unit) =
      fun (x11872 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x11872) "startMessages" [||])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11882 : 'tags this) ->
        fun ~type_:(x11874 : 'K) ->
          fun ~listener:(x11875 : this:t -> ev:any -> any) ->
            fun
              ?options:(x11876 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11884 = this_to_js Obj.magic x11882 in
                   Ojs.call (Ojs.get_prop_ascii x11884 "addEventListener")
                     "apply"
                     [|x11884;((let x11877 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11877 "push"
                                     [|(Obj.magic x11874)|]);
                                ignore
                                  (Ojs.call x11877 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11880 : Ojs.t) ->
                                             fun (x11881 : Ojs.t) ->
                                               any_to_js
                                                 (x11875
                                                    ~this:(t_of_js x11880)
                                                    ~ev:(any_of_js x11881))))|]);
                                (match x11876 with
                                 | Some x11878 ->
                                     ignore
                                       (Ojs.call x11877 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x11878)|])
                                 | None -> ());
                                x11877))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11891 : 'tags this) ->
        fun ~type_:(x11885 : string) ->
          fun ~listener:(x11886 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x11887 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11893 = this_to_js Obj.magic x11891 in
                   Ojs.call (Ojs.get_prop_ascii x11893 "addEventListener")
                     "apply"
                     [|x11893;((let x11888 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11888 "push"
                                     [|(Ojs.string_to_js x11885)|]);
                                ignore
                                  (Ojs.call x11888 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11886)|]);
                                (match x11887 with
                                 | Some x11889 ->
                                     ignore
                                       (Ojs.call x11888 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x11889)|])
                                 | None -> ());
                                x11888))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11902 : 'tags this) ->
        fun ~type_:(x11894 : 'K) ->
          fun ~listener:(x11895 : this:t -> ev:any -> any) ->
            fun ?options:(x11896 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11904 = this_to_js Obj.magic x11902 in
                   Ojs.call (Ojs.get_prop_ascii x11904 "removeEventListener")
                     "apply"
                     [|x11904;((let x11897 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11897 "push"
                                     [|(Obj.magic x11894)|]);
                                ignore
                                  (Ojs.call x11897 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x11900 : Ojs.t) ->
                                             fun (x11901 : Ojs.t) ->
                                               any_to_js
                                                 (x11895
                                                    ~this:(t_of_js x11900)
                                                    ~ev:(any_of_js x11901))))|]);
                                (match x11896 with
                                 | Some x11898 ->
                                     ignore
                                       (Ojs.call x11897 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x11898)|])
                                 | None -> ());
                                x11897))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x11911 : 'tags this) ->
        fun ~type_:(x11905 : string) ->
          fun ~listener:(x11906 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x11907 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x11913 = this_to_js Obj.magic x11911 in
                   Ojs.call (Ojs.get_prop_ascii x11913 "removeEventListener")
                     "apply"
                     [|x11913;((let x11908 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x11908 "push"
                                     [|(Ojs.string_to_js x11905)|]);
                                ignore
                                  (Ojs.call x11908 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x11906)|]);
                                (match x11907 with
                                 | Some x11909 ->
                                     ignore
                                       (Ojs.call x11908 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x11909)|])
                                 | None -> ());
                                x11908))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ServiceWorkerContainer") 
             [||])
  end
module SecurityPolicyViolationEventDisposition =
  struct
    type t = [ `L_s169_report  | `L_s66_enforce ]
    let rec t_of_js : Ojs.t -> t =
      fun (x11915 : Ojs.t) ->
        let x11916 = x11915 in
        match Ojs.string_of_js x11916 with
        | "report" -> `L_s169_report
        | "enforce" -> `L_s66_enforce
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x11914 : [ `L_s169_report  | `L_s66_enforce ]) ->
        match x11914 with
        | `L_s169_report -> Ojs.string_to_js "report"
        | `L_s66_enforce -> Ojs.string_to_js "enforce"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11918 : Ojs.t) -> t_of_js x11918
    and t_0_to_js : t_0 -> Ojs.t = fun (x11917 : t) -> t_to_js x11917
  end
module SecurityPolicyViolationEventInit =
  struct
    type t = [ `EventInit  | `SecurityPolicyViolationEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11920 : Ojs.t) -> t_of_js x11920
    and t_0_to_js : t_0 -> Ojs.t = fun (x11919 : t) -> t_to_js x11919
    type tags = [ `EventInit  | `SecurityPolicyViolationEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11923 : Ojs.t) -> intf_of_js __tags_of_js x11923
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11921 : __tags intf) -> intf_to_js __tags_to_js x11921
    let (get_blockedURI : 'tags this -> string) =
      fun (x11925 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11925) "blockedURI")
    let (set_blockedURI : 'tags this -> string -> unit) =
      fun (x11927 : 'tags this) ->
        fun (x11928 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11927) "blockedURI"
            (Ojs.string_to_js x11928)
    let (get_columnNumber : 'tags this -> float) =
      fun (x11930 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11930) "columnNumber")
    let (set_columnNumber : 'tags this -> float -> unit) =
      fun (x11932 : 'tags this) ->
        fun (x11933 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11932) "columnNumber"
            (Ojs.float_to_js x11933)
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x11935 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11935) "disposition")
    let (set_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t -> unit) =
      fun (x11937 : 'tags this) ->
        fun (x11938 : SecurityPolicyViolationEventDisposition.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11937) "disposition"
            (SecurityPolicyViolationEventDisposition.t_to_js x11938)
    let (get_documentURI : 'tags this -> string) =
      fun (x11940 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11940) "documentURI")
    let (set_documentURI : 'tags this -> string -> unit) =
      fun (x11942 : 'tags this) ->
        fun (x11943 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11942) "documentURI"
            (Ojs.string_to_js x11943)
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x11945 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11945)
             "effectiveDirective")
    let (set_effectiveDirective : 'tags this -> string -> unit) =
      fun (x11947 : 'tags this) ->
        fun (x11948 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11947)
            "effectiveDirective" (Ojs.string_to_js x11948)
    let (get_lineNumber : 'tags this -> float) =
      fun (x11950 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11950) "lineNumber")
    let (set_lineNumber : 'tags this -> float -> unit) =
      fun (x11952 : 'tags this) ->
        fun (x11953 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11952) "lineNumber"
            (Ojs.float_to_js x11953)
    let (get_originalPolicy : 'tags this -> string) =
      fun (x11955 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11955) "originalPolicy")
    let (set_originalPolicy : 'tags this -> string -> unit) =
      fun (x11957 : 'tags this) ->
        fun (x11958 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11957) "originalPolicy"
            (Ojs.string_to_js x11958)
    let (get_referrer : 'tags this -> string) =
      fun (x11960 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11960) "referrer")
    let (set_referrer : 'tags this -> string -> unit) =
      fun (x11962 : 'tags this) ->
        fun (x11963 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11962) "referrer"
            (Ojs.string_to_js x11963)
    let (get_sample : 'tags this -> string) =
      fun (x11965 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11965) "sample")
    let (set_sample : 'tags this -> string -> unit) =
      fun (x11967 : 'tags this) ->
        fun (x11968 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11967) "sample"
            (Ojs.string_to_js x11968)
    let (get_sourceFile : 'tags this -> string) =
      fun (x11970 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11970) "sourceFile")
    let (set_sourceFile : 'tags this -> string -> unit) =
      fun (x11972 : 'tags this) ->
        fun (x11973 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11972) "sourceFile"
            (Ojs.string_to_js x11973)
    let (get_statusCode : 'tags this -> float) =
      fun (x11975 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11975) "statusCode")
    let (set_statusCode : 'tags this -> float -> unit) =
      fun (x11977 : 'tags this) ->
        fun (x11978 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11977) "statusCode"
            (Ojs.float_to_js x11978)
    let (get_violatedDirective : 'tags this -> string) =
      fun (x11980 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11980)
             "violatedDirective")
    let (set_violatedDirective : 'tags this -> string -> unit) =
      fun (x11982 : 'tags this) ->
        fun (x11983 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x11982)
            "violatedDirective" (Ojs.string_to_js x11983)
    let cast_from = Obj.magic
  end
module SecurityPolicyViolationEvent =
  struct
    type t = [ `Event  | `SecurityPolicyViolationEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x11986 : Ojs.t) -> t_of_js x11986
    and t_0_to_js : t_0 -> Ojs.t = fun (x11985 : t) -> t_to_js x11985
    type tags = [ `Event  | `SecurityPolicyViolationEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `SecurityPolicyViolationEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x11989 : Ojs.t) -> intf_of_js __tags_of_js x11989
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x11987 : __tags intf) -> intf_to_js __tags_to_js x11987
    let (get_blockedURI : 'tags this -> string) =
      fun (x11991 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11991) "blockedURI")
    let (get_columnNumber : 'tags this -> float) =
      fun (x11993 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11993) "columnNumber")
    let (get_disposition :
      'tags this -> SecurityPolicyViolationEventDisposition.t) =
      fun (x11995 : 'tags this) ->
        SecurityPolicyViolationEventDisposition.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11995) "disposition")
    let (get_documentURI : 'tags this -> string) =
      fun (x11997 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11997) "documentURI")
    let (get_effectiveDirective : 'tags this -> string) =
      fun (x11999 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x11999)
             "effectiveDirective")
    let (get_lineNumber : 'tags this -> float) =
      fun (x12001 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12001) "lineNumber")
    let (get_originalPolicy : 'tags this -> string) =
      fun (x12003 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12003) "originalPolicy")
    let (get_referrer : 'tags this -> string) =
      fun (x12005 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12005) "referrer")
    let (get_sample : 'tags this -> string) =
      fun (x12007 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12007) "sample")
    let (get_sourceFile : 'tags this -> string) =
      fun (x12009 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12009) "sourceFile")
    let (get_statusCode : 'tags this -> float) =
      fun (x12011 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12011) "statusCode")
    let (get_violatedDirective : 'tags this -> string) =
      fun (x12013 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12013)
             "violatedDirective")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "SecurityPolicyViolationEvent")
             "prototype")
    let (create :
      type_:string ->
        ?eventInitDict:SecurityPolicyViolationEventInit.t -> unit -> t)
      =
      fun ~type_:(x12015 : string) ->
        fun
          ?eventInitDict:(x12016 : SecurityPolicyViolationEventInit.t option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global
                    "SecurityPolicyViolationEvent")
                 (let x12017 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12017 "push" [|(Ojs.string_to_js x12015)|]);
                  (match x12016 with
                   | Some x12018 ->
                       ignore
                         (Ojs.call x12017 "push"
                            [|(SecurityPolicyViolationEventInit.t_to_js
                                 x12018)|])
                   | None -> ());
                  x12017))
  end
module ReadableStreamReader =
  struct
    type 'T t = 'T ReadableStreamDefaultReader.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x12021 : Ojs.t) ->
          ReadableStreamDefaultReader.t_of_js __T_of_js x12021
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x12019 : __T ReadableStreamDefaultReader.t) ->
          ReadableStreamDefaultReader.t_to_js __T_to_js x12019
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x12025 : Ojs.t) -> t_of_js __T_of_js x12025
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x12023 : __T t) -> t_to_js __T_to_js x12023
  end
module PermissionState =
  struct
    type t = [ `L_s157_prompt  | `L_s58_denied  | `L_s82_granted ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12028 : Ojs.t) ->
        let x12029 = x12028 in
        match Ojs.string_of_js x12029 with
        | "prompt" -> `L_s157_prompt
        | "denied" -> `L_s58_denied
        | "granted" -> `L_s82_granted
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x12027 : [ `L_s157_prompt  | `L_s58_denied  | `L_s82_granted ]) ->
        match x12027 with
        | `L_s157_prompt -> Ojs.string_to_js "prompt"
        | `L_s58_denied -> Ojs.string_to_js "denied"
        | `L_s82_granted -> Ojs.string_to_js "granted"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12031 : Ojs.t) -> t_of_js x12031
    and t_0_to_js : t_0 -> Ojs.t = fun (x12030 : t) -> t_to_js x12030
  end
module PermissionStatus =
  struct
    type t = [ `EventTarget  | `PermissionStatus ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12033 : Ojs.t) -> t_of_js x12033
    and t_0_to_js : t_0 -> Ojs.t = fun (x12032 : t) -> t_to_js x12032
    type tags = [ `EventTarget  | `PermissionStatus ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PermissionStatus ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12036 : Ojs.t) -> intf_of_js __tags_of_js x12036
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12034 : __tags intf) -> intf_to_js __tags_to_js x12034
    let (get_onchange : 'tags this -> (this:t -> ev:Event.t -> any) or_null)
      =
      fun (x12038 : 'tags this) ->
        or_null_of_js
          (fun (x12040 : Ojs.t) ->
             fun ~this:(x12041 : t) ->
               fun ~ev:(x12042 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12040
                      [|(t_to_js x12041);(Event.t_to_js x12042)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12038) "onchange")
    let (set_onchange :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x12043 : 'tags this) ->
        fun (x12044 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12043) "onchange"
            (or_null_to_js
               (fun (x12045 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12046 : Ojs.t) ->
                       fun (x12047 : Ojs.t) ->
                         any_to_js
                           (x12045 ~this:(t_of_js x12046)
                              ~ev:(Event.t_of_js x12047)))) x12044)
    let (get_state : 'tags this -> PermissionState.t) =
      fun (x12049 : 'tags this) ->
        PermissionState.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12049) "state")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12059 : 'tags this) ->
        fun ~type_:(x12051 : 'K) ->
          fun ~listener:(x12052 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12053 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12061 = this_to_js Obj.magic x12059 in
                   Ojs.call (Ojs.get_prop_ascii x12061 "addEventListener")
                     "apply"
                     [|x12061;((let x12054 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12054 "push"
                                     [|(Obj.magic x12051)|]);
                                ignore
                                  (Ojs.call x12054 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12057 : Ojs.t) ->
                                             fun (x12058 : Ojs.t) ->
                                               any_to_js
                                                 (x12052
                                                    ~this:(t_of_js x12057)
                                                    ~ev:(any_of_js x12058))))|]);
                                (match x12053 with
                                 | Some x12055 ->
                                     ignore
                                       (Ojs.call x12054 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x12055)|])
                                 | None -> ());
                                x12054))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12068 : 'tags this) ->
        fun ~type_:(x12062 : string) ->
          fun ~listener:(x12063 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12064 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12070 = this_to_js Obj.magic x12068 in
                   Ojs.call (Ojs.get_prop_ascii x12070 "addEventListener")
                     "apply"
                     [|x12070;((let x12065 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12065 "push"
                                     [|(Ojs.string_to_js x12062)|]);
                                ignore
                                  (Ojs.call x12065 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12063)|]);
                                (match x12064 with
                                 | Some x12066 ->
                                     ignore
                                       (Ojs.call x12065 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x12066)|])
                                 | None -> ());
                                x12065))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12079 : 'tags this) ->
        fun ~type_:(x12071 : 'K) ->
          fun ~listener:(x12072 : this:t -> ev:any -> any) ->
            fun ?options:(x12073 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12081 = this_to_js Obj.magic x12079 in
                   Ojs.call (Ojs.get_prop_ascii x12081 "removeEventListener")
                     "apply"
                     [|x12081;((let x12074 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12074 "push"
                                     [|(Obj.magic x12071)|]);
                                ignore
                                  (Ojs.call x12074 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12077 : Ojs.t) ->
                                             fun (x12078 : Ojs.t) ->
                                               any_to_js
                                                 (x12072
                                                    ~this:(t_of_js x12077)
                                                    ~ev:(any_of_js x12078))))|]);
                                (match x12073 with
                                 | Some x12075 ->
                                     ignore
                                       (Ojs.call x12074 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x12075)|])
                                 | None -> ());
                                x12074))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12088 : 'tags this) ->
        fun ~type_:(x12082 : string) ->
          fun ~listener:(x12083 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x12084 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12090 = this_to_js Obj.magic x12088 in
                   Ojs.call (Ojs.get_prop_ascii x12090 "removeEventListener")
                     "apply"
                     [|x12090;((let x12085 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12085 "push"
                                     [|(Ojs.string_to_js x12082)|]);
                                ignore
                                  (Ojs.call x12085 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12083)|]);
                                (match x12084 with
                                 | Some x12086 ->
                                     ignore
                                       (Ojs.call x12085 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x12086)|])
                                 | None -> ());
                                x12085))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PermissionStatus") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PermissionStatus")
             [||])
  end
module PermissionName =
  struct
    type t =
      [ `L_s131_notifications  | `L_s148_persistent_storage  | `L_s159_push 
      | `L_s173_screen_wake_lock  | `L_s211_xr_spatial_tracking 
      | `L_s80_geolocation ]
    let rec t_of_js : Ojs.t -> t =
      fun (x12092 : Ojs.t) ->
        let x12093 = x12092 in
        match Ojs.string_of_js x12093 with
        | "notifications" -> `L_s131_notifications
        | "persistent-storage" -> `L_s148_persistent_storage
        | "push" -> `L_s159_push
        | "screen-wake-lock" -> `L_s173_screen_wake_lock
        | "xr-spatial-tracking" -> `L_s211_xr_spatial_tracking
        | "geolocation" -> `L_s80_geolocation
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x12091 :
          [ `L_s131_notifications  | `L_s148_persistent_storage 
          | `L_s159_push  | `L_s173_screen_wake_lock 
          | `L_s211_xr_spatial_tracking  | `L_s80_geolocation ])
        ->
        match x12091 with
        | `L_s131_notifications -> Ojs.string_to_js "notifications"
        | `L_s148_persistent_storage -> Ojs.string_to_js "persistent-storage"
        | `L_s159_push -> Ojs.string_to_js "push"
        | `L_s173_screen_wake_lock -> Ojs.string_to_js "screen-wake-lock"
        | `L_s211_xr_spatial_tracking ->
            Ojs.string_to_js "xr-spatial-tracking"
        | `L_s80_geolocation -> Ojs.string_to_js "geolocation"
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12095 : Ojs.t) -> t_of_js x12095
    and t_0_to_js : t_0 -> Ojs.t = fun (x12094 : t) -> t_to_js x12094
  end
module PermissionDescriptor =
  struct
    type t = [ `PermissionDescriptor ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12097 : Ojs.t) -> t_of_js x12097
    and t_0_to_js : t_0 -> Ojs.t = fun (x12096 : t) -> t_to_js x12096
    type tags = [ `PermissionDescriptor ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionDescriptor ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12100 : Ojs.t) -> intf_of_js __tags_of_js x12100
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12098 : __tags intf) -> intf_to_js __tags_to_js x12098
    let (get_name : 'tags this -> PermissionName.t) =
      fun (x12102 : 'tags this) ->
        PermissionName.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12102) "name")
    let (set_name : 'tags this -> PermissionName.t -> unit) =
      fun (x12104 : 'tags this) ->
        fun (x12105 : PermissionName.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12104) "name"
            (PermissionName.t_to_js x12105)
    let cast_from = Obj.magic
  end
module Permissions =
  struct
    type t = [ `Permissions ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12108 : Ojs.t) -> t_of_js x12108
    and t_0_to_js : t_0 -> Ojs.t = fun (x12107 : t) -> t_to_js x12107
    type tags = [ `Permissions ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Permissions ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12111 : Ojs.t) -> intf_of_js __tags_of_js x12111
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12109 : __tags intf) -> intf_to_js __tags_to_js x12109
    let (query :
      'tags this ->
        permissionDesc:PermissionDescriptor.t ->
          PermissionStatus.t Promise.t_1)
      =
      fun (x12114 : 'tags this) ->
        fun ~permissionDesc:(x12113 : PermissionDescriptor.t) ->
          Promise.t_1_of_js PermissionStatus.t_of_js
            (Ojs.call (this_to_js Obj.magic x12114) "query"
               [|(PermissionDescriptor.t_to_js x12113)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Permissions")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Permissions") [||])
  end
module PermissionStatusEventMap =
  struct
    type t = [ `PermissionStatusEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12118 : Ojs.t) -> t_of_js x12118
    and t_0_to_js : t_0 -> Ojs.t = fun (x12117 : t) -> t_to_js x12117
    type tags = [ `PermissionStatusEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PermissionStatusEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12121 : Ojs.t) -> intf_of_js __tags_of_js x12121
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12119 : __tags intf) -> intf_to_js __tags_to_js x12119
    let (get_change : 'tags this -> Event.t) =
      fun (x12123 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12123) "change")
    let (set_change : 'tags this -> Event.t -> unit) =
      fun (x12125 : 'tags this) ->
        fun (x12126 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12125) "change"
            (Event.t_to_js x12126)
    let cast_from = Obj.magic
  end
module PerformanceServerTiming =
  struct
    type t = [ `PerformanceServerTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12129 : Ojs.t) -> t_of_js x12129
    and t_0_to_js : t_0 -> Ojs.t = fun (x12128 : t) -> t_to_js x12128
    type tags = [ `PerformanceServerTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceServerTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12132 : Ojs.t) -> intf_of_js __tags_of_js x12132
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12130 : __tags intf) -> intf_to_js __tags_to_js x12130
    let (get_description : 'tags this -> string) =
      fun (x12134 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12134) "description")
    let (get_duration : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12136 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12136) "duration")
    let (get_name : 'tags this -> string) =
      fun (x12138 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12138) "name")
    let (toJSON : 'tags this -> any) =
      fun (x12140 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x12140) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceServerTiming") 
             [||])
  end
module PerformanceResourceTiming =
  struct
    type t = [ `PerformanceEntry  | `PerformanceResourceTiming ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12143 : Ojs.t) -> t_of_js x12143
    and t_0_to_js : t_0 -> Ojs.t = fun (x12142 : t) -> t_to_js x12142
    type tags = [ `PerformanceEntry  | `PerformanceResourceTiming ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceResourceTiming ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12146 : Ojs.t) -> intf_of_js __tags_of_js x12146
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12144 : __tags intf) -> intf_to_js __tags_to_js x12144
    let (get_connectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12148 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12148) "connectEnd")
    let (get_connectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12150 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12150) "connectStart")
    let (get_decodedBodySize : 'tags this -> float) =
      fun (x12152 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12152) "decodedBodySize")
    let (get_domainLookupEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12154 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12154) "domainLookupEnd")
    let (get_domainLookupStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12156 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12156)
             "domainLookupStart")
    let (get_encodedBodySize : 'tags this -> float) =
      fun (x12158 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12158) "encodedBodySize")
    let (get_fetchStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12160 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12160) "fetchStart")
    let (get_initiatorType : 'tags this -> string) =
      fun (x12162 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12162) "initiatorType")
    let (get_nextHopProtocol : 'tags this -> string) =
      fun (x12164 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12164) "nextHopProtocol")
    let (get_redirectEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12166 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12166) "redirectEnd")
    let (get_redirectStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12168 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12168) "redirectStart")
    let (get_requestStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12170 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12170) "requestStart")
    let (get_responseEnd : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12172 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12172) "responseEnd")
    let (get_responseStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12174 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12174) "responseStart")
    let (get_secureConnectionStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12176 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12176)
             "secureConnectionStart")
    let (get_serverTiming : 'tags this -> PerformanceServerTiming.t list) =
      fun (x12178 : 'tags this) ->
        Ojs.list_of_js PerformanceServerTiming.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12178) "serverTiming")
    let (get_transferSize : 'tags this -> float) =
      fun (x12181 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12181) "transferSize")
    let (get_workerStart : 'tags this -> DOMHighResTimeStamp.t) =
      fun (x12183 : 'tags this) ->
        DOMHighResTimeStamp.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12183) "workerStart")
    let (toJSON : 'tags this -> any) =
      fun (x12185 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x12185) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceResourceTiming") 
             [||])
  end
module PerformanceObserverInit =
  struct
    type t = [ `PerformanceObserverInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12188 : Ojs.t) -> t_of_js x12188
    and t_0_to_js : t_0 -> Ojs.t = fun (x12187 : t) -> t_to_js x12187
    type tags = [ `PerformanceObserverInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12191 : Ojs.t) -> intf_of_js __tags_of_js x12191
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12189 : __tags intf) -> intf_to_js __tags_to_js x12189
    let (get_buffered : 'tags this -> bool) =
      fun (x12193 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12193) "buffered")
    let (set_buffered : 'tags this -> bool -> unit) =
      fun (x12195 : 'tags this) ->
        fun (x12196 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12195) "buffered"
            (Ojs.bool_to_js x12196)
    let (get_entryTypes : 'tags this -> string list) =
      fun (x12198 : 'tags this) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12198) "entryTypes")
    let (set_entryTypes : 'tags this -> string list -> unit) =
      fun (x12201 : 'tags this) ->
        fun (x12202 : string list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12201) "entryTypes"
            (Ojs.list_to_js Ojs.string_to_js x12202)
    let (get_type : 'tags this -> string) =
      fun (x12205 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12205) "type")
    let (set_type : 'tags this -> string -> unit) =
      fun (x12207 : 'tags this) ->
        fun (x12208 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12207) "type"
            (Ojs.string_to_js x12208)
    let cast_from = Obj.magic
  end
module PerformanceObserverEntryList =
  struct
    type t = [ `PerformanceObserverEntryList ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12211 : Ojs.t) -> t_of_js x12211
    and t_0_to_js : t_0 -> Ojs.t = fun (x12210 : t) -> t_to_js x12210
    type tags = [ `PerformanceObserverEntryList ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverEntryList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12214 : Ojs.t) -> intf_of_js __tags_of_js x12214
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12212 : __tags intf) -> intf_to_js __tags_to_js x12212
    let (getEntries : 'tags this -> PerformanceEntryList.t) =
      fun (x12216 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x12216) "getEntries" [||])
    let (getEntriesByName :
      'tags this ->
        name:string -> ?type_:string -> unit -> PerformanceEntryList.t)
      =
      fun (x12222 : 'tags this) ->
        fun ~name:(x12218 : string) ->
          fun ?type_:(x12219 : string option) ->
            fun () ->
              PerformanceEntryList.t_of_js
                (let x12224 = this_to_js Obj.magic x12222 in
                 Ojs.call (Ojs.get_prop_ascii x12224 "getEntriesByName")
                   "apply"
                   [|x12224;((let x12220 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12220 "push"
                                   [|(Ojs.string_to_js x12218)|]);
                              (match x12219 with
                               | Some x12221 ->
                                   ignore
                                     (Ojs.call x12220 "push"
                                        [|(Ojs.string_to_js x12221)|])
                               | None -> ());
                              x12220))|])
    let (getEntriesByType :
      'tags this -> type_:string -> PerformanceEntryList.t) =
      fun (x12226 : 'tags this) ->
        fun ~type_:(x12225 : string) ->
          PerformanceEntryList.t_of_js
            (Ojs.call (this_to_js Obj.magic x12226) "getEntriesByType"
               [|(Ojs.string_to_js x12225)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserverEntryList")
             [||])
  end
module rec
  PerformanceObserver:sig
                        type t = [ `PerformanceObserver ] intf
                        type t_0 = t
                        [@@@js.stop ]
                        type tags = [ `PerformanceObserver ]
                        type tags_0 = tags
                        [@@@js.start ]
                        [@@@js.implem
                          type tags = [ `PerformanceObserver ]
                          type tags_0 = tags]
                        type 'tags this =
                          'tags intf constraint 'tags =
                                      [> `PerformanceObserver ]
                        val t_to_js : t -> Ojs.t
                        val t_of_js : Ojs.t -> t
                        val t_0_to_js : t_0 -> Ojs.t
                        val t_0_of_js : Ojs.t -> t_0
                        val disconnect : 'tags this -> unit
                        val observe :
                          'tags this ->
                            ?options:PerformanceObserverInit.t ->
                              unit -> unit
                        val takeRecords :
                          'tags this -> PerformanceEntryList.t
                        val cast_from : 'tags this -> t
                        val prototype : unit -> t
                        val create : PerformanceObserverCallback.t -> t
                        val supportedEntryTypes : unit -> string list
                      end =
  struct
    type t = [ `PerformanceObserver ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12229 : Ojs.t) -> t_of_js x12229
    and t_0_to_js : t_0 -> Ojs.t = fun (x12228 : t) -> t_to_js x12228
    type tags = [ `PerformanceObserver ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceObserver ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12232 : Ojs.t) -> intf_of_js __tags_of_js x12232
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12230 : __tags intf) -> intf_to_js __tags_to_js x12230
    let (disconnect : 'tags this -> unit) =
      fun (x12234 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x12234) "disconnect" [||])
    let (observe :
      'tags this -> ?options:PerformanceObserverInit.t -> unit -> unit) =
      fun (x12239 : 'tags this) ->
        fun ?options:(x12236 : PerformanceObserverInit.t option) ->
          fun () ->
            ignore
              (let x12241 = this_to_js Obj.magic x12239 in
               Ojs.call (Ojs.get_prop_ascii x12241 "observe") "apply"
                 [|x12241;((let x12237 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x12236 with
                             | Some x12238 ->
                                 ignore
                                   (Ojs.call x12237 "push"
                                      [|(PerformanceObserverInit.t_to_js
                                           x12238)|])
                             | None -> ());
                            x12237))|])
    let (takeRecords : 'tags this -> PerformanceEntryList.t) =
      fun (x12242 : 'tags this) ->
        PerformanceEntryList.t_of_js
          (Ojs.call (this_to_js Obj.magic x12242) "takeRecords" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "prototype")
    let (create : PerformanceObserverCallback.t -> t) =
      fun (x12244 : PerformanceObserverCallback.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             [|(PerformanceObserverCallback.t_to_js x12244)|])
    let (supportedEntryTypes : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "PerformanceObserver")
             "supportedEntryTypes")
  end
 and
  PerformanceObserverCallback:sig
                                type t =
                                  [ `PerformanceObserverCallback ] intf
                                type t_0 = t
                                [@@@js.stop ]
                                type tags = [ `PerformanceObserverCallback ]
                                type tags_0 = tags
                                [@@@js.start ]
                                [@@@js.implem
                                  type tags =
                                    [ `PerformanceObserverCallback ]
                                  type tags_0 = tags]
                                type 'tags this =
                                  'tags intf constraint 'tags =
                                              [>
                                                `PerformanceObserverCallback ]
                                val t_to_js : t -> Ojs.t
                                val t_of_js : Ojs.t -> t
                                val t_0_to_js : t_0 -> Ojs.t
                                val t_0_of_js : Ojs.t -> t_0
                                val apply :
                                  'tags this ->
                                    entries:PerformanceObserverEntryList.t ->
                                      observer:PerformanceObserver.t -> unit
                                val cast_from : 'tags this -> t
                              end =
  struct
    type t = [ `PerformanceObserverCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12247 : Ojs.t) -> t_of_js x12247
    and t_0_to_js : t_0 -> Ojs.t = fun (x12246 : t) -> t_to_js x12246
    type tags = [ `PerformanceObserverCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `PerformanceObserverCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12250 : Ojs.t) -> intf_of_js __tags_of_js x12250
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12248 : __tags intf) -> intf_to_js __tags_to_js x12248
    let (apply :
      'tags this ->
        entries:PerformanceObserverEntryList.t ->
          observer:PerformanceObserver.t -> unit)
      =
      fun (x12254 : 'tags this) ->
        fun ~entries:(x12252 : PerformanceObserverEntryList.t) ->
          fun ~observer:(x12253 : PerformanceObserver.t) ->
            ignore
              (Ojs.apply (this_to_js Obj.magic x12254)
                 [|(PerformanceObserverEntryList.t_to_js x12252);(PerformanceObserver.t_to_js
                                                                    x12253)|])
    let cast_from = Obj.magic
  end
module PerformanceEventMap =
  struct
    type t = [ `PerformanceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12257 : Ojs.t) -> t_of_js x12257
    and t_0_to_js : t_0 -> Ojs.t = fun (x12256 : t) -> t_to_js x12256
    type tags = [ `PerformanceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `PerformanceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12260 : Ojs.t) -> intf_of_js __tags_of_js x12260
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12258 : __tags intf) -> intf_to_js __tags_to_js x12258
    let (get_resourcetimingbufferfull : 'tags this -> Event.t) =
      fun (x12262 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12262)
             "resourcetimingbufferfull")
    let (set_resourcetimingbufferfull : 'tags this -> Event.t -> unit) =
      fun (x12264 : 'tags this) ->
        fun (x12265 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12264)
            "resourcetimingbufferfull" (Event.t_to_js x12265)
    let cast_from = Obj.magic
  end
module DOMMatrix2DInit =
  struct
    type t = [ `DOMMatrix2DInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12268 : Ojs.t) -> t_of_js x12268
    and t_0_to_js : t_0 -> Ojs.t = fun (x12267 : t) -> t_to_js x12267
    type tags = [ `DOMMatrix2DInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix2DInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12271 : Ojs.t) -> intf_of_js __tags_of_js x12271
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12269 : __tags intf) -> intf_to_js __tags_to_js x12269
    let (get_a : 'tags this -> float) =
      fun (x12273 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12273) "a")
    let (set_a : 'tags this -> float -> unit) =
      fun (x12275 : 'tags this) ->
        fun (x12276 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12275) "a"
            (Ojs.float_to_js x12276)
    let (get_b : 'tags this -> float) =
      fun (x12278 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12278) "b")
    let (set_b : 'tags this -> float -> unit) =
      fun (x12280 : 'tags this) ->
        fun (x12281 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12280) "b"
            (Ojs.float_to_js x12281)
    let (get_c : 'tags this -> float) =
      fun (x12283 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12283) "c")
    let (set_c : 'tags this -> float -> unit) =
      fun (x12285 : 'tags this) ->
        fun (x12286 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12285) "c"
            (Ojs.float_to_js x12286)
    let (get_d : 'tags this -> float) =
      fun (x12288 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12288) "d")
    let (set_d : 'tags this -> float -> unit) =
      fun (x12290 : 'tags this) ->
        fun (x12291 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12290) "d"
            (Ojs.float_to_js x12291)
    let (get_e : 'tags this -> float) =
      fun (x12293 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12293) "e")
    let (set_e : 'tags this -> float -> unit) =
      fun (x12295 : 'tags this) ->
        fun (x12296 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12295) "e"
            (Ojs.float_to_js x12296)
    let (get_f : 'tags this -> float) =
      fun (x12298 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12298) "f")
    let (set_f : 'tags this -> float -> unit) =
      fun (x12300 : 'tags this) ->
        fun (x12301 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12300) "f"
            (Ojs.float_to_js x12301)
    let (get_m11 : 'tags this -> float) =
      fun (x12303 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12303) "m11")
    let (set_m11 : 'tags this -> float -> unit) =
      fun (x12305 : 'tags this) ->
        fun (x12306 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12305) "m11"
            (Ojs.float_to_js x12306)
    let (get_m12 : 'tags this -> float) =
      fun (x12308 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12308) "m12")
    let (set_m12 : 'tags this -> float -> unit) =
      fun (x12310 : 'tags this) ->
        fun (x12311 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12310) "m12"
            (Ojs.float_to_js x12311)
    let (get_m21 : 'tags this -> float) =
      fun (x12313 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12313) "m21")
    let (set_m21 : 'tags this -> float -> unit) =
      fun (x12315 : 'tags this) ->
        fun (x12316 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12315) "m21"
            (Ojs.float_to_js x12316)
    let (get_m22 : 'tags this -> float) =
      fun (x12318 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12318) "m22")
    let (set_m22 : 'tags this -> float -> unit) =
      fun (x12320 : 'tags this) ->
        fun (x12321 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12320) "m22"
            (Ojs.float_to_js x12321)
    let (get_m41 : 'tags this -> float) =
      fun (x12323 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12323) "m41")
    let (set_m41 : 'tags this -> float -> unit) =
      fun (x12325 : 'tags this) ->
        fun (x12326 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12325) "m41"
            (Ojs.float_to_js x12326)
    let (get_m42 : 'tags this -> float) =
      fun (x12328 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12328) "m42")
    let (set_m42 : 'tags this -> float -> unit) =
      fun (x12330 : 'tags this) ->
        fun (x12331 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12330) "m42"
            (Ojs.float_to_js x12331)
    let cast_from = Obj.magic
  end
module CanvasPath =
  struct
    type t = [ `CanvasPath ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12334 : Ojs.t) -> t_of_js x12334
    and t_0_to_js : t_0 -> Ojs.t = fun (x12333 : t) -> t_to_js x12333
    type tags = [ `CanvasPath ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPath ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12337 : Ojs.t) -> intf_of_js __tags_of_js x12337
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12335 : __tags intf) -> intf_to_js __tags_to_js x12335
    let (arc :
      'tags this ->
        x:float ->
          y:float ->
            radius:float ->
              startAngle:float ->
                endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x12347 : 'tags this) ->
        fun ~x:(x12339 : float) ->
          fun ~y:(x12340 : float) ->
            fun ~radius:(x12341 : float) ->
              fun ~startAngle:(x12342 : float) ->
                fun ~endAngle:(x12343 : float) ->
                  fun ?counterclockwise:(x12344 : bool option) ->
                    fun () ->
                      ignore
                        (let x12349 = this_to_js Obj.magic x12347 in
                         Ojs.call (Ojs.get_prop_ascii x12349 "arc") "apply"
                           [|x12349;((let x12345 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x12345 "push"
                                           [|(Ojs.float_to_js x12339)|]);
                                      ignore
                                        (Ojs.call x12345 "push"
                                           [|(Ojs.float_to_js x12340)|]);
                                      ignore
                                        (Ojs.call x12345 "push"
                                           [|(Ojs.float_to_js x12341)|]);
                                      ignore
                                        (Ojs.call x12345 "push"
                                           [|(Ojs.float_to_js x12342)|]);
                                      ignore
                                        (Ojs.call x12345 "push"
                                           [|(Ojs.float_to_js x12343)|]);
                                      (match x12344 with
                                       | Some x12346 ->
                                           ignore
                                             (Ojs.call x12345 "push"
                                                [|(Ojs.bool_to_js x12346)|])
                                       | None -> ());
                                      x12345))|])
    let (arcTo :
      'tags this ->
        x1:float -> y1:float -> x2:float -> y2:float -> radius:float -> unit)
      =
      fun (x12355 : 'tags this) ->
        fun ~x1:(x12350 : float) ->
          fun ~y1:(x12351 : float) ->
            fun ~x2:(x12352 : float) ->
              fun ~y2:(x12353 : float) ->
                fun ~radius:(x12354 : float) ->
                  ignore
                    (Ojs.call (this_to_js Obj.magic x12355) "arcTo"
                       [|(Ojs.float_to_js x12350);(Ojs.float_to_js x12351);(
                         Ojs.float_to_js x12352);(Ojs.float_to_js x12353);(
                         Ojs.float_to_js x12354)|])
    let (bezierCurveTo :
      'tags this ->
        cp1x:float ->
          cp1y:float ->
            cp2x:float -> cp2y:float -> x:float -> y:float -> unit)
      =
      fun (x12363 : 'tags this) ->
        fun ~cp1x:(x12357 : float) ->
          fun ~cp1y:(x12358 : float) ->
            fun ~cp2x:(x12359 : float) ->
              fun ~cp2y:(x12360 : float) ->
                fun ~x:(x12361 : float) ->
                  fun ~y:(x12362 : float) ->
                    ignore
                      (Ojs.call (this_to_js Obj.magic x12363) "bezierCurveTo"
                         [|(Ojs.float_to_js x12357);(Ojs.float_to_js x12358);(
                           Ojs.float_to_js x12359);(Ojs.float_to_js x12360);(
                           Ojs.float_to_js x12361);(Ojs.float_to_js x12362)|])
    let (closePath : 'tags this -> unit) =
      fun (x12365 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x12365) "closePath" [||])
    let (ellipse :
      'tags this ->
        x:float ->
          y:float ->
            radiusX:float ->
              radiusY:float ->
                rotation:float ->
                  startAngle:float ->
                    endAngle:float -> ?counterclockwise:bool -> unit -> unit)
      =
      fun (x12377 : 'tags this) ->
        fun ~x:(x12367 : float) ->
          fun ~y:(x12368 : float) ->
            fun ~radiusX:(x12369 : float) ->
              fun ~radiusY:(x12370 : float) ->
                fun ~rotation:(x12371 : float) ->
                  fun ~startAngle:(x12372 : float) ->
                    fun ~endAngle:(x12373 : float) ->
                      fun ?counterclockwise:(x12374 : bool option) ->
                        fun () ->
                          ignore
                            (let x12379 = this_to_js Obj.magic x12377 in
                             Ojs.call (Ojs.get_prop_ascii x12379 "ellipse")
                               "apply"
                               [|x12379;((let x12375 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x12375 "push"
                                               [|(Ojs.float_to_js x12367)|]);
                                          ignore
                                            (Ojs.call x12375 "push"
                                               [|(Ojs.float_to_js x12368)|]);
                                          ignore
                                            (Ojs.call x12375 "push"
                                               [|(Ojs.float_to_js x12369)|]);
                                          ignore
                                            (Ojs.call x12375 "push"
                                               [|(Ojs.float_to_js x12370)|]);
                                          ignore
                                            (Ojs.call x12375 "push"
                                               [|(Ojs.float_to_js x12371)|]);
                                          ignore
                                            (Ojs.call x12375 "push"
                                               [|(Ojs.float_to_js x12372)|]);
                                          ignore
                                            (Ojs.call x12375 "push"
                                               [|(Ojs.float_to_js x12373)|]);
                                          (match x12374 with
                                           | Some x12376 ->
                                               ignore
                                                 (Ojs.call x12375 "push"
                                                    [|(Ojs.bool_to_js x12376)|])
                                           | None -> ());
                                          x12375))|])
    let (lineTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x12382 : 'tags this) ->
        fun ~x:(x12380 : float) ->
          fun ~y:(x12381 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12382) "lineTo"
                 [|(Ojs.float_to_js x12380);(Ojs.float_to_js x12381)|])
    let (moveTo : 'tags this -> x:float -> y:float -> unit) =
      fun (x12386 : 'tags this) ->
        fun ~x:(x12384 : float) ->
          fun ~y:(x12385 : float) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x12386) "moveTo"
                 [|(Ojs.float_to_js x12384);(Ojs.float_to_js x12385)|])
    let (quadraticCurveTo :
      'tags this -> cpx:float -> cpy:float -> x:float -> y:float -> unit) =
      fun (x12392 : 'tags this) ->
        fun ~cpx:(x12388 : float) ->
          fun ~cpy:(x12389 : float) ->
            fun ~x:(x12390 : float) ->
              fun ~y:(x12391 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x12392) "quadraticCurveTo"
                     [|(Ojs.float_to_js x12388);(Ojs.float_to_js x12389);(
                       Ojs.float_to_js x12390);(Ojs.float_to_js x12391)|])
    let (rect :
      'tags this -> x:float -> y:float -> w:float -> h:float -> unit) =
      fun (x12398 : 'tags this) ->
        fun ~x:(x12394 : float) ->
          fun ~y:(x12395 : float) ->
            fun ~w:(x12396 : float) ->
              fun ~h:(x12397 : float) ->
                ignore
                  (Ojs.call (this_to_js Obj.magic x12398) "rect"
                     [|(Ojs.float_to_js x12394);(Ojs.float_to_js x12395);(
                       Ojs.float_to_js x12396);(Ojs.float_to_js x12397)|])
    let cast_from = Obj.magic
  end
module Path2D =
  struct
    type t = [ `CanvasPath  | `Path2D ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12401 : Ojs.t) -> t_of_js x12401
    and t_0_to_js : t_0 -> Ojs.t = fun (x12400 : t) -> t_to_js x12400
    type tags = [ `CanvasPath  | `Path2D ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Path2D ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12404 : Ojs.t) -> intf_of_js __tags_of_js x12404
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12402 : __tags intf) -> intf_to_js __tags_to_js x12402
    let (addPath :
      'tags this -> path:t -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x12410 : 'tags this) ->
        fun ~path:(x12406 : t) ->
          fun ?transform:(x12407 : DOMMatrix2DInit.t option) ->
            fun () ->
              ignore
                (let x12412 = this_to_js Obj.magic x12410 in
                 Ojs.call (Ojs.get_prop_ascii x12412 "addPath") "apply"
                   [|x12412;((let x12408 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12408 "push" [|(t_to_js x12406)|]);
                              (match x12407 with
                               | Some x12409 ->
                                   ignore
                                     (Ojs.call x12408 "push"
                                        [|(DOMMatrix2DInit.t_to_js x12409)|])
                               | None -> ());
                              x12408))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Path2D")
             "prototype")
    let (create : ?path:t or_string -> unit -> t) =
      fun ?path:(x12413 : t or_string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Path2D")
               (let x12414 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x12413 with
                 | Some x12415 ->
                     ignore
                       (Ojs.call x12414 "push"
                          [|(or_string_to_js t_to_js x12415)|])
                 | None -> ());
                x12414))
  end
module OnErrorEventHandlerNonNull =
  struct
    type t = [ `OnErrorEventHandlerNonNull ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12418 : Ojs.t) -> t_of_js x12418
    and t_0_to_js : t_0 -> Ojs.t = fun (x12417 : t) -> t_to_js x12417
    type tags = [ `OnErrorEventHandlerNonNull ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OnErrorEventHandlerNonNull ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12421 : Ojs.t) -> intf_of_js __tags_of_js x12421
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12419 : __tags intf) -> intf_to_js __tags_to_js x12419
    let (apply :
      'tags this ->
        event:Event.t or_string ->
          ?source:string ->
            ?lineno:float -> ?colno:float -> ?error:Error.t_0 -> unit -> any)
      =
      fun (x12434 : 'tags this) ->
        fun ~event:(x12423 : Event.t or_string) ->
          fun ?source:(x12424 : string option) ->
            fun ?lineno:(x12425 : float option) ->
              fun ?colno:(x12426 : float option) ->
                fun ?error:(x12427 : Error.t_0 option) ->
                  fun () ->
                    any_of_js
                      (Ojs.call (this_to_js Obj.magic x12434) "apply"
                         [|Ojs.null;((let x12428 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x12428 "push"
                                           [|(or_string_to_js Event.t_to_js
                                                x12423)|]);
                                      (match x12424 with
                                       | Some x12432 ->
                                           ignore
                                             (Ojs.call x12428 "push"
                                                [|(Ojs.string_to_js x12432)|])
                                       | None -> ());
                                      (match x12425 with
                                       | Some x12431 ->
                                           ignore
                                             (Ojs.call x12428 "push"
                                                [|(Ojs.float_to_js x12431)|])
                                       | None -> ());
                                      (match x12426 with
                                       | Some x12430 ->
                                           ignore
                                             (Ojs.call x12428 "push"
                                                [|(Ojs.float_to_js x12430)|])
                                       | None -> ());
                                      (match x12427 with
                                       | Some x12429 ->
                                           ignore
                                             (Ojs.call x12428 "push"
                                                [|(Error.t_0_to_js x12429)|])
                                       | None -> ());
                                      x12428))|])
    let cast_from = Obj.magic
  end
module OnErrorEventHandler =
  struct
    type t = OnErrorEventHandlerNonNull.t or_null
    let rec t_of_js : Ojs.t -> t =
      fun (x12438 : Ojs.t) ->
        or_null_of_js OnErrorEventHandlerNonNull.t_of_js x12438
    and t_to_js : t -> Ojs.t =
      fun (x12436 : OnErrorEventHandlerNonNull.t or_null) ->
        or_null_to_js OnErrorEventHandlerNonNull.t_to_js x12436
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12441 : Ojs.t) -> t_of_js x12441
    and t_0_to_js : t_0 -> Ojs.t = fun (x12440 : t) -> t_to_js x12440
  end
module OES_fbo_render_mipmap =
  struct
    type t = [ `OES_fbo_render_mipmap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12443 : Ojs.t) -> t_of_js x12443
    and t_0_to_js : t_0 -> Ojs.t = fun (x12442 : t) -> t_to_js x12442
    type tags = [ `OES_fbo_render_mipmap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `OES_fbo_render_mipmap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12446 : Ojs.t) -> intf_of_js __tags_of_js x12446
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12444 : __tags intf) -> intf_to_js __tags_to_js x12444
    let cast_from = Obj.magic
  end
module NotificationEventMap =
  struct
    type t = [ `NotificationEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12449 : Ojs.t) -> t_of_js x12449
    and t_0_to_js : t_0 -> Ojs.t = fun (x12448 : t) -> t_to_js x12448
    type tags = [ `NotificationEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `NotificationEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12452 : Ojs.t) -> intf_of_js __tags_of_js x12452
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12450 : __tags intf) -> intf_to_js __tags_to_js x12450
    let (get_click : 'tags this -> Event.t) =
      fun (x12454 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12454) "click")
    let (set_click : 'tags this -> Event.t -> unit) =
      fun (x12456 : 'tags this) ->
        fun (x12457 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12456) "click"
            (Event.t_to_js x12457)
    let (get_close : 'tags this -> Event.t) =
      fun (x12459 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12459) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x12461 : 'tags this) ->
        fun (x12462 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12461) "close"
            (Event.t_to_js x12462)
    let (get_error : 'tags this -> Event.t) =
      fun (x12464 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12464) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x12466 : 'tags this) ->
        fun (x12467 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12466) "error"
            (Event.t_to_js x12467)
    let (get_show : 'tags this -> Event.t) =
      fun (x12469 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12469) "show")
    let (set_show : 'tags this -> Event.t -> unit) =
      fun (x12471 : 'tags this) ->
        fun (x12472 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12471) "show"
            (Event.t_to_js x12472)
    let cast_from = Obj.magic
  end
module MessagePortEventMap =
  struct
    type t = [ `MessagePortEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12475 : Ojs.t) -> t_of_js x12475
    and t_0_to_js : t_0 -> Ojs.t = fun (x12474 : t) -> t_to_js x12474
    type tags = [ `MessagePortEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessagePortEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12478 : Ojs.t) -> intf_of_js __tags_of_js x12478
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12476 : __tags intf) -> intf_to_js __tags_to_js x12476
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x12480 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12480) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x12482 : 'tags this) ->
        fun (x12483 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12482) "message"
            (MessageEvent.t_0_to_js x12483)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x12485 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12485) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x12487 : 'tags this) ->
        fun (x12488 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12487) "messageerror"
            (MessageEvent.t_0_to_js x12488)
    let cast_from = Obj.magic
  end
module MessageChannel =
  struct
    type t = [ `MessageChannel ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12491 : Ojs.t) -> t_of_js x12491
    and t_0_to_js : t_0 -> Ojs.t = fun (x12490 : t) -> t_to_js x12490
    type tags = [ `MessageChannel ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `MessageChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12494 : Ojs.t) -> intf_of_js __tags_of_js x12494
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12492 : __tags intf) -> intf_to_js __tags_to_js x12492
    let (get_port1 : 'tags this -> MessagePort.t) =
      fun (x12496 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12496) "port1")
    let (get_port2 : 'tags this -> MessagePort.t) =
      fun (x12498 : 'tags this) ->
        MessagePort.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12498) "port2")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "MessageChannel") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "MessageChannel") [||])
  end
module ImportMeta =
  struct
    type t = [ `ImportMeta ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12501 : Ojs.t) -> t_of_js x12501
    and t_0_to_js : t_0 -> Ojs.t = fun (x12500 : t) -> t_to_js x12500
    type tags = [ `ImportMeta ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `ImportMeta ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12504 : Ojs.t) -> intf_of_js __tags_of_js x12504
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12502 : __tags intf) -> intf_to_js __tags_to_js x12502
    let (get_url : 'tags this -> string) =
      fun (x12506 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12506) "url")
    let (set_url : 'tags this -> string -> unit) =
      fun (x12508 : 'tags this) ->
        fun (x12509 : string) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12508) "url"
            (Ojs.string_to_js x12509)
    let cast_from = Obj.magic
  end
module ImageBitmapRenderingContextSettings =
  struct
    type t = [ `ImageBitmapRenderingContextSettings ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12512 : Ojs.t) -> t_of_js x12512
    and t_0_to_js : t_0 -> Ojs.t = fun (x12511 : t) -> t_to_js x12511
    type tags = [ `ImageBitmapRenderingContextSettings ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContextSettings ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12515 : Ojs.t) -> intf_of_js __tags_of_js x12515
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12513 : __tags intf) -> intf_to_js __tags_to_js x12513
    let (get_alpha : 'tags this -> bool) =
      fun (x12517 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12517) "alpha")
    let (set_alpha : 'tags this -> bool -> unit) =
      fun (x12519 : 'tags this) ->
        fun (x12520 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12519) "alpha"
            (Ojs.bool_to_js x12520)
    let cast_from = Obj.magic
  end
module ImageBitmapRenderingContext =
  struct
    type t = [ `ImageBitmapRenderingContext ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12523 : Ojs.t) -> t_of_js x12523
    and t_0_to_js : t_0 -> Ojs.t = fun (x12522 : t) -> t_to_js x12522
    type tags = [ `ImageBitmapRenderingContext ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ImageBitmapRenderingContext ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12526 : Ojs.t) -> intf_of_js __tags_of_js x12526
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12524 : __tags intf) -> intf_to_js __tags_to_js x12524
    let (transferFromImageBitmap :
      'tags this -> bitmap:ImageBitmap.t or_null -> unit) =
      fun (x12530 : 'tags this) ->
        fun ~bitmap:(x12528 : ImageBitmap.t or_null) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x12530) "transferFromImageBitmap"
               [|(or_null_to_js ImageBitmap.t_to_js x12528)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ImageBitmapRenderingContext")
             [||])
  end
module IDBTransactionEventMap =
  struct
    type t = [ `IDBTransactionEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12533 : Ojs.t) -> t_of_js x12533
    and t_0_to_js : t_0 -> Ojs.t = fun (x12532 : t) -> t_to_js x12532
    type tags = [ `IDBTransactionEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBTransactionEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12536 : Ojs.t) -> intf_of_js __tags_of_js x12536
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12534 : __tags intf) -> intf_to_js __tags_to_js x12534
    let (get_abort : 'tags this -> Event.t) =
      fun (x12538 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12538) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x12540 : 'tags this) ->
        fun (x12541 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12540) "abort"
            (Event.t_to_js x12541)
    let (get_complete : 'tags this -> Event.t) =
      fun (x12543 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12543) "complete")
    let (set_complete : 'tags this -> Event.t -> unit) =
      fun (x12545 : 'tags this) ->
        fun (x12546 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12545) "complete"
            (Event.t_to_js x12546)
    let (get_error : 'tags this -> Event.t) =
      fun (x12548 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12548) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x12550 : 'tags this) ->
        fun (x12551 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12550) "error"
            (Event.t_to_js x12551)
    let cast_from = Obj.magic
  end
module IDBRequestEventMap =
  struct
    type t = [ `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12554 : Ojs.t) -> t_of_js x12554
    and t_0_to_js : t_0 -> Ojs.t = fun (x12553 : t) -> t_to_js x12553
    type tags = [ `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12557 : Ojs.t) -> intf_of_js __tags_of_js x12557
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12555 : __tags intf) -> intf_to_js __tags_to_js x12555
    let (get_error : 'tags this -> Event.t) =
      fun (x12559 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12559) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x12561 : 'tags this) ->
        fun (x12562 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12561) "error"
            (Event.t_to_js x12562)
    let (get_success : 'tags this -> Event.t) =
      fun (x12564 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12564) "success")
    let (set_success : 'tags this -> Event.t -> unit) =
      fun (x12566 : 'tags this) ->
        fun (x12567 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12566) "success"
            (Event.t_to_js x12567)
    let cast_from = Obj.magic
  end
module IDBOpenDBRequestEventMap =
  struct
    type t = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12570 : Ojs.t) -> t_of_js x12570
    and t_0_to_js : t_0 -> Ojs.t = fun (x12569 : t) -> t_to_js x12569
    type tags = [ `IDBOpenDBRequestEventMap  | `IDBRequestEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `IDBOpenDBRequestEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12573 : Ojs.t) -> intf_of_js __tags_of_js x12573
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12571 : __tags intf) -> intf_to_js __tags_to_js x12571
    let (get_blocked : 'tags this -> Event.t) =
      fun (x12575 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12575) "blocked")
    let (set_blocked : 'tags this -> Event.t -> unit) =
      fun (x12577 : 'tags this) ->
        fun (x12578 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12577) "blocked"
            (Event.t_to_js x12578)
    let (get_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x12580 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12580) "upgradeneeded")
    let (set_upgradeneeded : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x12582 : 'tags this) ->
        fun (x12583 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12582) "upgradeneeded"
            (IDBVersionChangeEvent.t_to_js x12583)
    let cast_from = Obj.magic
  end
module IDBDatabaseEventMap =
  struct
    type t = [ `IDBDatabaseEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12586 : Ojs.t) -> t_of_js x12586
    and t_0_to_js : t_0 -> Ojs.t = fun (x12585 : t) -> t_to_js x12585
    type tags = [ `IDBDatabaseEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `IDBDatabaseEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12589 : Ojs.t) -> intf_of_js __tags_of_js x12589
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12587 : __tags intf) -> intf_to_js __tags_to_js x12587
    let (get_abort : 'tags this -> Event.t) =
      fun (x12591 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12591) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x12593 : 'tags this) ->
        fun (x12594 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12593) "abort"
            (Event.t_to_js x12594)
    let (get_close : 'tags this -> Event.t) =
      fun (x12596 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12596) "close")
    let (set_close : 'tags this -> Event.t -> unit) =
      fun (x12598 : 'tags this) ->
        fun (x12599 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12598) "close"
            (Event.t_to_js x12599)
    let (get_error : 'tags this -> Event.t) =
      fun (x12601 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12601) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x12603 : 'tags this) ->
        fun (x12604 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12603) "error"
            (Event.t_to_js x12604)
    let (get_versionchange : 'tags this -> IDBVersionChangeEvent.t) =
      fun (x12606 : 'tags this) ->
        IDBVersionChangeEvent.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12606) "versionchange")
    let (set_versionchange : 'tags this -> IDBVersionChangeEvent.t -> unit) =
      fun (x12608 : 'tags this) ->
        fun (x12609 : IDBVersionChangeEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12608) "versionchange"
            (IDBVersionChangeEvent.t_to_js x12609)
    let cast_from = Obj.magic
  end
module FontFaceSetLoadEventInit =
  struct
    type t = [ `EventInit  | `FontFaceSetLoadEventInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12612 : Ojs.t) -> t_of_js x12612
    and t_0_to_js : t_0 -> Ojs.t = fun (x12611 : t) -> t_to_js x12611
    type tags = [ `EventInit  | `FontFaceSetLoadEventInit ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEventInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12615 : Ojs.t) -> intf_of_js __tags_of_js x12615
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12613 : __tags intf) -> intf_to_js __tags_to_js x12613
    let (get_fontfaces : 'tags this -> FontFace.t list) =
      fun (x12617 : 'tags this) ->
        Ojs.list_of_js FontFace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12617) "fontfaces")
    let (set_fontfaces : 'tags this -> FontFace.t list -> unit) =
      fun (x12620 : 'tags this) ->
        fun (x12621 : FontFace.t list) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12620) "fontfaces"
            (Ojs.list_to_js FontFace.t_to_js x12621)
    let cast_from = Obj.magic
  end
module FontFaceSetLoadEvent =
  struct
    type t = [ `Event  | `FontFaceSetLoadEvent ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12625 : Ojs.t) -> t_of_js x12625
    and t_0_to_js : t_0 -> Ojs.t = fun (x12624 : t) -> t_to_js x12624
    type tags = [ `Event  | `FontFaceSetLoadEvent ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FontFaceSetLoadEvent ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12628 : Ojs.t) -> intf_of_js __tags_of_js x12628
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12626 : __tags intf) -> intf_to_js __tags_to_js x12626
    let (get_fontfaces : 'tags this -> FontFace.t list) =
      fun (x12630 : 'tags this) ->
        Ojs.list_of_js FontFace.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12630) "fontfaces")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:FontFaceSetLoadEventInit.t -> unit -> t)
      =
      fun ~type_:(x12633 : string) ->
        fun ?eventInitDict:(x12634 : FontFaceSetLoadEventInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "FontFaceSetLoadEvent")
                 (let x12635 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x12635 "push" [|(Ojs.string_to_js x12633)|]);
                  (match x12634 with
                   | Some x12636 ->
                       ignore
                         (Ojs.call x12635 "push"
                            [|(FontFaceSetLoadEventInit.t_to_js x12636)|])
                   | None -> ());
                  x12635))
  end
module FontFaceSetEventMap =
  struct
    type t = [ `FontFaceSetEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12638 : Ojs.t) -> t_of_js x12638
    and t_0_to_js : t_0 -> Ojs.t = fun (x12637 : t) -> t_to_js x12637
    type tags = [ `FontFaceSetEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FontFaceSetEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12641 : Ojs.t) -> intf_of_js __tags_of_js x12641
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12639 : __tags intf) -> intf_to_js __tags_to_js x12639
    let (get_loading : 'tags this -> Event.t) =
      fun (x12643 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12643) "loading")
    let (set_loading : 'tags this -> Event.t -> unit) =
      fun (x12645 : 'tags this) ->
        fun (x12646 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12645) "loading"
            (Event.t_to_js x12646)
    let (get_loadingdone : 'tags this -> Event.t) =
      fun (x12648 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12648) "loadingdone")
    let (set_loadingdone : 'tags this -> Event.t -> unit) =
      fun (x12650 : 'tags this) ->
        fun (x12651 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12650) "loadingdone"
            (Event.t_to_js x12651)
    let (get_loadingerror : 'tags this -> Event.t) =
      fun (x12653 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12653) "loadingerror")
    let (set_loadingerror : 'tags this -> Event.t -> unit) =
      fun (x12655 : 'tags this) ->
        fun (x12656 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12655) "loadingerror"
            (Event.t_to_js x12656)
    let cast_from = Obj.magic
  end
module FileReaderSync =
  struct
    type t = [ `FileReaderSync ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12659 : Ojs.t) -> t_of_js x12659
    and t_0_to_js : t_0 -> Ojs.t = fun (x12658 : t) -> t_to_js x12658
    type tags = [ `FileReaderSync ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderSync ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12662 : Ojs.t) -> intf_of_js __tags_of_js x12662
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12660 : __tags intf) -> intf_to_js __tags_to_js x12660
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> ArrayBuffer.t_0) =
      fun (x12665 : 'tags this) ->
        fun ~blob:(x12664 : Blob.t) ->
          ArrayBuffer.t_0_of_js
            (Ojs.call (this_to_js Obj.magic x12665) "readAsArrayBuffer"
               [|(Blob.t_to_js x12664)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> string) =
      fun (x12668 : 'tags this) ->
        fun ~blob:(x12667 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x12668) "readAsBinaryString"
               [|(Blob.t_to_js x12667)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> string) =
      fun (x12671 : 'tags this) ->
        fun ~blob:(x12670 : Blob.t) ->
          Ojs.string_of_js
            (Ojs.call (this_to_js Obj.magic x12671) "readAsDataURL"
               [|(Blob.t_to_js x12670)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> string) =
      fun (x12677 : 'tags this) ->
        fun ~blob:(x12673 : Blob.t) ->
          fun ?encoding:(x12674 : string option) ->
            fun () ->
              Ojs.string_of_js
                (let x12679 = this_to_js Obj.magic x12677 in
                 Ojs.call (Ojs.get_prop_ascii x12679 "readAsText") "apply"
                   [|x12679;((let x12675 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12675 "push"
                                   [|(Blob.t_to_js x12673)|]);
                              (match x12674 with
                               | Some x12676 ->
                                   ignore
                                     (Ojs.call x12675 "push"
                                        [|(Ojs.string_to_js x12676)|])
                               | None -> ());
                              x12675))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "FileReaderSync") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReaderSync") [||])
  end
module FileReader =
  struct
    type t = [ `EventTarget  | `FileReader ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12681 : Ojs.t) -> t_of_js x12681
    and t_0_to_js : t_0 -> Ojs.t = fun (x12680 : t) -> t_to_js x12680
    type tags = [ `EventTarget  | `FileReader ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReader ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12684 : Ojs.t) -> intf_of_js __tags_of_js x12684
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12682 : __tags intf) -> intf_to_js __tags_to_js x12682
    let (get_error : 'tags this -> DOMException.t or_null) =
      fun (x12686 : 'tags this) ->
        or_null_of_js DOMException.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12686) "error")
    let (get_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x12689 : 'tags this) ->
        or_null_of_js
          (fun (x12691 : Ojs.t) ->
             fun ~this:(x12692 : t) ->
               fun ~ev:(x12693 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x12691
                      [|(t_to_js x12692);(ProgressEvent.t_to_js t_to_js
                                            x12693)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12689) "onabort")
    let (set_onabort :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x12695 : 'tags this) ->
        fun (x12696 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12695) "onabort"
            (or_null_to_js
               (fun (x12697 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12698 : Ojs.t) ->
                       fun (x12699 : Ojs.t) ->
                         any_to_js
                           (x12697 ~this:(t_of_js x12698)
                              ~ev:(ProgressEvent.t_of_js t_of_js x12699))))
               x12696)
    let (get_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x12702 : 'tags this) ->
        or_null_of_js
          (fun (x12704 : Ojs.t) ->
             fun ~this:(x12705 : t) ->
               fun ~ev:(x12706 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x12704
                      [|(t_to_js x12705);(ProgressEvent.t_to_js t_to_js
                                            x12706)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12702) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x12708 : 'tags this) ->
        fun (x12709 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12708) "onerror"
            (or_null_to_js
               (fun (x12710 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12711 : Ojs.t) ->
                       fun (x12712 : Ojs.t) ->
                         any_to_js
                           (x12710 ~this:(t_of_js x12711)
                              ~ev:(ProgressEvent.t_of_js t_of_js x12712))))
               x12709)
    let (get_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x12715 : 'tags this) ->
        or_null_of_js
          (fun (x12717 : Ojs.t) ->
             fun ~this:(x12718 : t) ->
               fun ~ev:(x12719 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x12717
                      [|(t_to_js x12718);(ProgressEvent.t_to_js t_to_js
                                            x12719)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12715) "onload")
    let (set_onload :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x12721 : 'tags this) ->
        fun (x12722 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12721) "onload"
            (or_null_to_js
               (fun (x12723 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12724 : Ojs.t) ->
                       fun (x12725 : Ojs.t) ->
                         any_to_js
                           (x12723 ~this:(t_of_js x12724)
                              ~ev:(ProgressEvent.t_of_js t_of_js x12725))))
               x12722)
    let (get_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x12728 : 'tags this) ->
        or_null_of_js
          (fun (x12730 : Ojs.t) ->
             fun ~this:(x12731 : t) ->
               fun ~ev:(x12732 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x12730
                      [|(t_to_js x12731);(ProgressEvent.t_to_js t_to_js
                                            x12732)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12728) "onloadend")
    let (set_onloadend :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x12734 : 'tags this) ->
        fun (x12735 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12734) "onloadend"
            (or_null_to_js
               (fun (x12736 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12737 : Ojs.t) ->
                       fun (x12738 : Ojs.t) ->
                         any_to_js
                           (x12736 ~this:(t_of_js x12737)
                              ~ev:(ProgressEvent.t_of_js t_of_js x12738))))
               x12735)
    let (get_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x12741 : 'tags this) ->
        or_null_of_js
          (fun (x12743 : Ojs.t) ->
             fun ~this:(x12744 : t) ->
               fun ~ev:(x12745 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x12743
                      [|(t_to_js x12744);(ProgressEvent.t_to_js t_to_js
                                            x12745)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12741) "onloadstart")
    let (set_onloadstart :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x12747 : 'tags this) ->
        fun (x12748 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12747) "onloadstart"
            (or_null_to_js
               (fun (x12749 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12750 : Ojs.t) ->
                       fun (x12751 : Ojs.t) ->
                         any_to_js
                           (x12749 ~this:(t_of_js x12750)
                              ~ev:(ProgressEvent.t_of_js t_of_js x12751))))
               x12748)
    let (get_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null) =
      fun (x12754 : 'tags this) ->
        or_null_of_js
          (fun (x12756 : Ojs.t) ->
             fun ~this:(x12757 : t) ->
               fun ~ev:(x12758 : t ProgressEvent.t) ->
                 any_of_js
                   (Ojs.apply x12756
                      [|(t_to_js x12757);(ProgressEvent.t_to_js t_to_js
                                            x12758)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12754) "onprogress")
    let (set_onprogress :
      'tags this -> (this:t -> ev:t ProgressEvent.t -> any) or_null -> unit)
      =
      fun (x12760 : 'tags this) ->
        fun (x12761 : (this:t -> ev:t ProgressEvent.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12760) "onprogress"
            (or_null_to_js
               (fun (x12762 : this:t -> ev:t ProgressEvent.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12763 : Ojs.t) ->
                       fun (x12764 : Ojs.t) ->
                         any_to_js
                           (x12762 ~this:(t_of_js x12763)
                              ~ev:(ProgressEvent.t_of_js t_of_js x12764))))
               x12761)
    let (get_readyState : 'tags this -> float) =
      fun (x12767 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12767) "readyState")
    let (get_result : 'tags this -> ArrayBuffer.t_0 or_string or_null) =
      fun (x12769 : 'tags this) ->
        or_null_of_js
          (fun (x12771 : Ojs.t) ->
             or_string_of_js ArrayBuffer.t_0_of_js x12771)
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12769) "result")
    let (abort : 'tags this -> unit) =
      fun (x12773 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x12773) "abort" [||])
    let (readAsArrayBuffer : 'tags this -> blob:Blob.t -> unit) =
      fun (x12776 : 'tags this) ->
        fun ~blob:(x12775 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x12776) "readAsArrayBuffer"
               [|(Blob.t_to_js x12775)|])
    let (readAsBinaryString : 'tags this -> blob:Blob.t -> unit) =
      fun (x12779 : 'tags this) ->
        fun ~blob:(x12778 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x12779) "readAsBinaryString"
               [|(Blob.t_to_js x12778)|])
    let (readAsDataURL : 'tags this -> blob:Blob.t -> unit) =
      fun (x12782 : 'tags this) ->
        fun ~blob:(x12781 : Blob.t) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x12782) "readAsDataURL"
               [|(Blob.t_to_js x12781)|])
    let (readAsText :
      'tags this -> blob:Blob.t -> ?encoding:string -> unit -> unit) =
      fun (x12788 : 'tags this) ->
        fun ~blob:(x12784 : Blob.t) ->
          fun ?encoding:(x12785 : string option) ->
            fun () ->
              ignore
                (let x12790 = this_to_js Obj.magic x12788 in
                 Ojs.call (Ojs.get_prop_ascii x12790 "readAsText") "apply"
                   [|x12790;((let x12786 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x12786 "push"
                                   [|(Blob.t_to_js x12784)|]);
                              (match x12785 with
                               | Some x12787 ->
                                   ignore
                                     (Ojs.call x12786 "push"
                                        [|(Ojs.string_to_js x12787)|])
                               | None -> ());
                              x12786))|])
    let (get_DONE : 'tags this -> float) =
      fun (x12791 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12791) "DONE")
    let (get_EMPTY : 'tags this -> float) =
      fun (x12793 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12793) "EMPTY")
    let (get_LOADING : 'tags this -> float) =
      fun (x12795 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12795) "LOADING")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12805 : 'tags this) ->
        fun ~type_:(x12797 : 'K) ->
          fun ~listener:(x12798 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12799 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12807 = this_to_js Obj.magic x12805 in
                   Ojs.call (Ojs.get_prop_ascii x12807 "addEventListener")
                     "apply"
                     [|x12807;((let x12800 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12800 "push"
                                     [|(Obj.magic x12797)|]);
                                ignore
                                  (Ojs.call x12800 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12803 : Ojs.t) ->
                                             fun (x12804 : Ojs.t) ->
                                               any_to_js
                                                 (x12798
                                                    ~this:(t_of_js x12803)
                                                    ~ev:(any_of_js x12804))))|]);
                                (match x12799 with
                                 | Some x12801 ->
                                     ignore
                                       (Ojs.call x12800 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x12801)|])
                                 | None -> ());
                                x12800))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12814 : 'tags this) ->
        fun ~type_:(x12808 : string) ->
          fun ~listener:(x12809 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x12810 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12816 = this_to_js Obj.magic x12814 in
                   Ojs.call (Ojs.get_prop_ascii x12816 "addEventListener")
                     "apply"
                     [|x12816;((let x12811 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12811 "push"
                                     [|(Ojs.string_to_js x12808)|]);
                                ignore
                                  (Ojs.call x12811 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12809)|]);
                                (match x12810 with
                                 | Some x12812 ->
                                     ignore
                                       (Ojs.call x12811 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x12812)|])
                                 | None -> ());
                                x12811))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12825 : 'tags this) ->
        fun ~type_:(x12817 : 'K) ->
          fun ~listener:(x12818 : this:t -> ev:any -> any) ->
            fun ?options:(x12819 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12827 = this_to_js Obj.magic x12825 in
                   Ojs.call (Ojs.get_prop_ascii x12827 "removeEventListener")
                     "apply"
                     [|x12827;((let x12820 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12820 "push"
                                     [|(Obj.magic x12817)|]);
                                ignore
                                  (Ojs.call x12820 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12823 : Ojs.t) ->
                                             fun (x12824 : Ojs.t) ->
                                               any_to_js
                                                 (x12818
                                                    ~this:(t_of_js x12823)
                                                    ~ev:(any_of_js x12824))))|]);
                                (match x12819 with
                                 | Some x12821 ->
                                     ignore
                                       (Ojs.call x12820 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x12821)|])
                                 | None -> ());
                                x12820))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12834 : 'tags this) ->
        fun ~type_:(x12828 : string) ->
          fun ~listener:(x12829 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x12830 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12836 = this_to_js Obj.magic x12834 in
                   Ojs.call (Ojs.get_prop_ascii x12836 "removeEventListener")
                     "apply"
                     [|x12836;((let x12831 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12831 "push"
                                     [|(Ojs.string_to_js x12828)|]);
                                ignore
                                  (Ojs.call x12831 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x12829)|]);
                                (match x12830 with
                                 | Some x12832 ->
                                     ignore
                                       (Ojs.call x12831 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x12832)|])
                                 | None -> ());
                                x12831))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileReader") [||])
    let (done_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "DONE")
    let (empty : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "EMPTY")
    let (loading : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileReader")
             "LOADING")
  end
module FileReaderEventMap =
  struct
    type t = [ `FileReaderEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12838 : Ojs.t) -> t_of_js x12838
    and t_0_to_js : t_0 -> Ojs.t = fun (x12837 : t) -> t_to_js x12837
    type tags = [ `FileReaderEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileReaderEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12841 : Ojs.t) -> intf_of_js __tags_of_js x12841
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12839 : __tags intf) -> intf_to_js __tags_to_js x12839
    let (get_abort : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x12843 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12843) "abort")
    let (set_abort : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x12846 : 'tags this) ->
        fun (x12847 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12846) "abort"
            (ProgressEvent.t_to_js FileReader.t_to_js x12847)
    let (get_error : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x12850 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12850) "error")
    let (set_error : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x12853 : 'tags this) ->
        fun (x12854 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12853) "error"
            (ProgressEvent.t_to_js FileReader.t_to_js x12854)
    let (get_load : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x12857 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12857) "load")
    let (set_load : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x12860 : 'tags this) ->
        fun (x12861 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12860) "load"
            (ProgressEvent.t_to_js FileReader.t_to_js x12861)
    let (get_loadend : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x12864 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12864) "loadend")
    let (set_loadend : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x12867 : 'tags this) ->
        fun (x12868 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12867) "loadend"
            (ProgressEvent.t_to_js FileReader.t_to_js x12868)
    let (get_loadstart : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x12871 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12871) "loadstart")
    let (set_loadstart : 'tags this -> FileReader.t ProgressEvent.t -> unit)
      =
      fun (x12874 : 'tags this) ->
        fun (x12875 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12874) "loadstart"
            (ProgressEvent.t_to_js FileReader.t_to_js x12875)
    let (get_progress : 'tags this -> FileReader.t ProgressEvent.t) =
      fun (x12878 : 'tags this) ->
        ProgressEvent.t_of_js FileReader.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12878) "progress")
    let (set_progress : 'tags this -> FileReader.t ProgressEvent.t -> unit) =
      fun (x12881 : 'tags this) ->
        fun (x12882 : FileReader.t ProgressEvent.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12881) "progress"
            (ProgressEvent.t_to_js FileReader.t_to_js x12882)
    let cast_from = Obj.magic
  end
module FileList =
  struct
    type t =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12886 : Ojs.t) -> t_of_js x12886
    and t_0_to_js : t_0 -> Ojs.t = fun (x12885 : t) -> t_to_js x12885
    type tags =
      [ `FileList  | File.t ArrayLike.tags_1
      | File.t IterableIterator.tags_1]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `FileList ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12889 : Ojs.t) -> intf_of_js __tags_of_js x12889
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12887 : __tags intf) -> intf_to_js __tags_to_js x12887
    let (get_length : 'tags this -> float) =
      fun (x12891 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12891) "length")
    let (item : 'tags this -> index:float -> File.t or_null) =
      fun (x12894 : 'tags this) ->
        fun ~index:(x12893 : float) ->
          or_null_of_js File.t_of_js
            (Ojs.call (this_to_js Obj.magic x12894) "item"
               [|(Ojs.float_to_js x12893)|])
    let (get : 'tags this -> float -> File.t) =
      fun (x12897 : 'tags this) ->
        fun (x12899 : float) ->
          File.t_of_js
            (Ojs.get_prop (this_to_js Obj.magic x12897)
               (Ojs.float_to_js x12899))
    let (set : 'tags this -> float -> File.t -> unit) =
      fun (x12900 : 'tags this) ->
        fun (x12902 : float) ->
          fun (x12903 : File.t) ->
            Ojs.set_prop (this_to_js Obj.magic x12900)
              (Ojs.float_to_js x12902) (File.t_to_js x12903)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "FileList")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "FileList") [||])
  end
module EventSourceEventMap =
  struct
    type t = [ `EventSourceEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12905 : Ojs.t) -> t_of_js x12905
    and t_0_to_js : t_0 -> Ojs.t = fun (x12904 : t) -> t_to_js x12904
    type tags = [ `EventSourceEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12908 : Ojs.t) -> intf_of_js __tags_of_js x12908
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12906 : __tags intf) -> intf_to_js __tags_to_js x12906
    let (get_error : 'tags this -> Event.t) =
      fun (x12910 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12910) "error")
    let (set_error : 'tags this -> Event.t -> unit) =
      fun (x12912 : 'tags this) ->
        fun (x12913 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12912) "error"
            (Event.t_to_js x12913)
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x12915 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12915) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x12917 : 'tags this) ->
        fun (x12918 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12917) "message"
            (MessageEvent.t_0_to_js x12918)
    let (get_open : 'tags this -> Event.t) =
      fun (x12920 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12920) "open")
    let (set_open : 'tags this -> Event.t -> unit) =
      fun (x12922 : 'tags this) ->
        fun (x12923 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12922) "open"
            (Event.t_to_js x12923)
    let cast_from = Obj.magic
  end
module EventSourceInit =
  struct
    type t = [ `EventSourceInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12926 : Ojs.t) -> t_of_js x12926
    and t_0_to_js : t_0 -> Ojs.t = fun (x12925 : t) -> t_to_js x12925
    type tags = [ `EventSourceInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSourceInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12929 : Ojs.t) -> intf_of_js __tags_of_js x12929
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12927 : __tags intf) -> intf_to_js __tags_to_js x12927
    let (get_withCredentials : 'tags this -> bool) =
      fun (x12931 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12931) "withCredentials")
    let (set_withCredentials : 'tags this -> bool -> unit) =
      fun (x12933 : 'tags this) ->
        fun (x12934 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12933) "withCredentials"
            (Ojs.bool_to_js x12934)
    let cast_from = Obj.magic
  end
module EventSource =
  struct
    type t = [ `EventSource  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x12937 : Ojs.t) -> t_of_js x12937
    and t_0_to_js : t_0 -> Ojs.t = fun (x12936 : t) -> t_to_js x12936
    type tags = [ `EventSource  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `EventSource ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x12940 : Ojs.t) -> intf_of_js __tags_of_js x12940
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x12938 : __tags intf) -> intf_to_js __tags_to_js x12938
    let (get_onerror : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x12942 : 'tags this) ->
        or_null_of_js
          (fun (x12944 : Ojs.t) ->
             fun ~this:(x12945 : t) ->
               fun ~ev:(x12946 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12944
                      [|(t_to_js x12945);(Event.t_to_js x12946)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12942) "onerror")
    let (set_onerror :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x12947 : 'tags this) ->
        fun (x12948 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12947) "onerror"
            (or_null_to_js
               (fun (x12949 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12950 : Ojs.t) ->
                       fun (x12951 : Ojs.t) ->
                         any_to_js
                           (x12949 ~this:(t_of_js x12950)
                              ~ev:(Event.t_of_js x12951)))) x12948)
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x12953 : 'tags this) ->
        or_null_of_js
          (fun (x12955 : Ojs.t) ->
             fun ~this:(x12956 : t) ->
               fun ~ev:(x12957 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x12955
                      [|(t_to_js x12956);(MessageEvent.t_0_to_js x12957)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12953) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x12958 : 'tags this) ->
        fun (x12959 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12958) "onmessage"
            (or_null_to_js
               (fun (x12960 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12961 : Ojs.t) ->
                       fun (x12962 : Ojs.t) ->
                         any_to_js
                           (x12960 ~this:(t_of_js x12961)
                              ~ev:(MessageEvent.t_0_of_js x12962)))) x12959)
    let (get_onopen : 'tags this -> (this:t -> ev:Event.t -> any) or_null) =
      fun (x12964 : 'tags this) ->
        or_null_of_js
          (fun (x12966 : Ojs.t) ->
             fun ~this:(x12967 : t) ->
               fun ~ev:(x12968 : Event.t) ->
                 any_of_js
                   (Ojs.apply x12966
                      [|(t_to_js x12967);(Event.t_to_js x12968)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12964) "onopen")
    let (set_onopen :
      'tags this -> (this:t -> ev:Event.t -> any) or_null -> unit) =
      fun (x12969 : 'tags this) ->
        fun (x12970 : (this:t -> ev:Event.t -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x12969) "onopen"
            (or_null_to_js
               (fun (x12971 : this:t -> ev:Event.t -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x12972 : Ojs.t) ->
                       fun (x12973 : Ojs.t) ->
                         any_to_js
                           (x12971 ~this:(t_of_js x12972)
                              ~ev:(Event.t_of_js x12973)))) x12970)
    let (get_readyState : 'tags this -> float) =
      fun (x12975 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12975) "readyState")
    let (get_url : 'tags this -> string) =
      fun (x12977 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12977) "url")
    let (get_withCredentials : 'tags this -> bool) =
      fun (x12979 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12979) "withCredentials")
    let (close : 'tags this -> unit) =
      fun (x12981 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x12981) "close" [||])
    let (get_CLOSED : 'tags this -> float) =
      fun (x12983 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12983) "CLOSED")
    let (get_CONNECTING : 'tags this -> float) =
      fun (x12985 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12985) "CONNECTING")
    let (get_OPEN : 'tags this -> float) =
      fun (x12987 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x12987) "OPEN")
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x12997 : 'tags this) ->
        fun ~type_:(x12989 : 'K) ->
          fun ~listener:(x12990 : this:t -> ev:any -> any) ->
            fun
              ?options:(x12991 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x12999 = this_to_js Obj.magic x12997 in
                   Ojs.call (Ojs.get_prop_ascii x12999 "addEventListener")
                     "apply"
                     [|x12999;((let x12992 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x12992 "push"
                                     [|(Obj.magic x12989)|]);
                                ignore
                                  (Ojs.call x12992 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x12995 : Ojs.t) ->
                                             fun (x12996 : Ojs.t) ->
                                               any_to_js
                                                 (x12990
                                                    ~this:(t_of_js x12995)
                                                    ~ev:(any_of_js x12996))))|]);
                                (match x12991 with
                                 | Some x12993 ->
                                     ignore
                                       (Ojs.call x12992 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x12993)|])
                                 | None -> ());
                                x12992))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13006 : 'tags this) ->
        fun ~type_:(x13000 : string) ->
          fun ~listener:(x13001 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13002 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13008 = this_to_js Obj.magic x13006 in
                   Ojs.call (Ojs.get_prop_ascii x13008 "addEventListener")
                     "apply"
                     [|x13008;((let x13003 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13003 "push"
                                     [|(Ojs.string_to_js x13000)|]);
                                ignore
                                  (Ojs.call x13003 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13001)|]);
                                (match x13002 with
                                 | Some x13004 ->
                                     ignore
                                       (Ojs.call x13003 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x13004)|])
                                 | None -> ());
                                x13003))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13017 : 'tags this) ->
        fun ~type_:(x13009 : 'K) ->
          fun ~listener:(x13010 : this:t -> ev:any -> any) ->
            fun ?options:(x13011 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13019 = this_to_js Obj.magic x13017 in
                   Ojs.call (Ojs.get_prop_ascii x13019 "removeEventListener")
                     "apply"
                     [|x13019;((let x13012 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13012 "push"
                                     [|(Obj.magic x13009)|]);
                                ignore
                                  (Ojs.call x13012 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13015 : Ojs.t) ->
                                             fun (x13016 : Ojs.t) ->
                                               any_to_js
                                                 (x13010
                                                    ~this:(t_of_js x13015)
                                                    ~ev:(any_of_js x13016))))|]);
                                (match x13011 with
                                 | Some x13013 ->
                                     ignore
                                       (Ojs.call x13012 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x13013)|])
                                 | None -> ());
                                x13012))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13026 : 'tags this) ->
        fun ~type_:(x13020 : string) ->
          fun ~listener:(x13021 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x13022 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13028 = this_to_js Obj.magic x13026 in
                   Ojs.call (Ojs.get_prop_ascii x13028 "removeEventListener")
                     "apply"
                     [|x13028;((let x13023 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13023 "push"
                                     [|(Ojs.string_to_js x13020)|]);
                                ignore
                                  (Ojs.call x13023 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13021)|]);
                                (match x13022 with
                                 | Some x13024 ->
                                     ignore
                                       (Ojs.call x13023 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x13024)|])
                                 | None -> ());
                                x13023))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "prototype")
    let (create :
      url:URL.t or_string ->
        ?eventSourceInitDict:EventSourceInit.t -> unit -> t)
      =
      fun ~url:(x13029 : URL.t or_string) ->
        fun ?eventSourceInitDict:(x13030 : EventSourceInit.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "EventSource")
                 (let x13031 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x13031 "push"
                       [|(or_string_to_js URL.t_to_js x13029)|]);
                  (match x13030 with
                   | Some x13032 ->
                       ignore
                         (Ojs.call x13031 "push"
                            [|(EventSourceInit.t_to_js x13032)|])
                   | None -> ());
                  x13031))
    let (closed : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CLOSED")
    let (connecting : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "CONNECTING")
    let (open_ : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "EventSource")
             "OPEN")
  end
module EXT_texture_compression_rgtc =
  struct
    type t = [ `EXT_texture_compression_rgtc ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13035 : Ojs.t) -> t_of_js x13035
    and t_0_to_js : t_0 -> Ojs.t = fun (x13034 : t) -> t_to_js x13034
    type tags = [ `EXT_texture_compression_rgtc ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `EXT_texture_compression_rgtc ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13038 : Ojs.t) -> intf_of_js __tags_of_js x13038
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13036 : __tags intf) -> intf_to_js __tags_to_js x13036
    let (get_COMPRESSED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t) =
      fun (x13040 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13040)
             "COMPRESSED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x13042 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13042)
             "COMPRESSED_RED_RGTC1_EXT")
    let (get_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT : 'tags this -> GLenum.t)
      =
      fun (x13044 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13044)
             "COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT")
    let (get_COMPRESSED_SIGNED_RED_RGTC1_EXT : 'tags this -> GLenum.t) =
      fun (x13046 : 'tags this) ->
        GLenum.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13046)
             "COMPRESSED_SIGNED_RED_RGTC1_EXT")
    let cast_from = Obj.magic
  end
module DedicatedWorkerGlobalScopeEventMap =
  struct
    type t =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
        intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13049 : Ojs.t) -> t_of_js x13049
    and t_0_to_js : t_0 -> Ojs.t = fun (x13048 : t) -> t_to_js x13048
    type tags =
      [ `DedicatedWorkerGlobalScopeEventMap  | `WorkerGlobalScopeEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScopeEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13052 : Ojs.t) -> intf_of_js __tags_of_js x13052
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13050 : __tags intf) -> intf_to_js __tags_to_js x13050
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x13054 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13054) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13056 : 'tags this) ->
        fun (x13057 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13056) "message"
            (MessageEvent.t_0_to_js x13057)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x13059 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13059) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x13061 : 'tags this) ->
        fun (x13062 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13061) "messageerror"
            (MessageEvent.t_0_to_js x13062)
    let cast_from = Obj.magic
  end
module FrameRequestCallback =
  struct
    type t = [ `FrameRequestCallback ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13065 : Ojs.t) -> t_of_js x13065
    and t_0_to_js : t_0 -> Ojs.t = fun (x13064 : t) -> t_to_js x13064
    type tags = [ `FrameRequestCallback ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `FrameRequestCallback ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13068 : Ojs.t) -> intf_of_js __tags_of_js x13068
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13066 : __tags intf) -> intf_to_js __tags_to_js x13066
    let (apply : 'tags this -> time:DOMHighResTimeStamp.t -> unit) =
      fun (x13071 : 'tags this) ->
        fun ~time:(x13070 : DOMHighResTimeStamp.t) ->
          ignore
            (Ojs.apply (this_to_js Obj.magic x13071)
               [|(DOMHighResTimeStamp.t_to_js x13070)|])
    let cast_from = Obj.magic
  end
module AnimationFrameProvider =
  struct
    type t = [ `AnimationFrameProvider ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13074 : Ojs.t) -> t_of_js x13074
    and t_0_to_js : t_0 -> Ojs.t = fun (x13073 : t) -> t_to_js x13073
    type tags = [ `AnimationFrameProvider ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `AnimationFrameProvider ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13077 : Ojs.t) -> intf_of_js __tags_of_js x13077
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13075 : __tags intf) -> intf_to_js __tags_to_js x13075
    let (cancelAnimationFrame : 'tags this -> handle:float -> unit) =
      fun (x13080 : 'tags this) ->
        fun ~handle:(x13079 : float) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x13080) "cancelAnimationFrame"
               [|(Ojs.float_to_js x13079)|])
    let (requestAnimationFrame :
      'tags this -> callback:FrameRequestCallback.t -> float) =
      fun (x13083 : 'tags this) ->
        fun ~callback:(x13082 : FrameRequestCallback.t) ->
          Ojs.float_of_js
            (Ojs.call (this_to_js Obj.magic x13083) "requestAnimationFrame"
               [|(FrameRequestCallback.t_to_js x13082)|])
    let cast_from = Obj.magic
  end
module DedicatedWorkerGlobalScope =
  struct
    type t =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13086 : Ojs.t) -> t_of_js x13086
    and t_0_to_js : t_0 -> Ojs.t = fun (x13085 : t) -> t_to_js x13085
    type tags =
      [ `AnimationFrameProvider  | `DedicatedWorkerGlobalScope 
      | `EventTarget  | `FontFaceSource  | `WindowOrWorkerGlobalScope 
      | `WorkerGlobalScope ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `DedicatedWorkerGlobalScope ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13089 : Ojs.t) -> intf_of_js __tags_of_js x13089
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13087 : __tags intf) -> intf_to_js __tags_to_js x13087
    let (get_name : 'tags this -> string) =
      fun (x13091 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13091) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x13093 : 'tags this) ->
        or_null_of_js
          (fun (x13095 : Ojs.t) ->
             fun ~this:(x13096 : t) ->
               fun ~ev:(x13097 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x13095
                      [|(t_to_js x13096);(MessageEvent.t_0_to_js x13097)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13093) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x13098 : 'tags this) ->
        fun (x13099 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13098) "onmessage"
            (or_null_to_js
               (fun (x13100 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13101 : Ojs.t) ->
                       fun (x13102 : Ojs.t) ->
                         any_to_js
                           (x13100 ~this:(t_of_js x13101)
                              ~ev:(MessageEvent.t_0_of_js x13102)))) x13099)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x13104 : 'tags this) ->
        or_null_of_js
          (fun (x13106 : Ojs.t) ->
             fun ~this:(x13107 : t) ->
               fun ~ev:(x13108 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x13106
                      [|(t_to_js x13107);(MessageEvent.t_0_to_js x13108)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13104) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x13109 : 'tags this) ->
        fun (x13110 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13109) "onmessageerror"
            (or_null_to_js
               (fun (x13111 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x13112 : Ojs.t) ->
                       fun (x13113 : Ojs.t) ->
                         any_to_js
                           (x13111 ~this:(t_of_js x13112)
                              ~ev:(MessageEvent.t_0_of_js x13113)))) x13110)
    let (close : 'tags this -> unit) =
      fun (x13115 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13115) "close" [||])
    let (postMessage :
      'tags this -> message:any -> transfer:Transferable.t list -> unit) =
      fun (x13120 : 'tags this) ->
        fun ~message:(x13117 : any) ->
          fun ~transfer:(x13118 : Transferable.t list) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x13120) "postMessage"
                 [|(any_to_js x13117);(Ojs.list_to_js Transferable.t_to_js
                                         x13118)|])
    let (postMessage' :
      'tags this ->
        message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit)
      =
      fun (x13126 : 'tags this) ->
        fun ~message:(x13122 : any) ->
          fun ?options:(x13123 : StructuredSerializeOptions.t option) ->
            fun () ->
              ignore
                (let x13128 = this_to_js Obj.magic x13126 in
                 Ojs.call (Ojs.get_prop_ascii x13128 "postMessage") "apply"
                   [|x13128;((let x13124 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x13124 "push"
                                   [|(any_to_js x13122)|]);
                              (match x13123 with
                               | Some x13125 ->
                                   ignore
                                     (Ojs.call x13124 "push"
                                        [|(StructuredSerializeOptions.t_to_js
                                             x13125)|])
                               | None -> ());
                              x13124))|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13137 : 'tags this) ->
        fun ~type_:(x13129 : 'K) ->
          fun ~listener:(x13130 : this:t -> ev:any -> any) ->
            fun
              ?options:(x13131 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13139 = this_to_js Obj.magic x13137 in
                   Ojs.call (Ojs.get_prop_ascii x13139 "addEventListener")
                     "apply"
                     [|x13139;((let x13132 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13132 "push"
                                     [|(Obj.magic x13129)|]);
                                ignore
                                  (Ojs.call x13132 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13135 : Ojs.t) ->
                                             fun (x13136 : Ojs.t) ->
                                               any_to_js
                                                 (x13130
                                                    ~this:(t_of_js x13135)
                                                    ~ev:(any_of_js x13136))))|]);
                                (match x13131 with
                                 | Some x13133 ->
                                     ignore
                                       (Ojs.call x13132 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x13133)|])
                                 | None -> ());
                                x13132))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13146 : 'tags this) ->
        fun ~type_:(x13140 : string) ->
          fun ~listener:(x13141 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x13142 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13148 = this_to_js Obj.magic x13146 in
                   Ojs.call (Ojs.get_prop_ascii x13148 "addEventListener")
                     "apply"
                     [|x13148;((let x13143 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13143 "push"
                                     [|(Ojs.string_to_js x13140)|]);
                                ignore
                                  (Ojs.call x13143 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13141)|]);
                                (match x13142 with
                                 | Some x13144 ->
                                     ignore
                                       (Ojs.call x13143 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x13144)|])
                                 | None -> ());
                                x13143))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13157 : 'tags this) ->
        fun ~type_:(x13149 : 'K) ->
          fun ~listener:(x13150 : this:t -> ev:any -> any) ->
            fun ?options:(x13151 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13159 = this_to_js Obj.magic x13157 in
                   Ojs.call (Ojs.get_prop_ascii x13159 "removeEventListener")
                     "apply"
                     [|x13159;((let x13152 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13152 "push"
                                     [|(Obj.magic x13149)|]);
                                ignore
                                  (Ojs.call x13152 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x13155 : Ojs.t) ->
                                             fun (x13156 : Ojs.t) ->
                                               any_to_js
                                                 (x13150
                                                    ~this:(t_of_js x13155)
                                                    ~ev:(any_of_js x13156))))|]);
                                (match x13151 with
                                 | Some x13153 ->
                                     ignore
                                       (Ojs.call x13152 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x13153)|])
                                 | None -> ());
                                x13152))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x13166 : 'tags this) ->
        fun ~type_:(x13160 : string) ->
          fun ~listener:(x13161 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x13162 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x13168 = this_to_js Obj.magic x13166 in
                   Ojs.call (Ojs.get_prop_ascii x13168 "removeEventListener")
                     "apply"
                     [|x13168;((let x13163 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x13163 "push"
                                     [|(Ojs.string_to_js x13160)|]);
                                ignore
                                  (Ojs.call x13163 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x13161)|]);
                                (match x13162 with
                                 | Some x13164 ->
                                     ignore
                                       (Ojs.call x13163 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x13164)|])
                                 | None -> ());
                                x13163))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "DedicatedWorkerGlobalScope")
             [||])
  end
module DOMRectInit =
  struct
    type t = [ `DOMRectInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13170 : Ojs.t) -> t_of_js x13170
    and t_0_to_js : t_0 -> Ojs.t = fun (x13169 : t) -> t_to_js x13169
    type tags = [ `DOMRectInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13173 : Ojs.t) -> intf_of_js __tags_of_js x13173
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13171 : __tags intf) -> intf_to_js __tags_to_js x13171
    let (get_height : 'tags this -> float) =
      fun (x13175 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13175) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x13177 : 'tags this) ->
        fun (x13178 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13177) "height"
            (Ojs.float_to_js x13178)
    let (get_width : 'tags this -> float) =
      fun (x13180 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13180) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x13182 : 'tags this) ->
        fun (x13183 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13182) "width"
            (Ojs.float_to_js x13183)
    let (get_x : 'tags this -> float) =
      fun (x13185 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13185) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x13187 : 'tags this) ->
        fun (x13188 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13187) "x"
            (Ojs.float_to_js x13188)
    let (get_y : 'tags this -> float) =
      fun (x13190 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13190) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x13192 : 'tags this) ->
        fun (x13193 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13192) "y"
            (Ojs.float_to_js x13193)
    let cast_from = Obj.magic
  end
module DOMRectReadOnly =
  struct
    type t = [ `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13196 : Ojs.t) -> t_of_js x13196
    and t_0_to_js : t_0 -> Ojs.t = fun (x13195 : t) -> t_to_js x13195
    type tags = [ `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRectReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13199 : Ojs.t) -> intf_of_js __tags_of_js x13199
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13197 : __tags intf) -> intf_to_js __tags_to_js x13197
    let (get_bottom : 'tags this -> float) =
      fun (x13201 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13201) "bottom")
    let (get_height : 'tags this -> float) =
      fun (x13203 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13203) "height")
    let (get_left : 'tags this -> float) =
      fun (x13205 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13205) "left")
    let (get_right : 'tags this -> float) =
      fun (x13207 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13207) "right")
    let (get_top : 'tags this -> float) =
      fun (x13209 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13209) "top")
    let (get_width : 'tags this -> float) =
      fun (x13211 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13211) "width")
    let (get_x : 'tags this -> float) =
      fun (x13213 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13213) "x")
    let (get_y : 'tags this -> float) =
      fun (x13215 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13215) "y")
    let (toJSON : 'tags this -> any) =
      fun (x13217 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x13217) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly") "prototype")
    let (create :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x13219 : float option) ->
        fun ?y:(x13220 : float option) ->
          fun ?width:(x13221 : float option) ->
            fun ?height:(x13222 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly")
                     (let x13223 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x13219 with
                       | Some x13227 ->
                           ignore
                             (Ojs.call x13223 "push"
                                [|(Ojs.float_to_js x13227)|])
                       | None -> ());
                      (match x13220 with
                       | Some x13226 ->
                           ignore
                             (Ojs.call x13223 "push"
                                [|(Ojs.float_to_js x13226)|])
                       | None -> ());
                      (match x13221 with
                       | Some x13225 ->
                           ignore
                             (Ojs.call x13223 "push"
                                [|(Ojs.float_to_js x13225)|])
                       | None -> ());
                      (match x13222 with
                       | Some x13224 ->
                           ignore
                             (Ojs.call x13223 "push"
                                [|(Ojs.float_to_js x13224)|])
                       | None -> ());
                      x13223))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x13228 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x13231 = Ojs.get_prop_ascii Ojs.global "DOMRectReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x13231 "fromRect") "apply"
               [|x13231;((let x13229 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x13228 with
                           | Some x13230 ->
                               ignore
                                 (Ojs.call x13229 "push"
                                    [|(DOMRectInit.t_to_js x13230)|])
                           | None -> ());
                          x13229))|])
  end
module DOMRect =
  struct
    type t = [ `DOMRect  | `DOMRectReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13233 : Ojs.t) -> t_of_js x13233
    and t_0_to_js : t_0 -> Ojs.t = fun (x13232 : t) -> t_to_js x13232
    type tags = [ `DOMRect  | `DOMRectReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMRect ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13236 : Ojs.t) -> intf_of_js __tags_of_js x13236
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13234 : __tags intf) -> intf_to_js __tags_to_js x13234
    let (get_height : 'tags this -> float) =
      fun (x13238 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13238) "height")
    let (set_height : 'tags this -> float -> unit) =
      fun (x13240 : 'tags this) ->
        fun (x13241 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13240) "height"
            (Ojs.float_to_js x13241)
    let (get_width : 'tags this -> float) =
      fun (x13243 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13243) "width")
    let (set_width : 'tags this -> float -> unit) =
      fun (x13245 : 'tags this) ->
        fun (x13246 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13245) "width"
            (Ojs.float_to_js x13246)
    let (get_x : 'tags this -> float) =
      fun (x13248 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13248) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x13250 : 'tags this) ->
        fun (x13251 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13250) "x"
            (Ojs.float_to_js x13251)
    let (get_y : 'tags this -> float) =
      fun (x13253 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13253) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x13255 : 'tags this) ->
        fun (x13256 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13255) "y"
            (Ojs.float_to_js x13256)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMRect")
             "prototype")
    let (create :
      ?x:float -> ?y:float -> ?width:float -> ?height:float -> unit -> t) =
      fun ?x:(x13258 : float option) ->
        fun ?y:(x13259 : float option) ->
          fun ?width:(x13260 : float option) ->
            fun ?height:(x13261 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMRect")
                     (let x13262 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x13258 with
                       | Some x13266 ->
                           ignore
                             (Ojs.call x13262 "push"
                                [|(Ojs.float_to_js x13266)|])
                       | None -> ());
                      (match x13259 with
                       | Some x13265 ->
                           ignore
                             (Ojs.call x13262 "push"
                                [|(Ojs.float_to_js x13265)|])
                       | None -> ());
                      (match x13260 with
                       | Some x13264 ->
                           ignore
                             (Ojs.call x13262 "push"
                                [|(Ojs.float_to_js x13264)|])
                       | None -> ());
                      (match x13261 with
                       | Some x13263 ->
                           ignore
                             (Ojs.call x13262 "push"
                                [|(Ojs.float_to_js x13263)|])
                       | None -> ());
                      x13262))
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x13267 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x13270 = Ojs.get_prop_ascii Ojs.global "DOMRect" in
             Ojs.call (Ojs.get_prop_ascii x13270 "fromRect") "apply"
               [|x13270;((let x13268 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x13267 with
                           | Some x13269 ->
                               ignore
                                 (Ojs.call x13268 "push"
                                    [|(DOMRectInit.t_to_js x13269)|])
                           | None -> ());
                          x13268))|])
  end
module DOMPointInit =
  struct
    type t = [ `DOMPointInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13272 : Ojs.t) -> t_of_js x13272
    and t_0_to_js : t_0 -> Ojs.t = fun (x13271 : t) -> t_to_js x13271
    type tags = [ `DOMPointInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPointInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13275 : Ojs.t) -> intf_of_js __tags_of_js x13275
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13273 : __tags intf) -> intf_to_js __tags_to_js x13273
    let (get_w : 'tags this -> float) =
      fun (x13277 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13277) "w")
    let (set_w : 'tags this -> float -> unit) =
      fun (x13279 : 'tags this) ->
        fun (x13280 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13279) "w"
            (Ojs.float_to_js x13280)
    let (get_x : 'tags this -> float) =
      fun (x13282 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13282) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x13284 : 'tags this) ->
        fun (x13285 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13284) "x"
            (Ojs.float_to_js x13285)
    let (get_y : 'tags this -> float) =
      fun (x13287 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13287) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x13289 : 'tags this) ->
        fun (x13290 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13289) "y"
            (Ojs.float_to_js x13290)
    let (get_z : 'tags this -> float) =
      fun (x13292 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13292) "z")
    let (set_z : 'tags this -> float -> unit) =
      fun (x13294 : 'tags this) ->
        fun (x13295 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13294) "z"
            (Ojs.float_to_js x13295)
    let cast_from = Obj.magic
  end
module DOMQuadInit =
  struct
    type t = [ `DOMQuadInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13298 : Ojs.t) -> t_of_js x13298
    and t_0_to_js : t_0 -> Ojs.t = fun (x13297 : t) -> t_to_js x13297
    type tags = [ `DOMQuadInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuadInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13301 : Ojs.t) -> intf_of_js __tags_of_js x13301
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13299 : __tags intf) -> intf_to_js __tags_to_js x13299
    let (get_p1 : 'tags this -> DOMPointInit.t) =
      fun (x13303 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13303) "p1")
    let (set_p1 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x13305 : 'tags this) ->
        fun (x13306 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13305) "p1"
            (DOMPointInit.t_to_js x13306)
    let (get_p2 : 'tags this -> DOMPointInit.t) =
      fun (x13308 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13308) "p2")
    let (set_p2 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x13310 : 'tags this) ->
        fun (x13311 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13310) "p2"
            (DOMPointInit.t_to_js x13311)
    let (get_p3 : 'tags this -> DOMPointInit.t) =
      fun (x13313 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13313) "p3")
    let (set_p3 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x13315 : 'tags this) ->
        fun (x13316 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13315) "p3"
            (DOMPointInit.t_to_js x13316)
    let (get_p4 : 'tags this -> DOMPointInit.t) =
      fun (x13318 : 'tags this) ->
        DOMPointInit.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13318) "p4")
    let (set_p4 : 'tags this -> DOMPointInit.t -> unit) =
      fun (x13320 : 'tags this) ->
        fun (x13321 : DOMPointInit.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13320) "p4"
            (DOMPointInit.t_to_js x13321)
    let cast_from = Obj.magic
  end
module DOMMatrixInit =
  struct
    type t = [ `DOMMatrix2DInit  | `DOMMatrixInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13324 : Ojs.t) -> t_of_js x13324
    and t_0_to_js : t_0 -> Ojs.t = fun (x13323 : t) -> t_to_js x13323
    type tags = [ `DOMMatrix2DInit  | `DOMMatrixInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13327 : Ojs.t) -> intf_of_js __tags_of_js x13327
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13325 : __tags intf) -> intf_to_js __tags_to_js x13325
    let (get_is2D : 'tags this -> bool) =
      fun (x13329 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13329) "is2D")
    let (set_is2D : 'tags this -> bool -> unit) =
      fun (x13331 : 'tags this) ->
        fun (x13332 : bool) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13331) "is2D"
            (Ojs.bool_to_js x13332)
    let (get_m13 : 'tags this -> float) =
      fun (x13334 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13334) "m13")
    let (set_m13 : 'tags this -> float -> unit) =
      fun (x13336 : 'tags this) ->
        fun (x13337 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13336) "m13"
            (Ojs.float_to_js x13337)
    let (get_m14 : 'tags this -> float) =
      fun (x13339 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13339) "m14")
    let (set_m14 : 'tags this -> float -> unit) =
      fun (x13341 : 'tags this) ->
        fun (x13342 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13341) "m14"
            (Ojs.float_to_js x13342)
    let (get_m23 : 'tags this -> float) =
      fun (x13344 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13344) "m23")
    let (set_m23 : 'tags this -> float -> unit) =
      fun (x13346 : 'tags this) ->
        fun (x13347 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13346) "m23"
            (Ojs.float_to_js x13347)
    let (get_m24 : 'tags this -> float) =
      fun (x13349 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13349) "m24")
    let (set_m24 : 'tags this -> float -> unit) =
      fun (x13351 : 'tags this) ->
        fun (x13352 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13351) "m24"
            (Ojs.float_to_js x13352)
    let (get_m31 : 'tags this -> float) =
      fun (x13354 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13354) "m31")
    let (set_m31 : 'tags this -> float -> unit) =
      fun (x13356 : 'tags this) ->
        fun (x13357 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13356) "m31"
            (Ojs.float_to_js x13357)
    let (get_m32 : 'tags this -> float) =
      fun (x13359 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13359) "m32")
    let (set_m32 : 'tags this -> float -> unit) =
      fun (x13361 : 'tags this) ->
        fun (x13362 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13361) "m32"
            (Ojs.float_to_js x13362)
    let (get_m33 : 'tags this -> float) =
      fun (x13364 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13364) "m33")
    let (set_m33 : 'tags this -> float -> unit) =
      fun (x13366 : 'tags this) ->
        fun (x13367 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13366) "m33"
            (Ojs.float_to_js x13367)
    let (get_m34 : 'tags this -> float) =
      fun (x13369 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13369) "m34")
    let (set_m34 : 'tags this -> float -> unit) =
      fun (x13371 : 'tags this) ->
        fun (x13372 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13371) "m34"
            (Ojs.float_to_js x13372)
    let (get_m43 : 'tags this -> float) =
      fun (x13374 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13374) "m43")
    let (set_m43 : 'tags this -> float -> unit) =
      fun (x13376 : 'tags this) ->
        fun (x13377 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13376) "m43"
            (Ojs.float_to_js x13377)
    let (get_m44 : 'tags this -> float) =
      fun (x13379 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13379) "m44")
    let (set_m44 : 'tags this -> float -> unit) =
      fun (x13381 : 'tags this) ->
        fun (x13382 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13381) "m44"
            (Ojs.float_to_js x13382)
    let cast_from = Obj.magic
  end
module rec
  DOMPoint:sig
             type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
             type t_0 = t
             [@@@js.stop ]
             type tags = [ `DOMPoint  | `DOMPointReadOnly ]
             type tags_0 = tags
             [@@@js.start ]
             [@@@js.implem
               type tags = [ `DOMPoint  | `DOMPointReadOnly ]
               type tags_0 = tags]
             type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
             val t_to_js : t -> Ojs.t
             val t_of_js : Ojs.t -> t
             val t_0_to_js : t_0 -> Ojs.t
             val t_0_of_js : Ojs.t -> t_0
             val get_w : 'tags this -> float
             val set_w : 'tags this -> float -> unit
             val get_x : 'tags this -> float
             val set_x : 'tags this -> float -> unit
             val get_y : 'tags this -> float
             val set_y : 'tags this -> float -> unit
             val get_z : 'tags this -> float
             val set_z : 'tags this -> float -> unit
             val cast_from : 'tags this -> t
             val prototype : unit -> t
             val create :
               ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t
             val fromPoint : ?other:DOMPointInit.t -> unit -> t
           end =
  struct
    type t = [ `DOMPoint  | `DOMPointReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13385 : Ojs.t) -> t_of_js x13385
    and t_0_to_js : t_0 -> Ojs.t = fun (x13384 : t) -> t_to_js x13384
    type tags = [ `DOMPoint  | `DOMPointReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPoint ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13388 : Ojs.t) -> intf_of_js __tags_of_js x13388
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13386 : __tags intf) -> intf_to_js __tags_to_js x13386
    let (get_w : 'tags this -> float) =
      fun (x13390 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13390) "w")
    let (set_w : 'tags this -> float -> unit) =
      fun (x13392 : 'tags this) ->
        fun (x13393 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13392) "w"
            (Ojs.float_to_js x13393)
    let (get_x : 'tags this -> float) =
      fun (x13395 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13395) "x")
    let (set_x : 'tags this -> float -> unit) =
      fun (x13397 : 'tags this) ->
        fun (x13398 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13397) "x"
            (Ojs.float_to_js x13398)
    let (get_y : 'tags this -> float) =
      fun (x13400 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13400) "y")
    let (set_y : 'tags this -> float -> unit) =
      fun (x13402 : 'tags this) ->
        fun (x13403 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13402) "y"
            (Ojs.float_to_js x13403)
    let (get_z : 'tags this -> float) =
      fun (x13405 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13405) "z")
    let (set_z : 'tags this -> float -> unit) =
      fun (x13407 : 'tags this) ->
        fun (x13408 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13407) "z"
            (Ojs.float_to_js x13408)
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMPoint")
             "prototype")
    let (create : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t)
      =
      fun ?x:(x13410 : float option) ->
        fun ?y:(x13411 : float option) ->
          fun ?z:(x13412 : float option) ->
            fun ?w:(x13413 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMPoint")
                     (let x13414 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x13410 with
                       | Some x13418 ->
                           ignore
                             (Ojs.call x13414 "push"
                                [|(Ojs.float_to_js x13418)|])
                       | None -> ());
                      (match x13411 with
                       | Some x13417 ->
                           ignore
                             (Ojs.call x13414 "push"
                                [|(Ojs.float_to_js x13417)|])
                       | None -> ());
                      (match x13412 with
                       | Some x13416 ->
                           ignore
                             (Ojs.call x13414 "push"
                                [|(Ojs.float_to_js x13416)|])
                       | None -> ());
                      (match x13413 with
                       | Some x13415 ->
                           ignore
                             (Ojs.call x13414 "push"
                                [|(Ojs.float_to_js x13415)|])
                       | None -> ());
                      x13414))
    let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
      fun ?other:(x13419 : DOMPointInit.t option) ->
        fun () ->
          t_of_js
            (let x13422 = Ojs.get_prop_ascii Ojs.global "DOMPoint" in
             Ojs.call (Ojs.get_prop_ascii x13422 "fromPoint") "apply"
               [|x13422;((let x13420 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x13419 with
                           | Some x13421 ->
                               ignore
                                 (Ojs.call x13420 "push"
                                    [|(DOMPointInit.t_to_js x13421)|])
                           | None -> ());
                          x13420))|])
  end
 and
  DOMPointReadOnly:sig
                     type t = [ `DOMPointReadOnly ] intf
                     type t_0 = t
                     [@@@js.stop ]
                     type tags = [ `DOMPointReadOnly ]
                     type tags_0 = tags
                     [@@@js.start ]
                     [@@@js.implem
                       type tags = [ `DOMPointReadOnly ]
                       type tags_0 = tags]
                     type 'tags this =
                       'tags intf constraint 'tags = [> `DOMPointReadOnly ]
                     val t_to_js : t -> Ojs.t
                     val t_of_js : Ojs.t -> t
                     val t_0_to_js : t_0 -> Ojs.t
                     val t_0_of_js : Ojs.t -> t_0
                     val get_w : 'tags this -> float
                     val get_x : 'tags this -> float
                     val get_y : 'tags this -> float
                     val get_z : 'tags this -> float
                     val matrixTransform :
                       'tags this ->
                         ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t
                     val toJSON : 'tags this -> any
                     val cast_from : 'tags this -> t
                     val prototype : unit -> t
                     val create :
                       ?x:float ->
                         ?y:float -> ?z:float -> ?w:float -> unit -> t
                     val fromPoint : ?other:DOMPointInit.t -> unit -> t
                   end =
  struct
    type t = [ `DOMPointReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13424 : Ojs.t) -> t_of_js x13424
    and t_0_to_js : t_0 -> Ojs.t = fun (x13423 : t) -> t_to_js x13423
    type tags = [ `DOMPointReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMPointReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13427 : Ojs.t) -> intf_of_js __tags_of_js x13427
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13425 : __tags intf) -> intf_to_js __tags_to_js x13425
    let (get_w : 'tags this -> float) =
      fun (x13429 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13429) "w")
    let (get_x : 'tags this -> float) =
      fun (x13431 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13431) "x")
    let (get_y : 'tags this -> float) =
      fun (x13433 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13433) "y")
    let (get_z : 'tags this -> float) =
      fun (x13435 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13435) "z")
    let (matrixTransform :
      'tags this -> ?matrix:DOMMatrixInit.t -> unit -> DOMPoint.t) =
      fun (x13440 : 'tags this) ->
        fun ?matrix:(x13437 : DOMMatrixInit.t option) ->
          fun () ->
            DOMPoint.t_of_js
              (let x13442 = this_to_js Obj.magic x13440 in
               Ojs.call (Ojs.get_prop_ascii x13442 "matrixTransform") "apply"
                 [|x13442;((let x13438 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13437 with
                             | Some x13439 ->
                                 ignore
                                   (Ojs.call x13438 "push"
                                      [|(DOMMatrixInit.t_to_js x13439)|])
                             | None -> ());
                            x13438))|])
    let (toJSON : 'tags this -> any) =
      fun (x13443 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x13443) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly") "prototype")
    let (create : ?x:float -> ?y:float -> ?z:float -> ?w:float -> unit -> t)
      =
      fun ?x:(x13445 : float option) ->
        fun ?y:(x13446 : float option) ->
          fun ?z:(x13447 : float option) ->
            fun ?w:(x13448 : float option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly")
                     (let x13449 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x13445 with
                       | Some x13453 ->
                           ignore
                             (Ojs.call x13449 "push"
                                [|(Ojs.float_to_js x13453)|])
                       | None -> ());
                      (match x13446 with
                       | Some x13452 ->
                           ignore
                             (Ojs.call x13449 "push"
                                [|(Ojs.float_to_js x13452)|])
                       | None -> ());
                      (match x13447 with
                       | Some x13451 ->
                           ignore
                             (Ojs.call x13449 "push"
                                [|(Ojs.float_to_js x13451)|])
                       | None -> ());
                      (match x13448 with
                       | Some x13450 ->
                           ignore
                             (Ojs.call x13449 "push"
                                [|(Ojs.float_to_js x13450)|])
                       | None -> ());
                      x13449))
    let (fromPoint : ?other:DOMPointInit.t -> unit -> t) =
      fun ?other:(x13454 : DOMPointInit.t option) ->
        fun () ->
          t_of_js
            (let x13457 = Ojs.get_prop_ascii Ojs.global "DOMPointReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x13457 "fromPoint") "apply"
               [|x13457;((let x13455 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x13454 with
                           | Some x13456 ->
                               ignore
                                 (Ojs.call x13455 "push"
                                    [|(DOMPointInit.t_to_js x13456)|])
                           | None -> ());
                          x13455))|])
  end
module DOMQuad =
  struct
    type t = [ `DOMQuad ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13459 : Ojs.t) -> t_of_js x13459
    and t_0_to_js : t_0 -> Ojs.t = fun (x13458 : t) -> t_to_js x13458
    type tags = [ `DOMQuad ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMQuad ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13462 : Ojs.t) -> intf_of_js __tags_of_js x13462
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13460 : __tags intf) -> intf_to_js __tags_to_js x13460
    let (get_p1 : 'tags this -> DOMPoint.t) =
      fun (x13464 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13464) "p1")
    let (get_p2 : 'tags this -> DOMPoint.t) =
      fun (x13466 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13466) "p2")
    let (get_p3 : 'tags this -> DOMPoint.t) =
      fun (x13468 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13468) "p3")
    let (get_p4 : 'tags this -> DOMPoint.t) =
      fun (x13470 : 'tags this) ->
        DOMPoint.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13470) "p4")
    let (getBounds : 'tags this -> DOMRect.t) =
      fun (x13472 : 'tags this) ->
        DOMRect.t_of_js
          (Ojs.call (this_to_js Obj.magic x13472) "getBounds" [||])
    let (toJSON : 'tags this -> any) =
      fun (x13474 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x13474) "toJSON" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMQuad")
             "prototype")
    let (create :
      ?p1:DOMPointInit.t ->
        ?p2:DOMPointInit.t ->
          ?p3:DOMPointInit.t -> ?p4:DOMPointInit.t -> unit -> t)
      =
      fun ?p1:(x13476 : DOMPointInit.t option) ->
        fun ?p2:(x13477 : DOMPointInit.t option) ->
          fun ?p3:(x13478 : DOMPointInit.t option) ->
            fun ?p4:(x13479 : DOMPointInit.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMQuad")
                     (let x13480 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x13476 with
                       | Some x13484 ->
                           ignore
                             (Ojs.call x13480 "push"
                                [|(DOMPointInit.t_to_js x13484)|])
                       | None -> ());
                      (match x13477 with
                       | Some x13483 ->
                           ignore
                             (Ojs.call x13480 "push"
                                [|(DOMPointInit.t_to_js x13483)|])
                       | None -> ());
                      (match x13478 with
                       | Some x13482 ->
                           ignore
                             (Ojs.call x13480 "push"
                                [|(DOMPointInit.t_to_js x13482)|])
                       | None -> ());
                      (match x13479 with
                       | Some x13481 ->
                           ignore
                             (Ojs.call x13480 "push"
                                [|(DOMPointInit.t_to_js x13481)|])
                       | None -> ());
                      x13480))
    let (fromQuad : ?other:DOMQuadInit.t -> unit -> t) =
      fun ?other:(x13485 : DOMQuadInit.t option) ->
        fun () ->
          t_of_js
            (let x13488 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x13488 "fromQuad") "apply"
               [|x13488;((let x13486 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x13485 with
                           | Some x13487 ->
                               ignore
                                 (Ojs.call x13486 "push"
                                    [|(DOMQuadInit.t_to_js x13487)|])
                           | None -> ());
                          x13486))|])
    let (fromRect : ?other:DOMRectInit.t -> unit -> t) =
      fun ?other:(x13489 : DOMRectInit.t option) ->
        fun () ->
          t_of_js
            (let x13492 = Ojs.get_prop_ascii Ojs.global "DOMQuad" in
             Ojs.call (Ojs.get_prop_ascii x13492 "fromRect") "apply"
               [|x13492;((let x13490 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x13489 with
                           | Some x13491 ->
                               ignore
                                 (Ojs.call x13490 "push"
                                    [|(DOMRectInit.t_to_js x13491)|])
                           | None -> ());
                          x13490))|])
  end
module rec
  DOMMatrix:sig
              type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
              type t_0 = t
              [@@@js.stop ]
              type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
              type tags_0 = tags
              [@@@js.start ]
              [@@@js.implem
                type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
                type tags_0 = tags]
              type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
              val t_to_js : t -> Ojs.t
              val t_of_js : Ojs.t -> t
              val t_0_to_js : t_0 -> Ojs.t
              val t_0_of_js : Ojs.t -> t_0
              val get_a : 'tags this -> float
              val set_a : 'tags this -> float -> unit
              val get_b : 'tags this -> float
              val set_b : 'tags this -> float -> unit
              val get_c : 'tags this -> float
              val set_c : 'tags this -> float -> unit
              val get_d : 'tags this -> float
              val set_d : 'tags this -> float -> unit
              val get_e : 'tags this -> float
              val set_e : 'tags this -> float -> unit
              val get_f : 'tags this -> float
              val set_f : 'tags this -> float -> unit
              val get_m11 : 'tags this -> float
              val set_m11 : 'tags this -> float -> unit
              val get_m12 : 'tags this -> float
              val set_m12 : 'tags this -> float -> unit
              val get_m13 : 'tags this -> float
              val set_m13 : 'tags this -> float -> unit
              val get_m14 : 'tags this -> float
              val set_m14 : 'tags this -> float -> unit
              val get_m21 : 'tags this -> float
              val set_m21 : 'tags this -> float -> unit
              val get_m22 : 'tags this -> float
              val set_m22 : 'tags this -> float -> unit
              val get_m23 : 'tags this -> float
              val set_m23 : 'tags this -> float -> unit
              val get_m24 : 'tags this -> float
              val set_m24 : 'tags this -> float -> unit
              val get_m31 : 'tags this -> float
              val set_m31 : 'tags this -> float -> unit
              val get_m32 : 'tags this -> float
              val set_m32 : 'tags this -> float -> unit
              val get_m33 : 'tags this -> float
              val set_m33 : 'tags this -> float -> unit
              val get_m34 : 'tags this -> float
              val set_m34 : 'tags this -> float -> unit
              val get_m41 : 'tags this -> float
              val set_m41 : 'tags this -> float -> unit
              val get_m42 : 'tags this -> float
              val set_m42 : 'tags this -> float -> unit
              val get_m43 : 'tags this -> float
              val set_m43 : 'tags this -> float -> unit
              val get_m44 : 'tags this -> float
              val set_m44 : 'tags this -> float -> unit
              val invertSelf : 'tags this -> t
              val multiplySelf :
                'tags this -> ?other:DOMMatrixInit.t -> unit -> t
              val preMultiplySelf :
                'tags this -> ?other:DOMMatrixInit.t -> unit -> t
              val rotateAxisAngleSelf :
                'tags this ->
                  ?x:float ->
                    ?y:float -> ?z:float -> ?angle:float -> unit -> t
              val rotateFromVectorSelf :
                'tags this -> ?x:float -> ?y:float -> unit -> t
              val rotateSelf :
                'tags this ->
                  ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t
              val scale3dSelf :
                'tags this ->
                  ?scale:float ->
                    ?originX:float ->
                      ?originY:float -> ?originZ:float -> unit -> t
              val scaleSelf :
                'tags this ->
                  ?scaleX:float ->
                    ?scaleY:float ->
                      ?scaleZ:float ->
                        ?originX:float ->
                          ?originY:float -> ?originZ:float -> unit -> t
              val skewXSelf : 'tags this -> ?sx:float -> unit -> t
              val skewYSelf : 'tags this -> ?sy:float -> unit -> t
              val translateSelf :
                'tags this ->
                  ?tx:float -> ?ty:float -> ?tz:float -> unit -> t
              val cast_from : 'tags this -> t
              val prototype : unit -> t
              val create : ?init:float list or_string -> unit -> t
              val fromFloat32Array : Float32Array.t_0 -> t
              val fromFloat64Array : Float64Array.t_0 -> t
              val fromMatrix : ?other:DOMMatrixInit.t -> unit -> t
            end =
  struct
    type t = [ `DOMMatrix  | `DOMMatrixReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13494 : Ojs.t) -> t_of_js x13494
    and t_0_to_js : t_0 -> Ojs.t = fun (x13493 : t) -> t_to_js x13493
    type tags = [ `DOMMatrix  | `DOMMatrixReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrix ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13497 : Ojs.t) -> intf_of_js __tags_of_js x13497
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13495 : __tags intf) -> intf_to_js __tags_to_js x13495
    let (get_a : 'tags this -> float) =
      fun (x13499 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13499) "a")
    let (set_a : 'tags this -> float -> unit) =
      fun (x13501 : 'tags this) ->
        fun (x13502 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13501) "a"
            (Ojs.float_to_js x13502)
    let (get_b : 'tags this -> float) =
      fun (x13504 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13504) "b")
    let (set_b : 'tags this -> float -> unit) =
      fun (x13506 : 'tags this) ->
        fun (x13507 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13506) "b"
            (Ojs.float_to_js x13507)
    let (get_c : 'tags this -> float) =
      fun (x13509 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13509) "c")
    let (set_c : 'tags this -> float -> unit) =
      fun (x13511 : 'tags this) ->
        fun (x13512 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13511) "c"
            (Ojs.float_to_js x13512)
    let (get_d : 'tags this -> float) =
      fun (x13514 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13514) "d")
    let (set_d : 'tags this -> float -> unit) =
      fun (x13516 : 'tags this) ->
        fun (x13517 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13516) "d"
            (Ojs.float_to_js x13517)
    let (get_e : 'tags this -> float) =
      fun (x13519 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13519) "e")
    let (set_e : 'tags this -> float -> unit) =
      fun (x13521 : 'tags this) ->
        fun (x13522 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13521) "e"
            (Ojs.float_to_js x13522)
    let (get_f : 'tags this -> float) =
      fun (x13524 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13524) "f")
    let (set_f : 'tags this -> float -> unit) =
      fun (x13526 : 'tags this) ->
        fun (x13527 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13526) "f"
            (Ojs.float_to_js x13527)
    let (get_m11 : 'tags this -> float) =
      fun (x13529 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13529) "m11")
    let (set_m11 : 'tags this -> float -> unit) =
      fun (x13531 : 'tags this) ->
        fun (x13532 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13531) "m11"
            (Ojs.float_to_js x13532)
    let (get_m12 : 'tags this -> float) =
      fun (x13534 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13534) "m12")
    let (set_m12 : 'tags this -> float -> unit) =
      fun (x13536 : 'tags this) ->
        fun (x13537 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13536) "m12"
            (Ojs.float_to_js x13537)
    let (get_m13 : 'tags this -> float) =
      fun (x13539 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13539) "m13")
    let (set_m13 : 'tags this -> float -> unit) =
      fun (x13541 : 'tags this) ->
        fun (x13542 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13541) "m13"
            (Ojs.float_to_js x13542)
    let (get_m14 : 'tags this -> float) =
      fun (x13544 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13544) "m14")
    let (set_m14 : 'tags this -> float -> unit) =
      fun (x13546 : 'tags this) ->
        fun (x13547 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13546) "m14"
            (Ojs.float_to_js x13547)
    let (get_m21 : 'tags this -> float) =
      fun (x13549 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13549) "m21")
    let (set_m21 : 'tags this -> float -> unit) =
      fun (x13551 : 'tags this) ->
        fun (x13552 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13551) "m21"
            (Ojs.float_to_js x13552)
    let (get_m22 : 'tags this -> float) =
      fun (x13554 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13554) "m22")
    let (set_m22 : 'tags this -> float -> unit) =
      fun (x13556 : 'tags this) ->
        fun (x13557 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13556) "m22"
            (Ojs.float_to_js x13557)
    let (get_m23 : 'tags this -> float) =
      fun (x13559 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13559) "m23")
    let (set_m23 : 'tags this -> float -> unit) =
      fun (x13561 : 'tags this) ->
        fun (x13562 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13561) "m23"
            (Ojs.float_to_js x13562)
    let (get_m24 : 'tags this -> float) =
      fun (x13564 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13564) "m24")
    let (set_m24 : 'tags this -> float -> unit) =
      fun (x13566 : 'tags this) ->
        fun (x13567 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13566) "m24"
            (Ojs.float_to_js x13567)
    let (get_m31 : 'tags this -> float) =
      fun (x13569 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13569) "m31")
    let (set_m31 : 'tags this -> float -> unit) =
      fun (x13571 : 'tags this) ->
        fun (x13572 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13571) "m31"
            (Ojs.float_to_js x13572)
    let (get_m32 : 'tags this -> float) =
      fun (x13574 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13574) "m32")
    let (set_m32 : 'tags this -> float -> unit) =
      fun (x13576 : 'tags this) ->
        fun (x13577 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13576) "m32"
            (Ojs.float_to_js x13577)
    let (get_m33 : 'tags this -> float) =
      fun (x13579 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13579) "m33")
    let (set_m33 : 'tags this -> float -> unit) =
      fun (x13581 : 'tags this) ->
        fun (x13582 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13581) "m33"
            (Ojs.float_to_js x13582)
    let (get_m34 : 'tags this -> float) =
      fun (x13584 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13584) "m34")
    let (set_m34 : 'tags this -> float -> unit) =
      fun (x13586 : 'tags this) ->
        fun (x13587 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13586) "m34"
            (Ojs.float_to_js x13587)
    let (get_m41 : 'tags this -> float) =
      fun (x13589 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13589) "m41")
    let (set_m41 : 'tags this -> float -> unit) =
      fun (x13591 : 'tags this) ->
        fun (x13592 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13591) "m41"
            (Ojs.float_to_js x13592)
    let (get_m42 : 'tags this -> float) =
      fun (x13594 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13594) "m42")
    let (set_m42 : 'tags this -> float -> unit) =
      fun (x13596 : 'tags this) ->
        fun (x13597 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13596) "m42"
            (Ojs.float_to_js x13597)
    let (get_m43 : 'tags this -> float) =
      fun (x13599 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13599) "m43")
    let (set_m43 : 'tags this -> float -> unit) =
      fun (x13601 : 'tags this) ->
        fun (x13602 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13601) "m43"
            (Ojs.float_to_js x13602)
    let (get_m44 : 'tags this -> float) =
      fun (x13604 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13604) "m44")
    let (set_m44 : 'tags this -> float -> unit) =
      fun (x13606 : 'tags this) ->
        fun (x13607 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13606) "m44"
            (Ojs.float_to_js x13607)
    let (invertSelf : 'tags this -> t) =
      fun (x13609 : 'tags this) ->
        t_of_js (Ojs.call (this_to_js Obj.magic x13609) "invertSelf" [||])
    let (multiplySelf : 'tags this -> ?other:DOMMatrixInit.t -> unit -> t) =
      fun (x13614 : 'tags this) ->
        fun ?other:(x13611 : DOMMatrixInit.t option) ->
          fun () ->
            t_of_js
              (let x13616 = this_to_js Obj.magic x13614 in
               Ojs.call (Ojs.get_prop_ascii x13616 "multiplySelf") "apply"
                 [|x13616;((let x13612 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13611 with
                             | Some x13613 ->
                                 ignore
                                   (Ojs.call x13612 "push"
                                      [|(DOMMatrixInit.t_to_js x13613)|])
                             | None -> ());
                            x13612))|])
    let (preMultiplySelf : 'tags this -> ?other:DOMMatrixInit.t -> unit -> t)
      =
      fun (x13620 : 'tags this) ->
        fun ?other:(x13617 : DOMMatrixInit.t option) ->
          fun () ->
            t_of_js
              (let x13622 = this_to_js Obj.magic x13620 in
               Ojs.call (Ojs.get_prop_ascii x13622 "preMultiplySelf") "apply"
                 [|x13622;((let x13618 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13617 with
                             | Some x13619 ->
                                 ignore
                                   (Ojs.call x13618 "push"
                                      [|(DOMMatrixInit.t_to_js x13619)|])
                             | None -> ());
                            x13618))|])
    let (rotateAxisAngleSelf :
      'tags this ->
        ?x:float -> ?y:float -> ?z:float -> ?angle:float -> unit -> t)
      =
      fun (x13632 : 'tags this) ->
        fun ?x:(x13623 : float option) ->
          fun ?y:(x13624 : float option) ->
            fun ?z:(x13625 : float option) ->
              fun ?angle:(x13626 : float option) ->
                fun () ->
                  t_of_js
                    (let x13634 = this_to_js Obj.magic x13632 in
                     Ojs.call
                       (Ojs.get_prop_ascii x13634 "rotateAxisAngleSelf")
                       "apply"
                       [|x13634;((let x13627 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x13623 with
                                   | Some x13631 ->
                                       ignore
                                         (Ojs.call x13627 "push"
                                            [|(Ojs.float_to_js x13631)|])
                                   | None -> ());
                                  (match x13624 with
                                   | Some x13630 ->
                                       ignore
                                         (Ojs.call x13627 "push"
                                            [|(Ojs.float_to_js x13630)|])
                                   | None -> ());
                                  (match x13625 with
                                   | Some x13629 ->
                                       ignore
                                         (Ojs.call x13627 "push"
                                            [|(Ojs.float_to_js x13629)|])
                                   | None -> ());
                                  (match x13626 with
                                   | Some x13628 ->
                                       ignore
                                         (Ojs.call x13627 "push"
                                            [|(Ojs.float_to_js x13628)|])
                                   | None -> ());
                                  x13627))|])
    let (rotateFromVectorSelf :
      'tags this -> ?x:float -> ?y:float -> unit -> t) =
      fun (x13640 : 'tags this) ->
        fun ?x:(x13635 : float option) ->
          fun ?y:(x13636 : float option) ->
            fun () ->
              t_of_js
                (let x13642 = this_to_js Obj.magic x13640 in
                 Ojs.call (Ojs.get_prop_ascii x13642 "rotateFromVectorSelf")
                   "apply"
                   [|x13642;((let x13637 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x13635 with
                               | Some x13639 ->
                                   ignore
                                     (Ojs.call x13637 "push"
                                        [|(Ojs.float_to_js x13639)|])
                               | None -> ());
                              (match x13636 with
                               | Some x13638 ->
                                   ignore
                                     (Ojs.call x13637 "push"
                                        [|(Ojs.float_to_js x13638)|])
                               | None -> ());
                              x13637))|])
    let (rotateSelf :
      'tags this -> ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> t) =
      fun (x13650 : 'tags this) ->
        fun ?rotX:(x13643 : float option) ->
          fun ?rotY:(x13644 : float option) ->
            fun ?rotZ:(x13645 : float option) ->
              fun () ->
                t_of_js
                  (let x13652 = this_to_js Obj.magic x13650 in
                   Ojs.call (Ojs.get_prop_ascii x13652 "rotateSelf") "apply"
                     [|x13652;((let x13646 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x13643 with
                                 | Some x13649 ->
                                     ignore
                                       (Ojs.call x13646 "push"
                                          [|(Ojs.float_to_js x13649)|])
                                 | None -> ());
                                (match x13644 with
                                 | Some x13648 ->
                                     ignore
                                       (Ojs.call x13646 "push"
                                          [|(Ojs.float_to_js x13648)|])
                                 | None -> ());
                                (match x13645 with
                                 | Some x13647 ->
                                     ignore
                                       (Ojs.call x13646 "push"
                                          [|(Ojs.float_to_js x13647)|])
                                 | None -> ());
                                x13646))|])
    let (scale3dSelf :
      'tags this ->
        ?scale:float ->
          ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t)
      =
      fun (x13662 : 'tags this) ->
        fun ?scale:(x13653 : float option) ->
          fun ?originX:(x13654 : float option) ->
            fun ?originY:(x13655 : float option) ->
              fun ?originZ:(x13656 : float option) ->
                fun () ->
                  t_of_js
                    (let x13664 = this_to_js Obj.magic x13662 in
                     Ojs.call (Ojs.get_prop_ascii x13664 "scale3dSelf")
                       "apply"
                       [|x13664;((let x13657 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x13653 with
                                   | Some x13661 ->
                                       ignore
                                         (Ojs.call x13657 "push"
                                            [|(Ojs.float_to_js x13661)|])
                                   | None -> ());
                                  (match x13654 with
                                   | Some x13660 ->
                                       ignore
                                         (Ojs.call x13657 "push"
                                            [|(Ojs.float_to_js x13660)|])
                                   | None -> ());
                                  (match x13655 with
                                   | Some x13659 ->
                                       ignore
                                         (Ojs.call x13657 "push"
                                            [|(Ojs.float_to_js x13659)|])
                                   | None -> ());
                                  (match x13656 with
                                   | Some x13658 ->
                                       ignore
                                         (Ojs.call x13657 "push"
                                            [|(Ojs.float_to_js x13658)|])
                                   | None -> ());
                                  x13657))|])
    let (scaleSelf :
      'tags this ->
        ?scaleX:float ->
          ?scaleY:float ->
            ?scaleZ:float ->
              ?originX:float -> ?originY:float -> ?originZ:float -> unit -> t)
      =
      fun (x13678 : 'tags this) ->
        fun ?scaleX:(x13665 : float option) ->
          fun ?scaleY:(x13666 : float option) ->
            fun ?scaleZ:(x13667 : float option) ->
              fun ?originX:(x13668 : float option) ->
                fun ?originY:(x13669 : float option) ->
                  fun ?originZ:(x13670 : float option) ->
                    fun () ->
                      t_of_js
                        (let x13680 = this_to_js Obj.magic x13678 in
                         Ojs.call (Ojs.get_prop_ascii x13680 "scaleSelf")
                           "apply"
                           [|x13680;((let x13671 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x13665 with
                                       | Some x13677 ->
                                           ignore
                                             (Ojs.call x13671 "push"
                                                [|(Ojs.float_to_js x13677)|])
                                       | None -> ());
                                      (match x13666 with
                                       | Some x13676 ->
                                           ignore
                                             (Ojs.call x13671 "push"
                                                [|(Ojs.float_to_js x13676)|])
                                       | None -> ());
                                      (match x13667 with
                                       | Some x13675 ->
                                           ignore
                                             (Ojs.call x13671 "push"
                                                [|(Ojs.float_to_js x13675)|])
                                       | None -> ());
                                      (match x13668 with
                                       | Some x13674 ->
                                           ignore
                                             (Ojs.call x13671 "push"
                                                [|(Ojs.float_to_js x13674)|])
                                       | None -> ());
                                      (match x13669 with
                                       | Some x13673 ->
                                           ignore
                                             (Ojs.call x13671 "push"
                                                [|(Ojs.float_to_js x13673)|])
                                       | None -> ());
                                      (match x13670 with
                                       | Some x13672 ->
                                           ignore
                                             (Ojs.call x13671 "push"
                                                [|(Ojs.float_to_js x13672)|])
                                       | None -> ());
                                      x13671))|])
    let (skewXSelf : 'tags this -> ?sx:float -> unit -> t) =
      fun (x13684 : 'tags this) ->
        fun ?sx:(x13681 : float option) ->
          fun () ->
            t_of_js
              (let x13686 = this_to_js Obj.magic x13684 in
               Ojs.call (Ojs.get_prop_ascii x13686 "skewXSelf") "apply"
                 [|x13686;((let x13682 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13681 with
                             | Some x13683 ->
                                 ignore
                                   (Ojs.call x13682 "push"
                                      [|(Ojs.float_to_js x13683)|])
                             | None -> ());
                            x13682))|])
    let (skewYSelf : 'tags this -> ?sy:float -> unit -> t) =
      fun (x13690 : 'tags this) ->
        fun ?sy:(x13687 : float option) ->
          fun () ->
            t_of_js
              (let x13692 = this_to_js Obj.magic x13690 in
               Ojs.call (Ojs.get_prop_ascii x13692 "skewYSelf") "apply"
                 [|x13692;((let x13688 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13687 with
                             | Some x13689 ->
                                 ignore
                                   (Ojs.call x13688 "push"
                                      [|(Ojs.float_to_js x13689)|])
                             | None -> ());
                            x13688))|])
    let (translateSelf :
      'tags this -> ?tx:float -> ?ty:float -> ?tz:float -> unit -> t) =
      fun (x13700 : 'tags this) ->
        fun ?tx:(x13693 : float option) ->
          fun ?ty:(x13694 : float option) ->
            fun ?tz:(x13695 : float option) ->
              fun () ->
                t_of_js
                  (let x13702 = this_to_js Obj.magic x13700 in
                   Ojs.call (Ojs.get_prop_ascii x13702 "translateSelf")
                     "apply"
                     [|x13702;((let x13696 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x13693 with
                                 | Some x13699 ->
                                     ignore
                                       (Ojs.call x13696 "push"
                                          [|(Ojs.float_to_js x13699)|])
                                 | None -> ());
                                (match x13694 with
                                 | Some x13698 ->
                                     ignore
                                       (Ojs.call x13696 "push"
                                          [|(Ojs.float_to_js x13698)|])
                                 | None -> ());
                                (match x13695 with
                                 | Some x13697 ->
                                     ignore
                                       (Ojs.call x13696 "push"
                                          [|(Ojs.float_to_js x13697)|])
                                 | None -> ());
                                x13696))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "prototype")
    let (create : ?init:float list or_string -> unit -> t) =
      fun ?init:(x13703 : float list or_string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
               (let x13704 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x13703 with
                 | Some x13705 ->
                     ignore
                       (Ojs.call x13704 "push"
                          [|(or_string_to_js
                               (fun (x13706 : float list) ->
                                  Ojs.list_to_js Ojs.float_to_js x13706)
                               x13705)|])
                 | None -> ());
                x13704))
    let (fromFloat32Array : Float32Array.t_0 -> t) =
      fun (x13708 : Float32Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "fromFloat32Array" [|(Float32Array.t_0_to_js x13708)|])
    let (fromFloat64Array : Float64Array.t_0 -> t) =
      fun (x13709 : Float64Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrix")
             "fromFloat64Array" [|(Float64Array.t_0_to_js x13709)|])
    let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
      fun ?other:(x13710 : DOMMatrixInit.t option) ->
        fun () ->
          t_of_js
            (let x13713 = Ojs.get_prop_ascii Ojs.global "DOMMatrix" in
             Ojs.call (Ojs.get_prop_ascii x13713 "fromMatrix") "apply"
               [|x13713;((let x13711 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x13710 with
                           | Some x13712 ->
                               ignore
                                 (Ojs.call x13711 "push"
                                    [|(DOMMatrixInit.t_to_js x13712)|])
                           | None -> ());
                          x13711))|])
  end
 and
  DOMMatrixReadOnly:sig
                      type t = [ `DOMMatrixReadOnly ] intf
                      type t_0 = t
                      [@@@js.stop ]
                      type tags = [ `DOMMatrixReadOnly ]
                      type tags_0 = tags
                      [@@@js.start ]
                      [@@@js.implem
                        type tags = [ `DOMMatrixReadOnly ]
                        type tags_0 = tags]
                      type 'tags this =
                        'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
                      val t_to_js : t -> Ojs.t
                      val t_of_js : Ojs.t -> t
                      val t_0_to_js : t_0 -> Ojs.t
                      val t_0_of_js : Ojs.t -> t_0
                      val get_a : 'tags this -> float
                      val get_b : 'tags this -> float
                      val get_c : 'tags this -> float
                      val get_d : 'tags this -> float
                      val get_e : 'tags this -> float
                      val get_f : 'tags this -> float
                      val get_is2D : 'tags this -> bool
                      val get_isIdentity : 'tags this -> bool
                      val get_m11 : 'tags this -> float
                      val get_m12 : 'tags this -> float
                      val get_m13 : 'tags this -> float
                      val get_m14 : 'tags this -> float
                      val get_m21 : 'tags this -> float
                      val get_m22 : 'tags this -> float
                      val get_m23 : 'tags this -> float
                      val get_m24 : 'tags this -> float
                      val get_m31 : 'tags this -> float
                      val get_m32 : 'tags this -> float
                      val get_m33 : 'tags this -> float
                      val get_m34 : 'tags this -> float
                      val get_m41 : 'tags this -> float
                      val get_m42 : 'tags this -> float
                      val get_m43 : 'tags this -> float
                      val get_m44 : 'tags this -> float
                      val flipX : 'tags this -> DOMMatrix.t
                      val flipY : 'tags this -> DOMMatrix.t
                      val inverse : 'tags this -> DOMMatrix.t
                      val multiply :
                        'tags this ->
                          ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t
                      val rotate :
                        'tags this ->
                          ?rotX:float ->
                            ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t
                      val rotateAxisAngle :
                        'tags this ->
                          ?x:float ->
                            ?y:float ->
                              ?z:float -> ?angle:float -> unit -> DOMMatrix.t
                      val rotateFromVector :
                        'tags this ->
                          ?x:float -> ?y:float -> unit -> DOMMatrix.t
                      val scale :
                        'tags this ->
                          ?scaleX:float ->
                            ?scaleY:float ->
                              ?scaleZ:float ->
                                ?originX:float ->
                                  ?originY:float ->
                                    ?originZ:float -> unit -> DOMMatrix.t
                      val scale3d :
                        'tags this ->
                          ?scale:float ->
                            ?originX:float ->
                              ?originY:float ->
                                ?originZ:float -> unit -> DOMMatrix.t
                      val scaleNonUniform :
                        'tags this ->
                          ?scaleX:float ->
                            ?scaleY:float -> unit -> DOMMatrix.t
                      val skewX :
                        'tags this -> ?sx:float -> unit -> DOMMatrix.t
                      val skewY :
                        'tags this -> ?sy:float -> unit -> DOMMatrix.t
                      val toFloat32Array : 'tags this -> Float32Array.t_0
                      val toFloat64Array : 'tags this -> Float64Array.t_0
                      val toJSON : 'tags this -> any
                      val transformPoint :
                        'tags this ->
                          ?point:DOMPointInit.t -> unit -> DOMPoint.t
                      val translate :
                        'tags this ->
                          ?tx:float ->
                            ?ty:float -> ?tz:float -> unit -> DOMMatrix.t
                      val cast_from : 'tags this -> t
                      val prototype : unit -> t
                      val create : ?init:float list or_string -> unit -> t
                      val fromFloat32Array : Float32Array.t_0 -> t
                      val fromFloat64Array : Float64Array.t_0 -> t
                      val fromMatrix : ?other:DOMMatrixInit.t -> unit -> t
                    end =
  struct
    type t = [ `DOMMatrixReadOnly ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13715 : Ojs.t) -> t_of_js x13715
    and t_0_to_js : t_0 -> Ojs.t = fun (x13714 : t) -> t_to_js x13714
    type tags = [ `DOMMatrixReadOnly ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `DOMMatrixReadOnly ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13718 : Ojs.t) -> intf_of_js __tags_of_js x13718
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13716 : __tags intf) -> intf_to_js __tags_to_js x13716
    let (get_a : 'tags this -> float) =
      fun (x13720 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13720) "a")
    let (get_b : 'tags this -> float) =
      fun (x13722 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13722) "b")
    let (get_c : 'tags this -> float) =
      fun (x13724 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13724) "c")
    let (get_d : 'tags this -> float) =
      fun (x13726 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13726) "d")
    let (get_e : 'tags this -> float) =
      fun (x13728 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13728) "e")
    let (get_f : 'tags this -> float) =
      fun (x13730 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13730) "f")
    let (get_is2D : 'tags this -> bool) =
      fun (x13732 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13732) "is2D")
    let (get_isIdentity : 'tags this -> bool) =
      fun (x13734 : 'tags this) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13734) "isIdentity")
    let (get_m11 : 'tags this -> float) =
      fun (x13736 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13736) "m11")
    let (get_m12 : 'tags this -> float) =
      fun (x13738 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13738) "m12")
    let (get_m13 : 'tags this -> float) =
      fun (x13740 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13740) "m13")
    let (get_m14 : 'tags this -> float) =
      fun (x13742 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13742) "m14")
    let (get_m21 : 'tags this -> float) =
      fun (x13744 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13744) "m21")
    let (get_m22 : 'tags this -> float) =
      fun (x13746 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13746) "m22")
    let (get_m23 : 'tags this -> float) =
      fun (x13748 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13748) "m23")
    let (get_m24 : 'tags this -> float) =
      fun (x13750 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13750) "m24")
    let (get_m31 : 'tags this -> float) =
      fun (x13752 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13752) "m31")
    let (get_m32 : 'tags this -> float) =
      fun (x13754 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13754) "m32")
    let (get_m33 : 'tags this -> float) =
      fun (x13756 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13756) "m33")
    let (get_m34 : 'tags this -> float) =
      fun (x13758 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13758) "m34")
    let (get_m41 : 'tags this -> float) =
      fun (x13760 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13760) "m41")
    let (get_m42 : 'tags this -> float) =
      fun (x13762 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13762) "m42")
    let (get_m43 : 'tags this -> float) =
      fun (x13764 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13764) "m43")
    let (get_m44 : 'tags this -> float) =
      fun (x13766 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13766) "m44")
    let (flipX : 'tags this -> DOMMatrix.t) =
      fun (x13768 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x13768) "flipX" [||])
    let (flipY : 'tags this -> DOMMatrix.t) =
      fun (x13770 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x13770) "flipY" [||])
    let (inverse : 'tags this -> DOMMatrix.t) =
      fun (x13772 : 'tags this) ->
        DOMMatrix.t_of_js
          (Ojs.call (this_to_js Obj.magic x13772) "inverse" [||])
    let (multiply :
      'tags this -> ?other:DOMMatrixInit.t -> unit -> DOMMatrix.t) =
      fun (x13777 : 'tags this) ->
        fun ?other:(x13774 : DOMMatrixInit.t option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x13779 = this_to_js Obj.magic x13777 in
               Ojs.call (Ojs.get_prop_ascii x13779 "multiply") "apply"
                 [|x13779;((let x13775 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13774 with
                             | Some x13776 ->
                                 ignore
                                   (Ojs.call x13775 "push"
                                      [|(DOMMatrixInit.t_to_js x13776)|])
                             | None -> ());
                            x13775))|])
    let (rotate :
      'tags this ->
        ?rotX:float -> ?rotY:float -> ?rotZ:float -> unit -> DOMMatrix.t)
      =
      fun (x13787 : 'tags this) ->
        fun ?rotX:(x13780 : float option) ->
          fun ?rotY:(x13781 : float option) ->
            fun ?rotZ:(x13782 : float option) ->
              fun () ->
                DOMMatrix.t_of_js
                  (let x13789 = this_to_js Obj.magic x13787 in
                   Ojs.call (Ojs.get_prop_ascii x13789 "rotate") "apply"
                     [|x13789;((let x13783 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x13780 with
                                 | Some x13786 ->
                                     ignore
                                       (Ojs.call x13783 "push"
                                          [|(Ojs.float_to_js x13786)|])
                                 | None -> ());
                                (match x13781 with
                                 | Some x13785 ->
                                     ignore
                                       (Ojs.call x13783 "push"
                                          [|(Ojs.float_to_js x13785)|])
                                 | None -> ());
                                (match x13782 with
                                 | Some x13784 ->
                                     ignore
                                       (Ojs.call x13783 "push"
                                          [|(Ojs.float_to_js x13784)|])
                                 | None -> ());
                                x13783))|])
    let (rotateAxisAngle :
      'tags this ->
        ?x:float ->
          ?y:float -> ?z:float -> ?angle:float -> unit -> DOMMatrix.t)
      =
      fun (x13799 : 'tags this) ->
        fun ?x:(x13790 : float option) ->
          fun ?y:(x13791 : float option) ->
            fun ?z:(x13792 : float option) ->
              fun ?angle:(x13793 : float option) ->
                fun () ->
                  DOMMatrix.t_of_js
                    (let x13801 = this_to_js Obj.magic x13799 in
                     Ojs.call (Ojs.get_prop_ascii x13801 "rotateAxisAngle")
                       "apply"
                       [|x13801;((let x13794 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x13790 with
                                   | Some x13798 ->
                                       ignore
                                         (Ojs.call x13794 "push"
                                            [|(Ojs.float_to_js x13798)|])
                                   | None -> ());
                                  (match x13791 with
                                   | Some x13797 ->
                                       ignore
                                         (Ojs.call x13794 "push"
                                            [|(Ojs.float_to_js x13797)|])
                                   | None -> ());
                                  (match x13792 with
                                   | Some x13796 ->
                                       ignore
                                         (Ojs.call x13794 "push"
                                            [|(Ojs.float_to_js x13796)|])
                                   | None -> ());
                                  (match x13793 with
                                   | Some x13795 ->
                                       ignore
                                         (Ojs.call x13794 "push"
                                            [|(Ojs.float_to_js x13795)|])
                                   | None -> ());
                                  x13794))|])
    let (rotateFromVector :
      'tags this -> ?x:float -> ?y:float -> unit -> DOMMatrix.t) =
      fun (x13807 : 'tags this) ->
        fun ?x:(x13802 : float option) ->
          fun ?y:(x13803 : float option) ->
            fun () ->
              DOMMatrix.t_of_js
                (let x13809 = this_to_js Obj.magic x13807 in
                 Ojs.call (Ojs.get_prop_ascii x13809 "rotateFromVector")
                   "apply"
                   [|x13809;((let x13804 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x13802 with
                               | Some x13806 ->
                                   ignore
                                     (Ojs.call x13804 "push"
                                        [|(Ojs.float_to_js x13806)|])
                               | None -> ());
                              (match x13803 with
                               | Some x13805 ->
                                   ignore
                                     (Ojs.call x13804 "push"
                                        [|(Ojs.float_to_js x13805)|])
                               | None -> ());
                              x13804))|])
    let (scale :
      'tags this ->
        ?scaleX:float ->
          ?scaleY:float ->
            ?scaleZ:float ->
              ?originX:float ->
                ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t)
      =
      fun (x13823 : 'tags this) ->
        fun ?scaleX:(x13810 : float option) ->
          fun ?scaleY:(x13811 : float option) ->
            fun ?scaleZ:(x13812 : float option) ->
              fun ?originX:(x13813 : float option) ->
                fun ?originY:(x13814 : float option) ->
                  fun ?originZ:(x13815 : float option) ->
                    fun () ->
                      DOMMatrix.t_of_js
                        (let x13825 = this_to_js Obj.magic x13823 in
                         Ojs.call (Ojs.get_prop_ascii x13825 "scale") "apply"
                           [|x13825;((let x13816 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      (match x13810 with
                                       | Some x13822 ->
                                           ignore
                                             (Ojs.call x13816 "push"
                                                [|(Ojs.float_to_js x13822)|])
                                       | None -> ());
                                      (match x13811 with
                                       | Some x13821 ->
                                           ignore
                                             (Ojs.call x13816 "push"
                                                [|(Ojs.float_to_js x13821)|])
                                       | None -> ());
                                      (match x13812 with
                                       | Some x13820 ->
                                           ignore
                                             (Ojs.call x13816 "push"
                                                [|(Ojs.float_to_js x13820)|])
                                       | None -> ());
                                      (match x13813 with
                                       | Some x13819 ->
                                           ignore
                                             (Ojs.call x13816 "push"
                                                [|(Ojs.float_to_js x13819)|])
                                       | None -> ());
                                      (match x13814 with
                                       | Some x13818 ->
                                           ignore
                                             (Ojs.call x13816 "push"
                                                [|(Ojs.float_to_js x13818)|])
                                       | None -> ());
                                      (match x13815 with
                                       | Some x13817 ->
                                           ignore
                                             (Ojs.call x13816 "push"
                                                [|(Ojs.float_to_js x13817)|])
                                       | None -> ());
                                      x13816))|])
    let (scale3d :
      'tags this ->
        ?scale:float ->
          ?originX:float ->
            ?originY:float -> ?originZ:float -> unit -> DOMMatrix.t)
      =
      fun (x13835 : 'tags this) ->
        fun ?scale:(x13826 : float option) ->
          fun ?originX:(x13827 : float option) ->
            fun ?originY:(x13828 : float option) ->
              fun ?originZ:(x13829 : float option) ->
                fun () ->
                  DOMMatrix.t_of_js
                    (let x13837 = this_to_js Obj.magic x13835 in
                     Ojs.call (Ojs.get_prop_ascii x13837 "scale3d") "apply"
                       [|x13837;((let x13830 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x13826 with
                                   | Some x13834 ->
                                       ignore
                                         (Ojs.call x13830 "push"
                                            [|(Ojs.float_to_js x13834)|])
                                   | None -> ());
                                  (match x13827 with
                                   | Some x13833 ->
                                       ignore
                                         (Ojs.call x13830 "push"
                                            [|(Ojs.float_to_js x13833)|])
                                   | None -> ());
                                  (match x13828 with
                                   | Some x13832 ->
                                       ignore
                                         (Ojs.call x13830 "push"
                                            [|(Ojs.float_to_js x13832)|])
                                   | None -> ());
                                  (match x13829 with
                                   | Some x13831 ->
                                       ignore
                                         (Ojs.call x13830 "push"
                                            [|(Ojs.float_to_js x13831)|])
                                   | None -> ());
                                  x13830))|])
    let (scaleNonUniform :
      'tags this -> ?scaleX:float -> ?scaleY:float -> unit -> DOMMatrix.t) =
      fun (x13843 : 'tags this) ->
        fun ?scaleX:(x13838 : float option) ->
          fun ?scaleY:(x13839 : float option) ->
            fun () ->
              DOMMatrix.t_of_js
                (let x13845 = this_to_js Obj.magic x13843 in
                 Ojs.call (Ojs.get_prop_ascii x13845 "scaleNonUniform")
                   "apply"
                   [|x13845;((let x13840 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x13838 with
                               | Some x13842 ->
                                   ignore
                                     (Ojs.call x13840 "push"
                                        [|(Ojs.float_to_js x13842)|])
                               | None -> ());
                              (match x13839 with
                               | Some x13841 ->
                                   ignore
                                     (Ojs.call x13840 "push"
                                        [|(Ojs.float_to_js x13841)|])
                               | None -> ());
                              x13840))|])
    let (skewX : 'tags this -> ?sx:float -> unit -> DOMMatrix.t) =
      fun (x13849 : 'tags this) ->
        fun ?sx:(x13846 : float option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x13851 = this_to_js Obj.magic x13849 in
               Ojs.call (Ojs.get_prop_ascii x13851 "skewX") "apply"
                 [|x13851;((let x13847 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13846 with
                             | Some x13848 ->
                                 ignore
                                   (Ojs.call x13847 "push"
                                      [|(Ojs.float_to_js x13848)|])
                             | None -> ());
                            x13847))|])
    let (skewY : 'tags this -> ?sy:float -> unit -> DOMMatrix.t) =
      fun (x13855 : 'tags this) ->
        fun ?sy:(x13852 : float option) ->
          fun () ->
            DOMMatrix.t_of_js
              (let x13857 = this_to_js Obj.magic x13855 in
               Ojs.call (Ojs.get_prop_ascii x13857 "skewY") "apply"
                 [|x13857;((let x13853 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13852 with
                             | Some x13854 ->
                                 ignore
                                   (Ojs.call x13853 "push"
                                      [|(Ojs.float_to_js x13854)|])
                             | None -> ());
                            x13853))|])
    let (toFloat32Array : 'tags this -> Float32Array.t_0) =
      fun (x13858 : 'tags this) ->
        Float32Array.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x13858) "toFloat32Array" [||])
    let (toFloat64Array : 'tags this -> Float64Array.t_0) =
      fun (x13860 : 'tags this) ->
        Float64Array.t_0_of_js
          (Ojs.call (this_to_js Obj.magic x13860) "toFloat64Array" [||])
    let (toJSON : 'tags this -> any) =
      fun (x13862 : 'tags this) ->
        any_of_js (Ojs.call (this_to_js Obj.magic x13862) "toJSON" [||])
    let (transformPoint :
      'tags this -> ?point:DOMPointInit.t -> unit -> DOMPoint.t) =
      fun (x13867 : 'tags this) ->
        fun ?point:(x13864 : DOMPointInit.t option) ->
          fun () ->
            DOMPoint.t_of_js
              (let x13869 = this_to_js Obj.magic x13867 in
               Ojs.call (Ojs.get_prop_ascii x13869 "transformPoint") "apply"
                 [|x13869;((let x13865 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13864 with
                             | Some x13866 ->
                                 ignore
                                   (Ojs.call x13865 "push"
                                      [|(DOMPointInit.t_to_js x13866)|])
                             | None -> ());
                            x13865))|])
    let (translate :
      'tags this ->
        ?tx:float -> ?ty:float -> ?tz:float -> unit -> DOMMatrix.t)
      =
      fun (x13877 : 'tags this) ->
        fun ?tx:(x13870 : float option) ->
          fun ?ty:(x13871 : float option) ->
            fun ?tz:(x13872 : float option) ->
              fun () ->
                DOMMatrix.t_of_js
                  (let x13879 = this_to_js Obj.magic x13877 in
                   Ojs.call (Ojs.get_prop_ascii x13879 "translate") "apply"
                     [|x13879;((let x13873 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x13870 with
                                 | Some x13876 ->
                                     ignore
                                       (Ojs.call x13873 "push"
                                          [|(Ojs.float_to_js x13876)|])
                                 | None -> ());
                                (match x13871 with
                                 | Some x13875 ->
                                     ignore
                                       (Ojs.call x13873 "push"
                                          [|(Ojs.float_to_js x13875)|])
                                 | None -> ());
                                (match x13872 with
                                 | Some x13874 ->
                                     ignore
                                       (Ojs.call x13873 "push"
                                          [|(Ojs.float_to_js x13874)|])
                                 | None -> ());
                                x13873))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly") "prototype")
    let (create : ?init:float list or_string -> unit -> t) =
      fun ?init:(x13880 : float list or_string option) ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
               (let x13881 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x13880 with
                 | Some x13882 ->
                     ignore
                       (Ojs.call x13881 "push"
                          [|(or_string_to_js
                               (fun (x13883 : float list) ->
                                  Ojs.list_to_js Ojs.float_to_js x13883)
                               x13882)|])
                 | None -> ());
                x13881))
    let (fromFloat32Array : Float32Array.t_0 -> t) =
      fun (x13885 : Float32Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
             "fromFloat32Array" [|(Float32Array.t_0_to_js x13885)|])
    let (fromFloat64Array : Float64Array.t_0 -> t) =
      fun (x13886 : Float64Array.t_0) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly")
             "fromFloat64Array" [|(Float64Array.t_0_to_js x13886)|])
    let (fromMatrix : ?other:DOMMatrixInit.t -> unit -> t) =
      fun ?other:(x13887 : DOMMatrixInit.t option) ->
        fun () ->
          t_of_js
            (let x13890 = Ojs.get_prop_ascii Ojs.global "DOMMatrixReadOnly" in
             Ojs.call (Ojs.get_prop_ascii x13890 "fromMatrix") "apply"
               [|x13890;((let x13888 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x13887 with
                           | Some x13889 ->
                               ignore
                                 (Ojs.call x13888 "push"
                                    [|(DOMMatrixInit.t_to_js x13889)|])
                           | None -> ());
                          x13888))|])
  end
module CustomEventInit =
  struct
    type 'T t = [ `CustomEventInit of 'T  | `EventInit ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x13893 : Ojs.t) -> t_of_js __T_of_js x13893
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x13891 : __T t) -> t_to_js __T_to_js x13891
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x13897 : Ojs.t) -> t_of_js any_of_js x13897
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x13895 : any t) -> t_to_js any_to_js x13895
    type 'T tags = [ `CustomEventInit of 'T  | `EventInit ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEventInit of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x13901 : Ojs.t) -> intf_of_js __tags_of_js x13901
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x13899 : __tags intf) -> intf_to_js __tags_to_js x13899
    let (get_detail : ('tags, 'T) this -> 'T) =
      fun (x13903 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x13903)
             "detail")
    let (set_detail : ('tags, 'T) this -> 'T -> unit) =
      fun (x13906 : ('tags, 'T) this) ->
        fun (x13907 : 'T) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic Obj.magic x13906) "detail"
            (Obj.magic x13907)
    let cast_from = Obj.magic
  end
module CustomEvent =
  struct
    type 'T t = [ `CustomEvent of 'T  | `Event ] intf
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t =
      fun _T -> Obj.magic
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun _T -> Obj.magic
    type 'T t_1 = 'T t
    let rec t_1_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t_1 = fun (type
      __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x13912 : Ojs.t) -> t_of_js __T_of_js x13912
    and t_1_to_js : 'T . ('T -> Ojs.t) -> 'T t_1 -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x13910 : __T t) -> t_to_js __T_to_js x13910
    type t_0 = any t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x13916 : Ojs.t) -> t_of_js any_of_js x13916
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x13914 : any t) -> t_to_js any_to_js x13914
    type 'T tags = [ `CustomEvent of 'T  | `Event ]
    type 'T tags_1 = 'T tags
    type tags_0 = any tags
    type ('tags, 'T) this =
      'tags intf constraint 'tags = [> `CustomEvent of 'T ]
    let rec this_of_js :
      'tags 'T .
        (Ojs.t -> 'tags) -> (Ojs.t -> 'T) -> Ojs.t -> ('tags, 'T) this
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (__T_of_js : Ojs.t -> __T) ->
          fun (x13920 : Ojs.t) -> intf_of_js __tags_of_js x13920
    and this_to_js :
      'tags 'T .
        ('tags -> Ojs.t) -> ('T -> Ojs.t) -> ('tags, 'T) this -> Ojs.t
      = fun (type __tags) -> fun (type __T) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (__T_to_js : __T -> Ojs.t) ->
          fun (x13918 : __tags intf) -> intf_to_js __tags_to_js x13918
    let (get_detail : ('tags, 'T) this -> 'T) =
      fun (x13922 : ('tags, 'T) this) ->
        Obj.magic
          (Ojs.get_prop_ascii (this_to_js Obj.magic Obj.magic x13922)
             "detail")
    let (initCustomEvent :
      ('tags, 'T) this ->
        type_:string ->
          ?bubbles:bool -> ?cancelable:bool -> ?detail:'T -> unit -> unit)
      =
      fun (x13933 : ('tags, 'T) this) ->
        fun ~type_:(x13925 : string) ->
          fun ?bubbles:(x13926 : bool option) ->
            fun ?cancelable:(x13927 : bool option) ->
              fun ?detail:(x13928 : 'T option) ->
                fun () ->
                  ignore
                    (let x13936 = this_to_js Obj.magic Obj.magic x13933 in
                     Ojs.call (Ojs.get_prop_ascii x13936 "initCustomEvent")
                       "apply"
                       [|x13936;((let x13929 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x13929 "push"
                                       [|(Ojs.string_to_js x13925)|]);
                                  (match x13926 with
                                   | Some x13932 ->
                                       ignore
                                         (Ojs.call x13929 "push"
                                            [|(Ojs.bool_to_js x13932)|])
                                   | None -> ());
                                  (match x13927 with
                                   | Some x13931 ->
                                       ignore
                                         (Ojs.call x13929 "push"
                                            [|(Ojs.bool_to_js x13931)|])
                                   | None -> ());
                                  (match x13928 with
                                   | Some x13930 ->
                                       ignore
                                         (Ojs.call x13929 "push"
                                            [|(Obj.magic x13930)|])
                                   | None -> ());
                                  x13929))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t_0) =
      fun () ->
        t_0_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CustomEvent")
             "prototype")
    let (create :
      type_:string -> ?eventInitDict:'T CustomEventInit.t -> unit -> 'T t) =
      fun ~type_:(x13937 : string) ->
        fun ?eventInitDict:(x13938 : 'T CustomEventInit.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "CustomEvent")
                 (let x13939 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x13939 "push" [|(Ojs.string_to_js x13937)|]);
                  (match x13938 with
                   | Some x13940 ->
                       ignore
                         (Ojs.call x13939 "push"
                            [|(CustomEventInit.t_to_js Obj.magic x13940)|])
                   | None -> ());
                  x13939))
  end
module QueuingStrategyInit =
  struct
    type t = [ `QueuingStrategyInit ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13944 : Ojs.t) -> t_of_js x13944
    and t_0_to_js : t_0 -> Ojs.t = fun (x13943 : t) -> t_to_js x13943
    type tags = [ `QueuingStrategyInit ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `QueuingStrategyInit ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13947 : Ojs.t) -> intf_of_js __tags_of_js x13947
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13945 : __tags intf) -> intf_to_js __tags_to_js x13945
    let (get_highWaterMark : 'tags this -> float) =
      fun (x13949 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13949) "highWaterMark")
    let (set_highWaterMark : 'tags this -> float -> unit) =
      fun (x13951 : 'tags this) ->
        fun (x13952 : float) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x13951) "highWaterMark"
            (Ojs.float_to_js x13952)
    let cast_from = Obj.magic
  end
module CountQueuingStrategy =
  struct
    type t = [ `CountQueuingStrategy  | `QueuingStrategy of any ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13955 : Ojs.t) -> t_of_js x13955
    and t_0_to_js : t_0 -> Ojs.t = fun (x13954 : t) -> t_to_js x13954
    type tags = [ `CountQueuingStrategy  | `QueuingStrategy of any ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `CountQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13958 : Ojs.t) -> intf_of_js __tags_of_js x13958
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13956 : __tags intf) -> intf_to_js __tags_to_js x13956
    let (get_highWaterMark : 'tags this -> float) =
      fun (x13960 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13960) "highWaterMark")
    let (get_size : 'tags this -> QueuingStrategySize.t_0) =
      fun (x13962 : 'tags this) ->
        QueuingStrategySize.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x13962) "size")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             "prototype")
    let (create : QueuingStrategyInit.t -> t) =
      fun (x13964 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CountQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x13964)|])
  end
module Console =
  struct
    type t = [ `Console ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x13966 : Ojs.t) -> t_of_js x13966
    and t_0_to_js : t_0 -> Ojs.t = fun (x13965 : t) -> t_to_js x13965
    type tags = [ `Console ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `Console ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x13969 : Ojs.t) -> intf_of_js __tags_of_js x13969
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x13967 : __tags intf) -> intf_to_js __tags_to_js x13967
    let (assert_ :
      'tags this -> ?condition:bool -> data:any list -> unit -> unit) =
      fun (x13976 : 'tags this) ->
        fun ?condition:(x13971 : bool option) ->
          fun ~data:(x13972 : any list) ->
            fun () ->
              ignore
                (let x13978 = this_to_js Obj.magic x13976 in
                 Ojs.call (Ojs.get_prop_ascii x13978 "assert") "apply"
                   [|x13978;((let x13973 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x13971 with
                               | Some x13975 ->
                                   ignore
                                     (Ojs.call x13973 "push"
                                        [|(Ojs.bool_to_js x13975)|])
                               | None -> ());
                              List.iter
                                (fun (x13974 : any) ->
                                   ignore
                                     (Ojs.call x13973 "push"
                                        [|(any_to_js x13974)|])) x13972;
                              x13973))|])
    let (clear : 'tags this -> unit) =
      fun (x13979 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x13979) "clear" [||])
    let (count : 'tags this -> ?label:string -> unit -> unit) =
      fun (x13984 : 'tags this) ->
        fun ?label:(x13981 : string option) ->
          fun () ->
            ignore
              (let x13986 = this_to_js Obj.magic x13984 in
               Ojs.call (Ojs.get_prop_ascii x13986 "count") "apply"
                 [|x13986;((let x13982 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13981 with
                             | Some x13983 ->
                                 ignore
                                   (Ojs.call x13982 "push"
                                      [|(Ojs.string_to_js x13983)|])
                             | None -> ());
                            x13982))|])
    let (countReset : 'tags this -> ?label:string -> unit -> unit) =
      fun (x13990 : 'tags this) ->
        fun ?label:(x13987 : string option) ->
          fun () ->
            ignore
              (let x13992 = this_to_js Obj.magic x13990 in
               Ojs.call (Ojs.get_prop_ascii x13992 "countReset") "apply"
                 [|x13992;((let x13988 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x13987 with
                             | Some x13989 ->
                                 ignore
                                   (Ojs.call x13988 "push"
                                      [|(Ojs.string_to_js x13989)|])
                             | None -> ());
                            x13988))|])
    let (debug : 'tags this -> data:any list -> unit) =
      fun (x13996 : 'tags this) ->
        fun ~data:(x13993 : any list) ->
          ignore
            (let x13998 = this_to_js Obj.magic x13996 in
             Ojs.call (Ojs.get_prop_ascii x13998 "debug") "apply"
               [|x13998;((let x13994 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x13995 : any) ->
                               ignore
                                 (Ojs.call x13994 "push"
                                    [|(any_to_js x13995)|])) x13993;
                          x13994))|])
    let (dir : 'tags this -> ?item:any -> ?options:any -> unit -> unit) =
      fun (x14004 : 'tags this) ->
        fun ?item:(x13999 : any option) ->
          fun ?options:(x14000 : any option) ->
            fun () ->
              ignore
                (let x14006 = this_to_js Obj.magic x14004 in
                 Ojs.call (Ojs.get_prop_ascii x14006 "dir") "apply"
                   [|x14006;((let x14001 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x13999 with
                               | Some x14003 ->
                                   ignore
                                     (Ojs.call x14001 "push"
                                        [|(any_to_js x14003)|])
                               | None -> ());
                              (match x14000 with
                               | Some x14002 ->
                                   ignore
                                     (Ojs.call x14001 "push"
                                        [|(any_to_js x14002)|])
                               | None -> ());
                              x14001))|])
    let (dirxml : 'tags this -> data:any list -> unit) =
      fun (x14010 : 'tags this) ->
        fun ~data:(x14007 : any list) ->
          ignore
            (let x14012 = this_to_js Obj.magic x14010 in
             Ojs.call (Ojs.get_prop_ascii x14012 "dirxml") "apply"
               [|x14012;((let x14008 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14009 : any) ->
                               ignore
                                 (Ojs.call x14008 "push"
                                    [|(any_to_js x14009)|])) x14007;
                          x14008))|])
    let (error : 'tags this -> data:any list -> unit) =
      fun (x14016 : 'tags this) ->
        fun ~data:(x14013 : any list) ->
          ignore
            (let x14018 = this_to_js Obj.magic x14016 in
             Ojs.call (Ojs.get_prop_ascii x14018 "error") "apply"
               [|x14018;((let x14014 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14015 : any) ->
                               ignore
                                 (Ojs.call x14014 "push"
                                    [|(any_to_js x14015)|])) x14013;
                          x14014))|])
    let (group : 'tags this -> data:any list -> unit) =
      fun (x14022 : 'tags this) ->
        fun ~data:(x14019 : any list) ->
          ignore
            (let x14024 = this_to_js Obj.magic x14022 in
             Ojs.call (Ojs.get_prop_ascii x14024 "group") "apply"
               [|x14024;((let x14020 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14021 : any) ->
                               ignore
                                 (Ojs.call x14020 "push"
                                    [|(any_to_js x14021)|])) x14019;
                          x14020))|])
    let (groupCollapsed : 'tags this -> data:any list -> unit) =
      fun (x14028 : 'tags this) ->
        fun ~data:(x14025 : any list) ->
          ignore
            (let x14030 = this_to_js Obj.magic x14028 in
             Ojs.call (Ojs.get_prop_ascii x14030 "groupCollapsed") "apply"
               [|x14030;((let x14026 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14027 : any) ->
                               ignore
                                 (Ojs.call x14026 "push"
                                    [|(any_to_js x14027)|])) x14025;
                          x14026))|])
    let (groupEnd : 'tags this -> unit) =
      fun (x14031 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14031) "groupEnd" [||])
    let (info : 'tags this -> data:any list -> unit) =
      fun (x14036 : 'tags this) ->
        fun ~data:(x14033 : any list) ->
          ignore
            (let x14038 = this_to_js Obj.magic x14036 in
             Ojs.call (Ojs.get_prop_ascii x14038 "info") "apply"
               [|x14038;((let x14034 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14035 : any) ->
                               ignore
                                 (Ojs.call x14034 "push"
                                    [|(any_to_js x14035)|])) x14033;
                          x14034))|])
    let (log : 'tags this -> data:any list -> unit) =
      fun (x14042 : 'tags this) ->
        fun ~data:(x14039 : any list) ->
          ignore
            (let x14044 = this_to_js Obj.magic x14042 in
             Ojs.call (Ojs.get_prop_ascii x14044 "log") "apply"
               [|x14044;((let x14040 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14041 : any) ->
                               ignore
                                 (Ojs.call x14040 "push"
                                    [|(any_to_js x14041)|])) x14039;
                          x14040))|])
    let (table :
      'tags this ->
        ?tabularData:any -> ?properties:string list -> unit -> unit)
      =
      fun (x14051 : 'tags this) ->
        fun ?tabularData:(x14045 : any option) ->
          fun ?properties:(x14046 : string list option) ->
            fun () ->
              ignore
                (let x14053 = this_to_js Obj.magic x14051 in
                 Ojs.call (Ojs.get_prop_ascii x14053 "table") "apply"
                   [|x14053;((let x14047 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x14045 with
                               | Some x14050 ->
                                   ignore
                                     (Ojs.call x14047 "push"
                                        [|(any_to_js x14050)|])
                               | None -> ());
                              (match x14046 with
                               | Some x14048 ->
                                   ignore
                                     (Ojs.call x14047 "push"
                                        [|(Ojs.list_to_js Ojs.string_to_js
                                             x14048)|])
                               | None -> ());
                              x14047))|])
    let (time : 'tags this -> ?label:string -> unit -> unit) =
      fun (x14057 : 'tags this) ->
        fun ?label:(x14054 : string option) ->
          fun () ->
            ignore
              (let x14059 = this_to_js Obj.magic x14057 in
               Ojs.call (Ojs.get_prop_ascii x14059 "time") "apply"
                 [|x14059;((let x14055 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14054 with
                             | Some x14056 ->
                                 ignore
                                   (Ojs.call x14055 "push"
                                      [|(Ojs.string_to_js x14056)|])
                             | None -> ());
                            x14055))|])
    let (timeEnd : 'tags this -> ?label:string -> unit -> unit) =
      fun (x14063 : 'tags this) ->
        fun ?label:(x14060 : string option) ->
          fun () ->
            ignore
              (let x14065 = this_to_js Obj.magic x14063 in
               Ojs.call (Ojs.get_prop_ascii x14065 "timeEnd") "apply"
                 [|x14065;((let x14061 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14060 with
                             | Some x14062 ->
                                 ignore
                                   (Ojs.call x14061 "push"
                                      [|(Ojs.string_to_js x14062)|])
                             | None -> ());
                            x14061))|])
    let (timeLog :
      'tags this -> ?label:string -> data:any list -> unit -> unit) =
      fun (x14071 : 'tags this) ->
        fun ?label:(x14066 : string option) ->
          fun ~data:(x14067 : any list) ->
            fun () ->
              ignore
                (let x14073 = this_to_js Obj.magic x14071 in
                 Ojs.call (Ojs.get_prop_ascii x14073 "timeLog") "apply"
                   [|x14073;((let x14068 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x14066 with
                               | Some x14070 ->
                                   ignore
                                     (Ojs.call x14068 "push"
                                        [|(Ojs.string_to_js x14070)|])
                               | None -> ());
                              List.iter
                                (fun (x14069 : any) ->
                                   ignore
                                     (Ojs.call x14068 "push"
                                        [|(any_to_js x14069)|])) x14067;
                              x14068))|])
    let (timeStamp : 'tags this -> ?label:string -> unit -> unit) =
      fun (x14077 : 'tags this) ->
        fun ?label:(x14074 : string option) ->
          fun () ->
            ignore
              (let x14079 = this_to_js Obj.magic x14077 in
               Ojs.call (Ojs.get_prop_ascii x14079 "timeStamp") "apply"
                 [|x14079;((let x14075 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14074 with
                             | Some x14076 ->
                                 ignore
                                   (Ojs.call x14075 "push"
                                      [|(Ojs.string_to_js x14076)|])
                             | None -> ());
                            x14075))|])
    let (trace : 'tags this -> data:any list -> unit) =
      fun (x14083 : 'tags this) ->
        fun ~data:(x14080 : any list) ->
          ignore
            (let x14085 = this_to_js Obj.magic x14083 in
             Ojs.call (Ojs.get_prop_ascii x14085 "trace") "apply"
               [|x14085;((let x14081 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14082 : any) ->
                               ignore
                                 (Ojs.call x14081 "push"
                                    [|(any_to_js x14082)|])) x14080;
                          x14081))|])
    let (warn : 'tags this -> data:any list -> unit) =
      fun (x14089 : 'tags this) ->
        fun ~data:(x14086 : any list) ->
          ignore
            (let x14091 = this_to_js Obj.magic x14089 in
             Ojs.call (Ojs.get_prop_ascii x14091 "warn") "apply"
               [|x14091;((let x14087 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          List.iter
                            (fun (x14088 : any) ->
                               ignore
                                 (Ojs.call x14087 "push"
                                    [|(any_to_js x14088)|])) x14086;
                          x14087))|])
    let cast_from = Obj.magic
  end
module CanvasPattern =
  struct
    type t = [ `CanvasPattern ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14093 : Ojs.t) -> t_of_js x14093
    and t_0_to_js : t_0 -> Ojs.t = fun (x14092 : t) -> t_to_js x14092
    type tags = [ `CanvasPattern ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasPattern ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14096 : Ojs.t) -> intf_of_js __tags_of_js x14096
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14094 : __tags intf) -> intf_to_js __tags_to_js x14094
    let (setTransform :
      'tags this -> ?transform:DOMMatrix2DInit.t -> unit -> unit) =
      fun (x14101 : 'tags this) ->
        fun ?transform:(x14098 : DOMMatrix2DInit.t option) ->
          fun () ->
            ignore
              (let x14103 = this_to_js Obj.magic x14101 in
               Ojs.call (Ojs.get_prop_ascii x14103 "setTransform") "apply"
                 [|x14103;((let x14099 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x14098 with
                             | Some x14100 ->
                                 ignore
                                   (Ojs.call x14099 "push"
                                      [|(DOMMatrix2DInit.t_to_js x14100)|])
                             | None -> ());
                            x14099))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "CanvasPattern")
             "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasPattern") [||])
  end
module CanvasGradient =
  struct
    type t = [ `CanvasGradient ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14105 : Ojs.t) -> t_of_js x14105
    and t_0_to_js : t_0 -> Ojs.t = fun (x14104 : t) -> t_to_js x14104
    type tags = [ `CanvasGradient ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `CanvasGradient ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14108 : Ojs.t) -> intf_of_js __tags_of_js x14108
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14106 : __tags intf) -> intf_to_js __tags_to_js x14106
    let (addColorStop : 'tags this -> offset:float -> color:string -> unit) =
      fun (x14112 : 'tags this) ->
        fun ~offset:(x14110 : float) ->
          fun ~color:(x14111 : string) ->
            ignore
              (Ojs.call (this_to_js Obj.magic x14112) "addColorStop"
                 [|(Ojs.float_to_js x14110);(Ojs.string_to_js x14111)|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "CanvasGradient") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "CanvasGradient") [||])
  end
module ByteLengthQueuingStrategy =
  struct
    type t =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14115 : Ojs.t) -> t_of_js x14115
    and t_0_to_js : t_0 -> Ojs.t = fun (x14114 : t) -> t_to_js x14114
    type tags =
      [ `ByteLengthQueuingStrategy 
      | `QueuingStrategy of ArrayBufferView.t_0 ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `ByteLengthQueuingStrategy ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14118 : Ojs.t) -> intf_of_js __tags_of_js x14118
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14116 : __tags intf) -> intf_to_js __tags_to_js x14116
    let (get_highWaterMark : 'tags this -> float) =
      fun (x14120 : 'tags this) ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14120) "highWaterMark")
    let (get_size : 'tags this -> ArrayBufferView.t_0 QueuingStrategySize.t)
      =
      fun (x14122 : 'tags this) ->
        QueuingStrategySize.t_of_js ArrayBufferView.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14122) "size")
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             "prototype")
    let (create : QueuingStrategyInit.t -> t) =
      fun (x14125 : QueuingStrategyInit.t) ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii Ojs.global "ByteLengthQueuingStrategy")
             [|(QueuingStrategyInit.t_to_js x14125)|])
  end
module BroadcastChannelEventMap =
  struct
    type t = [ `BroadcastChannelEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14127 : Ojs.t) -> t_of_js x14127
    and t_0_to_js : t_0 -> Ojs.t = fun (x14126 : t) -> t_to_js x14126
    type tags = [ `BroadcastChannelEventMap ]
    type tags_0 = tags
    type 'tags this =
      'tags intf constraint 'tags = [> `BroadcastChannelEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14130 : Ojs.t) -> intf_of_js __tags_of_js x14130
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14128 : __tags intf) -> intf_to_js __tags_to_js x14128
    let (get_message : 'tags this -> MessageEvent.t_0) =
      fun (x14132 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14132) "message")
    let (set_message : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14134 : 'tags this) ->
        fun (x14135 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14134) "message"
            (MessageEvent.t_0_to_js x14135)
    let (get_messageerror : 'tags this -> MessageEvent.t_0) =
      fun (x14137 : 'tags this) ->
        MessageEvent.t_0_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14137) "messageerror")
    let (set_messageerror : 'tags this -> MessageEvent.t_0 -> unit) =
      fun (x14139 : 'tags this) ->
        fun (x14140 : MessageEvent.t_0) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14139) "messageerror"
            (MessageEvent.t_0_to_js x14140)
    let cast_from = Obj.magic
  end
module BroadcastChannel =
  struct
    type t = [ `BroadcastChannel  | `EventTarget ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14143 : Ojs.t) -> t_of_js x14143
    and t_0_to_js : t_0 -> Ojs.t = fun (x14142 : t) -> t_to_js x14142
    type tags = [ `BroadcastChannel  | `EventTarget ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `BroadcastChannel ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14146 : Ojs.t) -> intf_of_js __tags_of_js x14146
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14144 : __tags intf) -> intf_to_js __tags_to_js x14144
    let (get_name : 'tags this -> string) =
      fun (x14148 : 'tags this) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14148) "name")
    let (get_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x14150 : 'tags this) ->
        or_null_of_js
          (fun (x14152 : Ojs.t) ->
             fun ~this:(x14153 : t) ->
               fun ~ev:(x14154 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x14152
                      [|(t_to_js x14153);(MessageEvent.t_0_to_js x14154)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14150) "onmessage")
    let (set_onmessage :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x14155 : 'tags this) ->
        fun (x14156 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14155) "onmessage"
            (or_null_to_js
               (fun (x14157 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14158 : Ojs.t) ->
                       fun (x14159 : Ojs.t) ->
                         any_to_js
                           (x14157 ~this:(t_of_js x14158)
                              ~ev:(MessageEvent.t_0_of_js x14159)))) x14156)
    let (get_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null) =
      fun (x14161 : 'tags this) ->
        or_null_of_js
          (fun (x14163 : Ojs.t) ->
             fun ~this:(x14164 : t) ->
               fun ~ev:(x14165 : MessageEvent.t_0) ->
                 any_of_js
                   (Ojs.apply x14163
                      [|(t_to_js x14164);(MessageEvent.t_0_to_js x14165)|]))
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14161) "onmessageerror")
    let (set_onmessageerror :
      'tags this -> (this:t -> ev:MessageEvent.t_0 -> any) or_null -> unit) =
      fun (x14166 : 'tags this) ->
        fun (x14167 : (this:t -> ev:MessageEvent.t_0 -> any) or_null) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14166) "onmessageerror"
            (or_null_to_js
               (fun (x14168 : this:t -> ev:MessageEvent.t_0 -> any) ->
                  Ojs.fun_to_js 2
                    (fun (x14169 : Ojs.t) ->
                       fun (x14170 : Ojs.t) ->
                         any_to_js
                           (x14168 ~this:(t_of_js x14169)
                              ~ev:(MessageEvent.t_0_of_js x14170)))) x14167)
    let (close : 'tags this -> unit) =
      fun (x14172 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14172) "close" [||])
    let (postMessage : 'tags this -> message:any -> unit) =
      fun (x14175 : 'tags this) ->
        fun ~message:(x14174 : any) ->
          ignore
            (Ojs.call (this_to_js Obj.magic x14175) "postMessage"
               [|(any_to_js x14174)|])
    let (addEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x14185 : 'tags this) ->
        fun ~type_:(x14177 : 'K) ->
          fun ~listener:(x14178 : this:t -> ev:any -> any) ->
            fun
              ?options:(x14179 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x14187 = this_to_js Obj.magic x14185 in
                   Ojs.call (Ojs.get_prop_ascii x14187 "addEventListener")
                     "apply"
                     [|x14187;((let x14180 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14180 "push"
                                     [|(Obj.magic x14177)|]);
                                ignore
                                  (Ojs.call x14180 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14183 : Ojs.t) ->
                                             fun (x14184 : Ojs.t) ->
                                               any_to_js
                                                 (x14178
                                                    ~this:(t_of_js x14183)
                                                    ~ev:(any_of_js x14184))))|]);
                                (match x14179 with
                                 | Some x14181 ->
                                     ignore
                                       (Ojs.call x14180 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x14181)|])
                                 | None -> ());
                                x14180))|])
    let (addEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x14194 : 'tags this) ->
        fun ~type_:(x14188 : string) ->
          fun ~listener:(x14189 : EventListenerOrEventListenerObject.t) ->
            fun
              ?options:(x14190 : AddEventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x14196 = this_to_js Obj.magic x14194 in
                   Ojs.call (Ojs.get_prop_ascii x14196 "addEventListener")
                     "apply"
                     [|x14196;((let x14191 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14191 "push"
                                     [|(Ojs.string_to_js x14188)|]);
                                ignore
                                  (Ojs.call x14191 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14189)|]);
                                (match x14190 with
                                 | Some x14192 ->
                                     ignore
                                       (Ojs.call x14191 "push"
                                          [|(or_boolean_to_js
                                               AddEventListenerOptions.t_to_js
                                               x14192)|])
                                 | None -> ());
                                x14191))|])
    let (removeEventListener :
      'tags this ->
        type_:'K ->
          listener:(this:t -> ev:any -> any) ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x14205 : 'tags this) ->
        fun ~type_:(x14197 : 'K) ->
          fun ~listener:(x14198 : this:t -> ev:any -> any) ->
            fun ?options:(x14199 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x14207 = this_to_js Obj.magic x14205 in
                   Ojs.call (Ojs.get_prop_ascii x14207 "removeEventListener")
                     "apply"
                     [|x14207;((let x14200 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14200 "push"
                                     [|(Obj.magic x14197)|]);
                                ignore
                                  (Ojs.call x14200 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x14203 : Ojs.t) ->
                                             fun (x14204 : Ojs.t) ->
                                               any_to_js
                                                 (x14198
                                                    ~this:(t_of_js x14203)
                                                    ~ev:(any_of_js x14204))))|]);
                                (match x14199 with
                                 | Some x14201 ->
                                     ignore
                                       (Ojs.call x14200 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x14201)|])
                                 | None -> ());
                                x14200))|])
    let (removeEventListener' :
      'tags this ->
        type_:string ->
          listener:EventListenerOrEventListenerObject.t ->
            ?options:EventListenerOptions.t or_boolean -> unit -> unit)
      =
      fun (x14214 : 'tags this) ->
        fun ~type_:(x14208 : string) ->
          fun ~listener:(x14209 : EventListenerOrEventListenerObject.t) ->
            fun ?options:(x14210 : EventListenerOptions.t or_boolean option)
              ->
              fun () ->
                ignore
                  (let x14216 = this_to_js Obj.magic x14214 in
                   Ojs.call (Ojs.get_prop_ascii x14216 "removeEventListener")
                     "apply"
                     [|x14216;((let x14211 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14211 "push"
                                     [|(Ojs.string_to_js x14208)|]);
                                ignore
                                  (Ojs.call x14211 "push"
                                     [|(EventListenerOrEventListenerObject.t_to_js
                                          x14209)|]);
                                (match x14210 with
                                 | Some x14212 ->
                                     ignore
                                       (Ojs.call x14211 "push"
                                          [|(or_boolean_to_js
                                               EventListenerOptions.t_to_js
                                               x14212)|])
                                 | None -> ());
                                x14211))|])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "BroadcastChannel") "prototype")
    let (create : string -> t) =
      fun (x14217 : string) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "BroadcastChannel")
             [|(Ojs.string_to_js x14217)|])
  end
module AbortSignalEventMap =
  struct
    type t = [ `AbortSignalEventMap ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14219 : Ojs.t) -> t_of_js x14219
    and t_0_to_js : t_0 -> Ojs.t = fun (x14218 : t) -> t_to_js x14218
    type tags = [ `AbortSignalEventMap ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortSignalEventMap ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14222 : Ojs.t) -> intf_of_js __tags_of_js x14222
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14220 : __tags intf) -> intf_to_js __tags_to_js x14220
    let (get_abort : 'tags this -> Event.t) =
      fun (x14224 : 'tags this) ->
        Event.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14224) "abort")
    let (set_abort : 'tags this -> Event.t -> unit) =
      fun (x14226 : 'tags this) ->
        fun (x14227 : Event.t) ->
          Ojs.set_prop_ascii (this_to_js Obj.magic x14226) "abort"
            (Event.t_to_js x14227)
    let cast_from = Obj.magic
  end
module AbortController =
  struct
    type t = [ `AbortController ] intf
    let rec t_of_js : Ojs.t -> t = Obj.magic
    and t_to_js : t -> Ojs.t = Obj.magic
    type t_0 = t
    let rec t_0_of_js : Ojs.t -> t_0 = fun (x14230 : Ojs.t) -> t_of_js x14230
    and t_0_to_js : t_0 -> Ojs.t = fun (x14229 : t) -> t_to_js x14229
    type tags = [ `AbortController ]
    type tags_0 = tags
    type 'tags this = 'tags intf constraint 'tags = [> `AbortController ]
    let rec this_of_js : 'tags . (Ojs.t -> 'tags) -> Ojs.t -> 'tags this =
      fun (type __tags) ->
      fun (__tags_of_js : Ojs.t -> __tags) ->
        fun (x14233 : Ojs.t) -> intf_of_js __tags_of_js x14233
    and this_to_js : 'tags . ('tags -> Ojs.t) -> 'tags this -> Ojs.t = fun
      (type __tags) ->
      fun (__tags_to_js : __tags -> Ojs.t) ->
        fun (x14231 : __tags intf) -> intf_to_js __tags_to_js x14231
    let (get_signal : 'tags this -> AbortSignal.t) =
      fun (x14235 : 'tags this) ->
        AbortSignal.t_of_js
          (Ojs.get_prop_ascii (this_to_js Obj.magic x14235) "signal")
    let (abort : 'tags this -> unit) =
      fun (x14237 : 'tags this) ->
        ignore (Ojs.call (this_to_js Obj.magic x14237) "abort" [||])
    let cast_from = Obj.magic
    let (prototype : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "AbortController") "prototype")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "AbortController") [||])
  end
let (importScripts : string list -> unit) =
  fun (x14239 : string list) ->
    ignore
      (let x14242 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x14242 "importScripts") "apply"
         [|x14242;((let x14240 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun (x14241 : string) ->
                         ignore
                           (Ojs.call x14240 "push"
                              [|(Ojs.string_to_js x14241)|])) x14239;
                    x14240))|])
let (console : unit -> Console.t) =
  fun () -> Console.t_of_js (Ojs.get_prop_ascii Ojs.global "console")
let (name : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "name")
let (onmessage :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x14243 : Ojs.t) ->
         fun ~this:(x14244 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x14245 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x14243
                  [|(DedicatedWorkerGlobalScope.t_to_js x14244);(MessageEvent.t_0_to_js
                                                                   x14245)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessage")
let (onmessageerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:MessageEvent.t_0 -> any) or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x14246 : Ojs.t) ->
         fun ~this:(x14247 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x14248 : MessageEvent.t_0) ->
             any_of_js
               (Ojs.apply x14246
                  [|(DedicatedWorkerGlobalScope.t_to_js x14247);(MessageEvent.t_0_to_js
                                                                   x14248)|]))
      (Ojs.get_prop_ascii Ojs.global "onmessageerror")
let (close : unit -> unit) =
  fun () -> ignore (Ojs.call Ojs.global "close" [||])
let (postMessage : message:any -> transfer:Transferable.t list -> unit) =
  fun ~message:(x14249 : any) ->
    fun ~transfer:(x14250 : Transferable.t list) ->
      ignore
        (Ojs.call Ojs.global "postMessage"
           [|(any_to_js x14249);(Ojs.list_to_js Transferable.t_to_js x14250)|])
let (postMessage' :
  message:any -> ?options:StructuredSerializeOptions.t -> unit -> unit) =
  fun ~message:(x14252 : any) ->
    fun ?options:(x14253 : StructuredSerializeOptions.t option) ->
      fun () ->
        ignore
          (let x14256 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x14256 "postMessage") "apply"
             [|x14256;((let x14254 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x14254 "push" [|(any_to_js x14252)|]);
                        (match x14253 with
                         | Some x14255 ->
                             ignore
                               (Ojs.call x14254 "push"
                                  [|(StructuredSerializeOptions.t_to_js
                                       x14255)|])
                         | None -> ());
                        x14254))|])
let (dispatchEvent : Event.t -> bool) =
  fun (x14257 : Event.t) ->
    Ojs.bool_of_js
      (Ojs.call Ojs.global "dispatchEvent" [|(Event.t_to_js x14257)|])
let (location : unit -> WorkerLocation.t) =
  fun () -> WorkerLocation.t_of_js (Ojs.get_prop_ascii Ojs.global "location")
let (navigator : unit -> WorkerNavigator.t) =
  fun () ->
    WorkerNavigator.t_of_js (Ojs.get_prop_ascii Ojs.global "navigator")
let (onerror :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:ErrorEvent.t -> any) or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x14258 : Ojs.t) ->
         fun ~this:(x14259 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x14260 : ErrorEvent.t) ->
             any_of_js
               (Ojs.apply x14258
                  [|(DedicatedWorkerGlobalScope.t_to_js x14259);(ErrorEvent.t_to_js
                                                                   x14260)|]))
      (Ojs.get_prop_ascii Ojs.global "onerror")
let (onlanguagechange :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) or_null) =
  fun () ->
    or_null_of_js
      (fun (x14261 : Ojs.t) ->
         fun ~this:(x14262 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x14263 : Event.t) ->
             any_of_js
               (Ojs.apply x14261
                  [|(DedicatedWorkerGlobalScope.t_to_js x14262);(Event.t_to_js
                                                                   x14263)|]))
      (Ojs.get_prop_ascii Ojs.global "onlanguagechange")
let (onoffline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) or_null) =
  fun () ->
    or_null_of_js
      (fun (x14264 : Ojs.t) ->
         fun ~this:(x14265 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x14266 : Event.t) ->
             any_of_js
               (Ojs.apply x14264
                  [|(DedicatedWorkerGlobalScope.t_to_js x14265);(Event.t_to_js
                                                                   x14266)|]))
      (Ojs.get_prop_ascii Ojs.global "onoffline")
let (ononline :
  unit -> (this:DedicatedWorkerGlobalScope.t -> ev:Event.t -> any) or_null) =
  fun () ->
    or_null_of_js
      (fun (x14267 : Ojs.t) ->
         fun ~this:(x14268 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x14269 : Event.t) ->
             any_of_js
               (Ojs.apply x14267
                  [|(DedicatedWorkerGlobalScope.t_to_js x14268);(Event.t_to_js
                                                                   x14269)|]))
      (Ojs.get_prop_ascii Ojs.global "ononline")
let (onrejectionhandled :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x14270 : Ojs.t) ->
         fun ~this:(x14271 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x14272 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x14270
                  [|(DedicatedWorkerGlobalScope.t_to_js x14271);(PromiseRejectionEvent.t_to_js
                                                                   x14272)|]))
      (Ojs.get_prop_ascii Ojs.global "onrejectionhandled")
let (onunhandledrejection :
  unit ->
    (this:DedicatedWorkerGlobalScope.t -> ev:PromiseRejectionEvent.t -> any)
      or_null)
  =
  fun () ->
    or_null_of_js
      (fun (x14273 : Ojs.t) ->
         fun ~this:(x14274 : DedicatedWorkerGlobalScope.t) ->
           fun ~ev:(x14275 : PromiseRejectionEvent.t) ->
             any_of_js
               (Ojs.apply x14273
                  [|(DedicatedWorkerGlobalScope.t_to_js x14274);(PromiseRejectionEvent.t_to_js
                                                                   x14275)|]))
      (Ojs.get_prop_ascii Ojs.global "onunhandledrejection")
let (self : unit -> (WorkerGlobalScope.t, any) intersection2) =
  fun () ->
    intersection2_of_js WorkerGlobalScope.t_of_js any_of_js
      (Ojs.get_prop_ascii Ojs.global "self")
let (importScripts' : URL.t or_string list -> unit) =
  fun (x14278 : URL.t or_string list) ->
    ignore
      (let x14282 = Ojs.global in
       Ojs.call (Ojs.get_prop_ascii x14282 "importScripts") "apply"
         [|x14282;((let x14279 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    List.iter
                      (fun (x14280 : URL.t or_string) ->
                         ignore
                           (Ojs.call x14279 "push"
                              [|(or_string_to_js URL.t_to_js x14280)|]))
                      x14278;
                    x14279))|])
let (fonts : unit -> FontFaceSet.t) =
  fun () -> FontFaceSet.t_of_js (Ojs.get_prop_ascii Ojs.global "fonts")
let (caches : unit -> CacheStorage.t) =
  fun () -> CacheStorage.t_of_js (Ojs.get_prop_ascii Ojs.global "caches")
let (crossOriginIsolated : unit -> bool) =
  fun () ->
    Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "crossOriginIsolated")
let (crypto : unit -> Crypto.t) =
  fun () -> Crypto.t_of_js (Ojs.get_prop_ascii Ojs.global "crypto")
let (indexedDB : unit -> IDBFactory.t) =
  fun () -> IDBFactory.t_of_js (Ojs.get_prop_ascii Ojs.global "indexedDB")
let (isSecureContext : unit -> bool) =
  fun () -> Ojs.bool_of_js (Ojs.get_prop_ascii Ojs.global "isSecureContext")
let (origin : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.get_prop_ascii Ojs.global "origin")
let (performance : unit -> Performance.t) =
  fun () -> Performance.t_of_js (Ojs.get_prop_ascii Ojs.global "performance")
let (atob : string -> string) =
  fun (x14283 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "atob" [|(Ojs.string_to_js x14283)|])
let (btoa : string -> string) =
  fun (x14284 : string) ->
    Ojs.string_of_js
      (Ojs.call Ojs.global "btoa" [|(Ojs.string_to_js x14284)|])
let (clearInterval : ?handle:float -> unit -> unit) =
  fun ?handle:(x14285 : float option) ->
    fun () ->
      ignore
        (let x14288 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x14288 "clearInterval") "apply"
           [|x14288;((let x14286 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14285 with
                       | Some x14287 ->
                           ignore
                             (Ojs.call x14286 "push"
                                [|(Ojs.float_to_js x14287)|])
                       | None -> ());
                      x14286))|])
let (clearTimeout : ?handle:float -> unit -> unit) =
  fun ?handle:(x14289 : float option) ->
    fun () ->
      ignore
        (let x14292 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x14292 "clearTimeout") "apply"
           [|x14292;((let x14290 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x14289 with
                       | Some x14291 ->
                           ignore
                             (Ojs.call x14290 "push"
                                [|(Ojs.float_to_js x14291)|])
                       | None -> ());
                      x14290))|])
let (createImageBitmap :
  image:ImageBitmapSource.t ->
    ?options:ImageBitmapOptions.t -> unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x14293 : ImageBitmapSource.t) ->
    fun ?options:(x14294 : ImageBitmapOptions.t option) ->
      fun () ->
        Promise.t_1_of_js ImageBitmap.t_of_js
          (let x14297 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x14297 "createImageBitmap") "apply"
             [|x14297;((let x14295 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x14295 "push"
                             [|(ImageBitmapSource.t_to_js x14293)|]);
                        (match x14294 with
                         | Some x14296 ->
                             ignore
                               (Ojs.call x14295 "push"
                                  [|(ImageBitmapOptions.t_to_js x14296)|])
                         | None -> ());
                        x14295))|])
let (createImageBitmap' :
  image:ImageBitmapSource.t ->
    sx:float ->
      sy:float ->
        sw:float ->
          sh:float ->
            ?options:ImageBitmapOptions.t ->
              unit -> ImageBitmap.t Promise.t_1)
  =
  fun ~image:(x14299 : ImageBitmapSource.t) ->
    fun ~sx:(x14300 : float) ->
      fun ~sy:(x14301 : float) ->
        fun ~sw:(x14302 : float) ->
          fun ~sh:(x14303 : float) ->
            fun ?options:(x14304 : ImageBitmapOptions.t option) ->
              fun () ->
                Promise.t_1_of_js ImageBitmap.t_of_js
                  (let x14307 = Ojs.global in
                   Ojs.call (Ojs.get_prop_ascii x14307 "createImageBitmap")
                     "apply"
                     [|x14307;((let x14305 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x14305 "push"
                                     [|(ImageBitmapSource.t_to_js x14299)|]);
                                ignore
                                  (Ojs.call x14305 "push"
                                     [|(Ojs.float_to_js x14300)|]);
                                ignore
                                  (Ojs.call x14305 "push"
                                     [|(Ojs.float_to_js x14301)|]);
                                ignore
                                  (Ojs.call x14305 "push"
                                     [|(Ojs.float_to_js x14302)|]);
                                ignore
                                  (Ojs.call x14305 "push"
                                     [|(Ojs.float_to_js x14303)|]);
                                (match x14304 with
                                 | Some x14306 ->
                                     ignore
                                       (Ojs.call x14305 "push"
                                          [|(ImageBitmapOptions.t_to_js
                                               x14306)|])
                                 | None -> ());
                                x14305))|])
let (fetch :
  input:RequestInfo.t ->
    ?init:RequestInit.t -> unit -> Response.t Promise.t_1)
  =
  fun ~input:(x14309 : RequestInfo.t) ->
    fun ?init:(x14310 : RequestInit.t option) ->
      fun () ->
        Promise.t_1_of_js Response.t_of_js
          (let x14313 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x14313 "fetch") "apply"
             [|x14313;((let x14311 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x14311 "push"
                             [|(RequestInfo.t_to_js x14309)|]);
                        (match x14310 with
                         | Some x14312 ->
                             ignore
                               (Ojs.call x14311 "push"
                                  [|(RequestInit.t_to_js x14312)|])
                         | None -> ());
                        x14311))|])
let (queueMicrotask : VoidFunction.t -> unit) =
  fun (x14315 : VoidFunction.t) ->
    ignore
      (Ojs.call Ojs.global "queueMicrotask" [|(VoidFunction.t_to_js x14315)|])
let (setInterval :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x14316 : TimerHandler.t) ->
    fun ?timeout:(x14317 : float option) ->
      fun ~arguments:(x14318 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x14322 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x14322 "setInterval") "apply"
               [|x14322;((let x14319 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x14319 "push"
                               [|(TimerHandler.t_to_js x14316)|]);
                          (match x14317 with
                           | Some x14321 ->
                               ignore
                                 (Ojs.call x14319 "push"
                                    [|(Ojs.float_to_js x14321)|])
                           | None -> ());
                          List.iter
                            (fun (x14320 : any) ->
                               ignore
                                 (Ojs.call x14319 "push"
                                    [|(any_to_js x14320)|])) x14318;
                          x14319))|])
let (setTimeout :
  handler:TimerHandler.t ->
    ?timeout:float -> arguments:any list -> unit -> float)
  =
  fun ~handler:(x14323 : TimerHandler.t) ->
    fun ?timeout:(x14324 : float option) ->
      fun ~arguments:(x14325 : any list) ->
        fun () ->
          Ojs.float_of_js
            (let x14329 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x14329 "setTimeout") "apply"
               [|x14329;((let x14326 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x14326 "push"
                               [|(TimerHandler.t_to_js x14323)|]);
                          (match x14324 with
                           | Some x14328 ->
                               ignore
                                 (Ojs.call x14326 "push"
                                    [|(Ojs.float_to_js x14328)|])
                           | None -> ());
                          List.iter
                            (fun (x14327 : any) ->
                               ignore
                                 (Ojs.call x14326 "push"
                                    [|(any_to_js x14327)|])) x14325;
                          x14326))|])
let (cancelAnimationFrame : float -> unit) =
  fun (x14330 : float) ->
    ignore
      (Ojs.call Ojs.global "cancelAnimationFrame"
         [|(Ojs.float_to_js x14330)|])
let (requestAnimationFrame : FrameRequestCallback.t -> float) =
  fun (x14331 : FrameRequestCallback.t) ->
    Ojs.float_of_js
      (Ojs.call Ojs.global "requestAnimationFrame"
         [|(FrameRequestCallback.t_to_js x14331)|])
let (addEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x14332 : 'K) ->
    fun
      ~listener:(x14333 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun ?options:(x14334 : AddEventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x14340 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x14340 "addEventListener") "apply"
               [|x14340;((let x14335 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x14335 "push" [|(Obj.magic x14332)|]);
                          ignore
                            (Ojs.call x14335 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x14338 : Ojs.t) ->
                                       fun (x14339 : Ojs.t) ->
                                         any_to_js
                                           (x14333
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x14338)
                                              ~ev:(any_of_js x14339))))|]);
                          (match x14334 with
                           | Some x14336 ->
                               ignore
                                 (Ojs.call x14335 "push"
                                    [|(or_boolean_to_js
                                         AddEventListenerOptions.t_to_js
                                         x14336)|])
                           | None -> ());
                          x14335))|])
let (addEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:AddEventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x14341 : string) ->
    fun ~listener:(x14342 : EventListenerOrEventListenerObject.t) ->
      fun ?options:(x14343 : AddEventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x14347 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x14347 "addEventListener") "apply"
               [|x14347;((let x14344 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x14344 "push"
                               [|(Ojs.string_to_js x14341)|]);
                          ignore
                            (Ojs.call x14344 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x14342)|]);
                          (match x14343 with
                           | Some x14345 ->
                               ignore
                                 (Ojs.call x14344 "push"
                                    [|(or_boolean_to_js
                                         AddEventListenerOptions.t_to_js
                                         x14345)|])
                           | None -> ());
                          x14344))|])
let (removeEventListener :
  type_:'K ->
    listener:(this:DedicatedWorkerGlobalScope.t -> ev:any -> any) ->
      ?options:EventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x14348 : 'K) ->
    fun
      ~listener:(x14349 : this:DedicatedWorkerGlobalScope.t -> ev:any -> any)
      ->
      fun ?options:(x14350 : EventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x14356 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x14356 "removeEventListener")
               "apply"
               [|x14356;((let x14351 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x14351 "push" [|(Obj.magic x14348)|]);
                          ignore
                            (Ojs.call x14351 "push"
                               [|(Ojs.fun_to_js 2
                                    (fun (x14354 : Ojs.t) ->
                                       fun (x14355 : Ojs.t) ->
                                         any_to_js
                                           (x14349
                                              ~this:(DedicatedWorkerGlobalScope.t_of_js
                                                       x14354)
                                              ~ev:(any_of_js x14355))))|]);
                          (match x14350 with
                           | Some x14352 ->
                               ignore
                                 (Ojs.call x14351 "push"
                                    [|(or_boolean_to_js
                                         EventListenerOptions.t_to_js x14352)|])
                           | None -> ());
                          x14351))|])
let (removeEventListener' :
  type_:string ->
    listener:EventListenerOrEventListenerObject.t ->
      ?options:EventListenerOptions.t or_boolean -> unit -> unit)
  =
  fun ~type_:(x14357 : string) ->
    fun ~listener:(x14358 : EventListenerOrEventListenerObject.t) ->
      fun ?options:(x14359 : EventListenerOptions.t or_boolean option) ->
        fun () ->
          ignore
            (let x14363 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x14363 "removeEventListener")
               "apply"
               [|x14363;((let x14360 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x14360 "push"
                               [|(Ojs.string_to_js x14357)|]);
                          ignore
                            (Ojs.call x14360 "push"
                               [|(EventListenerOrEventListenerObject.t_to_js
                                    x14358)|]);
                          (match x14359 with
                           | Some x14361 ->
                               ignore
                                 (Ojs.call x14360 "push"
                                    [|(or_boolean_to_js
                                         EventListenerOptions.t_to_js x14361)|])
                           | None -> ());
                          x14360))|])

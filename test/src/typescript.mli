[@@@ocaml.warning "-7-11-32-33-39"]
[@@@js.implem 
  [@@@ocaml.warning "-7-11-32-33-39"]
]
open Ts2ocaml
open Ts2ocaml.Dom
module Internal : sig
  module AnonymousInterfaces : sig
    type anonymous_interface_0 = [`anonymous_interface_0] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_1 = [`anonymous_interface_1] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_2 = [`anonymous_interface_2] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_3 = [`anonymous_interface_3] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_4 = [`anonymous_interface_4] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_5 = [`anonymous_interface_5] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_6 = [`anonymous_interface_6] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_7 = [`anonymous_interface_7] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_8 = [`anonymous_interface_8] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_9 = [`anonymous_interface_9] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_10 = [`anonymous_interface_10] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_11 = [`anonymous_interface_11] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_12 = [`anonymous_interface_12] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_13 = [`anonymous_interface_13] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_14 = [`anonymous_interface_14] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_15 = [`anonymous_interface_15] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_16 = [`anonymous_interface_16] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_17 = [`anonymous_interface_17] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_18 = [`anonymous_interface_18] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_19 = [`anonymous_interface_19] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_20 = [`anonymous_interface_20] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_21 = [`anonymous_interface_21] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_22 = [`anonymous_interface_22] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_23 = [`anonymous_interface_23] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_24 = [`anonymous_interface_24] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_25 = [`anonymous_interface_25] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_26 = [`anonymous_interface_26] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_27 = [`anonymous_interface_27] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_28 = [`anonymous_interface_28] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_29 = [`anonymous_interface_29] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_30 = [`anonymous_interface_30] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_31 = [`anonymous_interface_31] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_32 = [`anonymous_interface_32] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    type anonymous_interface_33 = [`anonymous_interface_33] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  end
  module Types : sig
    open AnonymousInterfaces
    type ts_AbstractKeyword = ts_SyntaxKind_AbstractKeyword ts_ModifierToken
    and ts_AccessExpression = ([`U_n_201 of ts_PropertyAccessExpression [@js 201] | `U_n_202 of ts_ElementAccessExpression [@js 202]] [@js.union on_field "kind"])
    and ts_AccessibilityModifier = ([`U_n_120 of ts_PrivateKeyword [@js 120] | `U_n_121 of ts_ProtectedKeyword [@js 121] | `U_n_122 of ts_PublicKeyword [@js 122]] [@js.union on_field "kind"])
    and ts_AccessorDeclaration = ([`U_n_167 of ts_GetAccessorDeclaration [@js 167] | `U_n_168 of ts_SetAccessorDeclaration [@js 168]] [@js.union on_field "kind"])
    and ts_AdditiveOperator = ((ts_SyntaxKind_MinusToken, ts_SyntaxKind_PlusToken) union2, ([`MinusToken[@js 40] | `PlusToken[@js 39]] [@js.enum])) or_enum
    and ts_AdditiveOperatorOrHigher = ((((ts_MultiplicativeOperator, ts_MultiplicativeOperatorOrHigher, ts_SyntaxKind_AsteriskAsteriskToken, ts_SyntaxKind_AsteriskToken, ts_SyntaxKind_MinusToken, ts_SyntaxKind_PercentToken, ts_SyntaxKind_PlusToken, ts_SyntaxKind_SlashToken) union8, ts_ExponentiationOperator) or_, ts_AdditiveOperator) or_, ([`AsteriskAsteriskToken[@js 42] | `AsteriskToken[@js 41] | `MinusToken[@js 40] | `PercentToken[@js 44] | `PlusToken[@js 39] | `SlashToken[@js 43]] [@js.enum])) or_enum
    and 'T ts_AffectedFileResult = anonymous_interface_12 or_undefined
    and ts_AmdDependency = [`Ts_AmdDependency] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ApplicableRefactorInfo = [`Ts_ApplicableRefactorInfo] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ApplyCodeActionCommandResult = [`Ts_ApplyCodeActionCommandResult] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ArrayBindingElement = ([`U_n_198 of ts_BindingElement [@js 198] | `U_n_222 of ts_OmittedExpression [@js 222]] [@js.union on_field "kind"])
    and ts_ArrayBindingOrAssignmentElement = ([`U_n_78 of ts_Identifier [@js 78] | `U_n_198 of ts_BindingElement [@js 198] | `U_n_199 of ts_ArrayLiteralExpression [@js 199] | `U_n_200 of ts_ObjectLiteralExpression [@js 200] | `U_n_201 of ts_PropertyAccessExpression [@js 201] | `U_n_202 of ts_ElementAccessExpression [@js 202] | `U_n_216 of ts_EqualsToken ts_AssignmentExpression [@js 216] | `U_n_220 of ts_SpreadElement [@js 220] | `U_n_222 of ts_OmittedExpression [@js 222]] [@js.union on_field "kind"])
    and ts_ArrayBindingOrAssignmentPattern = ([`U_n_197 of ts_ArrayBindingPattern [@js 197] | `U_n_199 of ts_ArrayLiteralExpression [@js 199]] [@js.union on_field "kind"])
    and ts_ArrayBindingPattern = [`Ts_ArrayBindingPattern | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ArrayDestructuringAssignment = [`Ts_ArrayDestructuringAssignment | `Ts_AssignmentExpression of ts_EqualsToken | `Ts_BinaryExpression | `Ts_Declaration | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ArrayLiteralExpression = [`Ts_ArrayLiteralExpression | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ArrayTypeNode = [`Ts_ArrayTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ArrowFunction = [`Ts_ArrowFunction | `Ts_Declaration | `Ts_Expression | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_AsExpression = [`Ts_AsExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_AssertionExpression = ([`U_n_206 of ts_TypeAssertion [@js 206] | `U_n_224 of ts_AsExpression [@js 224]] [@js.union on_field "kind"])
    and ts_AssertsIdentifierTypePredicate = [`Ts_AssertsIdentifierTypePredicate | `Ts_TypePredicateBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_AssertsKeyword = ts_SyntaxKind_AssertsKeyword ts_KeywordToken
    and ts_AssertsThisTypePredicate = [`Ts_AssertsThisTypePredicate | `Ts_TypePredicateBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_AssertsToken = ts_AssertsKeyword
    and 'TOperator ts_AssignmentExpression = [`Ts_AssignmentExpression of 'TOperator | `Ts_BinaryExpression | `Ts_Declaration | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=(fun _TOperator -> Obj.magic); to_js=(fun _TOperator -> Obj.magic) }]
    and ts_AssignmentOperator = (((((((((((ts_SyntaxKind_GreaterThanGreaterThanEqualsToken, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanEqualsToken, ts_SyntaxKind_LessThanLessThanEqualsToken, ts_SyntaxKind_MinusEqualsToken, ts_SyntaxKind_PercentEqualsToken, ts_SyntaxKind_PlusEqualsToken, ts_SyntaxKind_QuestionQuestionEqualsToken, ts_SyntaxKind_SlashEqualsToken) union8, ts_SyntaxKind_EqualsToken) or_, ts_SyntaxKind_CaretEqualsToken) or_, ts_SyntaxKind_BarEqualsToken) or_, ts_SyntaxKind_BarBarEqualsToken) or_, ts_SyntaxKind_AsteriskEqualsToken) or_, ts_SyntaxKind_AsteriskAsteriskEqualsToken) or_, ts_SyntaxKind_AmpersandEqualsToken) or_, ts_SyntaxKind_AmpersandAmpersandEqualsToken) or_, ts_CompoundAssignmentOperator) or_, ([`AmpersandAmpersandEqualsToken[@js 75] | `AmpersandEqualsToken[@js 72] | `AsteriskAsteriskEqualsToken[@js 66] | `AsteriskEqualsToken[@js 65] | `BarBarEqualsToken[@js 74] | `BarEqualsToken[@js 73] | `CaretEqualsToken[@js 77] | `EqualsToken[@js 62] | `GreaterThanGreaterThanEqualsToken[@js 70] | `GreaterThanGreaterThanGreaterThanEqualsToken[@js 71] | `LessThanLessThanEqualsToken[@js 69] | `MinusEqualsToken[@js 64] | `PercentEqualsToken[@js 68] | `PlusEqualsToken[@js 63] | `QuestionQuestionEqualsToken[@js 76] | `SlashEqualsToken[@js 67]] [@js.enum])) or_enum
    and ts_AssignmentOperatorOrHigher = ((((((((((((((((((((((((((((((((((((((((((((((((((((ts_SyntaxKind_PercentEqualsToken, ts_SyntaxKind_PercentToken, ts_SyntaxKind_PlusEqualsToken, ts_SyntaxKind_PlusToken, ts_SyntaxKind_QuestionQuestionEqualsToken, ts_SyntaxKind_QuestionQuestionToken, ts_SyntaxKind_SlashEqualsToken, ts_SyntaxKind_SlashToken) union8, ts_SyntaxKind_MinusToken) or_, ts_SyntaxKind_MinusEqualsToken) or_, ts_SyntaxKind_LessThanToken) or_, ts_SyntaxKind_LessThanLessThanToken) or_, ts_SyntaxKind_LessThanLessThanEqualsToken) or_, ts_SyntaxKind_LessThanEqualsToken) or_, ts_SyntaxKind_InstanceOfKeyword) or_, ts_SyntaxKind_InKeyword) or_, ts_SyntaxKind_GreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsEqualsToken) or_, ts_SyntaxKind_EqualsToken) or_, ts_SyntaxKind_EqualsEqualsToken) or_, ts_SyntaxKind_EqualsEqualsEqualsToken) or_, ts_SyntaxKind_CaretToken) or_, ts_SyntaxKind_CaretEqualsToken) or_, ts_SyntaxKind_BarToken) or_, ts_SyntaxKind_BarEqualsToken) or_, ts_SyntaxKind_BarBarToken) or_, ts_SyntaxKind_BarBarEqualsToken) or_, ts_SyntaxKind_AsteriskToken) or_, ts_SyntaxKind_AsteriskEqualsToken) or_, ts_SyntaxKind_AsteriskAsteriskToken) or_, ts_SyntaxKind_AsteriskAsteriskEqualsToken) or_, ts_SyntaxKind_AmpersandToken) or_, ts_SyntaxKind_AmpersandEqualsToken) or_, ts_SyntaxKind_AmpersandAmpersandToken) or_, ts_SyntaxKind_AmpersandAmpersandEqualsToken) or_, ts_ShiftOperatorOrHigher) or_, ts_ShiftOperator) or_, ts_RelationalOperatorOrHigher) or_, ts_RelationalOperator) or_, ts_MultiplicativeOperatorOrHigher) or_, ts_MultiplicativeOperator) or_, ts_LogicalOperatorOrHigher) or_, ts_LogicalOperator) or_, ts_ExponentiationOperator) or_, ts_EqualityOperatorOrHigher) or_, ts_EqualityOperator) or_, ts_CompoundAssignmentOperator) or_, ts_BitwiseOperatorOrHigher) or_, ts_BitwiseOperator) or_, ts_AssignmentOperator) or_, ts_AdditiveOperatorOrHigher) or_, ts_AdditiveOperator) or_, ([`AmpersandAmpersandEqualsToken[@js 75] | `AmpersandAmpersandToken[@js 55] | `AmpersandEqualsToken[@js 72] | `AmpersandToken[@js 50] | `AsteriskAsteriskEqualsToken[@js 66] | `AsteriskAsteriskToken[@js 42] | `AsteriskEqualsToken[@js 65] | `AsteriskToken[@js 41] | `BarBarEqualsToken[@js 74] | `BarBarToken[@js 56] | `BarEqualsToken[@js 73] | `BarToken[@js 51] | `CaretEqualsToken[@js 77] | `CaretToken[@js 52] | `EqualsEqualsEqualsToken[@js 36] | `EqualsEqualsToken[@js 34] | `EqualsToken[@js 62] | `ExclamationEqualsEqualsToken[@js 37] | `ExclamationEqualsToken[@js 35] | `GreaterThanEqualsToken[@js 33] | `GreaterThanGreaterThanEqualsToken[@js 70] | `GreaterThanGreaterThanGreaterThanEqualsToken[@js 71] | `GreaterThanGreaterThanGreaterThanToken[@js 49] | `GreaterThanGreaterThanToken[@js 48] | `GreaterThanToken[@js 31] | `InKeyword[@js 100] | `InstanceOfKeyword[@js 101] | `LessThanEqualsToken[@js 32] | `LessThanLessThanEqualsToken[@js 69] | `LessThanLessThanToken[@js 47] | `LessThanToken[@js 29] | `MinusEqualsToken[@js 64] | `MinusToken[@js 40] | `PercentEqualsToken[@js 68] | `PercentToken[@js 44] | `PlusEqualsToken[@js 63] | `PlusToken[@js 39] | `QuestionQuestionEqualsToken[@js 76] | `QuestionQuestionToken[@js 60] | `SlashEqualsToken[@js 67] | `SlashToken[@js 43]] [@js.enum])) or_enum
    and ts_AssignmentOperatorToken = ts_AssignmentOperator ts_Token
    and ts_AssignmentPattern = ([`U_n_199 of ts_ArrayLiteralExpression [@js 199] | `U_n_200 of ts_ObjectLiteralExpression [@js 200]] [@js.union on_field "kind"])
    and ts_AsteriskToken = ts_SyntaxKind_AsteriskToken ts_PunctuationToken
    and ts_AsyncKeyword = ts_SyntaxKind_AsyncKeyword ts_ModifierToken
    and ts_AwaitExpression = [`Ts_AwaitExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_AwaitKeyword = ts_SyntaxKind_AwaitKeyword ts_KeywordToken
    and ts_AwaitKeywordToken = ts_AwaitKeyword
    and ts_BaseType = (([`U_n_1 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 1] | `U_n_2 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 2] | `U_n_4 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 4] | `U_n_8 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 8] | `U_n_16 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 16] | `U_n_32 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 32] | `U_n_64 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 64] | `U_n_128 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 128] | `U_n_256 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 256] | `U_n_296 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 296] | `U_n_384 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 384] | `U_n_512 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 512] | `U_n_528 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 528] | `U_n_1024 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 1024] | `U_n_1056 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 1056] | `U_n_2048 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 2048] | `U_n_2112 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 2112] | `U_n_2944 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 2944] | `U_n_4096 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 4096] | `U_n_8192 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 8192] | `U_n_12288 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 12288] | `U_n_16384 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 16384] | `U_n_32768 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 32768] | `U_n_49152 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 49152] | `U_n_65536 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 65536] | `U_n_109440 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 109440] | `U_n_117724 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 117724] | `U_n_131072 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 131072] | `U_n_262144 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 262144] | `U_n_524288 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 524288] | `U_n_1048576 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 1048576] | `U_n_2097152 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 2097152] | `U_n_3145728 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 3145728] | `U_n_3670016 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 3670016] | `U_n_4194304 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 4194304] | `U_n_8388608 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 8388608] | `U_n_8650752 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 8650752] | `U_n_16777216 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 16777216] | `U_n_33554432 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 33554432] | `U_n_58982400 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 58982400] | `U_n_67108864 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 67108864] | `U_n_134217728 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 134217728] | `U_n_268435456 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 268435456] | `U_n_402653316 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 402653316] | `U_n_406847488 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 406847488] | `U_n_465829888 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 465829888] | `U_n_469499904 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 469499904] | `U_n_536624127 of (ts_IntersectionType, ts_TypeVariable) union2 [@js 536624127]] [@js.union on_field "flags"]), ([`U_n_1 of ts_ObjectType [@js 1] | `U_n_2 of ts_ObjectType [@js 2] | `U_n_3 of ts_ObjectType [@js 3] | `U_n_4 of ts_ObjectType [@js 4] | `U_n_8 of ts_ObjectType [@js 8] | `U_n_16 of ts_ObjectType [@js 16] | `U_n_32 of ts_ObjectType [@js 32] | `U_n_64 of ts_ObjectType [@js 64] | `U_n_128 of ts_ObjectType [@js 128] | `U_n_256 of ts_ObjectType [@js 256] | `U_n_512 of ts_ObjectType [@js 512] | `U_n_1024 of ts_ObjectType [@js 1024] | `U_n_2048 of ts_ObjectType [@js 2048] | `U_n_4096 of ts_ObjectType [@js 4096] | `U_n_8192 of ts_ObjectType [@js 8192] | `U_n_16384 of ts_ObjectType [@js 16384] | `U_n_32768 of ts_ObjectType [@js 32768] | `U_n_65536 of ts_ObjectType [@js 65536] | `U_n_131072 of ts_ObjectType [@js 131072]] [@js.union on_field "objectFlags"])) union2
    and ts_BigIntLiteral = [`Ts_BigIntLiteral | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_BigIntLiteralType = [`Ts_BigIntLiteralType | `Ts_LiteralType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_BinaryExpression = [`Ts_BinaryExpression | `Ts_Declaration | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_BinaryOperator = ((((((((((((((((((((((((((((((((((((((((((((((((((((((ts_SyntaxKind_PercentEqualsToken, ts_SyntaxKind_PercentToken, ts_SyntaxKind_PlusEqualsToken, ts_SyntaxKind_PlusToken, ts_SyntaxKind_QuestionQuestionEqualsToken, ts_SyntaxKind_QuestionQuestionToken, ts_SyntaxKind_SlashEqualsToken, ts_SyntaxKind_SlashToken) union8, ts_SyntaxKind_MinusToken) or_, ts_SyntaxKind_MinusEqualsToken) or_, ts_SyntaxKind_LessThanToken) or_, ts_SyntaxKind_LessThanLessThanToken) or_, ts_SyntaxKind_LessThanLessThanEqualsToken) or_, ts_SyntaxKind_LessThanEqualsToken) or_, ts_SyntaxKind_InstanceOfKeyword) or_, ts_SyntaxKind_InKeyword) or_, ts_SyntaxKind_GreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsEqualsToken) or_, ts_SyntaxKind_EqualsToken) or_, ts_SyntaxKind_EqualsEqualsToken) or_, ts_SyntaxKind_EqualsEqualsEqualsToken) or_, ts_SyntaxKind_CommaToken) or_, ts_SyntaxKind_CaretToken) or_, ts_SyntaxKind_CaretEqualsToken) or_, ts_SyntaxKind_BarToken) or_, ts_SyntaxKind_BarEqualsToken) or_, ts_SyntaxKind_BarBarToken) or_, ts_SyntaxKind_BarBarEqualsToken) or_, ts_SyntaxKind_AsteriskToken) or_, ts_SyntaxKind_AsteriskEqualsToken) or_, ts_SyntaxKind_AsteriskAsteriskToken) or_, ts_SyntaxKind_AsteriskAsteriskEqualsToken) or_, ts_SyntaxKind_AmpersandToken) or_, ts_SyntaxKind_AmpersandEqualsToken) or_, ts_SyntaxKind_AmpersandAmpersandToken) or_, ts_SyntaxKind_AmpersandAmpersandEqualsToken) or_, ts_ShiftOperatorOrHigher) or_, ts_ShiftOperator) or_, ts_RelationalOperatorOrHigher) or_, ts_RelationalOperator) or_, ts_MultiplicativeOperatorOrHigher) or_, ts_MultiplicativeOperator) or_, ts_LogicalOperatorOrHigher) or_, ts_LogicalOperator) or_, ts_ExponentiationOperator) or_, ts_EqualityOperatorOrHigher) or_, ts_EqualityOperator) or_, ts_CompoundAssignmentOperator) or_, ts_BitwiseOperatorOrHigher) or_, ts_BitwiseOperator) or_, ts_AssignmentOperatorOrHigher) or_, ts_AssignmentOperator) or_, ts_AdditiveOperatorOrHigher) or_, ts_AdditiveOperator) or_, ([`AmpersandAmpersandEqualsToken[@js 75] | `AmpersandAmpersandToken[@js 55] | `AmpersandEqualsToken[@js 72] | `AmpersandToken[@js 50] | `AsteriskAsteriskEqualsToken[@js 66] | `AsteriskAsteriskToken[@js 42] | `AsteriskEqualsToken[@js 65] | `AsteriskToken[@js 41] | `BarBarEqualsToken[@js 74] | `BarBarToken[@js 56] | `BarEqualsToken[@js 73] | `BarToken[@js 51] | `CaretEqualsToken[@js 77] | `CaretToken[@js 52] | `CommaToken[@js 27] | `EqualsEqualsEqualsToken[@js 36] | `EqualsEqualsToken[@js 34] | `EqualsToken[@js 62] | `ExclamationEqualsEqualsToken[@js 37] | `ExclamationEqualsToken[@js 35] | `GreaterThanEqualsToken[@js 33] | `GreaterThanGreaterThanEqualsToken[@js 70] | `GreaterThanGreaterThanGreaterThanEqualsToken[@js 71] | `GreaterThanGreaterThanGreaterThanToken[@js 49] | `GreaterThanGreaterThanToken[@js 48] | `GreaterThanToken[@js 31] | `InKeyword[@js 100] | `InstanceOfKeyword[@js 101] | `LessThanEqualsToken[@js 32] | `LessThanLessThanEqualsToken[@js 69] | `LessThanLessThanToken[@js 47] | `LessThanToken[@js 29] | `MinusEqualsToken[@js 64] | `MinusToken[@js 40] | `PercentEqualsToken[@js 68] | `PercentToken[@js 44] | `PlusEqualsToken[@js 63] | `PlusToken[@js 39] | `QuestionQuestionEqualsToken[@js 76] | `QuestionQuestionToken[@js 60] | `SlashEqualsToken[@js 67] | `SlashToken[@js 43]] [@js.enum])) or_enum
    and ts_BinaryOperatorToken = ts_BinaryOperator ts_Token
    and ts_BindingElement = [`Ts_BindingElement | `Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_BindingName = ([`U_n_78 of ts_Identifier [@js 78] | `U_n_196 of ts_BindingPattern [@js 196] | `U_n_197 of ts_BindingPattern [@js 197]] [@js.union on_field "kind"])
    and ts_BindingOrAssignmentElement = ([`U_n_78 of ts_ArrayBindingOrAssignmentElement [@js 78] | `U_n_160 of ts_ParameterDeclaration [@js 160] | `U_n_198 of (ts_ObjectBindingOrAssignmentElement, ts_ArrayBindingOrAssignmentElement) union2 [@js 198] | `U_n_199 of ts_ArrayBindingOrAssignmentElement [@js 199] | `U_n_200 of ts_ArrayBindingOrAssignmentElement [@js 200] | `U_n_201 of ts_ArrayBindingOrAssignmentElement [@js 201] | `U_n_202 of ts_ArrayBindingOrAssignmentElement [@js 202] | `U_n_216 of ts_ArrayBindingOrAssignmentElement [@js 216] | `U_n_220 of ts_ArrayBindingOrAssignmentElement [@js 220] | `U_n_222 of ts_ArrayBindingOrAssignmentElement [@js 222] | `U_n_249 of ts_VariableDeclaration [@js 249] | `U_n_288 of ts_ObjectBindingOrAssignmentElement [@js 288] | `U_n_289 of ts_ObjectBindingOrAssignmentElement [@js 289] | `U_n_290 of ts_ObjectBindingOrAssignmentElement [@js 290]] [@js.union on_field "kind"])
    and ts_BindingOrAssignmentElementRestIndicator = ([`U_n_25 of ts_DotDotDotToken [@js 25] | `U_n_220 of ts_SpreadElement [@js 220] | `U_n_290 of ts_SpreadAssignment [@js 290]] [@js.union on_field "kind"])
    and ts_BindingOrAssignmentElementTarget = ([`U_n_78 of ts_Identifier [@js 78] | `U_n_196 of ts_BindingOrAssignmentPattern [@js 196] | `U_n_197 of ts_BindingOrAssignmentPattern [@js 197] | `U_n_199 of ts_BindingOrAssignmentPattern [@js 199] | `U_n_200 of ts_BindingOrAssignmentPattern [@js 200] | `U_n_201 of ts_PropertyAccessExpression [@js 201] | `U_n_202 of ts_ElementAccessExpression [@js 202] | `U_n_222 of ts_OmittedExpression [@js 222]] [@js.union on_field "kind"])
    and ts_BindingOrAssignmentPattern = ([`U_n_196 of ts_ObjectBindingOrAssignmentPattern [@js 196] | `U_n_197 of ts_ArrayBindingOrAssignmentPattern [@js 197] | `U_n_199 of ts_ArrayBindingOrAssignmentPattern [@js 199] | `U_n_200 of ts_ObjectBindingOrAssignmentPattern [@js 200]] [@js.union on_field "kind"])
    and ts_BindingPattern = ([`U_n_196 of ts_ObjectBindingPattern [@js 196] | `U_n_197 of ts_ArrayBindingPattern [@js 197]] [@js.union on_field "kind"])
    and ts_BitwiseOperator = ((ts_SyntaxKind_AmpersandToken, ts_SyntaxKind_BarToken, ts_SyntaxKind_CaretToken) union3, ([`AmpersandToken[@js 50] | `BarToken[@js 51] | `CaretToken[@js 52]] [@js.enum])) or_enum
    and ts_BitwiseOperatorOrHigher = ((((((((((((((((((((((((((((ts_SyntaxKind_InstanceOfKeyword, ts_SyntaxKind_LessThanEqualsToken, ts_SyntaxKind_LessThanLessThanToken, ts_SyntaxKind_LessThanToken, ts_SyntaxKind_MinusToken, ts_SyntaxKind_PercentToken, ts_SyntaxKind_PlusToken, ts_SyntaxKind_SlashToken) union8, ts_SyntaxKind_InKeyword) or_, ts_SyntaxKind_GreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsEqualsToken) or_, ts_SyntaxKind_EqualsEqualsToken) or_, ts_SyntaxKind_EqualsEqualsEqualsToken) or_, ts_SyntaxKind_CaretToken) or_, ts_SyntaxKind_BarToken) or_, ts_SyntaxKind_AsteriskToken) or_, ts_SyntaxKind_AsteriskAsteriskToken) or_, ts_SyntaxKind_AmpersandToken) or_, ts_ShiftOperatorOrHigher) or_, ts_ShiftOperator) or_, ts_RelationalOperatorOrHigher) or_, ts_RelationalOperator) or_, ts_MultiplicativeOperatorOrHigher) or_, ts_MultiplicativeOperator) or_, ts_ExponentiationOperator) or_, ts_EqualityOperatorOrHigher) or_, ts_EqualityOperator) or_, ts_BitwiseOperator) or_, ts_AdditiveOperatorOrHigher) or_, ts_AdditiveOperator) or_, ([`AmpersandToken[@js 50] | `AsteriskAsteriskToken[@js 42] | `AsteriskToken[@js 41] | `BarToken[@js 51] | `CaretToken[@js 52] | `EqualsEqualsEqualsToken[@js 36] | `EqualsEqualsToken[@js 34] | `ExclamationEqualsEqualsToken[@js 37] | `ExclamationEqualsToken[@js 35] | `GreaterThanEqualsToken[@js 33] | `GreaterThanGreaterThanGreaterThanToken[@js 49] | `GreaterThanGreaterThanToken[@js 48] | `GreaterThanToken[@js 31] | `InKeyword[@js 100] | `InstanceOfKeyword[@js 101] | `LessThanEqualsToken[@js 32] | `LessThanLessThanToken[@js 47] | `LessThanToken[@js 29] | `MinusToken[@js 40] | `PercentToken[@js 44] | `PlusToken[@js 39] | `SlashToken[@js 43]] [@js.enum])) or_enum
    and ts_Block = [`Ts_Block | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_BlockLike = ([`U_n_230 of ts_Block [@js 230] | `U_n_257 of ts_ModuleBlock [@js 257] | `U_n_284 of ts_CaseOrDefaultClause [@js 284] | `U_n_285 of ts_CaseOrDefaultClause [@js 285] | `U_n_297 of ts_SourceFile [@js 297]] [@js.union on_field "kind"])
    and ts_BooleanLiteral = ([`U_n_94 of ts_FalseLiteral [@js 94] | `U_n_109 of ts_TrueLiteral [@js 109]] [@js.union on_field "kind"])
    and ts_BreakOrContinueStatement = ([`U_n_240 of ts_ContinueStatement [@js 240] | `U_n_241 of ts_BreakStatement [@js 241]] [@js.union on_field "kind"])
    and ts_BreakStatement = [`Ts_BreakStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'T ts_BuildInvalidedProject = [`Ts_BuildInvalidedProject of 'T | `Ts_InvalidatedProjectBase] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_BuildOptions = [`Ts_BuildOptions] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_BuilderProgram = [`Ts_BuilderProgram] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_BuilderProgramHost = [`Ts_BuilderProgramHost] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Bundle = [`Ts_Bundle | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CallChain = [`Ts_CallChain | `Ts_CallExpression | `Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CallExpression = [`Ts_CallExpression | `Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CallHierarchyIncomingCall = [`Ts_CallHierarchyIncomingCall] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CallHierarchyItem = [`Ts_CallHierarchyItem] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CallHierarchyOutgoingCall = [`Ts_CallHierarchyOutgoingCall] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CallLikeExpression = ([`U_n_161 of ts_Decorator [@js 161] | `U_n_203 of ts_CallExpression [@js 203] | `U_n_204 of ts_NewExpression [@js 204] | `U_n_205 of ts_TaggedTemplateExpression [@js 205] | `U_n_274 of ts_JsxOpeningLikeElement [@js 274] | `U_n_275 of ts_JsxOpeningLikeElement [@js 275]] [@js.union on_field "kind"])
    and ts_CallSignatureDeclaration = [`Ts_CallSignatureDeclaration | `Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeElement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CancellationToken = [`Ts_CancellationToken] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CaseBlock = [`Ts_CaseBlock | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CaseClause = [`Ts_CaseClause | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CaseOrDefaultClause = ([`U_n_284 of ts_CaseClause [@js 284] | `U_n_285 of ts_DefaultClause [@js 285]] [@js.union on_field "kind"])
    and ts_CatchClause = [`Ts_CatchClause | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CheckJsDirective = [`Ts_CheckJsDirective | `Ts_TextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ClassDeclaration = [`Ts_ClassDeclaration | `Ts_ClassLikeDeclarationBase | `Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ClassElement = [`Ts_ClassElement | `Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ClassExpression = [`Ts_ClassExpression | `Ts_ClassLikeDeclarationBase | `Ts_Declaration | `Ts_Expression | `Ts_JSDocContainer | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ClassLikeDeclaration = ([`U_n_221 of ts_ClassExpression [@js 221] | `U_n_252 of ts_ClassDeclaration [@js 252]] [@js.union on_field "kind"])
    and ts_ClassLikeDeclarationBase = [`Ts_ClassLikeDeclarationBase | `Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ClassMemberModifier = ([`U_n_120 of ts_AccessibilityModifier [@js 120] | `U_n_121 of ts_AccessibilityModifier [@js 121] | `U_n_122 of ts_AccessibilityModifier [@js 122] | `U_n_123 of ts_StaticKeyword [@js 123] | `U_n_142 of ts_ReadonlyKeyword [@js 142]] [@js.union on_field "kind"])
    and ts_ClassificationInfo = [`Ts_ClassificationInfo] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ClassificationResult = [`Ts_ClassificationResult] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ClassificationType = [`comment[@js 1] | `identifier[@js 2] | `keyword[@js 3] | `numericLiteral[@js 4] | `operator[@js 5] | `stringLiteral[@js 6] | `regularExpressionLiteral[@js 7] | `whiteSpace[@js 8] | `text[@js 9] | `punctuation[@js 10] | `className[@js 11] | `enumName[@js 12] | `interfaceName[@js 13] | `moduleName[@js 14] | `typeParameterName[@js 15] | `typeAliasName[@js 16] | `parameterName[@js 17] | `docCommentTagName[@js 18] | `jsxOpenTagName[@js 19] | `jsxCloseTagName[@js 20] | `jsxSelfClosingTagName[@js 21] | `jsxAttribute[@js 22] | `jsxText[@js 23] | `jsxAttributeStringLiteralValue[@js 24] | `bigintLiteral[@js 25]] [@js.enum]
    and ts_ClassificationType_comment = [`comment[@js 1]] [@js.enum]
    and ts_ClassificationType_identifier = [`identifier[@js 2]] [@js.enum]
    and ts_ClassificationType_keyword = [`keyword[@js 3]] [@js.enum]
    and ts_ClassificationType_numericLiteral = [`numericLiteral[@js 4]] [@js.enum]
    and ts_ClassificationType_operator = [`operator[@js 5]] [@js.enum]
    and ts_ClassificationType_stringLiteral = [`stringLiteral[@js 6]] [@js.enum]
    and ts_ClassificationType_regularExpressionLiteral = [`regularExpressionLiteral[@js 7]] [@js.enum]
    and ts_ClassificationType_whiteSpace = [`whiteSpace[@js 8]] [@js.enum]
    and ts_ClassificationType_text = [`text[@js 9]] [@js.enum]
    and ts_ClassificationType_punctuation = [`punctuation[@js 10]] [@js.enum]
    and ts_ClassificationType_className = [`className[@js 11]] [@js.enum]
    and ts_ClassificationType_enumName = [`enumName[@js 12]] [@js.enum]
    and ts_ClassificationType_interfaceName = [`interfaceName[@js 13]] [@js.enum]
    and ts_ClassificationType_moduleName = [`moduleName[@js 14]] [@js.enum]
    and ts_ClassificationType_typeParameterName = [`typeParameterName[@js 15]] [@js.enum]
    and ts_ClassificationType_typeAliasName = [`typeAliasName[@js 16]] [@js.enum]
    and ts_ClassificationType_parameterName = [`parameterName[@js 17]] [@js.enum]
    and ts_ClassificationType_docCommentTagName = [`docCommentTagName[@js 18]] [@js.enum]
    and ts_ClassificationType_jsxOpenTagName = [`jsxOpenTagName[@js 19]] [@js.enum]
    and ts_ClassificationType_jsxCloseTagName = [`jsxCloseTagName[@js 20]] [@js.enum]
    and ts_ClassificationType_jsxSelfClosingTagName = [`jsxSelfClosingTagName[@js 21]] [@js.enum]
    and ts_ClassificationType_jsxAttribute = [`jsxAttribute[@js 22]] [@js.enum]
    and ts_ClassificationType_jsxText = [`jsxText[@js 23]] [@js.enum]
    and ts_ClassificationType_jsxAttributeStringLiteralValue = [`jsxAttributeStringLiteralValue[@js 24]] [@js.enum]
    and ts_ClassificationType_bigintLiteral = [`bigintLiteral[@js 25]] [@js.enum]
    and ts_ClassificationTypeNames = [`comment[@js "comment"] | `identifier[@js "identifier"] | `keyword[@js "keyword"] | `numericLiteral[@js "number"] | `bigintLiteral[@js "bigint"] | `operator[@js "operator"] | `stringLiteral[@js "string"] | `whiteSpace[@js "whitespace"] | `text[@js "text"] | `punctuation[@js "punctuation"] | `className[@js "class name"] | `enumName[@js "enum name"] | `interfaceName[@js "interface name"] | `moduleName[@js "module name"] | `typeParameterName[@js "type parameter name"] | `typeAliasName[@js "type alias name"] | `parameterName[@js "parameter name"] | `docCommentTagName[@js "doc comment tag name"] | `jsxOpenTagName[@js "jsx open tag name"] | `jsxCloseTagName[@js "jsx close tag name"] | `jsxSelfClosingTagName[@js "jsx self closing tag name"] | `jsxAttribute[@js "jsx attribute"] | `jsxText[@js "jsx text"] | `jsxAttributeStringLiteralValue[@js "jsx attribute string literal value"]] [@js.enum]
    and ts_ClassificationTypeNames_comment = [`comment[@js "comment"]] [@js.enum]
    and ts_ClassificationTypeNames_identifier = [`identifier[@js "identifier"]] [@js.enum]
    and ts_ClassificationTypeNames_keyword = [`keyword[@js "keyword"]] [@js.enum]
    and ts_ClassificationTypeNames_numericLiteral = [`numericLiteral[@js "number"]] [@js.enum]
    and ts_ClassificationTypeNames_bigintLiteral = [`bigintLiteral[@js "bigint"]] [@js.enum]
    and ts_ClassificationTypeNames_operator = [`operator[@js "operator"]] [@js.enum]
    and ts_ClassificationTypeNames_stringLiteral = [`stringLiteral[@js "string"]] [@js.enum]
    and ts_ClassificationTypeNames_whiteSpace = [`whiteSpace[@js "whitespace"]] [@js.enum]
    and ts_ClassificationTypeNames_text = [`text[@js "text"]] [@js.enum]
    and ts_ClassificationTypeNames_punctuation = [`punctuation[@js "punctuation"]] [@js.enum]
    and ts_ClassificationTypeNames_className = [`className[@js "class name"]] [@js.enum]
    and ts_ClassificationTypeNames_enumName = [`enumName[@js "enum name"]] [@js.enum]
    and ts_ClassificationTypeNames_interfaceName = [`interfaceName[@js "interface name"]] [@js.enum]
    and ts_ClassificationTypeNames_moduleName = [`moduleName[@js "module name"]] [@js.enum]
    and ts_ClassificationTypeNames_typeParameterName = [`typeParameterName[@js "type parameter name"]] [@js.enum]
    and ts_ClassificationTypeNames_typeAliasName = [`typeAliasName[@js "type alias name"]] [@js.enum]
    and ts_ClassificationTypeNames_parameterName = [`parameterName[@js "parameter name"]] [@js.enum]
    and ts_ClassificationTypeNames_docCommentTagName = [`docCommentTagName[@js "doc comment tag name"]] [@js.enum]
    and ts_ClassificationTypeNames_jsxOpenTagName = [`jsxOpenTagName[@js "jsx open tag name"]] [@js.enum]
    and ts_ClassificationTypeNames_jsxCloseTagName = [`jsxCloseTagName[@js "jsx close tag name"]] [@js.enum]
    and ts_ClassificationTypeNames_jsxSelfClosingTagName = [`jsxSelfClosingTagName[@js "jsx self closing tag name"]] [@js.enum]
    and ts_ClassificationTypeNames_jsxAttribute = [`jsxAttribute[@js "jsx attribute"]] [@js.enum]
    and ts_ClassificationTypeNames_jsxText = [`jsxText[@js "jsx text"]] [@js.enum]
    and ts_ClassificationTypeNames_jsxAttributeStringLiteralValue = [`jsxAttributeStringLiteralValue[@js "jsx attribute string literal value"]] [@js.enum]
    and ts_Classifications = [`Ts_Classifications] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ClassifiedSpan = [`Ts_ClassifiedSpan] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ClassifiedSpan2020 = [`Ts_ClassifiedSpan2020] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Classifier = [`Ts_Classifier] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CodeAction = [`Ts_CodeAction] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CodeActionCommand = ts_InstallPackageAction
    and ts_CodeFixAction = [`Ts_CodeAction | `Ts_CodeFixAction] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'K ts_Collection = [`Ts_Collection of 'K | `Ts_ReadonlyCollection of 'K] intf
    [@@js.custom { of_js=(fun _K -> Obj.magic); to_js=(fun _K -> Obj.magic) }]
    and ts_ColonToken = ts_SyntaxKind_ColonToken ts_PunctuationToken
    and ts_CombinedCodeActions = [`Ts_CombinedCodeActions] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CombinedCodeFixScope = [`Ts_CombinedCodeFixScope] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CommaListExpression = [`Ts_CommaListExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CommentKind = ((ts_SyntaxKind_MultiLineCommentTrivia, ts_SyntaxKind_SingleLineCommentTrivia) union2, ([`MultiLineCommentTrivia[@js 3] | `SingleLineCommentTrivia[@js 2]] [@js.enum])) or_enum
    and ts_CommentRange = [`Ts_CommentRange | `Ts_TextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CompilerHost = [`Ts_CompilerHost | `Ts_ModuleResolutionHost] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CompilerOptions = [`Ts_CompilerOptions] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CompilerOptionsValue = (string list ts_MapLike, (ts_PluginImport, ts_ProjectReference, string or_number) union3 or_string) or_array or_boolean or_string or_number or_null_or_undefined
    and ts_CompletionEntry = [`Ts_CompletionEntry] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CompletionEntryDetails = [`Ts_CompletionEntryDetails] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CompletionInfo = [`Ts_CompletionInfo] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CompletionsTriggerCharacter = ([`L_s1[@js "\""] | `L_s2[@js "#"] | `L_s3[@js "\'"] | `L_s7[@js "."] | `L_s15[@js "/"] | `L_s17[@js "<"] | `L_s18[@js "@"] | `L_s36[@js "`"]] [@js.enum])
    and ts_CompoundAssignmentOperator = (((((((((ts_SyntaxKind_GreaterThanGreaterThanEqualsToken, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanEqualsToken, ts_SyntaxKind_LessThanLessThanEqualsToken, ts_SyntaxKind_MinusEqualsToken, ts_SyntaxKind_PercentEqualsToken, ts_SyntaxKind_PlusEqualsToken, ts_SyntaxKind_QuestionQuestionEqualsToken, ts_SyntaxKind_SlashEqualsToken) union8, ts_SyntaxKind_CaretEqualsToken) or_, ts_SyntaxKind_BarEqualsToken) or_, ts_SyntaxKind_BarBarEqualsToken) or_, ts_SyntaxKind_AsteriskEqualsToken) or_, ts_SyntaxKind_AsteriskAsteriskEqualsToken) or_, ts_SyntaxKind_AmpersandEqualsToken) or_, ts_SyntaxKind_AmpersandAmpersandEqualsToken) or_, ([`AmpersandAmpersandEqualsToken[@js 75] | `AmpersandEqualsToken[@js 72] | `AsteriskAsteriskEqualsToken[@js 66] | `AsteriskEqualsToken[@js 65] | `BarBarEqualsToken[@js 74] | `BarEqualsToken[@js 73] | `CaretEqualsToken[@js 77] | `GreaterThanGreaterThanEqualsToken[@js 70] | `GreaterThanGreaterThanGreaterThanEqualsToken[@js 71] | `LessThanLessThanEqualsToken[@js 69] | `MinusEqualsToken[@js 64] | `PercentEqualsToken[@js 68] | `PlusEqualsToken[@js 63] | `QuestionQuestionEqualsToken[@js 76] | `SlashEqualsToken[@js 67]] [@js.enum])) or_enum
    and ts_ComputedPropertyName = [`Ts_ComputedPropertyName | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ConciseBody = ([`U_n_0 of ts_Expression [@js 0] | `U_n_1 of ts_Expression [@js 1] | `U_n_2 of ts_Expression [@js 2] | `U_n_3 of ts_Expression [@js 3] | `U_n_4 of ts_Expression [@js 4] | `U_n_5 of ts_Expression [@js 5] | `U_n_6 of ts_Expression [@js 6] | `U_n_7 of ts_Expression [@js 7] | `U_n_8 of ts_Expression [@js 8] | `U_n_9 of ts_Expression [@js 9] | `U_n_10 of ts_Expression [@js 10] | `U_n_11 of ts_Expression [@js 11] | `U_n_12 of ts_Expression [@js 12] | `U_n_13 of ts_Expression [@js 13] | `U_n_14 of ts_Expression [@js 14] | `U_n_15 of ts_Expression [@js 15] | `U_n_16 of ts_Expression [@js 16] | `U_n_17 of ts_Expression [@js 17] | `U_n_18 of ts_Expression [@js 18] | `U_n_19 of ts_Expression [@js 19] | `U_n_20 of ts_Expression [@js 20] | `U_n_21 of ts_Expression [@js 21] | `U_n_22 of ts_Expression [@js 22] | `U_n_23 of ts_Expression [@js 23] | `U_n_24 of ts_Expression [@js 24] | `U_n_25 of ts_Expression [@js 25] | `U_n_26 of ts_Expression [@js 26] | `U_n_27 of ts_Expression [@js 27] | `U_n_28 of ts_Expression [@js 28] | `U_n_29 of ts_Expression [@js 29] | `U_n_30 of ts_Expression [@js 30] | `U_n_31 of ts_Expression [@js 31] | `U_n_32 of ts_Expression [@js 32] | `U_n_33 of ts_Expression [@js 33] | `U_n_34 of ts_Expression [@js 34] | `U_n_35 of ts_Expression [@js 35] | `U_n_36 of ts_Expression [@js 36] | `U_n_37 of ts_Expression [@js 37] | `U_n_38 of ts_Expression [@js 38] | `U_n_39 of ts_Expression [@js 39] | `U_n_40 of ts_Expression [@js 40] | `U_n_41 of ts_Expression [@js 41] | `U_n_42 of ts_Expression [@js 42] | `U_n_43 of ts_Expression [@js 43] | `U_n_44 of ts_Expression [@js 44] | `U_n_45 of ts_Expression [@js 45] | `U_n_46 of ts_Expression [@js 46] | `U_n_47 of ts_Expression [@js 47] | `U_n_48 of ts_Expression [@js 48] | `U_n_49 of ts_Expression [@js 49] | `U_n_50 of ts_Expression [@js 50] | `U_n_51 of ts_Expression [@js 51] | `U_n_52 of ts_Expression [@js 52] | `U_n_53 of ts_Expression [@js 53] | `U_n_54 of ts_Expression [@js 54] | `U_n_55 of ts_Expression [@js 55] | `U_n_56 of ts_Expression [@js 56] | `U_n_57 of ts_Expression [@js 57] | `U_n_58 of ts_Expression [@js 58] | `U_n_59 of ts_Expression [@js 59] | `U_n_60 of ts_Expression [@js 60] | `U_n_61 of ts_Expression [@js 61] | `U_n_62 of ts_Expression [@js 62] | `U_n_63 of ts_Expression [@js 63] | `U_n_64 of ts_Expression [@js 64] | `U_n_65 of ts_Expression [@js 65] | `U_n_66 of ts_Expression [@js 66] | `U_n_67 of ts_Expression [@js 67] | `U_n_68 of ts_Expression [@js 68] | `U_n_69 of ts_Expression [@js 69] | `U_n_70 of ts_Expression [@js 70] | `U_n_71 of ts_Expression [@js 71] | `U_n_72 of ts_Expression [@js 72] | `U_n_73 of ts_Expression [@js 73] | `U_n_74 of ts_Expression [@js 74] | `U_n_75 of ts_Expression [@js 75] | `U_n_76 of ts_Expression [@js 76] | `U_n_77 of ts_Expression [@js 77] | `U_n_78 of ts_Expression [@js 78] | `U_n_79 of ts_Expression [@js 79] | `U_n_80 of ts_Expression [@js 80] | `U_n_81 of ts_Expression [@js 81] | `U_n_82 of ts_Expression [@js 82] | `U_n_83 of ts_Expression [@js 83] | `U_n_84 of ts_Expression [@js 84] | `U_n_85 of ts_Expression [@js 85] | `U_n_86 of ts_Expression [@js 86] | `U_n_87 of ts_Expression [@js 87] | `U_n_88 of ts_Expression [@js 88] | `U_n_89 of ts_Expression [@js 89] | `U_n_90 of ts_Expression [@js 90] | `U_n_91 of ts_Expression [@js 91] | `U_n_92 of ts_Expression [@js 92] | `U_n_93 of ts_Expression [@js 93] | `U_n_94 of ts_Expression [@js 94] | `U_n_95 of ts_Expression [@js 95] | `U_n_96 of ts_Expression [@js 96] | `U_n_97 of ts_Expression [@js 97] | `U_n_98 of ts_Expression [@js 98] | `U_n_99 of ts_Expression [@js 99] | `U_n_100 of ts_Expression [@js 100] | `U_n_101 of ts_Expression [@js 101] | `U_n_102 of ts_Expression [@js 102] | `U_n_103 of ts_Expression [@js 103] | `U_n_104 of ts_Expression [@js 104] | `U_n_105 of ts_Expression [@js 105] | `U_n_106 of ts_Expression [@js 106] | `U_n_107 of ts_Expression [@js 107] | `U_n_108 of ts_Expression [@js 108] | `U_n_109 of ts_Expression [@js 109] | `U_n_110 of ts_Expression [@js 110] | `U_n_111 of ts_Expression [@js 111] | `U_n_112 of ts_Expression [@js 112] | `U_n_113 of ts_Expression [@js 113] | `U_n_114 of ts_Expression [@js 114] | `U_n_115 of ts_Expression [@js 115] | `U_n_116 of ts_Expression [@js 116] | `U_n_117 of ts_Expression [@js 117] | `U_n_118 of ts_Expression [@js 118] | `U_n_119 of ts_Expression [@js 119] | `U_n_120 of ts_Expression [@js 120] | `U_n_121 of ts_Expression [@js 121] | `U_n_122 of ts_Expression [@js 122] | `U_n_123 of ts_Expression [@js 123] | `U_n_124 of ts_Expression [@js 124] | `U_n_125 of ts_Expression [@js 125] | `U_n_126 of ts_Expression [@js 126] | `U_n_127 of ts_Expression [@js 127] | `U_n_128 of ts_Expression [@js 128] | `U_n_129 of ts_Expression [@js 129] | `U_n_130 of ts_Expression [@js 130] | `U_n_131 of ts_Expression [@js 131] | `U_n_132 of ts_Expression [@js 132] | `U_n_133 of ts_Expression [@js 133] | `U_n_134 of ts_Expression [@js 134] | `U_n_135 of ts_Expression [@js 135] | `U_n_136 of ts_Expression [@js 136] | `U_n_137 of ts_Expression [@js 137] | `U_n_138 of ts_Expression [@js 138] | `U_n_139 of ts_Expression [@js 139] | `U_n_140 of ts_Expression [@js 140] | `U_n_141 of ts_Expression [@js 141] | `U_n_142 of ts_Expression [@js 142] | `U_n_143 of ts_Expression [@js 143] | `U_n_144 of ts_Expression [@js 144] | `U_n_145 of ts_Expression [@js 145] | `U_n_146 of ts_Expression [@js 146] | `U_n_147 of ts_Expression [@js 147] | `U_n_148 of ts_Expression [@js 148] | `U_n_149 of ts_Expression [@js 149] | `U_n_150 of ts_Expression [@js 150] | `U_n_151 of ts_Expression [@js 151] | `U_n_152 of ts_Expression [@js 152] | `U_n_153 of ts_Expression [@js 153] | `U_n_154 of ts_Expression [@js 154] | `U_n_155 of ts_Expression [@js 155] | `U_n_156 of ts_Expression [@js 156] | `U_n_157 of ts_Expression [@js 157] | `U_n_158 of ts_Expression [@js 158] | `U_n_159 of ts_Expression [@js 159] | `U_n_160 of ts_Expression [@js 160] | `U_n_161 of ts_Expression [@js 161] | `U_n_162 of ts_Expression [@js 162] | `U_n_163 of ts_Expression [@js 163] | `U_n_164 of ts_Expression [@js 164] | `U_n_165 of ts_Expression [@js 165] | `U_n_166 of ts_Expression [@js 166] | `U_n_167 of ts_Expression [@js 167] | `U_n_168 of ts_Expression [@js 168] | `U_n_169 of ts_Expression [@js 169] | `U_n_170 of ts_Expression [@js 170] | `U_n_171 of ts_Expression [@js 171] | `U_n_172 of ts_Expression [@js 172] | `U_n_173 of ts_Expression [@js 173] | `U_n_174 of ts_Expression [@js 174] | `U_n_175 of ts_Expression [@js 175] | `U_n_176 of ts_Expression [@js 176] | `U_n_177 of ts_Expression [@js 177] | `U_n_178 of ts_Expression [@js 178] | `U_n_179 of ts_Expression [@js 179] | `U_n_180 of ts_Expression [@js 180] | `U_n_181 of ts_Expression [@js 181] | `U_n_182 of ts_Expression [@js 182] | `U_n_183 of ts_Expression [@js 183] | `U_n_184 of ts_Expression [@js 184] | `U_n_185 of ts_Expression [@js 185] | `U_n_186 of ts_Expression [@js 186] | `U_n_187 of ts_Expression [@js 187] | `U_n_188 of ts_Expression [@js 188] | `U_n_189 of ts_Expression [@js 189] | `U_n_190 of ts_Expression [@js 190] | `U_n_191 of ts_Expression [@js 191] | `U_n_192 of ts_Expression [@js 192] | `U_n_193 of ts_Expression [@js 193] | `U_n_194 of ts_Expression [@js 194] | `U_n_195 of ts_Expression [@js 195] | `U_n_196 of ts_Expression [@js 196] | `U_n_197 of ts_Expression [@js 197] | `U_n_198 of ts_Expression [@js 198] | `U_n_199 of ts_Expression [@js 199] | `U_n_200 of ts_Expression [@js 200] | `U_n_201 of ts_Expression [@js 201] | `U_n_202 of ts_Expression [@js 202] | `U_n_203 of ts_Expression [@js 203] | `U_n_204 of ts_Expression [@js 204] | `U_n_205 of ts_Expression [@js 205] | `U_n_206 of ts_Expression [@js 206] | `U_n_207 of ts_Expression [@js 207] | `U_n_208 of ts_Expression [@js 208] | `U_n_209 of ts_Expression [@js 209] | `U_n_210 of ts_Expression [@js 210] | `U_n_211 of ts_Expression [@js 211] | `U_n_212 of ts_Expression [@js 212] | `U_n_213 of ts_Expression [@js 213] | `U_n_214 of ts_Expression [@js 214] | `U_n_215 of ts_Expression [@js 215] | `U_n_216 of ts_Expression [@js 216] | `U_n_217 of ts_Expression [@js 217] | `U_n_218 of ts_Expression [@js 218] | `U_n_219 of ts_Expression [@js 219] | `U_n_220 of ts_Expression [@js 220] | `U_n_221 of ts_Expression [@js 221] | `U_n_222 of ts_Expression [@js 222] | `U_n_223 of ts_Expression [@js 223] | `U_n_224 of ts_Expression [@js 224] | `U_n_225 of ts_Expression [@js 225] | `U_n_226 of ts_Expression [@js 226] | `U_n_227 of ts_Expression [@js 227] | `U_n_228 of ts_Expression [@js 228] | `U_n_229 of ts_Expression [@js 229] | `U_n_230 of (ts_FunctionBody, ts_Expression) union2 [@js 230] | `U_n_231 of ts_Expression [@js 231] | `U_n_232 of ts_Expression [@js 232] | `U_n_233 of ts_Expression [@js 233] | `U_n_234 of ts_Expression [@js 234] | `U_n_235 of ts_Expression [@js 235] | `U_n_236 of ts_Expression [@js 236] | `U_n_237 of ts_Expression [@js 237] | `U_n_238 of ts_Expression [@js 238] | `U_n_239 of ts_Expression [@js 239] | `U_n_240 of ts_Expression [@js 240] | `U_n_241 of ts_Expression [@js 241] | `U_n_242 of ts_Expression [@js 242] | `U_n_243 of ts_Expression [@js 243] | `U_n_244 of ts_Expression [@js 244] | `U_n_245 of ts_Expression [@js 245] | `U_n_246 of ts_Expression [@js 246] | `U_n_247 of ts_Expression [@js 247] | `U_n_248 of ts_Expression [@js 248] | `U_n_249 of ts_Expression [@js 249] | `U_n_250 of ts_Expression [@js 250] | `U_n_251 of ts_Expression [@js 251] | `U_n_252 of ts_Expression [@js 252] | `U_n_253 of ts_Expression [@js 253] | `U_n_254 of ts_Expression [@js 254] | `U_n_255 of ts_Expression [@js 255] | `U_n_256 of ts_Expression [@js 256] | `U_n_257 of ts_Expression [@js 257] | `U_n_258 of ts_Expression [@js 258] | `U_n_259 of ts_Expression [@js 259] | `U_n_260 of ts_Expression [@js 260] | `U_n_261 of ts_Expression [@js 261] | `U_n_262 of ts_Expression [@js 262] | `U_n_263 of ts_Expression [@js 263] | `U_n_264 of ts_Expression [@js 264] | `U_n_265 of ts_Expression [@js 265] | `U_n_266 of ts_Expression [@js 266] | `U_n_267 of ts_Expression [@js 267] | `U_n_268 of ts_Expression [@js 268] | `U_n_269 of ts_Expression [@js 269] | `U_n_270 of ts_Expression [@js 270] | `U_n_271 of ts_Expression [@js 271] | `U_n_272 of ts_Expression [@js 272] | `U_n_273 of ts_Expression [@js 273] | `U_n_274 of ts_Expression [@js 274] | `U_n_275 of ts_Expression [@js 275] | `U_n_276 of ts_Expression [@js 276] | `U_n_277 of ts_Expression [@js 277] | `U_n_278 of ts_Expression [@js 278] | `U_n_279 of ts_Expression [@js 279] | `U_n_280 of ts_Expression [@js 280] | `U_n_281 of ts_Expression [@js 281] | `U_n_282 of ts_Expression [@js 282] | `U_n_283 of ts_Expression [@js 283] | `U_n_284 of ts_Expression [@js 284] | `U_n_285 of ts_Expression [@js 285] | `U_n_286 of ts_Expression [@js 286] | `U_n_287 of ts_Expression [@js 287] | `U_n_288 of ts_Expression [@js 288] | `U_n_289 of ts_Expression [@js 289] | `U_n_290 of ts_Expression [@js 290] | `U_n_291 of ts_Expression [@js 291] | `U_n_292 of ts_Expression [@js 292] | `U_n_293 of ts_Expression [@js 293] | `U_n_294 of ts_Expression [@js 294] | `U_n_295 of ts_Expression [@js 295] | `U_n_296 of ts_Expression [@js 296] | `U_n_297 of ts_Expression [@js 297] | `U_n_298 of ts_Expression [@js 298] | `U_n_299 of ts_Expression [@js 299] | `U_n_300 of ts_Expression [@js 300] | `U_n_301 of ts_Expression [@js 301] | `U_n_302 of ts_Expression [@js 302] | `U_n_303 of ts_Expression [@js 303] | `U_n_304 of ts_Expression [@js 304] | `U_n_305 of ts_Expression [@js 305] | `U_n_306 of ts_Expression [@js 306] | `U_n_307 of ts_Expression [@js 307] | `U_n_308 of ts_Expression [@js 308] | `U_n_309 of ts_Expression [@js 309] | `U_n_310 of ts_Expression [@js 310] | `U_n_311 of ts_Expression [@js 311] | `U_n_312 of ts_Expression [@js 312] | `U_n_313 of ts_Expression [@js 313] | `U_n_314 of ts_Expression [@js 314] | `U_n_315 of ts_Expression [@js 315] | `U_n_316 of ts_Expression [@js 316] | `U_n_317 of ts_Expression [@js 317] | `U_n_318 of ts_Expression [@js 318] | `U_n_319 of ts_Expression [@js 319] | `U_n_320 of ts_Expression [@js 320] | `U_n_321 of ts_Expression [@js 321] | `U_n_322 of ts_Expression [@js 322] | `U_n_323 of ts_Expression [@js 323] | `U_n_324 of ts_Expression [@js 324] | `U_n_325 of ts_Expression [@js 325] | `U_n_326 of ts_Expression [@js 326] | `U_n_327 of ts_Expression [@js 327] | `U_n_328 of ts_Expression [@js 328] | `U_n_329 of ts_Expression [@js 329] | `U_n_330 of ts_Expression [@js 330] | `U_n_331 of ts_Expression [@js 331] | `U_n_332 of ts_Expression [@js 332] | `U_n_333 of ts_Expression [@js 333] | `U_n_334 of ts_Expression [@js 334] | `U_n_335 of ts_Expression [@js 335] | `U_n_336 of ts_Expression [@js 336] | `U_n_337 of ts_Expression [@js 337] | `U_n_338 of ts_Expression [@js 338] | `U_n_339 of ts_Expression [@js 339] | `U_n_340 of ts_Expression [@js 340] | `U_n_341 of ts_Expression [@js 341]] [@js.union on_field "kind"])
    and ts_ConditionalExpression = [`Ts_ConditionalExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ConditionalRoot = [`Ts_ConditionalRoot] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ConditionalType = [`Ts_ConditionalType | `Ts_InstantiableType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ConditionalTypeNode = [`Ts_ConditionalTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ConfigFileDiagnosticsReporter = [`Ts_ConfigFileDiagnosticsReporter] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ConstKeyword = ts_SyntaxKind_ConstKeyword ts_ModifierToken
    and ts_ConstructSignatureDeclaration = [`Ts_ConstructSignatureDeclaration | `Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeElement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ConstructorDeclaration = [`Ts_ClassElement | `Ts_ConstructorDeclaration | `Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ConstructorTypeNode = [`Ts_ConstructorTypeNode | `Ts_Declaration | `Ts_FunctionOrConstructorTypeNodeBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ContinueStatement = [`Ts_ContinueStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CoreTransformationContext = [`Ts_CoreTransformationContext] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'T ts_CreateProgram = [`Ts_CreateProgram of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_CreateProgramOptions = [`Ts_CreateProgramOptions] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CustomTransformer = [`Ts_CustomTransformer] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CustomTransformerFactory = [`Ts_CustomTransformerFactory] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_CustomTransformers = [`Ts_CustomTransformers] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DebuggerStatement = [`Ts_DebuggerStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Declaration = [`Ts_Declaration | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DeclarationName = ([`U_n_8 of ts_NumericLiteral [@js 8] | `U_n_10 of ts_StringLiteralLike [@js 10] | `U_n_14 of ts_StringLiteralLike [@js 14] | `U_n_78 of (ts_Identifier, ts_EntityNameExpression) union2 [@js 78] | `U_n_79 of ts_PrivateIdentifier [@js 79] | `U_n_158 of ts_ComputedPropertyName [@js 158] | `U_n_196 of ts_BindingPattern [@js 196] | `U_n_197 of ts_BindingPattern [@js 197] | `U_n_201 of ts_EntityNameExpression [@js 201] | `U_n_202 of ts_ElementAccessExpression [@js 202]] [@js.union on_field "kind"])
    and ts_DeclarationStatement = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DeclarationWithTypeParameterChildren = ([`U_n_164 of ts_SignatureDeclaration [@js 164] | `U_n_165 of ts_SignatureDeclaration [@js 165] | `U_n_166 of ts_SignatureDeclaration [@js 166] | `U_n_167 of ts_SignatureDeclaration [@js 167] | `U_n_168 of ts_SignatureDeclaration [@js 168] | `U_n_169 of ts_SignatureDeclaration [@js 169] | `U_n_170 of ts_SignatureDeclaration [@js 170] | `U_n_171 of ts_SignatureDeclaration [@js 171] | `U_n_174 of ts_SignatureDeclaration [@js 174] | `U_n_175 of ts_SignatureDeclaration [@js 175] | `U_n_208 of ts_SignatureDeclaration [@js 208] | `U_n_209 of ts_SignatureDeclaration [@js 209] | `U_n_221 of ts_ClassLikeDeclaration [@js 221] | `U_n_251 of ts_SignatureDeclaration [@js 251] | `U_n_252 of ts_ClassLikeDeclaration [@js 252] | `U_n_253 of ts_InterfaceDeclaration [@js 253] | `U_n_254 of ts_TypeAliasDeclaration [@js 254] | `U_n_308 of ts_SignatureDeclaration [@js 308] | `U_n_330 of ts_JSDocTemplateTag [@js 330]] [@js.union on_field "kind"])
    and ts_DeclarationWithTypeParameters = ([`U_n_164 of ts_DeclarationWithTypeParameterChildren [@js 164] | `U_n_165 of ts_DeclarationWithTypeParameterChildren [@js 165] | `U_n_166 of ts_DeclarationWithTypeParameterChildren [@js 166] | `U_n_167 of ts_DeclarationWithTypeParameterChildren [@js 167] | `U_n_168 of ts_DeclarationWithTypeParameterChildren [@js 168] | `U_n_169 of ts_DeclarationWithTypeParameterChildren [@js 169] | `U_n_170 of ts_DeclarationWithTypeParameterChildren [@js 170] | `U_n_171 of ts_DeclarationWithTypeParameterChildren [@js 171] | `U_n_174 of ts_DeclarationWithTypeParameterChildren [@js 174] | `U_n_175 of ts_DeclarationWithTypeParameterChildren [@js 175] | `U_n_208 of ts_DeclarationWithTypeParameterChildren [@js 208] | `U_n_209 of ts_DeclarationWithTypeParameterChildren [@js 209] | `U_n_221 of ts_DeclarationWithTypeParameterChildren [@js 221] | `U_n_251 of ts_DeclarationWithTypeParameterChildren [@js 251] | `U_n_252 of ts_DeclarationWithTypeParameterChildren [@js 252] | `U_n_253 of ts_DeclarationWithTypeParameterChildren [@js 253] | `U_n_254 of ts_DeclarationWithTypeParameterChildren [@js 254] | `U_n_308 of ts_DeclarationWithTypeParameterChildren [@js 308] | `U_n_313 of ts_JSDocSignature [@js 313] | `U_n_324 of ts_JSDocCallbackTag [@js 324] | `U_n_330 of ts_DeclarationWithTypeParameterChildren [@js 330] | `U_n_331 of ts_JSDocTypedefTag [@js 331]] [@js.union on_field "kind"])
    and ts_DeclareKeyword = ts_SyntaxKind_DeclareKeyword ts_ModifierToken
    and ts_Decorator = [`Ts_Decorator | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DefaultClause = [`Ts_DefaultClause | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DefaultKeyword = ts_SyntaxKind_DefaultKeyword ts_ModifierToken
    and ts_DeferredTypeReference = [`Ts_DeferredTypeReference | `Ts_ObjectType | `Ts_Type | `Ts_TypeReference] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DefinitionInfo = [`Ts_DefinitionInfo | `Ts_DocumentSpan] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DefinitionInfoAndBoundSpan = [`Ts_DefinitionInfoAndBoundSpan] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DeleteExpression = [`Ts_DeleteExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DestructuringAssignment = ([`U_n_216 of (ts_ObjectDestructuringAssignment, ts_ArrayDestructuringAssignment) union2 [@js 216]] [@js.union on_field "kind"])
    and ts_DestructuringPattern = ([`U_n_196 of ts_BindingPattern [@js 196] | `U_n_197 of ts_BindingPattern [@js 197] | `U_n_199 of ts_ArrayLiteralExpression [@js 199] | `U_n_200 of ts_ObjectLiteralExpression [@js 200]] [@js.union on_field "kind"])
    and ts_Diagnostic = [`Ts_Diagnostic | `Ts_DiagnosticRelatedInformation] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DiagnosticCategory = [`Warning[@js 0] | `Error[@js 1] | `Suggestion[@js 2] | `Message[@js 3]] [@js.enum]
    and ts_DiagnosticCategory_Warning = [`Warning[@js 0]] [@js.enum]
    and ts_DiagnosticCategory_Error = [`Error[@js 1]] [@js.enum]
    and ts_DiagnosticCategory_Suggestion = [`Suggestion[@js 2]] [@js.enum]
    and ts_DiagnosticCategory_Message = [`Message[@js 3]] [@js.enum]
    and ts_DiagnosticMessage = [`Ts_DiagnosticMessage] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DiagnosticMessageChain = [`Ts_DiagnosticMessageChain] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DiagnosticRelatedInformation = [`Ts_DiagnosticRelatedInformation] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DiagnosticReporter = [`Ts_DiagnosticReporter] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DiagnosticWithLocation = [`Ts_Diagnostic | `Ts_DiagnosticRelatedInformation | `Ts_DiagnosticWithLocation] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DirectoryWatcherCallback = [`Ts_DirectoryWatcherCallback] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DoStatement = [`Ts_DoStatement | `Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DocCommentTemplateOptions = [`Ts_DocCommentTemplateOptions] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DocumentHighlights = [`Ts_DocumentHighlights] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DocumentRegistry = [`Ts_DocumentRegistry] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DocumentRegistryBucketKey = (string, anonymous_interface_1) intersection2
    and ts_DocumentSpan = [`Ts_DocumentSpan] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_DotDotDotToken = ts_SyntaxKind_DotDotDotToken ts_PunctuationToken
    and ts_DotToken = ts_SyntaxKind_DotToken ts_PunctuationToken
    and ('K, 'V) ts_ESMap = [`Ts_Collection of 'K | `Ts_ESMap of ('K * 'V) | `Ts_ReadonlyCollection of 'K | `Ts_ReadonlyESMap of ('K * 'V)] intf
    [@@js.custom { of_js=(fun _K _V -> Obj.magic); to_js=(fun _K _V -> Obj.magic) }]
    and ts_EditorOptions = [`Ts_EditorOptions] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_EditorSettings = [`Ts_EditorSettings] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ElementAccessChain = [`Ts_ElementAccessChain | `Ts_ElementAccessExpression | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ElementAccessExpression = [`Ts_ElementAccessExpression | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ElementFlags = [`Required[@js 1] | `Optional[@js 2] | `Rest[@js 4] | `Variadic[@js 8] | `Fixed[@js 3] | `Variable[@js 12] | `NonRequired[@js 14] | `NonRest[@js 11]] [@js.enum]
    and ts_ElementFlags_Required = [`Required[@js 1]] [@js.enum]
    and ts_ElementFlags_Optional = [`Optional[@js 2]] [@js.enum]
    and ts_ElementFlags_Rest = [`Rest[@js 4]] [@js.enum]
    and ts_ElementFlags_Variadic = [`Variadic[@js 8]] [@js.enum]
    and ts_ElementFlags_Fixed = [`Fixed[@js 3]] [@js.enum]
    and ts_ElementFlags_Variable = [`Variable[@js 12]] [@js.enum]
    and ts_ElementFlags_NonRequired = [`NonRequired[@js 14]] [@js.enum]
    and ts_ElementFlags_NonRest = [`NonRest[@js 11]] [@js.enum]
    and ts_EmitAndSemanticDiagnosticsBuilderProgram = [`Ts_BuilderProgram | `Ts_EmitAndSemanticDiagnosticsBuilderProgram | `Ts_SemanticDiagnosticsBuilderProgram] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_EmitFlags = [`None[@js 0] | `SingleLine[@js 1] | `AdviseOnEmitNode[@js 2] | `NoSubstitution[@js 4] | `CapturesThis[@js 8] | `NoLeadingSourceMap[@js 16] | `NoTrailingSourceMap[@js 32] | `NoSourceMap[@js 48] | `NoNestedSourceMaps[@js 64] | `NoTokenLeadingSourceMaps[@js 128] | `NoTokenTrailingSourceMaps[@js 256] | `NoTokenSourceMaps[@js 384] | `NoLeadingComments[@js 512] | `NoTrailingComments[@js 1024] | `NoComments[@js 1536] | `NoNestedComments[@js 2048] | `HelperName[@js 4096] | `ExportName[@js 8192] | `LocalName[@js 16384] | `InternalName[@js 32768] | `Indented[@js 65536] | `NoIndentation[@js 131072] | `AsyncFunctionBody[@js 262144] | `ReuseTempVariableScope[@js 524288] | `CustomPrologue[@js 1048576] | `NoHoisting[@js 2097152] | `HasEndOfDeclarationMarker[@js 4194304] | `Iterator[@js 8388608] | `NoAsciiEscaping[@js 16777216]] [@js.enum]
    and ts_EmitFlags_None = [`None[@js 0]] [@js.enum]
    and ts_EmitFlags_SingleLine = [`SingleLine[@js 1]] [@js.enum]
    and ts_EmitFlags_AdviseOnEmitNode = [`AdviseOnEmitNode[@js 2]] [@js.enum]
    and ts_EmitFlags_NoSubstitution = [`NoSubstitution[@js 4]] [@js.enum]
    and ts_EmitFlags_CapturesThis = [`CapturesThis[@js 8]] [@js.enum]
    and ts_EmitFlags_NoLeadingSourceMap = [`NoLeadingSourceMap[@js 16]] [@js.enum]
    and ts_EmitFlags_NoTrailingSourceMap = [`NoTrailingSourceMap[@js 32]] [@js.enum]
    and ts_EmitFlags_NoSourceMap = [`NoSourceMap[@js 48]] [@js.enum]
    and ts_EmitFlags_NoNestedSourceMaps = [`NoNestedSourceMaps[@js 64]] [@js.enum]
    and ts_EmitFlags_NoTokenLeadingSourceMaps = [`NoTokenLeadingSourceMaps[@js 128]] [@js.enum]
    and ts_EmitFlags_NoTokenTrailingSourceMaps = [`NoTokenTrailingSourceMaps[@js 256]] [@js.enum]
    and ts_EmitFlags_NoTokenSourceMaps = [`NoTokenSourceMaps[@js 384]] [@js.enum]
    and ts_EmitFlags_NoLeadingComments = [`NoLeadingComments[@js 512]] [@js.enum]
    and ts_EmitFlags_NoTrailingComments = [`NoTrailingComments[@js 1024]] [@js.enum]
    and ts_EmitFlags_NoComments = [`NoComments[@js 1536]] [@js.enum]
    and ts_EmitFlags_NoNestedComments = [`NoNestedComments[@js 2048]] [@js.enum]
    and ts_EmitFlags_HelperName = [`HelperName[@js 4096]] [@js.enum]
    and ts_EmitFlags_ExportName = [`ExportName[@js 8192]] [@js.enum]
    and ts_EmitFlags_LocalName = [`LocalName[@js 16384]] [@js.enum]
    and ts_EmitFlags_InternalName = [`InternalName[@js 32768]] [@js.enum]
    and ts_EmitFlags_Indented = [`Indented[@js 65536]] [@js.enum]
    and ts_EmitFlags_NoIndentation = [`NoIndentation[@js 131072]] [@js.enum]
    and ts_EmitFlags_AsyncFunctionBody = [`AsyncFunctionBody[@js 262144]] [@js.enum]
    and ts_EmitFlags_ReuseTempVariableScope = [`ReuseTempVariableScope[@js 524288]] [@js.enum]
    and ts_EmitFlags_CustomPrologue = [`CustomPrologue[@js 1048576]] [@js.enum]
    and ts_EmitFlags_NoHoisting = [`NoHoisting[@js 2097152]] [@js.enum]
    and ts_EmitFlags_HasEndOfDeclarationMarker = [`HasEndOfDeclarationMarker[@js 4194304]] [@js.enum]
    and ts_EmitFlags_Iterator = [`Iterator[@js 8388608]] [@js.enum]
    and ts_EmitFlags_NoAsciiEscaping = [`NoAsciiEscaping[@js 16777216]] [@js.enum]
    and ts_EmitHelper = [`Ts_EmitHelper] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_EmitHelperUniqueNameCallback = [`Ts_EmitHelperUniqueNameCallback] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_EmitHint = [`SourceFile[@js 0] | `Expression[@js 1] | `IdentifierName[@js 2] | `MappedTypeParameter[@js 3] | `Unspecified[@js 4] | `EmbeddedStatement[@js 5] | `JsxAttributeValue[@js 6]] [@js.enum]
    and ts_EmitHint_SourceFile = [`SourceFile[@js 0]] [@js.enum]
    and ts_EmitHint_Expression = [`Expression[@js 1]] [@js.enum]
    and ts_EmitHint_IdentifierName = [`IdentifierName[@js 2]] [@js.enum]
    and ts_EmitHint_MappedTypeParameter = [`MappedTypeParameter[@js 3]] [@js.enum]
    and ts_EmitHint_Unspecified = [`Unspecified[@js 4]] [@js.enum]
    and ts_EmitHint_EmbeddedStatement = [`EmbeddedStatement[@js 5]] [@js.enum]
    and ts_EmitHint_JsxAttributeValue = [`JsxAttributeValue[@js 6]] [@js.enum]
    and ts_EmitOutput = [`Ts_EmitOutput] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_EmitResult = [`Ts_EmitResult] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_EmptyStatement = [`Ts_EmptyStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_EndOfFileToken = (ts_SyntaxKind_EndOfFileToken ts_Token, ts_JSDocContainer) intersection2
    and ts_EndOfLineState = [`None[@js 0] | `InMultiLineCommentTrivia[@js 1] | `InSingleQuoteStringLiteral[@js 2] | `InDoubleQuoteStringLiteral[@js 3] | `InTemplateHeadOrNoSubstitutionTemplate[@js 4] | `InTemplateMiddleOrTail[@js 5] | `InTemplateSubstitutionPosition[@js 6]] [@js.enum]
    and ts_EndOfLineState_None = [`None[@js 0]] [@js.enum]
    and ts_EndOfLineState_InMultiLineCommentTrivia = [`InMultiLineCommentTrivia[@js 1]] [@js.enum]
    and ts_EndOfLineState_InSingleQuoteStringLiteral = [`InSingleQuoteStringLiteral[@js 2]] [@js.enum]
    and ts_EndOfLineState_InDoubleQuoteStringLiteral = [`InDoubleQuoteStringLiteral[@js 3]] [@js.enum]
    and ts_EndOfLineState_InTemplateHeadOrNoSubstitutionTemplate = [`InTemplateHeadOrNoSubstitutionTemplate[@js 4]] [@js.enum]
    and ts_EndOfLineState_InTemplateMiddleOrTail = [`InTemplateMiddleOrTail[@js 5]] [@js.enum]
    and ts_EndOfLineState_InTemplateSubstitutionPosition = [`InTemplateSubstitutionPosition[@js 6]] [@js.enum]
    and ts_EntityName = ([`U_n_78 of ts_Identifier [@js 78] | `U_n_157 of ts_QualifiedName [@js 157]] [@js.union on_field "kind"])
    and ts_EntityNameExpression = ([`U_n_78 of ts_Identifier [@js 78] | `U_n_201 of ts_PropertyAccessEntityNameExpression [@js 201]] [@js.union on_field "kind"])
    and ts_EntityNameOrEntityNameExpression = ([`U_n_78 of (ts_EntityName, ts_EntityNameExpression) union2 [@js 78] | `U_n_157 of ts_EntityName [@js 157] | `U_n_201 of ts_EntityNameExpression [@js 201]] [@js.union on_field "kind"])
    and ts_EnumDeclaration = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_EnumDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_EnumMember = [`Ts_Declaration | `Ts_EnumMember | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_EnumType = [`Ts_EnumType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_EqualityOperator = ((ts_SyntaxKind_EqualsEqualsEqualsToken, ts_SyntaxKind_EqualsEqualsToken, ts_SyntaxKind_ExclamationEqualsEqualsToken, ts_SyntaxKind_ExclamationEqualsToken) union4, ([`EqualsEqualsEqualsToken[@js 36] | `EqualsEqualsToken[@js 34] | `ExclamationEqualsEqualsToken[@js 37] | `ExclamationEqualsToken[@js 35]] [@js.enum])) or_enum
    and ts_EqualityOperatorOrHigher = (((((((((((((((((((((((ts_SyntaxKind_InstanceOfKeyword, ts_SyntaxKind_LessThanEqualsToken, ts_SyntaxKind_LessThanLessThanToken, ts_SyntaxKind_LessThanToken, ts_SyntaxKind_MinusToken, ts_SyntaxKind_PercentToken, ts_SyntaxKind_PlusToken, ts_SyntaxKind_SlashToken) union8, ts_SyntaxKind_InKeyword) or_, ts_SyntaxKind_GreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsEqualsToken) or_, ts_SyntaxKind_EqualsEqualsToken) or_, ts_SyntaxKind_EqualsEqualsEqualsToken) or_, ts_SyntaxKind_AsteriskToken) or_, ts_SyntaxKind_AsteriskAsteriskToken) or_, ts_ShiftOperatorOrHigher) or_, ts_ShiftOperator) or_, ts_RelationalOperatorOrHigher) or_, ts_RelationalOperator) or_, ts_MultiplicativeOperatorOrHigher) or_, ts_MultiplicativeOperator) or_, ts_ExponentiationOperator) or_, ts_EqualityOperator) or_, ts_AdditiveOperatorOrHigher) or_, ts_AdditiveOperator) or_, ([`AsteriskAsteriskToken[@js 42] | `AsteriskToken[@js 41] | `EqualsEqualsEqualsToken[@js 36] | `EqualsEqualsToken[@js 34] | `ExclamationEqualsEqualsToken[@js 37] | `ExclamationEqualsToken[@js 35] | `GreaterThanEqualsToken[@js 33] | `GreaterThanGreaterThanGreaterThanToken[@js 49] | `GreaterThanGreaterThanToken[@js 48] | `GreaterThanToken[@js 31] | `InKeyword[@js 100] | `InstanceOfKeyword[@js 101] | `LessThanEqualsToken[@js 32] | `LessThanLessThanToken[@js 47] | `LessThanToken[@js 29] | `MinusToken[@js 40] | `PercentToken[@js 44] | `PlusToken[@js 39] | `SlashToken[@js 43]] [@js.enum])) or_enum
    and ts_EqualsGreaterThanToken = ts_SyntaxKind_EqualsGreaterThanToken ts_PunctuationToken
    and ts_EqualsToken = ts_SyntaxKind_EqualsToken ts_PunctuationToken
    and ts_ErrorCallback = [`Ts_ErrorCallback] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_EvolvingArrayType = [`Ts_EvolvingArrayType | `Ts_ObjectType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ExclamationToken = ts_SyntaxKind_ExclamationToken ts_PunctuationToken
    and ts_ExitStatus = [`Success[@js 0] | `DiagnosticsPresent_OutputsSkipped[@js 1] | `DiagnosticsPresent_OutputsGenerated[@js 2] | `InvalidProject_OutputsSkipped[@js 3] | `ProjectReferenceCycle_OutputsSkipped[@js 4] | `ProjectReferenceCycle_OutputsSkupped[@js 4]] [@js.enum]
    and ts_ExitStatus_Success = [`Success[@js 0]] [@js.enum]
    and ts_ExitStatus_DiagnosticsPresent_OutputsSkipped = [`DiagnosticsPresent_OutputsSkipped[@js 1]] [@js.enum]
    and ts_ExitStatus_DiagnosticsPresent_OutputsGenerated = [`DiagnosticsPresent_OutputsGenerated[@js 2]] [@js.enum]
    and ts_ExitStatus_InvalidProject_OutputsSkipped = [`InvalidProject_OutputsSkipped[@js 3]] [@js.enum]
    and ts_ExitStatus_ProjectReferenceCycle_OutputsSkipped = [`ProjectReferenceCycle_OutputsSkipped[@js 4]] [@js.enum]
    and ts_ExitStatus_ProjectReferenceCycle_OutputsSkupped = [`ProjectReferenceCycle_OutputsSkupped[@js 4]] [@js.enum]
    and ts_ExponentiationOperator = ts_SyntaxKind_AsteriskAsteriskToken
    and ts_ExportAssignment = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_ExportAssignment | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ExportDeclaration = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_ExportDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ExportKeyword = ts_SyntaxKind_ExportKeyword ts_ModifierToken
    and ts_ExportSpecifier = [`Ts_Declaration | `Ts_ExportSpecifier | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Expression = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ExpressionStatement = [`Ts_ExpressionStatement | `Ts_JSDocContainer | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ExpressionWithTypeArguments = [`Ts_ExpressionWithTypeArguments | `Ts_Node | `Ts_NodeWithTypeArguments | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ExtendedConfigCacheEntry = [`Ts_ExtendedConfigCacheEntry] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Extension = [`Ts[@js ".ts"] | `Tsx[@js ".tsx"] | `Dts[@js ".d.ts"] | `Js[@js ".js"] | `Jsx[@js ".jsx"] | `Json[@js ".json"] | `TsBuildInfo[@js ".tsbuildinfo"]] [@js.enum]
    and ts_Extension_Ts = [`Ts[@js ".ts"]] [@js.enum]
    and ts_Extension_Tsx = [`Tsx[@js ".tsx"]] [@js.enum]
    and ts_Extension_Dts = [`Dts[@js ".d.ts"]] [@js.enum]
    and ts_Extension_Js = [`Js[@js ".js"]] [@js.enum]
    and ts_Extension_Jsx = [`Jsx[@js ".jsx"]] [@js.enum]
    and ts_Extension_Json = [`Json[@js ".json"]] [@js.enum]
    and ts_Extension_TsBuildInfo = [`TsBuildInfo[@js ".tsbuildinfo"]] [@js.enum]
    and ts_ExternalModuleReference = [`Ts_ExternalModuleReference | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FalseLiteral = [`Ts_Expression | `Ts_FalseLiteral | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FileExtensionInfo = [`Ts_FileExtensionInfo] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FileReference = [`Ts_FileReference | `Ts_TextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FileTextChanges = [`Ts_FileTextChanges] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FileWatcher = [`Ts_FileWatcher] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FileWatcherCallback = [`Ts_FileWatcherCallback] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FileWatcherEventKind = [`Created[@js 0] | `Changed[@js 1] | `Deleted[@js 2]] [@js.enum]
    and ts_FileWatcherEventKind_Created = [`Created[@js 0]] [@js.enum]
    and ts_FileWatcherEventKind_Changed = [`Changed[@js 1]] [@js.enum]
    and ts_FileWatcherEventKind_Deleted = [`Deleted[@js 2]] [@js.enum]
    and ts_FlowArrayMutation = [`Ts_FlowArrayMutation | `Ts_FlowNodeBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FlowAssignment = [`Ts_FlowAssignment | `Ts_FlowNodeBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FlowCall = [`Ts_FlowCall | `Ts_FlowNodeBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FlowCondition = [`Ts_FlowCondition | `Ts_FlowNodeBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FlowFlags = [`Unreachable[@js 1] | `Start[@js 2] | `BranchLabel[@js 4] | `LoopLabel[@js 8] | `Assignment[@js 16] | `TrueCondition[@js 32] | `FalseCondition[@js 64] | `SwitchClause[@js 128] | `ArrayMutation[@js 256] | `Call[@js 512] | `ReduceLabel[@js 1024] | `Referenced[@js 2048] | `Shared[@js 4096] | `Label[@js 12] | `Condition[@js 96]] [@js.enum]
    and ts_FlowFlags_Unreachable = [`Unreachable[@js 1]] [@js.enum]
    and ts_FlowFlags_Start = [`Start[@js 2]] [@js.enum]
    and ts_FlowFlags_BranchLabel = [`BranchLabel[@js 4]] [@js.enum]
    and ts_FlowFlags_LoopLabel = [`LoopLabel[@js 8]] [@js.enum]
    and ts_FlowFlags_Assignment = [`Assignment[@js 16]] [@js.enum]
    and ts_FlowFlags_TrueCondition = [`TrueCondition[@js 32]] [@js.enum]
    and ts_FlowFlags_FalseCondition = [`FalseCondition[@js 64]] [@js.enum]
    and ts_FlowFlags_SwitchClause = [`SwitchClause[@js 128]] [@js.enum]
    and ts_FlowFlags_ArrayMutation = [`ArrayMutation[@js 256]] [@js.enum]
    and ts_FlowFlags_Call = [`Call[@js 512]] [@js.enum]
    and ts_FlowFlags_ReduceLabel = [`ReduceLabel[@js 1024]] [@js.enum]
    and ts_FlowFlags_Referenced = [`Referenced[@js 2048]] [@js.enum]
    and ts_FlowFlags_Shared = [`Shared[@js 4096]] [@js.enum]
    and ts_FlowFlags_Label = [`Label[@js 12]] [@js.enum]
    and ts_FlowFlags_Condition = [`Condition[@js 96]] [@js.enum]
    and ts_FlowLabel = [`Ts_FlowLabel | `Ts_FlowNodeBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FlowNode = ([`U_n_1 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 1] | `U_n_2 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 2] | `U_n_4 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 4] | `U_n_8 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 8] | `U_n_12 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 12] | `U_n_16 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 16] | `U_n_32 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 32] | `U_n_64 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 64] | `U_n_96 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 96] | `U_n_128 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 128] | `U_n_256 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 256] | `U_n_512 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 512] | `U_n_1024 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 1024] | `U_n_2048 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 2048] | `U_n_4096 of (ts_FlowStart, ts_FlowLabel, ts_FlowAssignment, ts_FlowCall, ts_FlowCondition, ts_FlowSwitchClause, ts_FlowArrayMutation, ts_FlowReduceLabel) union8 [@js 4096]] [@js.union on_field "flags"])
    and ts_FlowNodeBase = [`Ts_FlowNodeBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FlowReduceLabel = [`Ts_FlowNodeBase | `Ts_FlowReduceLabel] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FlowStart = [`Ts_FlowNodeBase | `Ts_FlowStart] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FlowSwitchClause = [`Ts_FlowNodeBase | `Ts_FlowSwitchClause] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FlowType = ([`U_n_1 of (ts_Type, ts_IncompleteType) union2 [@js 1] | `U_n_2 of (ts_Type, ts_IncompleteType) union2 [@js 2] | `U_n_4 of (ts_Type, ts_IncompleteType) union2 [@js 4] | `U_n_8 of (ts_Type, ts_IncompleteType) union2 [@js 8] | `U_n_16 of (ts_Type, ts_IncompleteType) union2 [@js 16] | `U_n_32 of (ts_Type, ts_IncompleteType) union2 [@js 32] | `U_n_64 of (ts_Type, ts_IncompleteType) union2 [@js 64] | `U_n_128 of (ts_Type, ts_IncompleteType) union2 [@js 128] | `U_n_256 of (ts_Type, ts_IncompleteType) union2 [@js 256] | `U_n_296 of (ts_Type, ts_IncompleteType) union2 [@js 296] | `U_n_384 of (ts_Type, ts_IncompleteType) union2 [@js 384] | `U_n_512 of (ts_Type, ts_IncompleteType) union2 [@js 512] | `U_n_528 of (ts_Type, ts_IncompleteType) union2 [@js 528] | `U_n_1024 of (ts_Type, ts_IncompleteType) union2 [@js 1024] | `U_n_1056 of (ts_Type, ts_IncompleteType) union2 [@js 1056] | `U_n_2048 of (ts_Type, ts_IncompleteType) union2 [@js 2048] | `U_n_2112 of (ts_Type, ts_IncompleteType) union2 [@js 2112] | `U_n_2944 of (ts_Type, ts_IncompleteType) union2 [@js 2944] | `U_n_4096 of (ts_Type, ts_IncompleteType) union2 [@js 4096] | `U_n_8192 of (ts_Type, ts_IncompleteType) union2 [@js 8192] | `U_n_12288 of (ts_Type, ts_IncompleteType) union2 [@js 12288] | `U_n_16384 of (ts_Type, ts_IncompleteType) union2 [@js 16384] | `U_n_32768 of (ts_Type, ts_IncompleteType) union2 [@js 32768] | `U_n_49152 of (ts_Type, ts_IncompleteType) union2 [@js 49152] | `U_n_65536 of (ts_Type, ts_IncompleteType) union2 [@js 65536] | `U_n_109440 of (ts_Type, ts_IncompleteType) union2 [@js 109440] | `U_n_117724 of (ts_Type, ts_IncompleteType) union2 [@js 117724] | `U_n_131072 of (ts_Type, ts_IncompleteType) union2 [@js 131072] | `U_n_262144 of (ts_Type, ts_IncompleteType) union2 [@js 262144] | `U_n_524288 of (ts_Type, ts_IncompleteType) union2 [@js 524288] | `U_n_1048576 of (ts_Type, ts_IncompleteType) union2 [@js 1048576] | `U_n_2097152 of (ts_Type, ts_IncompleteType) union2 [@js 2097152] | `U_n_3145728 of (ts_Type, ts_IncompleteType) union2 [@js 3145728] | `U_n_3670016 of (ts_Type, ts_IncompleteType) union2 [@js 3670016] | `U_n_4194304 of (ts_Type, ts_IncompleteType) union2 [@js 4194304] | `U_n_8388608 of (ts_Type, ts_IncompleteType) union2 [@js 8388608] | `U_n_8650752 of (ts_Type, ts_IncompleteType) union2 [@js 8650752] | `U_n_16777216 of (ts_Type, ts_IncompleteType) union2 [@js 16777216] | `U_n_33554432 of (ts_Type, ts_IncompleteType) union2 [@js 33554432] | `U_n_58982400 of (ts_Type, ts_IncompleteType) union2 [@js 58982400] | `U_n_67108864 of (ts_Type, ts_IncompleteType) union2 [@js 67108864] | `U_n_134217728 of (ts_Type, ts_IncompleteType) union2 [@js 134217728] | `U_n_268435456 of (ts_Type, ts_IncompleteType) union2 [@js 268435456] | `U_n_402653316 of (ts_Type, ts_IncompleteType) union2 [@js 402653316] | `U_n_406847488 of (ts_Type, ts_IncompleteType) union2 [@js 406847488] | `U_n_465829888 of (ts_Type, ts_IncompleteType) union2 [@js 465829888] | `U_n_469499904 of (ts_Type, ts_IncompleteType) union2 [@js 469499904] | `U_n_536624127 of (ts_Type, ts_IncompleteType) union2 [@js 536624127]] [@js.union on_field "flags"])
    and ts_ForInOrOfStatement = ([`U_n_238 of ts_ForInStatement [@js 238] | `U_n_239 of ts_ForOfStatement [@js 239]] [@js.union on_field "kind"])
    and ts_ForInStatement = [`Ts_ForInStatement | `Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ForInitializer = ([`U_n_0 of ts_Expression [@js 0] | `U_n_1 of ts_Expression [@js 1] | `U_n_2 of ts_Expression [@js 2] | `U_n_3 of ts_Expression [@js 3] | `U_n_4 of ts_Expression [@js 4] | `U_n_5 of ts_Expression [@js 5] | `U_n_6 of ts_Expression [@js 6] | `U_n_7 of ts_Expression [@js 7] | `U_n_8 of ts_Expression [@js 8] | `U_n_9 of ts_Expression [@js 9] | `U_n_10 of ts_Expression [@js 10] | `U_n_11 of ts_Expression [@js 11] | `U_n_12 of ts_Expression [@js 12] | `U_n_13 of ts_Expression [@js 13] | `U_n_14 of ts_Expression [@js 14] | `U_n_15 of ts_Expression [@js 15] | `U_n_16 of ts_Expression [@js 16] | `U_n_17 of ts_Expression [@js 17] | `U_n_18 of ts_Expression [@js 18] | `U_n_19 of ts_Expression [@js 19] | `U_n_20 of ts_Expression [@js 20] | `U_n_21 of ts_Expression [@js 21] | `U_n_22 of ts_Expression [@js 22] | `U_n_23 of ts_Expression [@js 23] | `U_n_24 of ts_Expression [@js 24] | `U_n_25 of ts_Expression [@js 25] | `U_n_26 of ts_Expression [@js 26] | `U_n_27 of ts_Expression [@js 27] | `U_n_28 of ts_Expression [@js 28] | `U_n_29 of ts_Expression [@js 29] | `U_n_30 of ts_Expression [@js 30] | `U_n_31 of ts_Expression [@js 31] | `U_n_32 of ts_Expression [@js 32] | `U_n_33 of ts_Expression [@js 33] | `U_n_34 of ts_Expression [@js 34] | `U_n_35 of ts_Expression [@js 35] | `U_n_36 of ts_Expression [@js 36] | `U_n_37 of ts_Expression [@js 37] | `U_n_38 of ts_Expression [@js 38] | `U_n_39 of ts_Expression [@js 39] | `U_n_40 of ts_Expression [@js 40] | `U_n_41 of ts_Expression [@js 41] | `U_n_42 of ts_Expression [@js 42] | `U_n_43 of ts_Expression [@js 43] | `U_n_44 of ts_Expression [@js 44] | `U_n_45 of ts_Expression [@js 45] | `U_n_46 of ts_Expression [@js 46] | `U_n_47 of ts_Expression [@js 47] | `U_n_48 of ts_Expression [@js 48] | `U_n_49 of ts_Expression [@js 49] | `U_n_50 of ts_Expression [@js 50] | `U_n_51 of ts_Expression [@js 51] | `U_n_52 of ts_Expression [@js 52] | `U_n_53 of ts_Expression [@js 53] | `U_n_54 of ts_Expression [@js 54] | `U_n_55 of ts_Expression [@js 55] | `U_n_56 of ts_Expression [@js 56] | `U_n_57 of ts_Expression [@js 57] | `U_n_58 of ts_Expression [@js 58] | `U_n_59 of ts_Expression [@js 59] | `U_n_60 of ts_Expression [@js 60] | `U_n_61 of ts_Expression [@js 61] | `U_n_62 of ts_Expression [@js 62] | `U_n_63 of ts_Expression [@js 63] | `U_n_64 of ts_Expression [@js 64] | `U_n_65 of ts_Expression [@js 65] | `U_n_66 of ts_Expression [@js 66] | `U_n_67 of ts_Expression [@js 67] | `U_n_68 of ts_Expression [@js 68] | `U_n_69 of ts_Expression [@js 69] | `U_n_70 of ts_Expression [@js 70] | `U_n_71 of ts_Expression [@js 71] | `U_n_72 of ts_Expression [@js 72] | `U_n_73 of ts_Expression [@js 73] | `U_n_74 of ts_Expression [@js 74] | `U_n_75 of ts_Expression [@js 75] | `U_n_76 of ts_Expression [@js 76] | `U_n_77 of ts_Expression [@js 77] | `U_n_78 of ts_Expression [@js 78] | `U_n_79 of ts_Expression [@js 79] | `U_n_80 of ts_Expression [@js 80] | `U_n_81 of ts_Expression [@js 81] | `U_n_82 of ts_Expression [@js 82] | `U_n_83 of ts_Expression [@js 83] | `U_n_84 of ts_Expression [@js 84] | `U_n_85 of ts_Expression [@js 85] | `U_n_86 of ts_Expression [@js 86] | `U_n_87 of ts_Expression [@js 87] | `U_n_88 of ts_Expression [@js 88] | `U_n_89 of ts_Expression [@js 89] | `U_n_90 of ts_Expression [@js 90] | `U_n_91 of ts_Expression [@js 91] | `U_n_92 of ts_Expression [@js 92] | `U_n_93 of ts_Expression [@js 93] | `U_n_94 of ts_Expression [@js 94] | `U_n_95 of ts_Expression [@js 95] | `U_n_96 of ts_Expression [@js 96] | `U_n_97 of ts_Expression [@js 97] | `U_n_98 of ts_Expression [@js 98] | `U_n_99 of ts_Expression [@js 99] | `U_n_100 of ts_Expression [@js 100] | `U_n_101 of ts_Expression [@js 101] | `U_n_102 of ts_Expression [@js 102] | `U_n_103 of ts_Expression [@js 103] | `U_n_104 of ts_Expression [@js 104] | `U_n_105 of ts_Expression [@js 105] | `U_n_106 of ts_Expression [@js 106] | `U_n_107 of ts_Expression [@js 107] | `U_n_108 of ts_Expression [@js 108] | `U_n_109 of ts_Expression [@js 109] | `U_n_110 of ts_Expression [@js 110] | `U_n_111 of ts_Expression [@js 111] | `U_n_112 of ts_Expression [@js 112] | `U_n_113 of ts_Expression [@js 113] | `U_n_114 of ts_Expression [@js 114] | `U_n_115 of ts_Expression [@js 115] | `U_n_116 of ts_Expression [@js 116] | `U_n_117 of ts_Expression [@js 117] | `U_n_118 of ts_Expression [@js 118] | `U_n_119 of ts_Expression [@js 119] | `U_n_120 of ts_Expression [@js 120] | `U_n_121 of ts_Expression [@js 121] | `U_n_122 of ts_Expression [@js 122] | `U_n_123 of ts_Expression [@js 123] | `U_n_124 of ts_Expression [@js 124] | `U_n_125 of ts_Expression [@js 125] | `U_n_126 of ts_Expression [@js 126] | `U_n_127 of ts_Expression [@js 127] | `U_n_128 of ts_Expression [@js 128] | `U_n_129 of ts_Expression [@js 129] | `U_n_130 of ts_Expression [@js 130] | `U_n_131 of ts_Expression [@js 131] | `U_n_132 of ts_Expression [@js 132] | `U_n_133 of ts_Expression [@js 133] | `U_n_134 of ts_Expression [@js 134] | `U_n_135 of ts_Expression [@js 135] | `U_n_136 of ts_Expression [@js 136] | `U_n_137 of ts_Expression [@js 137] | `U_n_138 of ts_Expression [@js 138] | `U_n_139 of ts_Expression [@js 139] | `U_n_140 of ts_Expression [@js 140] | `U_n_141 of ts_Expression [@js 141] | `U_n_142 of ts_Expression [@js 142] | `U_n_143 of ts_Expression [@js 143] | `U_n_144 of ts_Expression [@js 144] | `U_n_145 of ts_Expression [@js 145] | `U_n_146 of ts_Expression [@js 146] | `U_n_147 of ts_Expression [@js 147] | `U_n_148 of ts_Expression [@js 148] | `U_n_149 of ts_Expression [@js 149] | `U_n_150 of ts_Expression [@js 150] | `U_n_151 of ts_Expression [@js 151] | `U_n_152 of ts_Expression [@js 152] | `U_n_153 of ts_Expression [@js 153] | `U_n_154 of ts_Expression [@js 154] | `U_n_155 of ts_Expression [@js 155] | `U_n_156 of ts_Expression [@js 156] | `U_n_157 of ts_Expression [@js 157] | `U_n_158 of ts_Expression [@js 158] | `U_n_159 of ts_Expression [@js 159] | `U_n_160 of ts_Expression [@js 160] | `U_n_161 of ts_Expression [@js 161] | `U_n_162 of ts_Expression [@js 162] | `U_n_163 of ts_Expression [@js 163] | `U_n_164 of ts_Expression [@js 164] | `U_n_165 of ts_Expression [@js 165] | `U_n_166 of ts_Expression [@js 166] | `U_n_167 of ts_Expression [@js 167] | `U_n_168 of ts_Expression [@js 168] | `U_n_169 of ts_Expression [@js 169] | `U_n_170 of ts_Expression [@js 170] | `U_n_171 of ts_Expression [@js 171] | `U_n_172 of ts_Expression [@js 172] | `U_n_173 of ts_Expression [@js 173] | `U_n_174 of ts_Expression [@js 174] | `U_n_175 of ts_Expression [@js 175] | `U_n_176 of ts_Expression [@js 176] | `U_n_177 of ts_Expression [@js 177] | `U_n_178 of ts_Expression [@js 178] | `U_n_179 of ts_Expression [@js 179] | `U_n_180 of ts_Expression [@js 180] | `U_n_181 of ts_Expression [@js 181] | `U_n_182 of ts_Expression [@js 182] | `U_n_183 of ts_Expression [@js 183] | `U_n_184 of ts_Expression [@js 184] | `U_n_185 of ts_Expression [@js 185] | `U_n_186 of ts_Expression [@js 186] | `U_n_187 of ts_Expression [@js 187] | `U_n_188 of ts_Expression [@js 188] | `U_n_189 of ts_Expression [@js 189] | `U_n_190 of ts_Expression [@js 190] | `U_n_191 of ts_Expression [@js 191] | `U_n_192 of ts_Expression [@js 192] | `U_n_193 of ts_Expression [@js 193] | `U_n_194 of ts_Expression [@js 194] | `U_n_195 of ts_Expression [@js 195] | `U_n_196 of ts_Expression [@js 196] | `U_n_197 of ts_Expression [@js 197] | `U_n_198 of ts_Expression [@js 198] | `U_n_199 of ts_Expression [@js 199] | `U_n_200 of ts_Expression [@js 200] | `U_n_201 of ts_Expression [@js 201] | `U_n_202 of ts_Expression [@js 202] | `U_n_203 of ts_Expression [@js 203] | `U_n_204 of ts_Expression [@js 204] | `U_n_205 of ts_Expression [@js 205] | `U_n_206 of ts_Expression [@js 206] | `U_n_207 of ts_Expression [@js 207] | `U_n_208 of ts_Expression [@js 208] | `U_n_209 of ts_Expression [@js 209] | `U_n_210 of ts_Expression [@js 210] | `U_n_211 of ts_Expression [@js 211] | `U_n_212 of ts_Expression [@js 212] | `U_n_213 of ts_Expression [@js 213] | `U_n_214 of ts_Expression [@js 214] | `U_n_215 of ts_Expression [@js 215] | `U_n_216 of ts_Expression [@js 216] | `U_n_217 of ts_Expression [@js 217] | `U_n_218 of ts_Expression [@js 218] | `U_n_219 of ts_Expression [@js 219] | `U_n_220 of ts_Expression [@js 220] | `U_n_221 of ts_Expression [@js 221] | `U_n_222 of ts_Expression [@js 222] | `U_n_223 of ts_Expression [@js 223] | `U_n_224 of ts_Expression [@js 224] | `U_n_225 of ts_Expression [@js 225] | `U_n_226 of ts_Expression [@js 226] | `U_n_227 of ts_Expression [@js 227] | `U_n_228 of ts_Expression [@js 228] | `U_n_229 of ts_Expression [@js 229] | `U_n_230 of ts_Expression [@js 230] | `U_n_231 of ts_Expression [@js 231] | `U_n_232 of ts_Expression [@js 232] | `U_n_233 of ts_Expression [@js 233] | `U_n_234 of ts_Expression [@js 234] | `U_n_235 of ts_Expression [@js 235] | `U_n_236 of ts_Expression [@js 236] | `U_n_237 of ts_Expression [@js 237] | `U_n_238 of ts_Expression [@js 238] | `U_n_239 of ts_Expression [@js 239] | `U_n_240 of ts_Expression [@js 240] | `U_n_241 of ts_Expression [@js 241] | `U_n_242 of ts_Expression [@js 242] | `U_n_243 of ts_Expression [@js 243] | `U_n_244 of ts_Expression [@js 244] | `U_n_245 of ts_Expression [@js 245] | `U_n_246 of ts_Expression [@js 246] | `U_n_247 of ts_Expression [@js 247] | `U_n_248 of ts_Expression [@js 248] | `U_n_249 of ts_Expression [@js 249] | `U_n_250 of (ts_VariableDeclarationList, ts_Expression) union2 [@js 250] | `U_n_251 of ts_Expression [@js 251] | `U_n_252 of ts_Expression [@js 252] | `U_n_253 of ts_Expression [@js 253] | `U_n_254 of ts_Expression [@js 254] | `U_n_255 of ts_Expression [@js 255] | `U_n_256 of ts_Expression [@js 256] | `U_n_257 of ts_Expression [@js 257] | `U_n_258 of ts_Expression [@js 258] | `U_n_259 of ts_Expression [@js 259] | `U_n_260 of ts_Expression [@js 260] | `U_n_261 of ts_Expression [@js 261] | `U_n_262 of ts_Expression [@js 262] | `U_n_263 of ts_Expression [@js 263] | `U_n_264 of ts_Expression [@js 264] | `U_n_265 of ts_Expression [@js 265] | `U_n_266 of ts_Expression [@js 266] | `U_n_267 of ts_Expression [@js 267] | `U_n_268 of ts_Expression [@js 268] | `U_n_269 of ts_Expression [@js 269] | `U_n_270 of ts_Expression [@js 270] | `U_n_271 of ts_Expression [@js 271] | `U_n_272 of ts_Expression [@js 272] | `U_n_273 of ts_Expression [@js 273] | `U_n_274 of ts_Expression [@js 274] | `U_n_275 of ts_Expression [@js 275] | `U_n_276 of ts_Expression [@js 276] | `U_n_277 of ts_Expression [@js 277] | `U_n_278 of ts_Expression [@js 278] | `U_n_279 of ts_Expression [@js 279] | `U_n_280 of ts_Expression [@js 280] | `U_n_281 of ts_Expression [@js 281] | `U_n_282 of ts_Expression [@js 282] | `U_n_283 of ts_Expression [@js 283] | `U_n_284 of ts_Expression [@js 284] | `U_n_285 of ts_Expression [@js 285] | `U_n_286 of ts_Expression [@js 286] | `U_n_287 of ts_Expression [@js 287] | `U_n_288 of ts_Expression [@js 288] | `U_n_289 of ts_Expression [@js 289] | `U_n_290 of ts_Expression [@js 290] | `U_n_291 of ts_Expression [@js 291] | `U_n_292 of ts_Expression [@js 292] | `U_n_293 of ts_Expression [@js 293] | `U_n_294 of ts_Expression [@js 294] | `U_n_295 of ts_Expression [@js 295] | `U_n_296 of ts_Expression [@js 296] | `U_n_297 of ts_Expression [@js 297] | `U_n_298 of ts_Expression [@js 298] | `U_n_299 of ts_Expression [@js 299] | `U_n_300 of ts_Expression [@js 300] | `U_n_301 of ts_Expression [@js 301] | `U_n_302 of ts_Expression [@js 302] | `U_n_303 of ts_Expression [@js 303] | `U_n_304 of ts_Expression [@js 304] | `U_n_305 of ts_Expression [@js 305] | `U_n_306 of ts_Expression [@js 306] | `U_n_307 of ts_Expression [@js 307] | `U_n_308 of ts_Expression [@js 308] | `U_n_309 of ts_Expression [@js 309] | `U_n_310 of ts_Expression [@js 310] | `U_n_311 of ts_Expression [@js 311] | `U_n_312 of ts_Expression [@js 312] | `U_n_313 of ts_Expression [@js 313] | `U_n_314 of ts_Expression [@js 314] | `U_n_315 of ts_Expression [@js 315] | `U_n_316 of ts_Expression [@js 316] | `U_n_317 of ts_Expression [@js 317] | `U_n_318 of ts_Expression [@js 318] | `U_n_319 of ts_Expression [@js 319] | `U_n_320 of ts_Expression [@js 320] | `U_n_321 of ts_Expression [@js 321] | `U_n_322 of ts_Expression [@js 322] | `U_n_323 of ts_Expression [@js 323] | `U_n_324 of ts_Expression [@js 324] | `U_n_325 of ts_Expression [@js 325] | `U_n_326 of ts_Expression [@js 326] | `U_n_327 of ts_Expression [@js 327] | `U_n_328 of ts_Expression [@js 328] | `U_n_329 of ts_Expression [@js 329] | `U_n_330 of ts_Expression [@js 330] | `U_n_331 of ts_Expression [@js 331] | `U_n_332 of ts_Expression [@js 332] | `U_n_333 of ts_Expression [@js 333] | `U_n_334 of ts_Expression [@js 334] | `U_n_335 of ts_Expression [@js 335] | `U_n_336 of ts_Expression [@js 336] | `U_n_337 of ts_Expression [@js 337] | `U_n_338 of ts_Expression [@js 338] | `U_n_339 of ts_Expression [@js 339] | `U_n_340 of ts_Expression [@js 340] | `U_n_341 of ts_Expression [@js 341]] [@js.union on_field "kind"])
    and ts_ForOfStatement = [`Ts_ForOfStatement | `Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ForStatement = [`Ts_ForStatement | `Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FormatCodeOptions = [`Ts_EditorOptions | `Ts_FormatCodeOptions] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FormatCodeSettings = [`Ts_EditorSettings | `Ts_FormatCodeSettings] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FormatDiagnosticsHost = [`Ts_FormatDiagnosticsHost] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FunctionBody = ts_Block
    and ts_FunctionDeclaration = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_FunctionDeclaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FunctionExpression = [`Ts_Declaration | `Ts_Expression | `Ts_FunctionExpression | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FunctionLike = ts_SignatureDeclaration
    and ts_FunctionLikeDeclaration = ([`U_n_165 of ts_MethodDeclaration [@js 165] | `U_n_166 of ts_ConstructorDeclaration [@js 166] | `U_n_167 of ts_GetAccessorDeclaration [@js 167] | `U_n_168 of ts_SetAccessorDeclaration [@js 168] | `U_n_208 of ts_FunctionExpression [@js 208] | `U_n_209 of ts_ArrowFunction [@js 209] | `U_n_251 of ts_FunctionDeclaration [@js 251]] [@js.union on_field "kind"])
    and ts_FunctionLikeDeclarationBase = [`Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FunctionOrConstructorTypeNode = ([`U_n_174 of ts_FunctionTypeNode [@js 174] | `U_n_175 of ts_ConstructorTypeNode [@js 175]] [@js.union on_field "kind"])
    and ts_FunctionOrConstructorTypeNodeBase = [`Ts_Declaration | `Ts_FunctionOrConstructorTypeNodeBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_FunctionTypeNode = [`Ts_Declaration | `Ts_FunctionOrConstructorTypeNodeBase | `Ts_FunctionTypeNode | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_GeneratedIdentifierFlags = [`None[@js 0] | `ReservedInNestedScopes[@js 8] | `Optimistic[@js 16] | `FileLevel[@js 32] | `AllowNameSubstitution[@js 64]] [@js.enum]
    and ts_GeneratedIdentifierFlags_None = [`None[@js 0]] [@js.enum]
    and ts_GeneratedIdentifierFlags_ReservedInNestedScopes = [`ReservedInNestedScopes[@js 8]] [@js.enum]
    and ts_GeneratedIdentifierFlags_Optimistic = [`Optimistic[@js 16]] [@js.enum]
    and ts_GeneratedIdentifierFlags_FileLevel = [`FileLevel[@js 32]] [@js.enum]
    and ts_GeneratedIdentifierFlags_AllowNameSubstitution = [`AllowNameSubstitution[@js 64]] [@js.enum]
    and ts_GenericType = [`Ts_GenericType | `Ts_InterfaceType | `Ts_ObjectType | `Ts_Type | `Ts_TypeReference] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_GetAccessorDeclaration = [`Ts_ClassElement | `Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_GetAccessorDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_GetCompletionsAtPositionOptions = [`Ts_GetCompletionsAtPositionOptions | `Ts_UserPreferences] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_GetEffectiveTypeRootsHost = [`Ts_GetEffectiveTypeRootsHost] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_HasExpressionInitializer = ([`U_n_160 of ts_ParameterDeclaration [@js 160] | `U_n_162 of ts_PropertySignature [@js 162] | `U_n_163 of ts_PropertyDeclaration [@js 163] | `U_n_198 of ts_BindingElement [@js 198] | `U_n_249 of ts_VariableDeclaration [@js 249] | `U_n_288 of ts_PropertyAssignment [@js 288] | `U_n_291 of ts_EnumMember [@js 291]] [@js.union on_field "kind"])
    and ts_HasInitializer = ([`U_n_160 of ts_HasExpressionInitializer [@js 160] | `U_n_162 of ts_HasExpressionInitializer [@js 162] | `U_n_163 of ts_HasExpressionInitializer [@js 163] | `U_n_198 of ts_HasExpressionInitializer [@js 198] | `U_n_237 of ts_ForStatement [@js 237] | `U_n_238 of ts_ForInStatement [@js 238] | `U_n_239 of ts_ForOfStatement [@js 239] | `U_n_249 of ts_HasExpressionInitializer [@js 249] | `U_n_280 of ts_JsxAttribute [@js 280] | `U_n_288 of ts_HasExpressionInitializer [@js 288] | `U_n_291 of ts_HasExpressionInitializer [@js 291]] [@js.union on_field "kind"])
    and ts_HasJSDoc = ([`U_n_1 of ts_EndOfFileToken [@js 1] | `U_n_160 of ts_ParameterDeclaration [@js 160] | `U_n_162 of ts_PropertySignature [@js 162] | `U_n_163 of ts_PropertyDeclaration [@js 163] | `U_n_164 of ts_MethodSignature [@js 164] | `U_n_165 of ts_MethodDeclaration [@js 165] | `U_n_166 of ts_ConstructorDeclaration [@js 166] | `U_n_167 of ts_AccessorDeclaration [@js 167] | `U_n_168 of ts_AccessorDeclaration [@js 168] | `U_n_169 of ts_CallSignatureDeclaration [@js 169] | `U_n_170 of ts_ConstructSignatureDeclaration [@js 170] | `U_n_171 of ts_IndexSignatureDeclaration [@js 171] | `U_n_174 of ts_FunctionTypeNode [@js 174] | `U_n_175 of ts_ConstructorTypeNode [@js 175] | `U_n_192 of ts_NamedTupleMember [@js 192] | `U_n_207 of ts_ParenthesizedExpression [@js 207] | `U_n_208 of ts_FunctionExpression [@js 208] | `U_n_209 of ts_ArrowFunction [@js 209] | `U_n_221 of ts_ClassLikeDeclaration [@js 221] | `U_n_232 of ts_VariableStatement [@js 232] | `U_n_233 of ts_ExpressionStatement [@js 233] | `U_n_245 of ts_LabeledStatement [@js 245] | `U_n_251 of ts_FunctionDeclaration [@js 251] | `U_n_252 of ts_ClassLikeDeclaration [@js 252] | `U_n_253 of ts_InterfaceDeclaration [@js 253] | `U_n_254 of ts_TypeAliasDeclaration [@js 254] | `U_n_255 of ts_EnumDeclaration [@js 255] | `U_n_256 of ts_ModuleDeclaration [@js 256] | `U_n_259 of ts_NamespaceExportDeclaration [@js 259] | `U_n_260 of ts_ImportEqualsDeclaration [@js 260] | `U_n_261 of ts_ImportDeclaration [@js 261] | `U_n_266 of ts_ExportAssignment [@js 266] | `U_n_267 of ts_ExportDeclaration [@js 267] | `U_n_288 of ts_PropertyAssignment [@js 288] | `U_n_289 of ts_ShorthandPropertyAssignment [@js 289] | `U_n_290 of ts_SpreadAssignment [@js 290] | `U_n_291 of ts_EnumMember [@js 291] | `U_n_308 of ts_JSDocFunctionType [@js 308]] [@js.union on_field "kind"])
    and ts_HasType = ([`U_n_160 of ts_ParameterDeclaration [@js 160] | `U_n_162 of ts_PropertySignature [@js 162] | `U_n_163 of ts_PropertyDeclaration [@js 163] | `U_n_164 of ts_SignatureDeclaration [@js 164] | `U_n_165 of ts_SignatureDeclaration [@js 165] | `U_n_166 of ts_SignatureDeclaration [@js 166] | `U_n_167 of ts_SignatureDeclaration [@js 167] | `U_n_168 of ts_SignatureDeclaration [@js 168] | `U_n_169 of ts_SignatureDeclaration [@js 169] | `U_n_170 of ts_SignatureDeclaration [@js 170] | `U_n_171 of ts_SignatureDeclaration [@js 171] | `U_n_172 of ts_TypePredicateNode [@js 172] | `U_n_174 of ts_SignatureDeclaration [@js 174] | `U_n_175 of ts_SignatureDeclaration [@js 175] | `U_n_186 of ts_ParenthesizedTypeNode [@js 186] | `U_n_188 of ts_TypeOperatorNode [@js 188] | `U_n_190 of ts_MappedTypeNode [@js 190] | `U_n_206 of ts_AssertionExpression [@js 206] | `U_n_208 of ts_SignatureDeclaration [@js 208] | `U_n_209 of ts_SignatureDeclaration [@js 209] | `U_n_224 of ts_AssertionExpression [@js 224] | `U_n_249 of ts_VariableDeclaration [@js 249] | `U_n_251 of ts_SignatureDeclaration [@js 251] | `U_n_254 of ts_TypeAliasDeclaration [@js 254] | `U_n_301 of ts_JSDocTypeExpression [@js 301] | `U_n_305 of ts_JSDocNullableType [@js 305] | `U_n_306 of ts_JSDocNonNullableType [@js 306] | `U_n_307 of ts_JSDocOptionalType [@js 307] | `U_n_308 of ts_SignatureDeclaration [@js 308] | `U_n_309 of ts_JSDocVariadicType [@js 309]] [@js.union on_field "kind"])
    and ts_HasTypeArguments = ([`U_n_203 of ts_CallExpression [@js 203] | `U_n_204 of ts_NewExpression [@js 204] | `U_n_205 of ts_TaggedTemplateExpression [@js 205] | `U_n_274 of ts_JsxSelfClosingElement [@js 274] | `U_n_275 of ts_JsxOpeningElement [@js 275]] [@js.union on_field "kind"])
    and ts_HeritageClause = [`Ts_HeritageClause | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_HighlightSpan = [`Ts_HighlightSpan] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_HighlightSpanKind = [`none[@js "none"] | `definition[@js "definition"] | `reference[@js "reference"] | `writtenReference[@js "writtenReference"]] [@js.enum]
    and ts_HighlightSpanKind_none = [`none[@js "none"]] [@js.enum]
    and ts_HighlightSpanKind_definition = [`definition[@js "definition"]] [@js.enum]
    and ts_HighlightSpanKind_reference = [`reference[@js "reference"]] [@js.enum]
    and ts_HighlightSpanKind_writtenReference = [`writtenReference[@js "writtenReference"]] [@js.enum]
    and ts_HostCancellationToken = [`Ts_HostCancellationToken] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_IScriptSnapshot = [`Ts_IScriptSnapshot] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Identifier = [`Ts_Declaration | `Ts_Expression | `Ts_Identifier | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_IdentifierTypePredicate = [`Ts_IdentifierTypePredicate | `Ts_TypePredicateBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_IfStatement = [`Ts_IfStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ImplementationLocation = [`Ts_DocumentSpan | `Ts_ImplementationLocation] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ImportCall = [`Ts_CallExpression | `Ts_Declaration | `Ts_Expression | `Ts_ImportCall | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ImportClause = [`Ts_Declaration | `Ts_ImportClause | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ImportDeclaration = [`Ts_ImportDeclaration | `Ts_JSDocContainer | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ImportEqualsDeclaration = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_ImportEqualsDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ImportExpression = [`Ts_Expression | `Ts_ImportExpression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ImportOrExportSpecifier = ([`U_n_265 of ts_ImportSpecifier [@js 265] | `U_n_270 of ts_ExportSpecifier [@js 270]] [@js.union on_field "kind"])
    and ts_ImportSpecifier = [`Ts_Declaration | `Ts_ImportSpecifier | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ImportTypeNode = [`Ts_ImportTypeNode | `Ts_Node | `Ts_NodeWithTypeArguments | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ImportsNotUsedAsValues = [`Remove[@js 0] | `Preserve[@js 1] | `Error[@js 2]] [@js.enum]
    and ts_ImportsNotUsedAsValues_Remove = [`Remove[@js 0]] [@js.enum]
    and ts_ImportsNotUsedAsValues_Preserve = [`Preserve[@js 1]] [@js.enum]
    and ts_ImportsNotUsedAsValues_Error = [`Error[@js 2]] [@js.enum]
    and ts_IncompleteType = [`Ts_IncompleteType] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_IncrementExpression = ts_UpdateExpression
    and 'T ts_IncrementalProgramOptions = [`Ts_IncrementalProgramOptions of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_IndentStyle = [`None[@js 0] | `Block[@js 1] | `Smart[@js 2]] [@js.enum]
    and ts_IndentStyle_None = [`None[@js 0]] [@js.enum]
    and ts_IndentStyle_Block = [`Block[@js 1]] [@js.enum]
    and ts_IndentStyle_Smart = [`Smart[@js 2]] [@js.enum]
    and ts_IndexInfo = [`Ts_IndexInfo] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_IndexKind = [`String[@js 0] | `Number[@js 1]] [@js.enum]
    and ts_IndexKind_String = [`String[@js 0]] [@js.enum]
    and ts_IndexKind_Number = [`Number[@js 1]] [@js.enum]
    and ts_IndexSignatureDeclaration = [`Ts_ClassElement | `Ts_Declaration | `Ts_IndexSignatureDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeElement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_IndexType = [`Ts_IndexType | `Ts_InstantiableType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_IndexedAccessType = [`Ts_IndexedAccessType | `Ts_InstantiableType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_IndexedAccessTypeNode = [`Ts_IndexedAccessTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_InferTypeNode = [`Ts_InferTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_InferencePriority = [`NakedTypeVariable[@js 1] | `SpeculativeTuple[@js 2] | `HomomorphicMappedType[@js 4] | `PartialHomomorphicMappedType[@js 8] | `MappedTypeConstraint[@js 16] | `ContravariantConditional[@js 32] | `ReturnType[@js 64] | `LiteralKeyof[@js 128] | `NoConstraints[@js 256] | `AlwaysStrict[@js 512] | `MaxValue[@js 1024] | `PriorityImpliesCombination[@js 208] | `Circularity[@js -1]] [@js.enum]
    and ts_InferencePriority_NakedTypeVariable = [`NakedTypeVariable[@js 1]] [@js.enum]
    and ts_InferencePriority_SpeculativeTuple = [`SpeculativeTuple[@js 2]] [@js.enum]
    and ts_InferencePriority_HomomorphicMappedType = [`HomomorphicMappedType[@js 4]] [@js.enum]
    and ts_InferencePriority_PartialHomomorphicMappedType = [`PartialHomomorphicMappedType[@js 8]] [@js.enum]
    and ts_InferencePriority_MappedTypeConstraint = [`MappedTypeConstraint[@js 16]] [@js.enum]
    and ts_InferencePriority_ContravariantConditional = [`ContravariantConditional[@js 32]] [@js.enum]
    and ts_InferencePriority_ReturnType = [`ReturnType[@js 64]] [@js.enum]
    and ts_InferencePriority_LiteralKeyof = [`LiteralKeyof[@js 128]] [@js.enum]
    and ts_InferencePriority_NoConstraints = [`NoConstraints[@js 256]] [@js.enum]
    and ts_InferencePriority_AlwaysStrict = [`AlwaysStrict[@js 512]] [@js.enum]
    and ts_InferencePriority_MaxValue = [`MaxValue[@js 1024]] [@js.enum]
    and ts_InferencePriority_PriorityImpliesCombination = [`PriorityImpliesCombination[@js 208]] [@js.enum]
    and ts_InferencePriority_Circularity = [`Circularity[@js -1]] [@js.enum]
    and ts_InputFiles = [`Ts_InputFiles | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_InstallPackageAction = [`Ts_InstallPackageAction] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_InstallPackageOptions = [`Ts_InstallPackageOptions] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_InstantiableType = [`Ts_InstantiableType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_InterfaceDeclaration = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_InterfaceDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_InterfaceType = [`Ts_InterfaceType | `Ts_ObjectType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_InterfaceTypeWithDeclaredMembers = [`Ts_InterfaceType | `Ts_InterfaceTypeWithDeclaredMembers | `Ts_ObjectType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_InternalSymbolName = [`Call[@js "__call"] | `Constructor[@js "__constructor"] | `New[@js "__new"] | `Index[@js "__index"] | `ExportStar[@js "__export"] | `Global[@js "__global"] | `Missing[@js "__missing"] | `Type[@js "__type"] | `Object[@js "__object"] | `JSXAttributes[@js "__jsxAttributes"] | `Class[@js "__class"] | `Function[@js "__function"] | `Computed[@js "__computed"] | `Resolving[@js "__resolving__"] | `ExportEquals[@js "export="] | `Default[@js "default"] | `This[@js "this"]] [@js.enum]
    and ts_InternalSymbolName_Call = [`Call[@js "__call"]] [@js.enum]
    and ts_InternalSymbolName_Constructor = [`Constructor[@js "__constructor"]] [@js.enum]
    and ts_InternalSymbolName_New = [`New[@js "__new"]] [@js.enum]
    and ts_InternalSymbolName_Index = [`Index[@js "__index"]] [@js.enum]
    and ts_InternalSymbolName_ExportStar = [`ExportStar[@js "__export"]] [@js.enum]
    and ts_InternalSymbolName_Global = [`Global[@js "__global"]] [@js.enum]
    and ts_InternalSymbolName_Missing = [`Missing[@js "__missing"]] [@js.enum]
    and ts_InternalSymbolName_Type = [`Type[@js "__type"]] [@js.enum]
    and ts_InternalSymbolName_Object = [`Object[@js "__object"]] [@js.enum]
    and ts_InternalSymbolName_JSXAttributes = [`JSXAttributes[@js "__jsxAttributes"]] [@js.enum]
    and ts_InternalSymbolName_Class = [`Class[@js "__class"]] [@js.enum]
    and ts_InternalSymbolName_Function = [`Function[@js "__function"]] [@js.enum]
    and ts_InternalSymbolName_Computed = [`Computed[@js "__computed"]] [@js.enum]
    and ts_InternalSymbolName_Resolving = [`Resolving[@js "__resolving__"]] [@js.enum]
    and ts_InternalSymbolName_ExportEquals = [`ExportEquals[@js "export="]] [@js.enum]
    and ts_InternalSymbolName_Default = [`Default[@js "default"]] [@js.enum]
    and ts_InternalSymbolName_This = [`This[@js "this"]] [@js.enum]
    and ts_IntersectionType = [`Ts_IntersectionType | `Ts_Type | `Ts_UnionOrIntersectionType] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_IntersectionTypeNode = [`Ts_IntersectionTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'T ts_InvalidatedProject = ([`U_n_0 of 'T ts_BuildInvalidedProject [@js 0] | `U_n_1 of 'T ts_UpdateBundleProject [@js 1] | `U_n_2 of ts_UpdateOutputFileStampsProject [@js 2]] [@js.union on_field "kind"])
    and ts_InvalidatedProjectBase = [`Ts_InvalidatedProjectBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_InvalidatedProjectKind = [`Build[@js 0] | `UpdateBundle[@js 1] | `UpdateOutputFileStamps[@js 2]] [@js.enum]
    and ts_InvalidatedProjectKind_Build = [`Build[@js 0]] [@js.enum]
    and ts_InvalidatedProjectKind_UpdateBundle = [`UpdateBundle[@js 1]] [@js.enum]
    and ts_InvalidatedProjectKind_UpdateOutputFileStamps = [`UpdateOutputFileStamps[@js 2]] [@js.enum]
    and ts_IterationStatement = [`Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'T ts_Iterator = [`Ts_Iterator of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_JSDoc = [`Ts_JSDoc | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocAllType = [`Ts_JSDocAllType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocAugmentsTag = [`Ts_JSDocAugmentsTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocAuthorTag = [`Ts_JSDocAuthorTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocCallbackTag = [`Ts_Declaration | `Ts_JSDocCallbackTag | `Ts_JSDocTag | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocClassTag = [`Ts_JSDocClassTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocContainer = [`Ts_JSDocContainer] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocDeprecatedTag = [`Ts_JSDocDeprecatedTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocEnumTag = [`Ts_Declaration | `Ts_JSDocEnumTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocFunctionType = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_JSDocFunctionType | `Ts_JSDocType | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocImplementsTag = [`Ts_JSDocImplementsTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocNameReference = [`Ts_JSDocNameReference | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocNamepathType = [`Ts_JSDocNamepathType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocNamespaceBody = ([`U_n_78 of ts_Identifier [@js 78] | `U_n_256 of ts_JSDocNamespaceDeclaration [@js 256]] [@js.union on_field "kind"])
    and ts_JSDocNamespaceDeclaration = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_JSDocNamespaceDeclaration | `Ts_ModuleDeclaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocNonNullableType = [`Ts_JSDocNonNullableType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocNullableType = [`Ts_JSDocNullableType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocOptionalType = [`Ts_JSDocOptionalType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocParameterTag = [`Ts_Declaration | `Ts_JSDocParameterTag | `Ts_JSDocPropertyLikeTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocPrivateTag = [`Ts_JSDocPrivateTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocPropertyLikeTag = [`Ts_Declaration | `Ts_JSDocPropertyLikeTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocPropertyTag = [`Ts_Declaration | `Ts_JSDocPropertyLikeTag | `Ts_JSDocPropertyTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocProtectedTag = [`Ts_JSDocProtectedTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocPublicTag = [`Ts_JSDocPublicTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocReadonlyTag = [`Ts_JSDocReadonlyTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocReturnTag = [`Ts_JSDocReturnTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocSeeTag = [`Ts_JSDocSeeTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocSignature = [`Ts_Declaration | `Ts_JSDocSignature | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocSyntaxKind = (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((ts_SyntaxKind_Unknown, ts_SyntaxKind_UnknownKeyword, ts_SyntaxKind_VarKeyword, ts_SyntaxKind_VoidKeyword, ts_SyntaxKind_WhileKeyword, ts_SyntaxKind_WhitespaceTrivia, ts_SyntaxKind_WithKeyword, ts_SyntaxKind_YieldKeyword) union8, ts_SyntaxKind_UniqueKeyword) or_, ts_SyntaxKind_UndefinedKeyword) or_, ts_SyntaxKind_TypeOfKeyword) or_, ts_SyntaxKind_TypeKeyword) or_, ts_SyntaxKind_TryKeyword) or_, ts_SyntaxKind_TrueKeyword) or_, ts_SyntaxKind_ThrowKeyword) or_, ts_SyntaxKind_ThisKeyword) or_, ts_SyntaxKind_SymbolKeyword) or_, ts_SyntaxKind_SwitchKeyword) or_, ts_SyntaxKind_SuperKeyword) or_, ts_SyntaxKind_StringKeyword) or_, ts_SyntaxKind_StaticKeyword) or_, ts_SyntaxKind_SetKeyword) or_, ts_SyntaxKind_ReturnKeyword) or_, ts_SyntaxKind_RequireKeyword) or_, ts_SyntaxKind_ReadonlyKeyword) or_, ts_SyntaxKind_PublicKeyword) or_, ts_SyntaxKind_ProtectedKeyword) or_, ts_SyntaxKind_PrivateKeyword) or_, ts_SyntaxKind_PackageKeyword) or_, ts_SyntaxKind_OpenBracketToken) or_, ts_SyntaxKind_OpenBraceToken) or_, ts_SyntaxKind_OfKeyword) or_, ts_SyntaxKind_ObjectKeyword) or_, ts_SyntaxKind_NumberKeyword) or_, ts_SyntaxKind_NullKeyword) or_, ts_SyntaxKind_NewLineTrivia) or_, ts_SyntaxKind_NewKeyword) or_, ts_SyntaxKind_NeverKeyword) or_, ts_SyntaxKind_NamespaceKeyword) or_, ts_SyntaxKind_ModuleKeyword) or_, ts_SyntaxKind_LetKeyword) or_, ts_SyntaxKind_LessThanToken) or_, ts_SyntaxKind_KeyOfKeyword) or_, ts_SyntaxKind_IsKeyword) or_, ts_SyntaxKind_IntrinsicKeyword) or_, ts_SyntaxKind_InterfaceKeyword) or_, ts_SyntaxKind_InstanceOfKeyword) or_, ts_SyntaxKind_InferKeyword) or_, ts_SyntaxKind_InKeyword) or_, ts_SyntaxKind_ImportKeyword) or_, ts_SyntaxKind_ImplementsKeyword) or_, ts_SyntaxKind_IfKeyword) or_, ts_SyntaxKind_Identifier) or_, ts_SyntaxKind_GreaterThanToken) or_, ts_SyntaxKind_GlobalKeyword) or_, ts_SyntaxKind_GetKeyword) or_, ts_SyntaxKind_FunctionKeyword) or_, ts_SyntaxKind_FromKeyword) or_, ts_SyntaxKind_ForKeyword) or_, ts_SyntaxKind_FinallyKeyword) or_, ts_SyntaxKind_FalseKeyword) or_, ts_SyntaxKind_ExtendsKeyword) or_, ts_SyntaxKind_ExportKeyword) or_, ts_SyntaxKind_EqualsToken) or_, ts_SyntaxKind_EnumKeyword) or_, ts_SyntaxKind_EndOfFileToken) or_, ts_SyntaxKind_ElseKeyword) or_, ts_SyntaxKind_DotToken) or_, ts_SyntaxKind_DoKeyword) or_, ts_SyntaxKind_DeleteKeyword) or_, ts_SyntaxKind_DefaultKeyword) or_, ts_SyntaxKind_DeclareKeyword) or_, ts_SyntaxKind_DebuggerKeyword) or_, ts_SyntaxKind_ContinueKeyword) or_, ts_SyntaxKind_ConstructorKeyword) or_, ts_SyntaxKind_ConstKeyword) or_, ts_SyntaxKind_CommaToken) or_, ts_SyntaxKind_CloseBracketToken) or_, ts_SyntaxKind_CloseBraceToken) or_, ts_SyntaxKind_ClassKeyword) or_, ts_SyntaxKind_CatchKeyword) or_, ts_SyntaxKind_CaseKeyword) or_, ts_SyntaxKind_BreakKeyword) or_, ts_SyntaxKind_BooleanKeyword) or_, ts_SyntaxKind_BigIntKeyword) or_, ts_SyntaxKind_BacktickToken) or_, ts_SyntaxKind_AwaitKeyword) or_, ts_SyntaxKind_AtToken) or_, ts_SyntaxKind_AsyncKeyword) or_, ts_SyntaxKind_AsteriskToken) or_, ts_SyntaxKind_AssertsKeyword) or_, ts_SyntaxKind_AsKeyword) or_, ts_SyntaxKind_AnyKeyword) or_, ts_SyntaxKind_AbstractKeyword) or_, ts_KeywordSyntaxKind) or_, ([`AbstractKeyword[@js 125] | `AnyKeyword[@js 128] | `AsKeyword[@js 126] | `AssertsKeyword[@js 127] | `AsteriskToken[@js 41] | `AsyncKeyword[@js 129] | `AtToken[@js 59] | `AwaitKeyword[@js 130] | `BacktickToken[@js 61] | `BigIntKeyword[@js 155] | `BooleanKeyword[@js 131] | `BreakKeyword[@js 80] | `CaseKeyword[@js 81] | `CatchKeyword[@js 82] | `ClassKeyword[@js 83] | `CloseBraceToken[@js 19] | `CloseBracketToken[@js 23] | `CommaToken[@js 27] | `ConstKeyword[@js 84] | `ConstructorKeyword[@js 132] | `ContinueKeyword[@js 85] | `DebuggerKeyword[@js 86] | `DeclareKeyword[@js 133] | `DefaultKeyword[@js 87] | `DeleteKeyword[@js 88] | `DoKeyword[@js 89] | `DotToken[@js 24] | `ElseKeyword[@js 90] | `EndOfFileToken[@js 1] | `EnumKeyword[@js 91] | `EqualsToken[@js 62] | `ExportKeyword[@js 92] | `ExtendsKeyword[@js 93] | `FalseKeyword[@js 94] | `FinallyKeyword[@js 95] | `ForKeyword[@js 96] | `FromKeyword[@js 153] | `FunctionKeyword[@js 97] | `GetKeyword[@js 134] | `GlobalKeyword[@js 154] | `GreaterThanToken[@js 31] | `Identifier[@js 78] | `IfKeyword[@js 98] | `ImplementsKeyword[@js 116] | `ImportKeyword[@js 99] | `InKeyword[@js 100] | `InferKeyword[@js 135] | `InstanceOfKeyword[@js 101] | `InterfaceKeyword[@js 117] | `IntrinsicKeyword[@js 136] | `IsKeyword[@js 137] | `KeyOfKeyword[@js 138] | `LessThanToken[@js 29] | `LetKeyword[@js 118] | `ModuleKeyword[@js 139] | `NamespaceKeyword[@js 140] | `NeverKeyword[@js 141] | `NewKeyword[@js 102] | `NewLineTrivia[@js 4] | `NullKeyword[@js 103] | `NumberKeyword[@js 144] | `ObjectKeyword[@js 145] | `OfKeyword[@js 156] | `OpenBraceToken[@js 18] | `OpenBracketToken[@js 22] | `PackageKeyword[@js 119] | `PrivateKeyword[@js 120] | `ProtectedKeyword[@js 121] | `PublicKeyword[@js 122] | `ReadonlyKeyword[@js 142] | `RequireKeyword[@js 143] | `ReturnKeyword[@js 104] | `SetKeyword[@js 146] | `StaticKeyword[@js 123] | `StringKeyword[@js 147] | `SuperKeyword[@js 105] | `SwitchKeyword[@js 106] | `SymbolKeyword[@js 148] | `ThisKeyword[@js 107] | `ThrowKeyword[@js 108] | `TrueKeyword[@js 109] | `TryKeyword[@js 110] | `TypeKeyword[@js 149] | `TypeOfKeyword[@js 111] | `UndefinedKeyword[@js 150] | `UniqueKeyword[@js 151] | `Unknown[@js 0] | `UnknownKeyword[@js 152] | `VarKeyword[@js 112] | `VoidKeyword[@js 113] | `WhileKeyword[@js 114] | `WhitespaceTrivia[@js 5] | `WithKeyword[@js 115] | `YieldKeyword[@js 124]] [@js.enum])) or_enum
    and ts_JSDocTag = [`Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocTagInfo = [`Ts_JSDocTagInfo] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocTemplateTag = [`Ts_JSDocTag | `Ts_JSDocTemplateTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocThisTag = [`Ts_JSDocTag | `Ts_JSDocThisTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocType = [`Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocTypeExpression = [`Ts_JSDocTypeExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocTypeLiteral = [`Ts_JSDocType | `Ts_JSDocTypeLiteral | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocTypeReferencingNode = ([`U_n_305 of ts_JSDocNullableType [@js 305] | `U_n_306 of ts_JSDocNonNullableType [@js 306] | `U_n_307 of ts_JSDocOptionalType [@js 307] | `U_n_309 of ts_JSDocVariadicType [@js 309]] [@js.union on_field "kind"])
    and ts_JSDocTypeTag = [`Ts_JSDocTag | `Ts_JSDocTypeTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocTypedefTag = [`Ts_Declaration | `Ts_JSDocTag | `Ts_JSDocTypedefTag | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocUnknownTag = [`Ts_JSDocTag | `Ts_JSDocUnknownTag | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocUnknownType = [`Ts_JSDocType | `Ts_JSDocUnknownType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JSDocVariadicType = [`Ts_JSDocType | `Ts_JSDocVariadicType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsFileExtensionInfo = ts_FileExtensionInfo
    and ts_JsonMinusNumericLiteral = [`Ts_Expression | `Ts_JsonMinusNumericLiteral | `Ts_Node | `Ts_PrefixUnaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsonObjectExpression = ([`U_n_8 of ts_NumericLiteral [@js 8] | `U_n_10 of ts_StringLiteral [@js 10] | `U_n_94 of ts_BooleanLiteral [@js 94] | `U_n_103 of ts_NullLiteral [@js 103] | `U_n_109 of ts_BooleanLiteral [@js 109] | `U_n_199 of ts_ArrayLiteralExpression [@js 199] | `U_n_200 of ts_ObjectLiteralExpression [@js 200] | `U_n_214 of ts_JsonMinusNumericLiteral [@js 214]] [@js.union on_field "kind"])
    and ts_JsonObjectExpressionStatement = [`Ts_ExpressionStatement | `Ts_JSDocContainer | `Ts_JsonObjectExpressionStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsonSourceFile = [`Ts_Declaration | `Ts_JsonSourceFile | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SourceFile] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxAttribute = [`Ts_Declaration | `Ts_JsxAttribute | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxAttributeLike = ([`U_n_280 of ts_JsxAttribute [@js 280] | `U_n_282 of ts_JsxSpreadAttribute [@js 282]] [@js.union on_field "kind"])
    and ts_JsxAttributes = [`Ts_Declaration | `Ts_Expression | `Ts_JsxAttributes | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ObjectLiteralExpressionBase of ts_JsxAttributeLike | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxChild = ([`U_n_11 of ts_JsxText [@js 11] | `U_n_273 of ts_JsxElement [@js 273] | `U_n_274 of ts_JsxSelfClosingElement [@js 274] | `U_n_277 of ts_JsxFragment [@js 277] | `U_n_283 of ts_JsxExpression [@js 283]] [@js.union on_field "kind"])
    and ts_JsxClosingElement = [`Ts_JsxClosingElement | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxClosingFragment = [`Ts_Expression | `Ts_JsxClosingFragment | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxClosingTagInfo = [`Ts_JsxClosingTagInfo] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxElement = [`Ts_Expression | `Ts_JsxElement | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxEmit = [`None[@js 0] | `Preserve[@js 1] | `React[@js 2] | `ReactNative[@js 3] | `ReactJSX[@js 4] | `ReactJSXDev[@js 5]] [@js.enum]
    and ts_JsxEmit_None = [`None[@js 0]] [@js.enum]
    and ts_JsxEmit_Preserve = [`Preserve[@js 1]] [@js.enum]
    and ts_JsxEmit_React = [`React[@js 2]] [@js.enum]
    and ts_JsxEmit_ReactNative = [`ReactNative[@js 3]] [@js.enum]
    and ts_JsxEmit_ReactJSX = [`ReactJSX[@js 4]] [@js.enum]
    and ts_JsxEmit_ReactJSXDev = [`ReactJSXDev[@js 5]] [@js.enum]
    and ts_JsxExpression = [`Ts_Expression | `Ts_JsxExpression | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxFlags = [`None[@js 0] | `IntrinsicNamedElement[@js 1] | `IntrinsicIndexedElement[@js 2] | `IntrinsicElement[@js 3]] [@js.enum]
    and ts_JsxFlags_None = [`None[@js 0]] [@js.enum]
    and ts_JsxFlags_IntrinsicNamedElement = [`IntrinsicNamedElement[@js 1]] [@js.enum]
    and ts_JsxFlags_IntrinsicIndexedElement = [`IntrinsicIndexedElement[@js 2]] [@js.enum]
    and ts_JsxFlags_IntrinsicElement = [`IntrinsicElement[@js 3]] [@js.enum]
    and ts_JsxFragment = [`Ts_Expression | `Ts_JsxFragment | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxOpeningElement = [`Ts_Expression | `Ts_JsxOpeningElement | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxOpeningFragment = [`Ts_Expression | `Ts_JsxOpeningFragment | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxOpeningLikeElement = ([`U_n_274 of ts_JsxSelfClosingElement [@js 274] | `U_n_275 of ts_JsxOpeningElement [@js 275]] [@js.union on_field "kind"])
    and ts_JsxSelfClosingElement = [`Ts_Expression | `Ts_JsxSelfClosingElement | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxSpreadAttribute = [`Ts_Declaration | `Ts_JsxSpreadAttribute | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxTagNameExpression = ([`U_n_78 of ts_Identifier [@js 78] | `U_n_107 of ts_ThisExpression [@js 107] | `U_n_201 of ts_JsxTagNamePropertyAccess [@js 201]] [@js.union on_field "kind"])
    and ts_JsxTagNamePropertyAccess = [`Ts_Declaration | `Ts_Expression | `Ts_JsxTagNamePropertyAccess | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxText = [`Ts_JsxText | `Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_JsxTokenSyntaxKind = ((ts_SyntaxKind_ConflictMarkerTrivia, ts_SyntaxKind_EndOfFileToken, ts_SyntaxKind_JsxText, ts_SyntaxKind_JsxTextAllWhiteSpaces, ts_SyntaxKind_LessThanSlashToken, ts_SyntaxKind_LessThanToken, ts_SyntaxKind_OpenBraceToken) union7, ([`ConflictMarkerTrivia[@js 7] | `EndOfFileToken[@js 1] | `JsxText[@js 11] | `JsxTextAllWhiteSpaces[@js 12] | `LessThanSlashToken[@js 30] | `LessThanToken[@js 29] | `OpenBraceToken[@js 18]] [@js.enum])) or_enum
    and ts_KeywordSyntaxKind = (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((ts_SyntaxKind_UndefinedKeyword, ts_SyntaxKind_UniqueKeyword, ts_SyntaxKind_UnknownKeyword, ts_SyntaxKind_VarKeyword, ts_SyntaxKind_VoidKeyword, ts_SyntaxKind_WhileKeyword, ts_SyntaxKind_WithKeyword, ts_SyntaxKind_YieldKeyword) union8, ts_SyntaxKind_TypeOfKeyword) or_, ts_SyntaxKind_TypeKeyword) or_, ts_SyntaxKind_TryKeyword) or_, ts_SyntaxKind_TrueKeyword) or_, ts_SyntaxKind_ThrowKeyword) or_, ts_SyntaxKind_ThisKeyword) or_, ts_SyntaxKind_SymbolKeyword) or_, ts_SyntaxKind_SwitchKeyword) or_, ts_SyntaxKind_SuperKeyword) or_, ts_SyntaxKind_StringKeyword) or_, ts_SyntaxKind_StaticKeyword) or_, ts_SyntaxKind_SetKeyword) or_, ts_SyntaxKind_ReturnKeyword) or_, ts_SyntaxKind_RequireKeyword) or_, ts_SyntaxKind_ReadonlyKeyword) or_, ts_SyntaxKind_PublicKeyword) or_, ts_SyntaxKind_ProtectedKeyword) or_, ts_SyntaxKind_PrivateKeyword) or_, ts_SyntaxKind_PackageKeyword) or_, ts_SyntaxKind_OfKeyword) or_, ts_SyntaxKind_ObjectKeyword) or_, ts_SyntaxKind_NumberKeyword) or_, ts_SyntaxKind_NullKeyword) or_, ts_SyntaxKind_NewKeyword) or_, ts_SyntaxKind_NeverKeyword) or_, ts_SyntaxKind_NamespaceKeyword) or_, ts_SyntaxKind_ModuleKeyword) or_, ts_SyntaxKind_LetKeyword) or_, ts_SyntaxKind_KeyOfKeyword) or_, ts_SyntaxKind_IsKeyword) or_, ts_SyntaxKind_IntrinsicKeyword) or_, ts_SyntaxKind_InterfaceKeyword) or_, ts_SyntaxKind_InstanceOfKeyword) or_, ts_SyntaxKind_InferKeyword) or_, ts_SyntaxKind_InKeyword) or_, ts_SyntaxKind_ImportKeyword) or_, ts_SyntaxKind_ImplementsKeyword) or_, ts_SyntaxKind_IfKeyword) or_, ts_SyntaxKind_GlobalKeyword) or_, ts_SyntaxKind_GetKeyword) or_, ts_SyntaxKind_FunctionKeyword) or_, ts_SyntaxKind_FromKeyword) or_, ts_SyntaxKind_ForKeyword) or_, ts_SyntaxKind_FinallyKeyword) or_, ts_SyntaxKind_FalseKeyword) or_, ts_SyntaxKind_ExtendsKeyword) or_, ts_SyntaxKind_ExportKeyword) or_, ts_SyntaxKind_EnumKeyword) or_, ts_SyntaxKind_ElseKeyword) or_, ts_SyntaxKind_DoKeyword) or_, ts_SyntaxKind_DeleteKeyword) or_, ts_SyntaxKind_DefaultKeyword) or_, ts_SyntaxKind_DeclareKeyword) or_, ts_SyntaxKind_DebuggerKeyword) or_, ts_SyntaxKind_ContinueKeyword) or_, ts_SyntaxKind_ConstructorKeyword) or_, ts_SyntaxKind_ConstKeyword) or_, ts_SyntaxKind_ClassKeyword) or_, ts_SyntaxKind_CatchKeyword) or_, ts_SyntaxKind_CaseKeyword) or_, ts_SyntaxKind_BreakKeyword) or_, ts_SyntaxKind_BooleanKeyword) or_, ts_SyntaxKind_BigIntKeyword) or_, ts_SyntaxKind_AwaitKeyword) or_, ts_SyntaxKind_AsyncKeyword) or_, ts_SyntaxKind_AssertsKeyword) or_, ts_SyntaxKind_AsKeyword) or_, ts_SyntaxKind_AnyKeyword) or_, ts_SyntaxKind_AbstractKeyword) or_, ([`AbstractKeyword[@js 125] | `AnyKeyword[@js 128] | `AsKeyword[@js 126] | `AssertsKeyword[@js 127] | `AsyncKeyword[@js 129] | `AwaitKeyword[@js 130] | `BigIntKeyword[@js 155] | `BooleanKeyword[@js 131] | `BreakKeyword[@js 80] | `CaseKeyword[@js 81] | `CatchKeyword[@js 82] | `ClassKeyword[@js 83] | `ConstKeyword[@js 84] | `ConstructorKeyword[@js 132] | `ContinueKeyword[@js 85] | `DebuggerKeyword[@js 86] | `DeclareKeyword[@js 133] | `DefaultKeyword[@js 87] | `DeleteKeyword[@js 88] | `DoKeyword[@js 89] | `ElseKeyword[@js 90] | `EnumKeyword[@js 91] | `ExportKeyword[@js 92] | `ExtendsKeyword[@js 93] | `FalseKeyword[@js 94] | `FinallyKeyword[@js 95] | `ForKeyword[@js 96] | `FromKeyword[@js 153] | `FunctionKeyword[@js 97] | `GetKeyword[@js 134] | `GlobalKeyword[@js 154] | `IfKeyword[@js 98] | `ImplementsKeyword[@js 116] | `ImportKeyword[@js 99] | `InKeyword[@js 100] | `InferKeyword[@js 135] | `InstanceOfKeyword[@js 101] | `InterfaceKeyword[@js 117] | `IntrinsicKeyword[@js 136] | `IsKeyword[@js 137] | `KeyOfKeyword[@js 138] | `LetKeyword[@js 118] | `ModuleKeyword[@js 139] | `NamespaceKeyword[@js 140] | `NeverKeyword[@js 141] | `NewKeyword[@js 102] | `NullKeyword[@js 103] | `NumberKeyword[@js 144] | `ObjectKeyword[@js 145] | `OfKeyword[@js 156] | `PackageKeyword[@js 119] | `PrivateKeyword[@js 120] | `ProtectedKeyword[@js 121] | `PublicKeyword[@js 122] | `ReadonlyKeyword[@js 142] | `RequireKeyword[@js 143] | `ReturnKeyword[@js 104] | `SetKeyword[@js 146] | `StaticKeyword[@js 123] | `StringKeyword[@js 147] | `SuperKeyword[@js 105] | `SwitchKeyword[@js 106] | `SymbolKeyword[@js 148] | `ThisKeyword[@js 107] | `ThrowKeyword[@js 108] | `TrueKeyword[@js 109] | `TryKeyword[@js 110] | `TypeKeyword[@js 149] | `TypeOfKeyword[@js 111] | `UndefinedKeyword[@js 150] | `UniqueKeyword[@js 151] | `UnknownKeyword[@js 152] | `VarKeyword[@js 112] | `VoidKeyword[@js 113] | `WhileKeyword[@js 114] | `WithKeyword[@js 115] | `YieldKeyword[@js 124]] [@js.enum])) or_enum
    and 'TKind ts_KeywordToken = [`Ts_KeywordToken of 'TKind | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind] intf
    [@@js.custom { of_js=(fun _TKind -> Obj.magic); to_js=(fun _TKind -> Obj.magic) }]
    and 'TKind ts_KeywordTypeNode = [`Ts_KeywordToken of 'TKind | `Ts_KeywordTypeNode of 'TKind | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind | `Ts_TypeNode] intf
    [@@js.custom { of_js=(fun _TKind -> Obj.magic); to_js=(fun _TKind -> Obj.magic) }]
    and ts_KeywordTypeSyntaxKind = ((((((ts_SyntaxKind_NeverKeyword, ts_SyntaxKind_NumberKeyword, ts_SyntaxKind_ObjectKeyword, ts_SyntaxKind_StringKeyword, ts_SyntaxKind_SymbolKeyword, ts_SyntaxKind_UndefinedKeyword, ts_SyntaxKind_UnknownKeyword, ts_SyntaxKind_VoidKeyword) union8, ts_SyntaxKind_IntrinsicKeyword) or_, ts_SyntaxKind_BooleanKeyword) or_, ts_SyntaxKind_BigIntKeyword) or_, ts_SyntaxKind_AnyKeyword) or_, ([`AnyKeyword[@js 128] | `BigIntKeyword[@js 155] | `BooleanKeyword[@js 131] | `IntrinsicKeyword[@js 136] | `NeverKeyword[@js 141] | `NumberKeyword[@js 144] | `ObjectKeyword[@js 145] | `StringKeyword[@js 147] | `SymbolKeyword[@js 148] | `UndefinedKeyword[@js 150] | `UnknownKeyword[@js 152] | `VoidKeyword[@js 113]] [@js.enum])) or_enum
    and ts_LabeledStatement = [`Ts_JSDocContainer | `Ts_LabeledStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_LanguageService = [`Ts_LanguageService] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_LanguageServiceHost = [`Ts_GetEffectiveTypeRootsHost | `Ts_LanguageServiceHost] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_LanguageServiceMode = [`Semantic[@js 0] | `PartialSemantic[@js 1] | `Syntactic[@js 2]] [@js.enum]
    and ts_LanguageServiceMode_Semantic = [`Semantic[@js 0]] [@js.enum]
    and ts_LanguageServiceMode_PartialSemantic = [`PartialSemantic[@js 1]] [@js.enum]
    and ts_LanguageServiceMode_Syntactic = [`Syntactic[@js 2]] [@js.enum]
    and ts_LanguageVariant = [`Standard[@js 0] | `JSX[@js 1]] [@js.enum]
    and ts_LanguageVariant_Standard = [`Standard[@js 0]] [@js.enum]
    and ts_LanguageVariant_JSX = [`JSX[@js 1]] [@js.enum]
    and ts_LeftHandSideExpression = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_LineAndCharacter = [`Ts_LineAndCharacter] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ListFormat = [`None[@js 0] | `SingleLine[@js 0] | `MultiLine[@js 1] | `PreserveLines[@js 2] | `LinesMask[@js 3] | `NotDelimited[@js 0] | `BarDelimited[@js 4] | `AmpersandDelimited[@js 8] | `CommaDelimited[@js 16] | `AsteriskDelimited[@js 32] | `DelimitersMask[@js 60] | `AllowTrailingComma[@js 64] | `Indented[@js 128] | `SpaceBetweenBraces[@js 256] | `SpaceBetweenSiblings[@js 512] | `Braces[@js 1024] | `Parenthesis[@js 2048] | `AngleBrackets[@js 4096] | `SquareBrackets[@js 8192] | `BracketsMask[@js 15360] | `OptionalIfUndefined[@js 16384] | `OptionalIfEmpty[@js 32768] | `Optional[@js 49152] | `PreferNewLine[@js 65536] | `NoTrailingNewLine[@js 131072] | `NoInterveningComments[@js 262144] | `NoSpaceIfEmpty[@js 524288] | `SingleElement[@js 1048576] | `SpaceAfterList[@js 2097152] | `Modifiers[@js 262656] | `HeritageClauses[@js 512] | `SingleLineTypeLiteralMembers[@js 768] | `MultiLineTypeLiteralMembers[@js 32897] | `SingleLineTupleTypeElements[@js 528] | `MultiLineTupleTypeElements[@js 657] | `UnionTypeConstituents[@js 516] | `IntersectionTypeConstituents[@js 520] | `ObjectBindingPatternElements[@js 525136] | `ArrayBindingPatternElements[@js 524880] | `ObjectLiteralExpressionProperties[@js 526226] | `ArrayLiteralExpressionElements[@js 8914] | `CommaListElements[@js 528] | `CallExpressionArguments[@js 2576] | `NewExpressionArguments[@js 18960] | `TemplateExpressionSpans[@js 262144] | `SingleLineBlockStatements[@js 768] | `MultiLineBlockStatements[@js 129] | `VariableDeclarationList[@js 528] | `SingleLineFunctionBodyStatements[@js 768] | `MultiLineFunctionBodyStatements[@js 1] | `ClassHeritageClauses[@js 0] | `ClassMembers[@js 129] | `InterfaceMembers[@js 129] | `EnumMembers[@js 145] | `CaseBlockClauses[@js 129] | `NamedImportsOrExportsElements[@js 525136] | `JsxElementOrFragmentChildren[@js 262144] | `JsxElementAttributes[@js 262656] | `CaseOrDefaultClauseStatements[@js 163969] | `HeritageClauseTypes[@js 528] | `SourceFileStatements[@js 131073] | `Decorators[@js 2146305] | `TypeArguments[@js 53776] | `TypeParameters[@js 53776] | `Parameters[@js 2576] | `IndexSignatureParameters[@js 8848] | `JSDocComment[@js 33]] [@js.enum]
    and ts_ListFormat_None = [`None[@js 0]] [@js.enum]
    and ts_ListFormat_SingleLine = [`SingleLine[@js 0]] [@js.enum]
    and ts_ListFormat_MultiLine = [`MultiLine[@js 1]] [@js.enum]
    and ts_ListFormat_PreserveLines = [`PreserveLines[@js 2]] [@js.enum]
    and ts_ListFormat_LinesMask = [`LinesMask[@js 3]] [@js.enum]
    and ts_ListFormat_NotDelimited = [`NotDelimited[@js 0]] [@js.enum]
    and ts_ListFormat_BarDelimited = [`BarDelimited[@js 4]] [@js.enum]
    and ts_ListFormat_AmpersandDelimited = [`AmpersandDelimited[@js 8]] [@js.enum]
    and ts_ListFormat_CommaDelimited = [`CommaDelimited[@js 16]] [@js.enum]
    and ts_ListFormat_AsteriskDelimited = [`AsteriskDelimited[@js 32]] [@js.enum]
    and ts_ListFormat_DelimitersMask = [`DelimitersMask[@js 60]] [@js.enum]
    and ts_ListFormat_AllowTrailingComma = [`AllowTrailingComma[@js 64]] [@js.enum]
    and ts_ListFormat_Indented = [`Indented[@js 128]] [@js.enum]
    and ts_ListFormat_SpaceBetweenBraces = [`SpaceBetweenBraces[@js 256]] [@js.enum]
    and ts_ListFormat_SpaceBetweenSiblings = [`SpaceBetweenSiblings[@js 512]] [@js.enum]
    and ts_ListFormat_Braces = [`Braces[@js 1024]] [@js.enum]
    and ts_ListFormat_Parenthesis = [`Parenthesis[@js 2048]] [@js.enum]
    and ts_ListFormat_AngleBrackets = [`AngleBrackets[@js 4096]] [@js.enum]
    and ts_ListFormat_SquareBrackets = [`SquareBrackets[@js 8192]] [@js.enum]
    and ts_ListFormat_BracketsMask = [`BracketsMask[@js 15360]] [@js.enum]
    and ts_ListFormat_OptionalIfUndefined = [`OptionalIfUndefined[@js 16384]] [@js.enum]
    and ts_ListFormat_OptionalIfEmpty = [`OptionalIfEmpty[@js 32768]] [@js.enum]
    and ts_ListFormat_Optional = [`Optional[@js 49152]] [@js.enum]
    and ts_ListFormat_PreferNewLine = [`PreferNewLine[@js 65536]] [@js.enum]
    and ts_ListFormat_NoTrailingNewLine = [`NoTrailingNewLine[@js 131072]] [@js.enum]
    and ts_ListFormat_NoInterveningComments = [`NoInterveningComments[@js 262144]] [@js.enum]
    and ts_ListFormat_NoSpaceIfEmpty = [`NoSpaceIfEmpty[@js 524288]] [@js.enum]
    and ts_ListFormat_SingleElement = [`SingleElement[@js 1048576]] [@js.enum]
    and ts_ListFormat_SpaceAfterList = [`SpaceAfterList[@js 2097152]] [@js.enum]
    and ts_ListFormat_Modifiers = [`Modifiers[@js 262656]] [@js.enum]
    and ts_ListFormat_HeritageClauses = [`HeritageClauses[@js 512]] [@js.enum]
    and ts_ListFormat_SingleLineTypeLiteralMembers = [`SingleLineTypeLiteralMembers[@js 768]] [@js.enum]
    and ts_ListFormat_MultiLineTypeLiteralMembers = [`MultiLineTypeLiteralMembers[@js 32897]] [@js.enum]
    and ts_ListFormat_SingleLineTupleTypeElements = [`SingleLineTupleTypeElements[@js 528]] [@js.enum]
    and ts_ListFormat_MultiLineTupleTypeElements = [`MultiLineTupleTypeElements[@js 657]] [@js.enum]
    and ts_ListFormat_UnionTypeConstituents = [`UnionTypeConstituents[@js 516]] [@js.enum]
    and ts_ListFormat_IntersectionTypeConstituents = [`IntersectionTypeConstituents[@js 520]] [@js.enum]
    and ts_ListFormat_ObjectBindingPatternElements = [`ObjectBindingPatternElements[@js 525136]] [@js.enum]
    and ts_ListFormat_ArrayBindingPatternElements = [`ArrayBindingPatternElements[@js 524880]] [@js.enum]
    and ts_ListFormat_ObjectLiteralExpressionProperties = [`ObjectLiteralExpressionProperties[@js 526226]] [@js.enum]
    and ts_ListFormat_ArrayLiteralExpressionElements = [`ArrayLiteralExpressionElements[@js 8914]] [@js.enum]
    and ts_ListFormat_CommaListElements = [`CommaListElements[@js 528]] [@js.enum]
    and ts_ListFormat_CallExpressionArguments = [`CallExpressionArguments[@js 2576]] [@js.enum]
    and ts_ListFormat_NewExpressionArguments = [`NewExpressionArguments[@js 18960]] [@js.enum]
    and ts_ListFormat_TemplateExpressionSpans = [`TemplateExpressionSpans[@js 262144]] [@js.enum]
    and ts_ListFormat_SingleLineBlockStatements = [`SingleLineBlockStatements[@js 768]] [@js.enum]
    and ts_ListFormat_MultiLineBlockStatements = [`MultiLineBlockStatements[@js 129]] [@js.enum]
    and ts_ListFormat_VariableDeclarationList = [`VariableDeclarationList[@js 528]] [@js.enum]
    and ts_ListFormat_SingleLineFunctionBodyStatements = [`SingleLineFunctionBodyStatements[@js 768]] [@js.enum]
    and ts_ListFormat_MultiLineFunctionBodyStatements = [`MultiLineFunctionBodyStatements[@js 1]] [@js.enum]
    and ts_ListFormat_ClassHeritageClauses = [`ClassHeritageClauses[@js 0]] [@js.enum]
    and ts_ListFormat_ClassMembers = [`ClassMembers[@js 129]] [@js.enum]
    and ts_ListFormat_InterfaceMembers = [`InterfaceMembers[@js 129]] [@js.enum]
    and ts_ListFormat_EnumMembers = [`EnumMembers[@js 145]] [@js.enum]
    and ts_ListFormat_CaseBlockClauses = [`CaseBlockClauses[@js 129]] [@js.enum]
    and ts_ListFormat_NamedImportsOrExportsElements = [`NamedImportsOrExportsElements[@js 525136]] [@js.enum]
    and ts_ListFormat_JsxElementOrFragmentChildren = [`JsxElementOrFragmentChildren[@js 262144]] [@js.enum]
    and ts_ListFormat_JsxElementAttributes = [`JsxElementAttributes[@js 262656]] [@js.enum]
    and ts_ListFormat_CaseOrDefaultClauseStatements = [`CaseOrDefaultClauseStatements[@js 163969]] [@js.enum]
    and ts_ListFormat_HeritageClauseTypes = [`HeritageClauseTypes[@js 528]] [@js.enum]
    and ts_ListFormat_SourceFileStatements = [`SourceFileStatements[@js 131073]] [@js.enum]
    and ts_ListFormat_Decorators = [`Decorators[@js 2146305]] [@js.enum]
    and ts_ListFormat_TypeArguments = [`TypeArguments[@js 53776]] [@js.enum]
    and ts_ListFormat_TypeParameters = [`TypeParameters[@js 53776]] [@js.enum]
    and ts_ListFormat_Parameters = [`Parameters[@js 2576]] [@js.enum]
    and ts_ListFormat_IndexSignatureParameters = [`IndexSignatureParameters[@js 8848]] [@js.enum]
    and ts_ListFormat_JSDocComment = [`JSDocComment[@js 33]] [@js.enum]
    and ts_LiteralExpression = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_LiteralLikeNode = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_LiteralSyntaxKind = ((ts_SyntaxKind_BigIntLiteral, ts_SyntaxKind_JsxText, ts_SyntaxKind_JsxTextAllWhiteSpaces, ts_SyntaxKind_NoSubstitutionTemplateLiteral, ts_SyntaxKind_NumericLiteral, ts_SyntaxKind_RegularExpressionLiteral, ts_SyntaxKind_StringLiteral) union7, ([`BigIntLiteral[@js 9] | `JsxText[@js 11] | `JsxTextAllWhiteSpaces[@js 12] | `NoSubstitutionTemplateLiteral[@js 14] | `NumericLiteral[@js 8] | `RegularExpressionLiteral[@js 13] | `StringLiteral[@js 10]] [@js.enum])) or_enum
    and ts_LiteralToken = ([`U_n_8 of ts_NumericLiteral [@js 8] | `U_n_9 of ts_BigIntLiteral [@js 9] | `U_n_10 of ts_StringLiteral [@js 10] | `U_n_11 of ts_JsxText [@js 11] | `U_n_13 of ts_RegularExpressionLiteral [@js 13] | `U_n_14 of ts_NoSubstitutionTemplateLiteral [@js 14]] [@js.union on_field "kind"])
    and ts_LiteralType = [`Ts_LiteralType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_LiteralTypeNode = [`Ts_LiteralTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_LogicalOperator = ((ts_SyntaxKind_AmpersandAmpersandToken, ts_SyntaxKind_BarBarToken) union2, ([`AmpersandAmpersandToken[@js 55] | `BarBarToken[@js 56]] [@js.enum])) or_enum
    and ts_LogicalOperatorOrHigher = ((((((((((((((((((((((((((((((((ts_SyntaxKind_InstanceOfKeyword, ts_SyntaxKind_LessThanEqualsToken, ts_SyntaxKind_LessThanLessThanToken, ts_SyntaxKind_LessThanToken, ts_SyntaxKind_MinusToken, ts_SyntaxKind_PercentToken, ts_SyntaxKind_PlusToken, ts_SyntaxKind_SlashToken) union8, ts_SyntaxKind_InKeyword) or_, ts_SyntaxKind_GreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsEqualsToken) or_, ts_SyntaxKind_EqualsEqualsToken) or_, ts_SyntaxKind_EqualsEqualsEqualsToken) or_, ts_SyntaxKind_CaretToken) or_, ts_SyntaxKind_BarToken) or_, ts_SyntaxKind_BarBarToken) or_, ts_SyntaxKind_AsteriskToken) or_, ts_SyntaxKind_AsteriskAsteriskToken) or_, ts_SyntaxKind_AmpersandToken) or_, ts_SyntaxKind_AmpersandAmpersandToken) or_, ts_ShiftOperatorOrHigher) or_, ts_ShiftOperator) or_, ts_RelationalOperatorOrHigher) or_, ts_RelationalOperator) or_, ts_MultiplicativeOperatorOrHigher) or_, ts_MultiplicativeOperator) or_, ts_LogicalOperator) or_, ts_ExponentiationOperator) or_, ts_EqualityOperatorOrHigher) or_, ts_EqualityOperator) or_, ts_BitwiseOperatorOrHigher) or_, ts_BitwiseOperator) or_, ts_AdditiveOperatorOrHigher) or_, ts_AdditiveOperator) or_, ([`AmpersandAmpersandToken[@js 55] | `AmpersandToken[@js 50] | `AsteriskAsteriskToken[@js 42] | `AsteriskToken[@js 41] | `BarBarToken[@js 56] | `BarToken[@js 51] | `CaretToken[@js 52] | `EqualsEqualsEqualsToken[@js 36] | `EqualsEqualsToken[@js 34] | `ExclamationEqualsEqualsToken[@js 37] | `ExclamationEqualsToken[@js 35] | `GreaterThanEqualsToken[@js 33] | `GreaterThanGreaterThanGreaterThanToken[@js 49] | `GreaterThanGreaterThanToken[@js 48] | `GreaterThanToken[@js 31] | `InKeyword[@js 100] | `InstanceOfKeyword[@js 101] | `LessThanEqualsToken[@js 32] | `LessThanLessThanToken[@js 47] | `LessThanToken[@js 29] | `MinusToken[@js 40] | `PercentToken[@js 44] | `PlusToken[@js 39] | `SlashToken[@js 43]] [@js.enum])) or_enum
    and ts_LogicalOrCoalescingAssignmentOperator = ((ts_SyntaxKind_AmpersandAmpersandEqualsToken, ts_SyntaxKind_BarBarEqualsToken, ts_SyntaxKind_QuestionQuestionEqualsToken) union3, ([`AmpersandAmpersandEqualsToken[@js 75] | `BarBarEqualsToken[@js 74] | `QuestionQuestionEqualsToken[@js 76]] [@js.enum])) or_enum
    and 'T ts_Map = [`Ts_Collection of string | `Ts_ESMap of (string * 'T) | `Ts_Map of 'T | `Ts_ReadonlyCollection of string | `Ts_ReadonlyESMap of (string * 'T)] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and 'T ts_MapLike = [`Ts_MapLike of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_MappedTypeNode = [`Ts_Declaration | `Ts_MappedTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_MemberExpression = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_MetaProperty = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_MetaProperty | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_MethodDeclaration = [`Ts_ClassElement | `Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_MethodDeclaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_MethodSignature = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_MethodSignature | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeElement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_MinusToken = ts_SyntaxKind_MinusToken ts_PunctuationToken
    and ts_MissingDeclaration = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_MissingDeclaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Modifier = ([`U_n_84 of ts_ConstKeyword [@js 84] | `U_n_87 of ts_DefaultKeyword [@js 87] | `U_n_92 of ts_ExportKeyword [@js 92] | `U_n_120 of ts_PrivateKeyword [@js 120] | `U_n_121 of ts_ProtectedKeyword [@js 121] | `U_n_122 of ts_PublicKeyword [@js 122] | `U_n_123 of ts_StaticKeyword [@js 123] | `U_n_125 of ts_AbstractKeyword [@js 125] | `U_n_129 of ts_AsyncKeyword [@js 129] | `U_n_133 of ts_DeclareKeyword [@js 133] | `U_n_142 of ts_ReadonlyKeyword [@js 142]] [@js.union on_field "kind"])
    and ts_ModifierFlags = [`None[@js 0] | `Export[@js 1] | `Ambient[@js 2] | `Public[@js 4] | `Private[@js 8] | `Protected[@js 16] | `Static[@js 32] | `Readonly[@js 64] | `Abstract[@js 128] | `Async[@js 256] | `Default[@js 512] | `Const[@js 2048] | `HasComputedJSDocModifiers[@js 4096] | `Deprecated[@js 8192] | `HasComputedFlags[@js 536870912] | `AccessibilityModifier[@js 28] | `ParameterPropertyModifier[@js 92] | `NonPublicAccessibilityModifier[@js 24] | `TypeScriptModifier[@js 2270] | `ExportDefault[@js 513] | `All[@js 11263]] [@js.enum]
    and ts_ModifierFlags_None = [`None[@js 0]] [@js.enum]
    and ts_ModifierFlags_Export = [`Export[@js 1]] [@js.enum]
    and ts_ModifierFlags_Ambient = [`Ambient[@js 2]] [@js.enum]
    and ts_ModifierFlags_Public = [`Public[@js 4]] [@js.enum]
    and ts_ModifierFlags_Private = [`Private[@js 8]] [@js.enum]
    and ts_ModifierFlags_Protected = [`Protected[@js 16]] [@js.enum]
    and ts_ModifierFlags_Static = [`Static[@js 32]] [@js.enum]
    and ts_ModifierFlags_Readonly = [`Readonly[@js 64]] [@js.enum]
    and ts_ModifierFlags_Abstract = [`Abstract[@js 128]] [@js.enum]
    and ts_ModifierFlags_Async = [`Async[@js 256]] [@js.enum]
    and ts_ModifierFlags_Default = [`Default[@js 512]] [@js.enum]
    and ts_ModifierFlags_Const = [`Const[@js 2048]] [@js.enum]
    and ts_ModifierFlags_HasComputedJSDocModifiers = [`HasComputedJSDocModifiers[@js 4096]] [@js.enum]
    and ts_ModifierFlags_Deprecated = [`Deprecated[@js 8192]] [@js.enum]
    and ts_ModifierFlags_HasComputedFlags = [`HasComputedFlags[@js 536870912]] [@js.enum]
    and ts_ModifierFlags_AccessibilityModifier = [`AccessibilityModifier[@js 28]] [@js.enum]
    and ts_ModifierFlags_ParameterPropertyModifier = [`ParameterPropertyModifier[@js 92]] [@js.enum]
    and ts_ModifierFlags_NonPublicAccessibilityModifier = [`NonPublicAccessibilityModifier[@js 24]] [@js.enum]
    and ts_ModifierFlags_TypeScriptModifier = [`TypeScriptModifier[@js 2270]] [@js.enum]
    and ts_ModifierFlags_ExportDefault = [`ExportDefault[@js 513]] [@js.enum]
    and ts_ModifierFlags_All = [`All[@js 11263]] [@js.enum]
    and ts_ModifierSyntaxKind = (((((ts_SyntaxKind_DeclareKeyword, ts_SyntaxKind_DefaultKeyword, ts_SyntaxKind_ExportKeyword, ts_SyntaxKind_PrivateKeyword, ts_SyntaxKind_ProtectedKeyword, ts_SyntaxKind_PublicKeyword, ts_SyntaxKind_ReadonlyKeyword, ts_SyntaxKind_StaticKeyword) union8, ts_SyntaxKind_ConstKeyword) or_, ts_SyntaxKind_AsyncKeyword) or_, ts_SyntaxKind_AbstractKeyword) or_, ([`AbstractKeyword[@js 125] | `AsyncKeyword[@js 129] | `ConstKeyword[@js 84] | `DeclareKeyword[@js 133] | `DefaultKeyword[@js 87] | `ExportKeyword[@js 92] | `PrivateKeyword[@js 120] | `ProtectedKeyword[@js 121] | `PublicKeyword[@js 122] | `ReadonlyKeyword[@js 142] | `StaticKeyword[@js 123]] [@js.enum])) or_enum
    and 'TKind ts_ModifierToken = [`Ts_KeywordToken of 'TKind | `Ts_ModifierToken of 'TKind | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind] intf
    [@@js.custom { of_js=(fun _TKind -> Obj.magic); to_js=(fun _TKind -> Obj.magic) }]
    and ts_ModifiersArray = ts_Modifier ts_NodeArray
    and ts_ModuleBlock = [`Ts_ModuleBlock | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ModuleBody = ([`U_n_78 of ts_JSDocNamespaceBody [@js 78] | `U_n_256 of (ts_NamespaceBody, ts_JSDocNamespaceBody) union2 [@js 256] | `U_n_257 of ts_NamespaceBody [@js 257]] [@js.union on_field "kind"])
    and ts_ModuleDeclaration = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_ModuleDeclaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ModuleKind = [`None[@js 0] | `CommonJS[@js 1] | `AMD[@js 2] | `UMD[@js 3] | `System[@js 4] | `ES2015[@js 5] | `ES2020[@js 6] | `ESNext[@js 99]] [@js.enum]
    and ts_ModuleKind_None = [`None[@js 0]] [@js.enum]
    and ts_ModuleKind_CommonJS = [`CommonJS[@js 1]] [@js.enum]
    and ts_ModuleKind_AMD = [`AMD[@js 2]] [@js.enum]
    and ts_ModuleKind_UMD = [`UMD[@js 3]] [@js.enum]
    and ts_ModuleKind_System = [`System[@js 4]] [@js.enum]
    and ts_ModuleKind_ES2015 = [`ES2015[@js 5]] [@js.enum]
    and ts_ModuleKind_ES2020 = [`ES2020[@js 6]] [@js.enum]
    and ts_ModuleKind_ESNext = [`ESNext[@js 99]] [@js.enum]
    and ts_ModuleName = ([`U_n_10 of ts_StringLiteral [@js 10] | `U_n_78 of ts_Identifier [@js 78]] [@js.union on_field "kind"])
    and ts_ModuleReference = ([`U_n_78 of ts_EntityName [@js 78] | `U_n_157 of ts_EntityName [@js 157] | `U_n_272 of ts_ExternalModuleReference [@js 272]] [@js.union on_field "kind"])
    and ts_ModuleResolutionCache = [`Ts_ModuleResolutionCache | `Ts_NonRelativeModuleNameResolutionCache] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ModuleResolutionHost = [`Ts_ModuleResolutionHost] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ModuleResolutionKind = [`Classic[@js 1] | `NodeJs[@js 2]] [@js.enum]
    and ts_ModuleResolutionKind_Classic = [`Classic[@js 1]] [@js.enum]
    and ts_ModuleResolutionKind_NodeJs = [`NodeJs[@js 2]] [@js.enum]
    and ts_MultiplicativeOperator = ((ts_SyntaxKind_AsteriskToken, ts_SyntaxKind_PercentToken, ts_SyntaxKind_SlashToken) union3, ([`AsteriskToken[@js 41] | `PercentToken[@js 44] | `SlashToken[@js 43]] [@js.enum])) or_enum
    and ts_MultiplicativeOperatorOrHigher = ((ts_ExponentiationOperator, ts_MultiplicativeOperator, ts_SyntaxKind_AsteriskAsteriskToken, ts_SyntaxKind_AsteriskToken, ts_SyntaxKind_PercentToken, ts_SyntaxKind_SlashToken) union6, ([`AsteriskAsteriskToken[@js 42] | `AsteriskToken[@js 41] | `PercentToken[@js 44] | `SlashToken[@js 43]] [@js.enum])) or_enum
    and ts_NamedDeclaration = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NamedExportBindings = ([`U_n_268 of ts_NamedExports [@js 268] | `U_n_269 of ts_NamespaceExport [@js 269]] [@js.union on_field "kind"])
    and ts_NamedExports = [`Ts_NamedExports | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NamedImportBindings = ([`U_n_263 of ts_NamespaceImport [@js 263] | `U_n_264 of ts_NamedImports [@js 264]] [@js.union on_field "kind"])
    and ts_NamedImports = [`Ts_NamedImports | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NamedImportsOrExports = ([`U_n_264 of ts_NamedImports [@js 264] | `U_n_268 of ts_NamedExports [@js 268]] [@js.union on_field "kind"])
    and ts_NamedTupleMember = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedTupleMember | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NamespaceBody = ([`U_n_256 of ts_NamespaceDeclaration [@js 256] | `U_n_257 of ts_ModuleBlock [@js 257]] [@js.union on_field "kind"])
    and ts_NamespaceDeclaration = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_ModuleDeclaration | `Ts_NamedDeclaration | `Ts_NamespaceDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NamespaceExport = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_NamespaceExport | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NamespaceExportDeclaration = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_NamespaceExportDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NamespaceImport = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_NamespaceImport | `Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NavigateToItem = [`Ts_NavigateToItem] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NavigationBarItem = [`Ts_NavigationBarItem] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NavigationTree = [`Ts_NavigationTree] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NewExpression = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NewExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NewLineKind = [`CarriageReturnLineFeed[@js 0] | `LineFeed[@js 1]] [@js.enum]
    and ts_NewLineKind_CarriageReturnLineFeed = [`CarriageReturnLineFeed[@js 0]] [@js.enum]
    and ts_NewLineKind_LineFeed = [`LineFeed[@js 1]] [@js.enum]
    and ts_NoSubstitutionTemplateLiteral = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_NoSubstitutionTemplateLiteral | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralLikeNode | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Node = [`Ts_Node | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'T ts_NodeArray = [`Ts_NodeArray of 'T | `Ts_ReadonlyTextRange | `Array of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_NodeBuilderFlags = [`None[@js 0] | `NoTruncation[@js 1] | `WriteArrayAsGenericType[@js 2] | `GenerateNamesForShadowedTypeParams[@js 4] | `UseStructuralFallback[@js 8] | `ForbidIndexedAccessSymbolReferences[@js 16] | `WriteTypeArgumentsOfSignature[@js 32] | `UseFullyQualifiedType[@js 64] | `UseOnlyExternalAliasing[@js 128] | `SuppressAnyReturnType[@js 256] | `WriteTypeParametersInQualifiedName[@js 512] | `MultilineObjectLiterals[@js 1024] | `WriteClassExpressionAsTypeLiteral[@js 2048] | `UseTypeOfFunction[@js 4096] | `OmitParameterModifiers[@js 8192] | `UseAliasDefinedOutsideCurrentScope[@js 16384] | `UseSingleQuotesForStringLiteralType[@js 268435456] | `NoTypeReduction[@js 536870912] | `NoUndefinedOptionalParameterType[@js 1073741824] | `AllowThisInObjectLiteral[@js 32768] | `AllowQualifedNameInPlaceOfIdentifier[@js 65536] | `AllowAnonymousIdentifier[@js 131072] | `AllowEmptyUnionOrIntersection[@js 262144] | `AllowEmptyTuple[@js 524288] | `AllowUniqueESSymbolType[@js 1048576] | `AllowEmptyIndexInfoType[@js 2097152] | `AllowNodeModulesRelativePaths[@js 67108864] | `IgnoreErrors[@js 70221824] | `InObjectTypeLiteral[@js 4194304] | `InTypeAlias[@js 8388608] | `InInitialEntityName[@js 16777216] | `InReverseMappedType[@js 33554432]] [@js.enum]
    and ts_NodeBuilderFlags_None = [`None[@js 0]] [@js.enum]
    and ts_NodeBuilderFlags_NoTruncation = [`NoTruncation[@js 1]] [@js.enum]
    and ts_NodeBuilderFlags_WriteArrayAsGenericType = [`WriteArrayAsGenericType[@js 2]] [@js.enum]
    and ts_NodeBuilderFlags_GenerateNamesForShadowedTypeParams = [`GenerateNamesForShadowedTypeParams[@js 4]] [@js.enum]
    and ts_NodeBuilderFlags_UseStructuralFallback = [`UseStructuralFallback[@js 8]] [@js.enum]
    and ts_NodeBuilderFlags_ForbidIndexedAccessSymbolReferences = [`ForbidIndexedAccessSymbolReferences[@js 16]] [@js.enum]
    and ts_NodeBuilderFlags_WriteTypeArgumentsOfSignature = [`WriteTypeArgumentsOfSignature[@js 32]] [@js.enum]
    and ts_NodeBuilderFlags_UseFullyQualifiedType = [`UseFullyQualifiedType[@js 64]] [@js.enum]
    and ts_NodeBuilderFlags_UseOnlyExternalAliasing = [`UseOnlyExternalAliasing[@js 128]] [@js.enum]
    and ts_NodeBuilderFlags_SuppressAnyReturnType = [`SuppressAnyReturnType[@js 256]] [@js.enum]
    and ts_NodeBuilderFlags_WriteTypeParametersInQualifiedName = [`WriteTypeParametersInQualifiedName[@js 512]] [@js.enum]
    and ts_NodeBuilderFlags_MultilineObjectLiterals = [`MultilineObjectLiterals[@js 1024]] [@js.enum]
    and ts_NodeBuilderFlags_WriteClassExpressionAsTypeLiteral = [`WriteClassExpressionAsTypeLiteral[@js 2048]] [@js.enum]
    and ts_NodeBuilderFlags_UseTypeOfFunction = [`UseTypeOfFunction[@js 4096]] [@js.enum]
    and ts_NodeBuilderFlags_OmitParameterModifiers = [`OmitParameterModifiers[@js 8192]] [@js.enum]
    and ts_NodeBuilderFlags_UseAliasDefinedOutsideCurrentScope = [`UseAliasDefinedOutsideCurrentScope[@js 16384]] [@js.enum]
    and ts_NodeBuilderFlags_UseSingleQuotesForStringLiteralType = [`UseSingleQuotesForStringLiteralType[@js 268435456]] [@js.enum]
    and ts_NodeBuilderFlags_NoTypeReduction = [`NoTypeReduction[@js 536870912]] [@js.enum]
    and ts_NodeBuilderFlags_NoUndefinedOptionalParameterType = [`NoUndefinedOptionalParameterType[@js 1073741824]] [@js.enum]
    and ts_NodeBuilderFlags_AllowThisInObjectLiteral = [`AllowThisInObjectLiteral[@js 32768]] [@js.enum]
    and ts_NodeBuilderFlags_AllowQualifedNameInPlaceOfIdentifier = [`AllowQualifedNameInPlaceOfIdentifier[@js 65536]] [@js.enum]
    and ts_NodeBuilderFlags_AllowAnonymousIdentifier = [`AllowAnonymousIdentifier[@js 131072]] [@js.enum]
    and ts_NodeBuilderFlags_AllowEmptyUnionOrIntersection = [`AllowEmptyUnionOrIntersection[@js 262144]] [@js.enum]
    and ts_NodeBuilderFlags_AllowEmptyTuple = [`AllowEmptyTuple[@js 524288]] [@js.enum]
    and ts_NodeBuilderFlags_AllowUniqueESSymbolType = [`AllowUniqueESSymbolType[@js 1048576]] [@js.enum]
    and ts_NodeBuilderFlags_AllowEmptyIndexInfoType = [`AllowEmptyIndexInfoType[@js 2097152]] [@js.enum]
    and ts_NodeBuilderFlags_AllowNodeModulesRelativePaths = [`AllowNodeModulesRelativePaths[@js 67108864]] [@js.enum]
    and ts_NodeBuilderFlags_IgnoreErrors = [`IgnoreErrors[@js 70221824]] [@js.enum]
    and ts_NodeBuilderFlags_InObjectTypeLiteral = [`InObjectTypeLiteral[@js 4194304]] [@js.enum]
    and ts_NodeBuilderFlags_InTypeAlias = [`InTypeAlias[@js 8388608]] [@js.enum]
    and ts_NodeBuilderFlags_InInitialEntityName = [`InInitialEntityName[@js 16777216]] [@js.enum]
    and ts_NodeBuilderFlags_InReverseMappedType = [`InReverseMappedType[@js 33554432]] [@js.enum]
    and ts_NodeFactory = [`Ts_NodeFactory] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NodeFlags = [`None[@js 0] | `Let[@js 1] | `Const[@js 2] | `NestedNamespace[@js 4] | `Synthesized[@js 8] | `Namespace[@js 16] | `OptionalChain[@js 32] | `ExportContext[@js 64] | `ContainsThis[@js 128] | `HasImplicitReturn[@js 256] | `HasExplicitReturn[@js 512] | `GlobalAugmentation[@js 1024] | `HasAsyncFunctions[@js 2048] | `DisallowInContext[@js 4096] | `YieldContext[@js 8192] | `DecoratorContext[@js 16384] | `AwaitContext[@js 32768] | `ThisNodeHasError[@js 65536] | `JavaScriptFile[@js 131072] | `ThisNodeOrAnySubNodesHasError[@js 262144] | `HasAggregatedChildData[@js 524288] | `JSDoc[@js 4194304] | `JsonFile[@js 33554432] | `BlockScoped[@js 3] | `ReachabilityCheckFlags[@js 768] | `ReachabilityAndEmitFlags[@js 2816] | `ContextFlags[@js 25358336] | `TypeExcludesFlags[@js 40960]] [@js.enum]
    and ts_NodeFlags_None = [`None[@js 0]] [@js.enum]
    and ts_NodeFlags_Let = [`Let[@js 1]] [@js.enum]
    and ts_NodeFlags_Const = [`Const[@js 2]] [@js.enum]
    and ts_NodeFlags_NestedNamespace = [`NestedNamespace[@js 4]] [@js.enum]
    and ts_NodeFlags_Synthesized = [`Synthesized[@js 8]] [@js.enum]
    and ts_NodeFlags_Namespace = [`Namespace[@js 16]] [@js.enum]
    and ts_NodeFlags_OptionalChain = [`OptionalChain[@js 32]] [@js.enum]
    and ts_NodeFlags_ExportContext = [`ExportContext[@js 64]] [@js.enum]
    and ts_NodeFlags_ContainsThis = [`ContainsThis[@js 128]] [@js.enum]
    and ts_NodeFlags_HasImplicitReturn = [`HasImplicitReturn[@js 256]] [@js.enum]
    and ts_NodeFlags_HasExplicitReturn = [`HasExplicitReturn[@js 512]] [@js.enum]
    and ts_NodeFlags_GlobalAugmentation = [`GlobalAugmentation[@js 1024]] [@js.enum]
    and ts_NodeFlags_HasAsyncFunctions = [`HasAsyncFunctions[@js 2048]] [@js.enum]
    and ts_NodeFlags_DisallowInContext = [`DisallowInContext[@js 4096]] [@js.enum]
    and ts_NodeFlags_YieldContext = [`YieldContext[@js 8192]] [@js.enum]
    and ts_NodeFlags_DecoratorContext = [`DecoratorContext[@js 16384]] [@js.enum]
    and ts_NodeFlags_AwaitContext = [`AwaitContext[@js 32768]] [@js.enum]
    and ts_NodeFlags_ThisNodeHasError = [`ThisNodeHasError[@js 65536]] [@js.enum]
    and ts_NodeFlags_JavaScriptFile = [`JavaScriptFile[@js 131072]] [@js.enum]
    and ts_NodeFlags_ThisNodeOrAnySubNodesHasError = [`ThisNodeOrAnySubNodesHasError[@js 262144]] [@js.enum]
    and ts_NodeFlags_HasAggregatedChildData = [`HasAggregatedChildData[@js 524288]] [@js.enum]
    and ts_NodeFlags_JSDoc = [`JSDoc[@js 4194304]] [@js.enum]
    and ts_NodeFlags_JsonFile = [`JsonFile[@js 33554432]] [@js.enum]
    and ts_NodeFlags_BlockScoped = [`BlockScoped[@js 3]] [@js.enum]
    and ts_NodeFlags_ReachabilityCheckFlags = [`ReachabilityCheckFlags[@js 768]] [@js.enum]
    and ts_NodeFlags_ReachabilityAndEmitFlags = [`ReachabilityAndEmitFlags[@js 2816]] [@js.enum]
    and ts_NodeFlags_ContextFlags = [`ContextFlags[@js 25358336]] [@js.enum]
    and ts_NodeFlags_TypeExcludesFlags = [`TypeExcludesFlags[@js 40960]] [@js.enum]
    and ts_NodeVisitor = [`Ts_NodeVisitor] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NodeWithTypeArguments = [`Ts_Node | `Ts_NodeWithTypeArguments | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NodesVisitor = [`Ts_NodesVisitor] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NonNullChain = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_NonNullChain | `Ts_NonNullExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NonNullExpression = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_NonNullExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NonRelativeModuleNameResolutionCache = [`Ts_NonRelativeModuleNameResolutionCache] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NotEmittedStatement = [`Ts_Node | `Ts_NotEmittedStatement | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NullLiteral = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_NullLiteral | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NumberLiteralType = [`Ts_LiteralType | `Ts_NumberLiteralType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_NumericLiteral = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_NumericLiteral | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ObjectBindingOrAssignmentElement = ([`U_n_198 of ts_BindingElement [@js 198] | `U_n_288 of ts_PropertyAssignment [@js 288] | `U_n_289 of ts_ShorthandPropertyAssignment [@js 289] | `U_n_290 of ts_SpreadAssignment [@js 290]] [@js.union on_field "kind"])
    and ts_ObjectBindingOrAssignmentPattern = ([`U_n_196 of ts_ObjectBindingPattern [@js 196] | `U_n_200 of ts_ObjectLiteralExpression [@js 200]] [@js.union on_field "kind"])
    and ts_ObjectBindingPattern = [`Ts_Node | `Ts_ObjectBindingPattern | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ObjectDestructuringAssignment = [`Ts_AssignmentExpression of ts_EqualsToken | `Ts_BinaryExpression | `Ts_Declaration | `Ts_Expression | `Ts_Node | `Ts_ObjectDestructuringAssignment | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ObjectFlags = [`Class[@js 1] | `Interface[@js 2] | `Reference[@js 4] | `Tuple[@js 8] | `Anonymous[@js 16] | `Mapped[@js 32] | `Instantiated[@js 64] | `ObjectLiteral[@js 128] | `EvolvingArray[@js 256] | `ObjectLiteralPatternWithComputedProperties[@js 512] | `ContainsSpread[@js 1024] | `ReverseMapped[@js 2048] | `JsxAttributes[@js 4096] | `MarkerType[@js 8192] | `JSLiteral[@js 16384] | `FreshLiteral[@js 32768] | `ArrayLiteral[@js 65536] | `ObjectRestType[@js 131072] | `ClassOrInterface[@js 3]] [@js.enum]
    and ts_ObjectFlags_Class = [`Class[@js 1]] [@js.enum]
    and ts_ObjectFlags_Interface = [`Interface[@js 2]] [@js.enum]
    and ts_ObjectFlags_Reference = [`Reference[@js 4]] [@js.enum]
    and ts_ObjectFlags_Tuple = [`Tuple[@js 8]] [@js.enum]
    and ts_ObjectFlags_Anonymous = [`Anonymous[@js 16]] [@js.enum]
    and ts_ObjectFlags_Mapped = [`Mapped[@js 32]] [@js.enum]
    and ts_ObjectFlags_Instantiated = [`Instantiated[@js 64]] [@js.enum]
    and ts_ObjectFlags_ObjectLiteral = [`ObjectLiteral[@js 128]] [@js.enum]
    and ts_ObjectFlags_EvolvingArray = [`EvolvingArray[@js 256]] [@js.enum]
    and ts_ObjectFlags_ObjectLiteralPatternWithComputedProperties = [`ObjectLiteralPatternWithComputedProperties[@js 512]] [@js.enum]
    and ts_ObjectFlags_ContainsSpread = [`ContainsSpread[@js 1024]] [@js.enum]
    and ts_ObjectFlags_ReverseMapped = [`ReverseMapped[@js 2048]] [@js.enum]
    and ts_ObjectFlags_JsxAttributes = [`JsxAttributes[@js 4096]] [@js.enum]
    and ts_ObjectFlags_MarkerType = [`MarkerType[@js 8192]] [@js.enum]
    and ts_ObjectFlags_JSLiteral = [`JSLiteral[@js 16384]] [@js.enum]
    and ts_ObjectFlags_FreshLiteral = [`FreshLiteral[@js 32768]] [@js.enum]
    and ts_ObjectFlags_ArrayLiteral = [`ArrayLiteral[@js 65536]] [@js.enum]
    and ts_ObjectFlags_ObjectRestType = [`ObjectRestType[@js 131072]] [@js.enum]
    and ts_ObjectFlags_ClassOrInterface = [`ClassOrInterface[@js 3]] [@js.enum]
    and ts_ObjectLiteralElement = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ObjectLiteralElementLike = ([`U_n_165 of ts_MethodDeclaration [@js 165] | `U_n_167 of ts_AccessorDeclaration [@js 167] | `U_n_168 of ts_AccessorDeclaration [@js 168] | `U_n_288 of ts_PropertyAssignment [@js 288] | `U_n_289 of ts_ShorthandPropertyAssignment [@js 289] | `U_n_290 of ts_SpreadAssignment [@js 290]] [@js.union on_field "kind"])
    and ts_ObjectLiteralExpression = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ObjectLiteralExpression | `Ts_ObjectLiteralExpressionBase of ts_ObjectLiteralElementLike | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'T ts_ObjectLiteralExpressionBase = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ObjectLiteralExpressionBase of 'T | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_ObjectType = [`Ts_ObjectType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ObjectTypeDeclaration = ([`U_n_177 of ts_TypeLiteralNode [@js 177] | `U_n_221 of ts_ClassLikeDeclaration [@js 221] | `U_n_252 of ts_ClassLikeDeclaration [@js 252] | `U_n_253 of ts_InterfaceDeclaration [@js 253]] [@js.union on_field "kind"])
    and ts_OmittedExpression = [`Ts_Expression | `Ts_Node | `Ts_OmittedExpression | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_OperationCanceledException = [`Ts_OperationCanceledException] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_OptionalChain = ([`U_n_201 of ts_PropertyAccessChain [@js 201] | `U_n_202 of ts_ElementAccessChain [@js 202] | `U_n_203 of ts_CallChain [@js 203] | `U_n_225 of ts_NonNullChain [@js 225]] [@js.union on_field "kind"])
    and ts_OptionalTypeNode = [`Ts_Node | `Ts_OptionalTypeNode | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_OrganizeImportsScope = ts_CombinedCodeFixScope
    and ts_OuterExpressionKinds = [`Parentheses[@js 1] | `TypeAssertions[@js 2] | `NonNullAssertions[@js 4] | `PartiallyEmittedExpressions[@js 8] | `Assertions[@js 6] | `All[@js 15]] [@js.enum]
    and ts_OuterExpressionKinds_Parentheses = [`Parentheses[@js 1]] [@js.enum]
    and ts_OuterExpressionKinds_TypeAssertions = [`TypeAssertions[@js 2]] [@js.enum]
    and ts_OuterExpressionKinds_NonNullAssertions = [`NonNullAssertions[@js 4]] [@js.enum]
    and ts_OuterExpressionKinds_PartiallyEmittedExpressions = [`PartiallyEmittedExpressions[@js 8]] [@js.enum]
    and ts_OuterExpressionKinds_Assertions = [`Assertions[@js 6]] [@js.enum]
    and ts_OuterExpressionKinds_All = [`All[@js 15]] [@js.enum]
    and ts_OutliningSpan = [`Ts_OutliningSpan] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_OutliningSpanKind = [`Comment[@js "comment"] | `Region[@js "region"] | `Code[@js "code"] | `Imports[@js "imports"]] [@js.enum]
    and ts_OutliningSpanKind_Comment = [`Comment[@js "comment"]] [@js.enum]
    and ts_OutliningSpanKind_Region = [`Region[@js "region"]] [@js.enum]
    and ts_OutliningSpanKind_Code = [`Code[@js "code"]] [@js.enum]
    and ts_OutliningSpanKind_Imports = [`Imports[@js "imports"]] [@js.enum]
    and ts_OutputFile = [`Ts_OutputFile] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_OutputFileType = [`JavaScript[@js 0] | `SourceMap[@js 1] | `Declaration[@js 2]] [@js.enum]
    and ts_OutputFileType_JavaScript = [`JavaScript[@js 0]] [@js.enum]
    and ts_OutputFileType_SourceMap = [`SourceMap[@js 1]] [@js.enum]
    and ts_OutputFileType_Declaration = [`Declaration[@js 2]] [@js.enum]
    and ts_PackageId = [`Ts_PackageId] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ParameterDeclaration = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ParameterDeclaration | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ParameterPropertyDeclaration = (ts_ParameterDeclaration, anonymous_interface_11) intersection2
    and ts_ParameterPropertyModifier = ([`U_n_120 of ts_AccessibilityModifier [@js 120] | `U_n_121 of ts_AccessibilityModifier [@js 121] | `U_n_122 of ts_AccessibilityModifier [@js 122] | `U_n_142 of ts_ReadonlyKeyword [@js 142]] [@js.union on_field "kind"])
    and ts_ParenthesizedExpression = [`Ts_Expression | `Ts_JSDocContainer | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ParenthesizedExpression | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ParenthesizedTypeNode = [`Ts_Node | `Ts_ParenthesizedTypeNode | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ParseConfigFileHost = [`Ts_ConfigFileDiagnosticsReporter | `Ts_ParseConfigFileHost | `Ts_ParseConfigHost] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ParseConfigHost = [`Ts_ParseConfigHost] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ParsedCommandLine = [`Ts_ParsedCommandLine] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ParsedTsconfig = [`Ts_ParsedTsconfig] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PartiallyEmittedExpression = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_PartiallyEmittedExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Path = (string, anonymous_interface_3) intersection2
    and ts_PerModuleNameCache = [`Ts_PerModuleNameCache] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PerformanceEvent = [`Ts_PerformanceEvent] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PluginImport = [`Ts_PluginImport] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PlusToken = ts_SyntaxKind_PlusToken ts_PunctuationToken
    and ts_PollingWatchKind = [`FixedInterval[@js 0] | `PriorityInterval[@js 1] | `DynamicPriority[@js 2]] [@js.enum]
    and ts_PollingWatchKind_FixedInterval = [`FixedInterval[@js 0]] [@js.enum]
    and ts_PollingWatchKind_PriorityInterval = [`PriorityInterval[@js 1]] [@js.enum]
    and ts_PollingWatchKind_DynamicPriority = [`DynamicPriority[@js 2]] [@js.enum]
    and ts_PostfixUnaryExpression = [`Ts_Expression | `Ts_Node | `Ts_PostfixUnaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PostfixUnaryOperator = ((ts_SyntaxKind_MinusMinusToken, ts_SyntaxKind_PlusPlusToken) union2, ([`MinusMinusToken[@js 46] | `PlusPlusToken[@js 45]] [@js.enum])) or_enum
    and ts_PreProcessedFileInfo = [`Ts_PreProcessedFileInfo] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PrefixUnaryExpression = [`Ts_Expression | `Ts_Node | `Ts_PrefixUnaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PrefixUnaryOperator = ((ts_SyntaxKind_ExclamationToken, ts_SyntaxKind_MinusMinusToken, ts_SyntaxKind_MinusToken, ts_SyntaxKind_PlusPlusToken, ts_SyntaxKind_PlusToken, ts_SyntaxKind_TildeToken) union6, ([`ExclamationToken[@js 53] | `MinusMinusToken[@js 46] | `MinusToken[@js 40] | `PlusPlusToken[@js 45] | `PlusToken[@js 39] | `TildeToken[@js 54]] [@js.enum])) or_enum
    and ts_PrimaryExpression = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PrintHandlers = [`Ts_PrintHandlers] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Printer = [`Ts_Printer] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PrinterOptions = [`Ts_PrinterOptions] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PrivateIdentifier = [`Ts_Node | `Ts_PrivateIdentifier | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PrivateKeyword = ts_SyntaxKind_PrivateKeyword ts_ModifierToken
    and ts_Program = [`Ts_Program | `Ts_ScriptReferenceHost] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'T ts_ProgramHost = [`Ts_ProgramHost of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_ProjectReference = [`Ts_ProjectReference] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PropertyAccessChain = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessChain | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PropertyAccessEntityNameExpression = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessEntityNameExpression | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PropertyAccessExpression = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PropertyAssignment = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_PropertyAssignment | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PropertyDeclaration = [`Ts_ClassElement | `Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyDeclaration | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PropertyLikeDeclaration = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyLikeDeclaration | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PropertyName = ([`U_n_8 of ts_NumericLiteral [@js 8] | `U_n_10 of ts_StringLiteral [@js 10] | `U_n_78 of ts_Identifier [@js 78] | `U_n_79 of ts_PrivateIdentifier [@js 79] | `U_n_158 of ts_ComputedPropertyName [@js 158]] [@js.union on_field "kind"])
    and ts_PropertyNameLiteral = ([`U_n_8 of ts_NumericLiteral [@js 8] | `U_n_10 of ts_StringLiteralLike [@js 10] | `U_n_14 of ts_StringLiteralLike [@js 14] | `U_n_78 of ts_Identifier [@js 78]] [@js.union on_field "kind"])
    and ts_PropertySignature = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertySignature | `Ts_ReadonlyTextRange | `Ts_TypeElement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ProtectedKeyword = ts_SyntaxKind_ProtectedKeyword ts_ModifierToken
    and ts_PseudoBigInt = [`Ts_PseudoBigInt] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_PseudoLiteralSyntaxKind = ((ts_SyntaxKind_TemplateHead, ts_SyntaxKind_TemplateMiddle, ts_SyntaxKind_TemplateTail) union3, ([`TemplateHead[@js 15] | `TemplateMiddle[@js 16] | `TemplateTail[@js 17]] [@js.enum])) or_enum
    and ts_PseudoLiteralToken = ([`U_n_15 of ts_TemplateHead [@js 15] | `U_n_16 of ts_TemplateMiddle [@js 16] | `U_n_17 of ts_TemplateTail [@js 17]] [@js.union on_field "kind"])
    and ts_PublicKeyword = ts_SyntaxKind_PublicKeyword ts_ModifierToken
    and ts_PunctuationSyntaxKind = (((((((((((((((((((((((((((((((((((((((((((((((((((ts_SyntaxKind_PlusToken, ts_SyntaxKind_QuestionDotToken, ts_SyntaxKind_QuestionQuestionToken, ts_SyntaxKind_QuestionToken, ts_SyntaxKind_SemicolonToken, ts_SyntaxKind_SlashEqualsToken, ts_SyntaxKind_SlashToken, ts_SyntaxKind_TildeToken) union8, ts_SyntaxKind_PlusPlusToken) or_, ts_SyntaxKind_PlusEqualsToken) or_, ts_SyntaxKind_PercentToken) or_, ts_SyntaxKind_PercentEqualsToken) or_, ts_SyntaxKind_OpenParenToken) or_, ts_SyntaxKind_OpenBracketToken) or_, ts_SyntaxKind_OpenBraceToken) or_, ts_SyntaxKind_MinusToken) or_, ts_SyntaxKind_MinusMinusToken) or_, ts_SyntaxKind_MinusEqualsToken) or_, ts_SyntaxKind_LessThanToken) or_, ts_SyntaxKind_LessThanSlashToken) or_, ts_SyntaxKind_LessThanLessThanToken) or_, ts_SyntaxKind_LessThanLessThanEqualsToken) or_, ts_SyntaxKind_LessThanEqualsToken) or_, ts_SyntaxKind_GreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanEqualsToken) or_, ts_SyntaxKind_ExclamationToken) or_, ts_SyntaxKind_ExclamationEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsEqualsToken) or_, ts_SyntaxKind_EqualsToken) or_, ts_SyntaxKind_EqualsGreaterThanToken) or_, ts_SyntaxKind_EqualsEqualsToken) or_, ts_SyntaxKind_EqualsEqualsEqualsToken) or_, ts_SyntaxKind_DotToken) or_, ts_SyntaxKind_DotDotDotToken) or_, ts_SyntaxKind_CommaToken) or_, ts_SyntaxKind_ColonToken) or_, ts_SyntaxKind_CloseParenToken) or_, ts_SyntaxKind_CloseBracketToken) or_, ts_SyntaxKind_CloseBraceToken) or_, ts_SyntaxKind_CaretToken) or_, ts_SyntaxKind_CaretEqualsToken) or_, ts_SyntaxKind_BarToken) or_, ts_SyntaxKind_BarEqualsToken) or_, ts_SyntaxKind_BarBarToken) or_, ts_SyntaxKind_BacktickToken) or_, ts_SyntaxKind_AtToken) or_, ts_SyntaxKind_AsteriskToken) or_, ts_SyntaxKind_AsteriskEqualsToken) or_, ts_SyntaxKind_AsteriskAsteriskToken) or_, ts_SyntaxKind_AsteriskAsteriskEqualsToken) or_, ts_SyntaxKind_AmpersandToken) or_, ts_SyntaxKind_AmpersandEqualsToken) or_, ts_SyntaxKind_AmpersandAmpersandToken) or_, ([`AmpersandAmpersandToken[@js 55] | `AmpersandEqualsToken[@js 72] | `AmpersandToken[@js 50] | `AsteriskAsteriskEqualsToken[@js 66] | `AsteriskAsteriskToken[@js 42] | `AsteriskEqualsToken[@js 65] | `AsteriskToken[@js 41] | `AtToken[@js 59] | `BacktickToken[@js 61] | `BarBarToken[@js 56] | `BarEqualsToken[@js 73] | `BarToken[@js 51] | `CaretEqualsToken[@js 77] | `CaretToken[@js 52] | `CloseBraceToken[@js 19] | `CloseBracketToken[@js 23] | `CloseParenToken[@js 21] | `ColonToken[@js 58] | `CommaToken[@js 27] | `DotDotDotToken[@js 25] | `DotToken[@js 24] | `EqualsEqualsEqualsToken[@js 36] | `EqualsEqualsToken[@js 34] | `EqualsGreaterThanToken[@js 38] | `EqualsToken[@js 62] | `ExclamationEqualsEqualsToken[@js 37] | `ExclamationEqualsToken[@js 35] | `ExclamationToken[@js 53] | `GreaterThanEqualsToken[@js 33] | `GreaterThanGreaterThanEqualsToken[@js 70] | `GreaterThanGreaterThanGreaterThanEqualsToken[@js 71] | `GreaterThanGreaterThanGreaterThanToken[@js 49] | `GreaterThanGreaterThanToken[@js 48] | `GreaterThanToken[@js 31] | `LessThanEqualsToken[@js 32] | `LessThanLessThanEqualsToken[@js 69] | `LessThanLessThanToken[@js 47] | `LessThanSlashToken[@js 30] | `LessThanToken[@js 29] | `MinusEqualsToken[@js 64] | `MinusMinusToken[@js 46] | `MinusToken[@js 40] | `OpenBraceToken[@js 18] | `OpenBracketToken[@js 22] | `OpenParenToken[@js 20] | `PercentEqualsToken[@js 68] | `PercentToken[@js 44] | `PlusEqualsToken[@js 63] | `PlusPlusToken[@js 45] | `PlusToken[@js 39] | `QuestionDotToken[@js 28] | `QuestionQuestionToken[@js 60] | `QuestionToken[@js 57] | `SemicolonToken[@js 26] | `SlashEqualsToken[@js 67] | `SlashToken[@js 43] | `TildeToken[@js 54]] [@js.enum])) or_enum
    and 'TKind ts_PunctuationToken = [`Ts_Node | `Ts_PunctuationToken of 'TKind | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind] intf
    [@@js.custom { of_js=(fun _TKind -> Obj.magic); to_js=(fun _TKind -> Obj.magic) }]
    and 'T ts_Push = [`Ts_Push of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_QualifiedName = [`Ts_Node | `Ts_QualifiedName | `Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_QuestionDotToken = ts_SyntaxKind_QuestionDotToken ts_PunctuationToken
    and ts_QuestionToken = ts_SyntaxKind_QuestionToken ts_PunctuationToken
    and ts_QuickInfo = [`Ts_QuickInfo] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ReadBuildProgramHost = [`Ts_ReadBuildProgramHost] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'K ts_ReadonlyCollection = [`Ts_ReadonlyCollection of 'K] intf
    [@@js.custom { of_js=(fun _K -> Obj.magic); to_js=(fun _K -> Obj.magic) }]
    and ('K, 'V) ts_ReadonlyESMap = [`Ts_ReadonlyCollection of 'K | `Ts_ReadonlyESMap of ('K * 'V)] intf
    [@@js.custom { of_js=(fun _K _V -> Obj.magic); to_js=(fun _K _V -> Obj.magic) }]
    and ts_ReadonlyKeyword = ts_SyntaxKind_ReadonlyKeyword ts_ModifierToken
    and 'T ts_ReadonlyMap = [`Ts_ReadonlyCollection of string | `Ts_ReadonlyESMap of (string * 'T) | `Ts_ReadonlyMap of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and 'T ts_ReadonlySet = [`Ts_ReadonlyCollection of 'T | `Ts_ReadonlySet of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_ReadonlyTextRange = [`Ts_ReadonlyTextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ReadonlyToken = ts_ReadonlyKeyword
    and 'T ts_ReadonlyUnderscoreEscapedMap = [`Ts_ReadonlyCollection of ts___String | `Ts_ReadonlyESMap of (ts___String * 'T) | `Ts_ReadonlyUnderscoreEscapedMap of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_RefactorActionInfo = [`Ts_RefactorActionInfo] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_RefactorEditInfo = [`Ts_RefactorEditInfo] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_RefactorTriggerReason = ([`L_s81_implicit[@js "implicit"] | `L_s88_invoked[@js "invoked"]] [@js.enum])
    and ts_ReferenceEntry = [`Ts_DocumentSpan | `Ts_ReferenceEntry] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ReferencedSymbol = [`Ts_ReferencedSymbol] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ReferencedSymbolDefinitionInfo = [`Ts_DefinitionInfo | `Ts_DocumentSpan | `Ts_ReferencedSymbolDefinitionInfo] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_RegularExpressionLiteral = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_RegularExpressionLiteral | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_RelationalOperator = ((ts_SyntaxKind_GreaterThanEqualsToken, ts_SyntaxKind_GreaterThanToken, ts_SyntaxKind_InKeyword, ts_SyntaxKind_InstanceOfKeyword, ts_SyntaxKind_LessThanEqualsToken, ts_SyntaxKind_LessThanToken) union6, ([`GreaterThanEqualsToken[@js 33] | `GreaterThanToken[@js 31] | `InKeyword[@js 100] | `InstanceOfKeyword[@js 101] | `LessThanEqualsToken[@js 32] | `LessThanToken[@js 29]] [@js.enum])) or_enum
    and ts_RelationalOperatorOrHigher = (((((((((((((((((ts_SyntaxKind_InstanceOfKeyword, ts_SyntaxKind_LessThanEqualsToken, ts_SyntaxKind_LessThanLessThanToken, ts_SyntaxKind_LessThanToken, ts_SyntaxKind_MinusToken, ts_SyntaxKind_PercentToken, ts_SyntaxKind_PlusToken, ts_SyntaxKind_SlashToken) union8, ts_SyntaxKind_InKeyword) or_, ts_SyntaxKind_GreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanEqualsToken) or_, ts_SyntaxKind_AsteriskToken) or_, ts_SyntaxKind_AsteriskAsteriskToken) or_, ts_ShiftOperatorOrHigher) or_, ts_ShiftOperator) or_, ts_RelationalOperator) or_, ts_MultiplicativeOperatorOrHigher) or_, ts_MultiplicativeOperator) or_, ts_ExponentiationOperator) or_, ts_AdditiveOperatorOrHigher) or_, ts_AdditiveOperator) or_, ([`AsteriskAsteriskToken[@js 42] | `AsteriskToken[@js 41] | `GreaterThanEqualsToken[@js 33] | `GreaterThanGreaterThanGreaterThanToken[@js 49] | `GreaterThanGreaterThanToken[@js 48] | `GreaterThanToken[@js 31] | `InKeyword[@js 100] | `InstanceOfKeyword[@js 101] | `LessThanEqualsToken[@js 32] | `LessThanLessThanToken[@js 47] | `LessThanToken[@js 29] | `MinusToken[@js 40] | `PercentToken[@js 44] | `PlusToken[@js 39] | `SlashToken[@js 43]] [@js.enum])) or_enum
    and ts_RenameInfo = ([`U_b_false of ts_RenameInfoFailure [@js false] | `U_b_true of ts_RenameInfoSuccess [@js true]] [@js.union on_field "canRename"])
    and ts_RenameInfoFailure = [`Ts_RenameInfoFailure] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_RenameInfoOptions = [`Ts_RenameInfoOptions] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_RenameInfoSuccess = [`Ts_RenameInfoSuccess] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_RenameLocation = [`Ts_DocumentSpan | `Ts_RenameLocation] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ReportEmitErrorSummary = [`Ts_ReportEmitErrorSummary] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ResolveProjectReferencePathHost = [`Ts_ResolveProjectReferencePathHost] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ResolvedConfigFileName = (string, anonymous_interface_4) intersection2
    and ts_ResolvedModule = [`Ts_ResolvedModule] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ResolvedModuleFull = [`Ts_ResolvedModule | `Ts_ResolvedModuleFull] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ResolvedModuleWithFailedLookupLocations = [`Ts_ResolvedModuleWithFailedLookupLocations] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ResolvedProjectReference = [`Ts_ResolvedProjectReference] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ResolvedTypeReferenceDirective = [`Ts_ResolvedTypeReferenceDirective] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ResolvedTypeReferenceDirectiveWithFailedLookupLocations = [`Ts_ResolvedTypeReferenceDirectiveWithFailedLookupLocations] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_RestTypeNode = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_RestTypeNode | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ReturnStatement = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_ReturnStatement | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Scanner = [`Ts_Scanner] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ScriptElementKind = [`unknown[@js ""] | `warning[@js "warning"] | `keyword[@js "keyword"] | `scriptElement[@js "script"] | `moduleElement[@js "module"] | `classElement[@js "class"] | `localClassElement[@js "local class"] | `interfaceElement[@js "interface"] | `typeElement[@js "type"] | `enumElement[@js "enum"] | `enumMemberElement[@js "enum member"] | `variableElement[@js "var"] | `localVariableElement[@js "local var"] | `functionElement[@js "function"] | `localFunctionElement[@js "local function"] | `memberFunctionElement[@js "method"] | `memberGetAccessorElement[@js "getter"] | `memberSetAccessorElement[@js "setter"] | `memberVariableElement[@js "property"] | `constructorImplementationElement[@js "constructor"] | `callSignatureElement[@js "call"] | `indexSignatureElement[@js "index"] | `constructSignatureElement[@js "construct"] | `parameterElement[@js "parameter"] | `typeParameterElement[@js "type parameter"] | `primitiveType[@js "primitive type"] | `label[@js "label"] | `alias[@js "alias"] | `constElement[@js "const"] | `letElement[@js "let"] | `directory[@js "directory"] | `externalModuleName[@js "external module name"] | `jsxAttribute[@js "JSX attribute"] | `string[@js "string"]] [@js.enum]
    and ts_ScriptElementKind_unknown = [`unknown[@js ""]] [@js.enum]
    and ts_ScriptElementKind_warning = [`warning[@js "warning"]] [@js.enum]
    and ts_ScriptElementKind_keyword = [`keyword[@js "keyword"]] [@js.enum]
    and ts_ScriptElementKind_scriptElement = [`scriptElement[@js "script"]] [@js.enum]
    and ts_ScriptElementKind_moduleElement = [`moduleElement[@js "module"]] [@js.enum]
    and ts_ScriptElementKind_classElement = [`classElement[@js "class"]] [@js.enum]
    and ts_ScriptElementKind_localClassElement = [`localClassElement[@js "local class"]] [@js.enum]
    and ts_ScriptElementKind_interfaceElement = [`interfaceElement[@js "interface"]] [@js.enum]
    and ts_ScriptElementKind_typeElement = [`typeElement[@js "type"]] [@js.enum]
    and ts_ScriptElementKind_enumElement = [`enumElement[@js "enum"]] [@js.enum]
    and ts_ScriptElementKind_enumMemberElement = [`enumMemberElement[@js "enum member"]] [@js.enum]
    and ts_ScriptElementKind_variableElement = [`variableElement[@js "var"]] [@js.enum]
    and ts_ScriptElementKind_localVariableElement = [`localVariableElement[@js "local var"]] [@js.enum]
    and ts_ScriptElementKind_functionElement = [`functionElement[@js "function"]] [@js.enum]
    and ts_ScriptElementKind_localFunctionElement = [`localFunctionElement[@js "local function"]] [@js.enum]
    and ts_ScriptElementKind_memberFunctionElement = [`memberFunctionElement[@js "method"]] [@js.enum]
    and ts_ScriptElementKind_memberGetAccessorElement = [`memberGetAccessorElement[@js "getter"]] [@js.enum]
    and ts_ScriptElementKind_memberSetAccessorElement = [`memberSetAccessorElement[@js "setter"]] [@js.enum]
    and ts_ScriptElementKind_memberVariableElement = [`memberVariableElement[@js "property"]] [@js.enum]
    and ts_ScriptElementKind_constructorImplementationElement = [`constructorImplementationElement[@js "constructor"]] [@js.enum]
    and ts_ScriptElementKind_callSignatureElement = [`callSignatureElement[@js "call"]] [@js.enum]
    and ts_ScriptElementKind_indexSignatureElement = [`indexSignatureElement[@js "index"]] [@js.enum]
    and ts_ScriptElementKind_constructSignatureElement = [`constructSignatureElement[@js "construct"]] [@js.enum]
    and ts_ScriptElementKind_parameterElement = [`parameterElement[@js "parameter"]] [@js.enum]
    and ts_ScriptElementKind_typeParameterElement = [`typeParameterElement[@js "type parameter"]] [@js.enum]
    and ts_ScriptElementKind_primitiveType = [`primitiveType[@js "primitive type"]] [@js.enum]
    and ts_ScriptElementKind_label = [`label[@js "label"]] [@js.enum]
    and ts_ScriptElementKind_alias = [`alias[@js "alias"]] [@js.enum]
    and ts_ScriptElementKind_constElement = [`constElement[@js "const"]] [@js.enum]
    and ts_ScriptElementKind_letElement = [`letElement[@js "let"]] [@js.enum]
    and ts_ScriptElementKind_directory = [`directory[@js "directory"]] [@js.enum]
    and ts_ScriptElementKind_externalModuleName = [`externalModuleName[@js "external module name"]] [@js.enum]
    and ts_ScriptElementKind_jsxAttribute = [`jsxAttribute[@js "JSX attribute"]] [@js.enum]
    and ts_ScriptElementKind_string = [`string[@js "string"]] [@js.enum]
    and ts_ScriptElementKindModifier = [`none[@js ""] | `publicMemberModifier[@js "public"] | `privateMemberModifier[@js "private"] | `protectedMemberModifier[@js "protected"] | `exportedModifier[@js "export"] | `ambientModifier[@js "declare"] | `staticModifier[@js "static"] | `abstractModifier[@js "abstract"] | `optionalModifier[@js "optional"] | `deprecatedModifier[@js "deprecated"] | `dtsModifier[@js ".d.ts"] | `tsModifier[@js ".ts"] | `tsxModifier[@js ".tsx"] | `jsModifier[@js ".js"] | `jsxModifier[@js ".jsx"] | `jsonModifier[@js ".json"]] [@js.enum]
    and ts_ScriptElementKindModifier_none = [`none[@js ""]] [@js.enum]
    and ts_ScriptElementKindModifier_publicMemberModifier = [`publicMemberModifier[@js "public"]] [@js.enum]
    and ts_ScriptElementKindModifier_privateMemberModifier = [`privateMemberModifier[@js "private"]] [@js.enum]
    and ts_ScriptElementKindModifier_protectedMemberModifier = [`protectedMemberModifier[@js "protected"]] [@js.enum]
    and ts_ScriptElementKindModifier_exportedModifier = [`exportedModifier[@js "export"]] [@js.enum]
    and ts_ScriptElementKindModifier_ambientModifier = [`ambientModifier[@js "declare"]] [@js.enum]
    and ts_ScriptElementKindModifier_staticModifier = [`staticModifier[@js "static"]] [@js.enum]
    and ts_ScriptElementKindModifier_abstractModifier = [`abstractModifier[@js "abstract"]] [@js.enum]
    and ts_ScriptElementKindModifier_optionalModifier = [`optionalModifier[@js "optional"]] [@js.enum]
    and ts_ScriptElementKindModifier_deprecatedModifier = [`deprecatedModifier[@js "deprecated"]] [@js.enum]
    and ts_ScriptElementKindModifier_dtsModifier = [`dtsModifier[@js ".d.ts"]] [@js.enum]
    and ts_ScriptElementKindModifier_tsModifier = [`tsModifier[@js ".ts"]] [@js.enum]
    and ts_ScriptElementKindModifier_tsxModifier = [`tsxModifier[@js ".tsx"]] [@js.enum]
    and ts_ScriptElementKindModifier_jsModifier = [`jsModifier[@js ".js"]] [@js.enum]
    and ts_ScriptElementKindModifier_jsxModifier = [`jsxModifier[@js ".jsx"]] [@js.enum]
    and ts_ScriptElementKindModifier_jsonModifier = [`jsonModifier[@js ".json"]] [@js.enum]
    and ts_ScriptKind = [`Unknown[@js 0] | `JS[@js 1] | `JSX[@js 2] | `TS[@js 3] | `TSX[@js 4] | `External[@js 5] | `JSON[@js 6] | `Deferred[@js 7]] [@js.enum]
    and ts_ScriptKind_Unknown = [`Unknown[@js 0]] [@js.enum]
    and ts_ScriptKind_JS = [`JS[@js 1]] [@js.enum]
    and ts_ScriptKind_JSX = [`JSX[@js 2]] [@js.enum]
    and ts_ScriptKind_TS = [`TS[@js 3]] [@js.enum]
    and ts_ScriptKind_TSX = [`TSX[@js 4]] [@js.enum]
    and ts_ScriptKind_External = [`External[@js 5]] [@js.enum]
    and ts_ScriptKind_JSON = [`JSON[@js 6]] [@js.enum]
    and ts_ScriptKind_Deferred = [`Deferred[@js 7]] [@js.enum]
    and ts_ScriptReferenceHost = [`Ts_ScriptReferenceHost] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ScriptTarget = [`ES3[@js 0] | `ES5[@js 1] | `ES2015[@js 2] | `ES2016[@js 3] | `ES2017[@js 4] | `ES2018[@js 5] | `ES2019[@js 6] | `ES2020[@js 7] | `ESNext[@js 99] | `JSON[@js 100] | `Latest[@js 99]] [@js.enum]
    and ts_ScriptTarget_ES3 = [`ES3[@js 0]] [@js.enum]
    and ts_ScriptTarget_ES5 = [`ES5[@js 1]] [@js.enum]
    and ts_ScriptTarget_ES2015 = [`ES2015[@js 2]] [@js.enum]
    and ts_ScriptTarget_ES2016 = [`ES2016[@js 3]] [@js.enum]
    and ts_ScriptTarget_ES2017 = [`ES2017[@js 4]] [@js.enum]
    and ts_ScriptTarget_ES2018 = [`ES2018[@js 5]] [@js.enum]
    and ts_ScriptTarget_ES2019 = [`ES2019[@js 6]] [@js.enum]
    and ts_ScriptTarget_ES2020 = [`ES2020[@js 7]] [@js.enum]
    and ts_ScriptTarget_ESNext = [`ESNext[@js 99]] [@js.enum]
    and ts_ScriptTarget_JSON = [`JSON[@js 100]] [@js.enum]
    and ts_ScriptTarget_Latest = [`Latest[@js 99]] [@js.enum]
    and ts_SelectionRange = [`Ts_SelectionRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SemanticClassificationFormat = [`Original[@js "original"] | `TwentyTwenty[@js "2020"]] [@js.enum]
    and ts_SemanticClassificationFormat_Original = [`Original[@js "original"]] [@js.enum]
    and ts_SemanticClassificationFormat_TwentyTwenty = [`TwentyTwenty[@js "2020"]] [@js.enum]
    and ts_SemanticDiagnosticsBuilderProgram = [`Ts_BuilderProgram | `Ts_SemanticDiagnosticsBuilderProgram] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SemicolonClassElement = [`Ts_ClassElement | `Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SemicolonClassElement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SemicolonPreference = [`Ignore[@js "ignore"] | `Insert[@js "insert"] | `Remove[@js "remove"]] [@js.enum]
    and ts_SemicolonPreference_Ignore = [`Ignore[@js "ignore"]] [@js.enum]
    and ts_SemicolonPreference_Insert = [`Insert[@js "insert"]] [@js.enum]
    and ts_SemicolonPreference_Remove = [`Remove[@js "remove"]] [@js.enum]
    and 'T ts_Set = [`Ts_Collection of 'T | `Ts_ReadonlyCollection of 'T | `Ts_ReadonlySet of 'T | `Ts_Set of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_SetAccessorDeclaration = [`Ts_ClassElement | `Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_SetAccessorDeclaration | `Ts_SignatureDeclarationBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ShiftOperator = ((ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken, ts_SyntaxKind_GreaterThanGreaterThanToken, ts_SyntaxKind_LessThanLessThanToken) union3, ([`GreaterThanGreaterThanGreaterThanToken[@js 49] | `GreaterThanGreaterThanToken[@js 48] | `LessThanLessThanToken[@js 47]] [@js.enum])) or_enum
    and ts_ShiftOperatorOrHigher = (((((((((ts_SyntaxKind_AsteriskToken, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken, ts_SyntaxKind_GreaterThanGreaterThanToken, ts_SyntaxKind_LessThanLessThanToken, ts_SyntaxKind_MinusToken, ts_SyntaxKind_PercentToken, ts_SyntaxKind_PlusToken, ts_SyntaxKind_SlashToken) union8, ts_SyntaxKind_AsteriskAsteriskToken) or_, ts_ShiftOperator) or_, ts_MultiplicativeOperatorOrHigher) or_, ts_MultiplicativeOperator) or_, ts_ExponentiationOperator) or_, ts_AdditiveOperatorOrHigher) or_, ts_AdditiveOperator) or_, ([`AsteriskAsteriskToken[@js 42] | `AsteriskToken[@js 41] | `GreaterThanGreaterThanGreaterThanToken[@js 49] | `GreaterThanGreaterThanToken[@js 48] | `LessThanLessThanToken[@js 47] | `MinusToken[@js 40] | `PercentToken[@js 44] | `PlusToken[@js 39] | `SlashToken[@js 43]] [@js.enum])) or_enum
    and ts_ShorthandPropertyAssignment = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_ShorthandPropertyAssignment] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Signature = [`Ts_Signature] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SignatureDeclaration = ([`U_n_164 of ts_MethodSignature [@js 164] | `U_n_165 of ts_MethodDeclaration [@js 165] | `U_n_166 of ts_ConstructorDeclaration [@js 166] | `U_n_167 of ts_AccessorDeclaration [@js 167] | `U_n_168 of ts_AccessorDeclaration [@js 168] | `U_n_169 of ts_CallSignatureDeclaration [@js 169] | `U_n_170 of ts_ConstructSignatureDeclaration [@js 170] | `U_n_171 of ts_IndexSignatureDeclaration [@js 171] | `U_n_174 of ts_FunctionTypeNode [@js 174] | `U_n_175 of ts_ConstructorTypeNode [@js 175] | `U_n_208 of ts_FunctionExpression [@js 208] | `U_n_209 of ts_ArrowFunction [@js 209] | `U_n_251 of ts_FunctionDeclaration [@js 251] | `U_n_308 of ts_JSDocFunctionType [@js 308]] [@js.union on_field "kind"])
    and ts_SignatureDeclarationBase = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SignatureHelpCharacterTypedReason = [`Ts_SignatureHelpCharacterTypedReason] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SignatureHelpInvokedReason = [`Ts_SignatureHelpInvokedReason] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SignatureHelpItem = [`Ts_SignatureHelpItem] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SignatureHelpItems = [`Ts_SignatureHelpItems] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SignatureHelpItemsOptions = [`Ts_SignatureHelpItemsOptions] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SignatureHelpParameter = [`Ts_SignatureHelpParameter] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SignatureHelpRetriggerCharacter = (ts_SignatureHelpTriggerCharacter, ([`L_s4[@js "("] | `L_s5[@js ")"] | `L_s6[@js ","] | `L_s17[@js "<"]] [@js.enum])) or_enum
    and ts_SignatureHelpRetriggeredReason = [`Ts_SignatureHelpRetriggeredReason] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SignatureHelpTriggerCharacter = ([`L_s4[@js "("] | `L_s6[@js ","] | `L_s17[@js "<"]] [@js.enum])
    and ts_SignatureHelpTriggerReason = ([`U_s47_characterTyped of ts_SignatureHelpCharacterTypedReason [@js "characterTyped"] | `U_s88_invoked of ts_SignatureHelpInvokedReason [@js "invoked"] | `U_s130_retrigger of ts_SignatureHelpRetriggeredReason [@js "retrigger"]] [@js.union on_field "kind"])
    and ts_SignatureKind = [`Call[@js 0] | `Construct[@js 1]] [@js.enum]
    and ts_SignatureKind_Call = [`Call[@js 0]] [@js.enum]
    and ts_SignatureKind_Construct = [`Construct[@js 1]] [@js.enum]
    and 'T ts_SolutionBuilder = [`Ts_SolutionBuilder of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and 'T ts_SolutionBuilderHost = [`Ts_ProgramHost of 'T | `Ts_SolutionBuilderHost of 'T | `Ts_SolutionBuilderHostBase of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and 'T ts_SolutionBuilderHostBase = [`Ts_ProgramHost of 'T | `Ts_SolutionBuilderHostBase of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and 'T ts_SolutionBuilderWithWatchHost = [`Ts_ProgramHost of 'T | `Ts_SolutionBuilderHostBase of 'T | `Ts_SolutionBuilderWithWatchHost of 'T | `Ts_WatchHost] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and 'T ts_SortedArray = [`Ts_SortedArray of 'T | `Array of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and 'T ts_SortedReadonlyArray = [`Ts_SortedReadonlyArray of 'T | `Array of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_SourceFile = [`Ts_Declaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SourceFile] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SourceFileLike = [`Ts_SourceFileLike] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SourceMapRange = [`Ts_SourceMapRange | `Ts_TextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SourceMapSource = [`Ts_SourceMapSource] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SourceMapSpan = [`Ts_SourceMapSpan] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SpreadAssignment = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_SpreadAssignment] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SpreadElement = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SpreadElement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Statement = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_StaticKeyword = ts_SyntaxKind_StaticKeyword ts_ModifierToken
    and ts_StringLiteral = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_StringLiteral | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_StringLiteralLike = ([`U_n_10 of ts_StringLiteral [@js 10] | `U_n_14 of ts_NoSubstitutionTemplateLiteral [@js 14]] [@js.union on_field "kind"])
    and ts_StringLiteralType = [`Ts_LiteralType | `Ts_StringLiteralType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_StringMappingType = [`Ts_InstantiableType | `Ts_StringMappingType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_StructuredType = (([`U_n_1 of (ts_UnionType, ts_IntersectionType) union2 [@js 1] | `U_n_2 of (ts_UnionType, ts_IntersectionType) union2 [@js 2] | `U_n_4 of (ts_UnionType, ts_IntersectionType) union2 [@js 4] | `U_n_8 of (ts_UnionType, ts_IntersectionType) union2 [@js 8] | `U_n_16 of (ts_UnionType, ts_IntersectionType) union2 [@js 16] | `U_n_32 of (ts_UnionType, ts_IntersectionType) union2 [@js 32] | `U_n_64 of (ts_UnionType, ts_IntersectionType) union2 [@js 64] | `U_n_128 of (ts_UnionType, ts_IntersectionType) union2 [@js 128] | `U_n_256 of (ts_UnionType, ts_IntersectionType) union2 [@js 256] | `U_n_296 of (ts_UnionType, ts_IntersectionType) union2 [@js 296] | `U_n_384 of (ts_UnionType, ts_IntersectionType) union2 [@js 384] | `U_n_512 of (ts_UnionType, ts_IntersectionType) union2 [@js 512] | `U_n_528 of (ts_UnionType, ts_IntersectionType) union2 [@js 528] | `U_n_1024 of (ts_UnionType, ts_IntersectionType) union2 [@js 1024] | `U_n_1056 of (ts_UnionType, ts_IntersectionType) union2 [@js 1056] | `U_n_2048 of (ts_UnionType, ts_IntersectionType) union2 [@js 2048] | `U_n_2112 of (ts_UnionType, ts_IntersectionType) union2 [@js 2112] | `U_n_2944 of (ts_UnionType, ts_IntersectionType) union2 [@js 2944] | `U_n_4096 of (ts_UnionType, ts_IntersectionType) union2 [@js 4096] | `U_n_8192 of (ts_UnionType, ts_IntersectionType) union2 [@js 8192] | `U_n_12288 of (ts_UnionType, ts_IntersectionType) union2 [@js 12288] | `U_n_16384 of (ts_UnionType, ts_IntersectionType) union2 [@js 16384] | `U_n_32768 of (ts_UnionType, ts_IntersectionType) union2 [@js 32768] | `U_n_49152 of (ts_UnionType, ts_IntersectionType) union2 [@js 49152] | `U_n_65536 of (ts_UnionType, ts_IntersectionType) union2 [@js 65536] | `U_n_109440 of (ts_UnionType, ts_IntersectionType) union2 [@js 109440] | `U_n_117724 of (ts_UnionType, ts_IntersectionType) union2 [@js 117724] | `U_n_131072 of (ts_UnionType, ts_IntersectionType) union2 [@js 131072] | `U_n_262144 of (ts_UnionType, ts_IntersectionType) union2 [@js 262144] | `U_n_524288 of (ts_UnionType, ts_IntersectionType) union2 [@js 524288] | `U_n_1048576 of (ts_UnionType, ts_IntersectionType) union2 [@js 1048576] | `U_n_2097152 of (ts_UnionType, ts_IntersectionType) union2 [@js 2097152] | `U_n_3145728 of (ts_UnionType, ts_IntersectionType) union2 [@js 3145728] | `U_n_3670016 of (ts_UnionType, ts_IntersectionType) union2 [@js 3670016] | `U_n_4194304 of (ts_UnionType, ts_IntersectionType) union2 [@js 4194304] | `U_n_8388608 of (ts_UnionType, ts_IntersectionType) union2 [@js 8388608] | `U_n_8650752 of (ts_UnionType, ts_IntersectionType) union2 [@js 8650752] | `U_n_16777216 of (ts_UnionType, ts_IntersectionType) union2 [@js 16777216] | `U_n_33554432 of (ts_UnionType, ts_IntersectionType) union2 [@js 33554432] | `U_n_58982400 of (ts_UnionType, ts_IntersectionType) union2 [@js 58982400] | `U_n_67108864 of (ts_UnionType, ts_IntersectionType) union2 [@js 67108864] | `U_n_134217728 of (ts_UnionType, ts_IntersectionType) union2 [@js 134217728] | `U_n_268435456 of (ts_UnionType, ts_IntersectionType) union2 [@js 268435456] | `U_n_402653316 of (ts_UnionType, ts_IntersectionType) union2 [@js 402653316] | `U_n_406847488 of (ts_UnionType, ts_IntersectionType) union2 [@js 406847488] | `U_n_465829888 of (ts_UnionType, ts_IntersectionType) union2 [@js 465829888] | `U_n_469499904 of (ts_UnionType, ts_IntersectionType) union2 [@js 469499904] | `U_n_536624127 of (ts_UnionType, ts_IntersectionType) union2 [@js 536624127]] [@js.union on_field "flags"]), ([`U_n_1 of ts_ObjectType [@js 1] | `U_n_2 of ts_ObjectType [@js 2] | `U_n_3 of ts_ObjectType [@js 3] | `U_n_4 of ts_ObjectType [@js 4] | `U_n_8 of ts_ObjectType [@js 8] | `U_n_16 of ts_ObjectType [@js 16] | `U_n_32 of ts_ObjectType [@js 32] | `U_n_64 of ts_ObjectType [@js 64] | `U_n_128 of ts_ObjectType [@js 128] | `U_n_256 of ts_ObjectType [@js 256] | `U_n_512 of ts_ObjectType [@js 512] | `U_n_1024 of ts_ObjectType [@js 1024] | `U_n_2048 of ts_ObjectType [@js 2048] | `U_n_4096 of ts_ObjectType [@js 4096] | `U_n_8192 of ts_ObjectType [@js 8192] | `U_n_16384 of ts_ObjectType [@js 16384] | `U_n_32768 of ts_ObjectType [@js 32768] | `U_n_65536 of ts_ObjectType [@js 65536] | `U_n_131072 of ts_ObjectType [@js 131072]] [@js.union on_field "objectFlags"])) union2
    and ts_SubstitutionType = [`Ts_InstantiableType | `Ts_SubstitutionType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SuperCall = [`Ts_CallExpression | `Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SuperCall | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SuperElementAccessExpression = [`Ts_ElementAccessExpression | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SuperElementAccessExpression | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SuperExpression = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_SuperExpression | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SuperProperty = ([`U_n_201 of ts_SuperPropertyAccessExpression [@js 201] | `U_n_202 of ts_SuperElementAccessExpression [@js 202]] [@js.union on_field "kind"])
    and ts_SuperPropertyAccessExpression = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_SuperPropertyAccessExpression | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SwitchStatement = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_SwitchStatement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Symbol = [`Ts_Symbol] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SymbolDisplayPart = [`Ts_SymbolDisplayPart] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SymbolDisplayPartKind = [`aliasName[@js 0] | `className[@js 1] | `enumName[@js 2] | `fieldName[@js 3] | `interfaceName[@js 4] | `keyword[@js 5] | `lineBreak[@js 6] | `numericLiteral[@js 7] | `stringLiteral[@js 8] | `localName[@js 9] | `methodName[@js 10] | `moduleName[@js 11] | `operator[@js 12] | `parameterName[@js 13] | `propertyName[@js 14] | `punctuation[@js 15] | `space[@js 16] | `text[@js 17] | `typeParameterName[@js 18] | `enumMemberName[@js 19] | `functionName[@js 20] | `regularExpressionLiteral[@js 21]] [@js.enum]
    and ts_SymbolDisplayPartKind_aliasName = [`aliasName[@js 0]] [@js.enum]
    and ts_SymbolDisplayPartKind_className = [`className[@js 1]] [@js.enum]
    and ts_SymbolDisplayPartKind_enumName = [`enumName[@js 2]] [@js.enum]
    and ts_SymbolDisplayPartKind_fieldName = [`fieldName[@js 3]] [@js.enum]
    and ts_SymbolDisplayPartKind_interfaceName = [`interfaceName[@js 4]] [@js.enum]
    and ts_SymbolDisplayPartKind_keyword = [`keyword[@js 5]] [@js.enum]
    and ts_SymbolDisplayPartKind_lineBreak = [`lineBreak[@js 6]] [@js.enum]
    and ts_SymbolDisplayPartKind_numericLiteral = [`numericLiteral[@js 7]] [@js.enum]
    and ts_SymbolDisplayPartKind_stringLiteral = [`stringLiteral[@js 8]] [@js.enum]
    and ts_SymbolDisplayPartKind_localName = [`localName[@js 9]] [@js.enum]
    and ts_SymbolDisplayPartKind_methodName = [`methodName[@js 10]] [@js.enum]
    and ts_SymbolDisplayPartKind_moduleName = [`moduleName[@js 11]] [@js.enum]
    and ts_SymbolDisplayPartKind_operator = [`operator[@js 12]] [@js.enum]
    and ts_SymbolDisplayPartKind_parameterName = [`parameterName[@js 13]] [@js.enum]
    and ts_SymbolDisplayPartKind_propertyName = [`propertyName[@js 14]] [@js.enum]
    and ts_SymbolDisplayPartKind_punctuation = [`punctuation[@js 15]] [@js.enum]
    and ts_SymbolDisplayPartKind_space = [`space[@js 16]] [@js.enum]
    and ts_SymbolDisplayPartKind_text = [`text[@js 17]] [@js.enum]
    and ts_SymbolDisplayPartKind_typeParameterName = [`typeParameterName[@js 18]] [@js.enum]
    and ts_SymbolDisplayPartKind_enumMemberName = [`enumMemberName[@js 19]] [@js.enum]
    and ts_SymbolDisplayPartKind_functionName = [`functionName[@js 20]] [@js.enum]
    and ts_SymbolDisplayPartKind_regularExpressionLiteral = [`regularExpressionLiteral[@js 21]] [@js.enum]
    and ts_SymbolFlags = [`None[@js 0] | `FunctionScopedVariable[@js 1] | `BlockScopedVariable[@js 2] | `Property[@js 4] | `EnumMember[@js 8] | `Function[@js 16] | `Class[@js 32] | `Interface[@js 64] | `ConstEnum[@js 128] | `RegularEnum[@js 256] | `ValueModule[@js 512] | `NamespaceModule[@js 1024] | `TypeLiteral[@js 2048] | `ObjectLiteral[@js 4096] | `Method[@js 8192] | `Constructor[@js 16384] | `GetAccessor[@js 32768] | `SetAccessor[@js 65536] | `Signature[@js 131072] | `TypeParameter[@js 262144] | `TypeAlias[@js 524288] | `ExportValue[@js 1048576] | `Alias[@js 2097152] | `Prototype[@js 4194304] | `ExportStar[@js 8388608] | `Optional[@js 16777216] | `Transient[@js 33554432] | `Assignment[@js 67108864] | `ModuleExports[@js 134217728] | `Enum[@js 384] | `Variable[@js 3] | `Value[@js 111551] | `Type[@js 788968] | `Namespace[@js 1920] | `Module[@js 1536] | `Accessor[@js 98304] | `FunctionScopedVariableExcludes[@js 111550] | `BlockScopedVariableExcludes[@js 111551] | `ParameterExcludes[@js 111551] | `PropertyExcludes[@js 0] | `EnumMemberExcludes[@js 900095] | `FunctionExcludes[@js 110991] | `ClassExcludes[@js 899503] | `InterfaceExcludes[@js 788872] | `RegularEnumExcludes[@js 899327] | `ConstEnumExcludes[@js 899967] | `ValueModuleExcludes[@js 110735] | `NamespaceModuleExcludes[@js 0] | `MethodExcludes[@js 103359] | `GetAccessorExcludes[@js 46015] | `SetAccessorExcludes[@js 78783] | `TypeParameterExcludes[@js 526824] | `TypeAliasExcludes[@js 788968] | `AliasExcludes[@js 2097152] | `ModuleMember[@js 2623475] | `ExportHasLocal[@js 944] | `BlockScoped[@js 418] | `PropertyOrAccessor[@js 98308] | `ClassMember[@js 106500]] [@js.enum]
    and ts_SymbolFlags_None = [`None[@js 0]] [@js.enum]
    and ts_SymbolFlags_FunctionScopedVariable = [`FunctionScopedVariable[@js 1]] [@js.enum]
    and ts_SymbolFlags_BlockScopedVariable = [`BlockScopedVariable[@js 2]] [@js.enum]
    and ts_SymbolFlags_Property = [`Property[@js 4]] [@js.enum]
    and ts_SymbolFlags_EnumMember = [`EnumMember[@js 8]] [@js.enum]
    and ts_SymbolFlags_Function = [`Function[@js 16]] [@js.enum]
    and ts_SymbolFlags_Class = [`Class[@js 32]] [@js.enum]
    and ts_SymbolFlags_Interface = [`Interface[@js 64]] [@js.enum]
    and ts_SymbolFlags_ConstEnum = [`ConstEnum[@js 128]] [@js.enum]
    and ts_SymbolFlags_RegularEnum = [`RegularEnum[@js 256]] [@js.enum]
    and ts_SymbolFlags_ValueModule = [`ValueModule[@js 512]] [@js.enum]
    and ts_SymbolFlags_NamespaceModule = [`NamespaceModule[@js 1024]] [@js.enum]
    and ts_SymbolFlags_TypeLiteral = [`TypeLiteral[@js 2048]] [@js.enum]
    and ts_SymbolFlags_ObjectLiteral = [`ObjectLiteral[@js 4096]] [@js.enum]
    and ts_SymbolFlags_Method = [`Method[@js 8192]] [@js.enum]
    and ts_SymbolFlags_Constructor = [`Constructor[@js 16384]] [@js.enum]
    and ts_SymbolFlags_GetAccessor = [`GetAccessor[@js 32768]] [@js.enum]
    and ts_SymbolFlags_SetAccessor = [`SetAccessor[@js 65536]] [@js.enum]
    and ts_SymbolFlags_Signature = [`Signature[@js 131072]] [@js.enum]
    and ts_SymbolFlags_TypeParameter = [`TypeParameter[@js 262144]] [@js.enum]
    and ts_SymbolFlags_TypeAlias = [`TypeAlias[@js 524288]] [@js.enum]
    and ts_SymbolFlags_ExportValue = [`ExportValue[@js 1048576]] [@js.enum]
    and ts_SymbolFlags_Alias = [`Alias[@js 2097152]] [@js.enum]
    and ts_SymbolFlags_Prototype = [`Prototype[@js 4194304]] [@js.enum]
    and ts_SymbolFlags_ExportStar = [`ExportStar[@js 8388608]] [@js.enum]
    and ts_SymbolFlags_Optional = [`Optional[@js 16777216]] [@js.enum]
    and ts_SymbolFlags_Transient = [`Transient[@js 33554432]] [@js.enum]
    and ts_SymbolFlags_Assignment = [`Assignment[@js 67108864]] [@js.enum]
    and ts_SymbolFlags_ModuleExports = [`ModuleExports[@js 134217728]] [@js.enum]
    and ts_SymbolFlags_Enum = [`Enum[@js 384]] [@js.enum]
    and ts_SymbolFlags_Variable = [`Variable[@js 3]] [@js.enum]
    and ts_SymbolFlags_Value = [`Value[@js 111551]] [@js.enum]
    and ts_SymbolFlags_Type = [`Type[@js 788968]] [@js.enum]
    and ts_SymbolFlags_Namespace = [`Namespace[@js 1920]] [@js.enum]
    and ts_SymbolFlags_Module = [`Module[@js 1536]] [@js.enum]
    and ts_SymbolFlags_Accessor = [`Accessor[@js 98304]] [@js.enum]
    and ts_SymbolFlags_FunctionScopedVariableExcludes = [`FunctionScopedVariableExcludes[@js 111550]] [@js.enum]
    and ts_SymbolFlags_BlockScopedVariableExcludes = [`BlockScopedVariableExcludes[@js 111551]] [@js.enum]
    and ts_SymbolFlags_ParameterExcludes = [`ParameterExcludes[@js 111551]] [@js.enum]
    and ts_SymbolFlags_PropertyExcludes = [`PropertyExcludes[@js 0]] [@js.enum]
    and ts_SymbolFlags_EnumMemberExcludes = [`EnumMemberExcludes[@js 900095]] [@js.enum]
    and ts_SymbolFlags_FunctionExcludes = [`FunctionExcludes[@js 110991]] [@js.enum]
    and ts_SymbolFlags_ClassExcludes = [`ClassExcludes[@js 899503]] [@js.enum]
    and ts_SymbolFlags_InterfaceExcludes = [`InterfaceExcludes[@js 788872]] [@js.enum]
    and ts_SymbolFlags_RegularEnumExcludes = [`RegularEnumExcludes[@js 899327]] [@js.enum]
    and ts_SymbolFlags_ConstEnumExcludes = [`ConstEnumExcludes[@js 899967]] [@js.enum]
    and ts_SymbolFlags_ValueModuleExcludes = [`ValueModuleExcludes[@js 110735]] [@js.enum]
    and ts_SymbolFlags_NamespaceModuleExcludes = [`NamespaceModuleExcludes[@js 0]] [@js.enum]
    and ts_SymbolFlags_MethodExcludes = [`MethodExcludes[@js 103359]] [@js.enum]
    and ts_SymbolFlags_GetAccessorExcludes = [`GetAccessorExcludes[@js 46015]] [@js.enum]
    and ts_SymbolFlags_SetAccessorExcludes = [`SetAccessorExcludes[@js 78783]] [@js.enum]
    and ts_SymbolFlags_TypeParameterExcludes = [`TypeParameterExcludes[@js 526824]] [@js.enum]
    and ts_SymbolFlags_TypeAliasExcludes = [`TypeAliasExcludes[@js 788968]] [@js.enum]
    and ts_SymbolFlags_AliasExcludes = [`AliasExcludes[@js 2097152]] [@js.enum]
    and ts_SymbolFlags_ModuleMember = [`ModuleMember[@js 2623475]] [@js.enum]
    and ts_SymbolFlags_ExportHasLocal = [`ExportHasLocal[@js 944]] [@js.enum]
    and ts_SymbolFlags_BlockScoped = [`BlockScoped[@js 418]] [@js.enum]
    and ts_SymbolFlags_PropertyOrAccessor = [`PropertyOrAccessor[@js 98308]] [@js.enum]
    and ts_SymbolFlags_ClassMember = [`ClassMember[@js 106500]] [@js.enum]
    and ts_SymbolFormatFlags = [`None[@js 0] | `WriteTypeParametersOrArguments[@js 1] | `UseOnlyExternalAliasing[@js 2] | `AllowAnyNodeKind[@js 4] | `UseAliasDefinedOutsideCurrentScope[@js 8]] [@js.enum]
    and ts_SymbolFormatFlags_None = [`None[@js 0]] [@js.enum]
    and ts_SymbolFormatFlags_WriteTypeParametersOrArguments = [`WriteTypeParametersOrArguments[@js 1]] [@js.enum]
    and ts_SymbolFormatFlags_UseOnlyExternalAliasing = [`UseOnlyExternalAliasing[@js 2]] [@js.enum]
    and ts_SymbolFormatFlags_AllowAnyNodeKind = [`AllowAnyNodeKind[@js 4]] [@js.enum]
    and ts_SymbolFormatFlags_UseAliasDefinedOutsideCurrentScope = [`UseAliasDefinedOutsideCurrentScope[@js 8]] [@js.enum]
    and ts_SymbolTable = ts_Symbol ts_UnderscoreEscapedMap
    and ts_SyntaxKind = [`Unknown[@js 0] | `EndOfFileToken[@js 1] | `SingleLineCommentTrivia[@js 2] | `MultiLineCommentTrivia[@js 3] | `NewLineTrivia[@js 4] | `WhitespaceTrivia[@js 5] | `ShebangTrivia[@js 6] | `ConflictMarkerTrivia[@js 7] | `NumericLiteral[@js 8] | `BigIntLiteral[@js 9] | `StringLiteral[@js 10] | `JsxText[@js 11] | `JsxTextAllWhiteSpaces[@js 12] | `RegularExpressionLiteral[@js 13] | `NoSubstitutionTemplateLiteral[@js 14] | `TemplateHead[@js 15] | `TemplateMiddle[@js 16] | `TemplateTail[@js 17] | `OpenBraceToken[@js 18] | `CloseBraceToken[@js 19] | `OpenParenToken[@js 20] | `CloseParenToken[@js 21] | `OpenBracketToken[@js 22] | `CloseBracketToken[@js 23] | `DotToken[@js 24] | `DotDotDotToken[@js 25] | `SemicolonToken[@js 26] | `CommaToken[@js 27] | `QuestionDotToken[@js 28] | `LessThanToken[@js 29] | `LessThanSlashToken[@js 30] | `GreaterThanToken[@js 31] | `LessThanEqualsToken[@js 32] | `GreaterThanEqualsToken[@js 33] | `EqualsEqualsToken[@js 34] | `ExclamationEqualsToken[@js 35] | `EqualsEqualsEqualsToken[@js 36] | `ExclamationEqualsEqualsToken[@js 37] | `EqualsGreaterThanToken[@js 38] | `PlusToken[@js 39] | `MinusToken[@js 40] | `AsteriskToken[@js 41] | `AsteriskAsteriskToken[@js 42] | `SlashToken[@js 43] | `PercentToken[@js 44] | `PlusPlusToken[@js 45] | `MinusMinusToken[@js 46] | `LessThanLessThanToken[@js 47] | `GreaterThanGreaterThanToken[@js 48] | `GreaterThanGreaterThanGreaterThanToken[@js 49] | `AmpersandToken[@js 50] | `BarToken[@js 51] | `CaretToken[@js 52] | `ExclamationToken[@js 53] | `TildeToken[@js 54] | `AmpersandAmpersandToken[@js 55] | `BarBarToken[@js 56] | `QuestionToken[@js 57] | `ColonToken[@js 58] | `AtToken[@js 59] | `QuestionQuestionToken[@js 60] | `BacktickToken[@js 61] | `EqualsToken[@js 62] | `PlusEqualsToken[@js 63] | `MinusEqualsToken[@js 64] | `AsteriskEqualsToken[@js 65] | `AsteriskAsteriskEqualsToken[@js 66] | `SlashEqualsToken[@js 67] | `PercentEqualsToken[@js 68] | `LessThanLessThanEqualsToken[@js 69] | `GreaterThanGreaterThanEqualsToken[@js 70] | `GreaterThanGreaterThanGreaterThanEqualsToken[@js 71] | `AmpersandEqualsToken[@js 72] | `BarEqualsToken[@js 73] | `BarBarEqualsToken[@js 74] | `AmpersandAmpersandEqualsToken[@js 75] | `QuestionQuestionEqualsToken[@js 76] | `CaretEqualsToken[@js 77] | `Identifier[@js 78] | `PrivateIdentifier[@js 79] | `BreakKeyword[@js 80] | `CaseKeyword[@js 81] | `CatchKeyword[@js 82] | `ClassKeyword[@js 83] | `ConstKeyword[@js 84] | `ContinueKeyword[@js 85] | `DebuggerKeyword[@js 86] | `DefaultKeyword[@js 87] | `DeleteKeyword[@js 88] | `DoKeyword[@js 89] | `ElseKeyword[@js 90] | `EnumKeyword[@js 91] | `ExportKeyword[@js 92] | `ExtendsKeyword[@js 93] | `FalseKeyword[@js 94] | `FinallyKeyword[@js 95] | `ForKeyword[@js 96] | `FunctionKeyword[@js 97] | `IfKeyword[@js 98] | `ImportKeyword[@js 99] | `InKeyword[@js 100] | `InstanceOfKeyword[@js 101] | `NewKeyword[@js 102] | `NullKeyword[@js 103] | `ReturnKeyword[@js 104] | `SuperKeyword[@js 105] | `SwitchKeyword[@js 106] | `ThisKeyword[@js 107] | `ThrowKeyword[@js 108] | `TrueKeyword[@js 109] | `TryKeyword[@js 110] | `TypeOfKeyword[@js 111] | `VarKeyword[@js 112] | `VoidKeyword[@js 113] | `WhileKeyword[@js 114] | `WithKeyword[@js 115] | `ImplementsKeyword[@js 116] | `InterfaceKeyword[@js 117] | `LetKeyword[@js 118] | `PackageKeyword[@js 119] | `PrivateKeyword[@js 120] | `ProtectedKeyword[@js 121] | `PublicKeyword[@js 122] | `StaticKeyword[@js 123] | `YieldKeyword[@js 124] | `AbstractKeyword[@js 125] | `AsKeyword[@js 126] | `AssertsKeyword[@js 127] | `AnyKeyword[@js 128] | `AsyncKeyword[@js 129] | `AwaitKeyword[@js 130] | `BooleanKeyword[@js 131] | `ConstructorKeyword[@js 132] | `DeclareKeyword[@js 133] | `GetKeyword[@js 134] | `InferKeyword[@js 135] | `IntrinsicKeyword[@js 136] | `IsKeyword[@js 137] | `KeyOfKeyword[@js 138] | `ModuleKeyword[@js 139] | `NamespaceKeyword[@js 140] | `NeverKeyword[@js 141] | `ReadonlyKeyword[@js 142] | `RequireKeyword[@js 143] | `NumberKeyword[@js 144] | `ObjectKeyword[@js 145] | `SetKeyword[@js 146] | `StringKeyword[@js 147] | `SymbolKeyword[@js 148] | `TypeKeyword[@js 149] | `UndefinedKeyword[@js 150] | `UniqueKeyword[@js 151] | `UnknownKeyword[@js 152] | `FromKeyword[@js 153] | `GlobalKeyword[@js 154] | `BigIntKeyword[@js 155] | `OfKeyword[@js 156] | `QualifiedName[@js 157] | `ComputedPropertyName[@js 158] | `TypeParameter[@js 159] | `Parameter[@js 160] | `Decorator[@js 161] | `PropertySignature[@js 162] | `PropertyDeclaration[@js 163] | `MethodSignature[@js 164] | `MethodDeclaration[@js 165] | `Constructor[@js 166] | `GetAccessor[@js 167] | `SetAccessor[@js 168] | `CallSignature[@js 169] | `ConstructSignature[@js 170] | `IndexSignature[@js 171] | `TypePredicate[@js 172] | `TypeReference[@js 173] | `FunctionType[@js 174] | `ConstructorType[@js 175] | `TypeQuery[@js 176] | `TypeLiteral[@js 177] | `ArrayType[@js 178] | `TupleType[@js 179] | `OptionalType[@js 180] | `RestType[@js 181] | `UnionType[@js 182] | `IntersectionType[@js 183] | `ConditionalType[@js 184] | `InferType[@js 185] | `ParenthesizedType[@js 186] | `ThisType[@js 187] | `TypeOperator[@js 188] | `IndexedAccessType[@js 189] | `MappedType[@js 190] | `LiteralType[@js 191] | `NamedTupleMember[@js 192] | `TemplateLiteralType[@js 193] | `TemplateLiteralTypeSpan[@js 194] | `ImportType[@js 195] | `ObjectBindingPattern[@js 196] | `ArrayBindingPattern[@js 197] | `BindingElement[@js 198] | `ArrayLiteralExpression[@js 199] | `ObjectLiteralExpression[@js 200] | `PropertyAccessExpression[@js 201] | `ElementAccessExpression[@js 202] | `CallExpression[@js 203] | `NewExpression[@js 204] | `TaggedTemplateExpression[@js 205] | `TypeAssertionExpression[@js 206] | `ParenthesizedExpression[@js 207] | `FunctionExpression[@js 208] | `ArrowFunction[@js 209] | `DeleteExpression[@js 210] | `TypeOfExpression[@js 211] | `VoidExpression[@js 212] | `AwaitExpression[@js 213] | `PrefixUnaryExpression[@js 214] | `PostfixUnaryExpression[@js 215] | `BinaryExpression[@js 216] | `ConditionalExpression[@js 217] | `TemplateExpression[@js 218] | `YieldExpression[@js 219] | `SpreadElement[@js 220] | `ClassExpression[@js 221] | `OmittedExpression[@js 222] | `ExpressionWithTypeArguments[@js 223] | `AsExpression[@js 224] | `NonNullExpression[@js 225] | `MetaProperty[@js 226] | `SyntheticExpression[@js 227] | `TemplateSpan[@js 228] | `SemicolonClassElement[@js 229] | `Block[@js 230] | `EmptyStatement[@js 231] | `VariableStatement[@js 232] | `ExpressionStatement[@js 233] | `IfStatement[@js 234] | `DoStatement[@js 235] | `WhileStatement[@js 236] | `ForStatement[@js 237] | `ForInStatement[@js 238] | `ForOfStatement[@js 239] | `ContinueStatement[@js 240] | `BreakStatement[@js 241] | `ReturnStatement[@js 242] | `WithStatement[@js 243] | `SwitchStatement[@js 244] | `LabeledStatement[@js 245] | `ThrowStatement[@js 246] | `TryStatement[@js 247] | `DebuggerStatement[@js 248] | `VariableDeclaration[@js 249] | `VariableDeclarationList[@js 250] | `FunctionDeclaration[@js 251] | `ClassDeclaration[@js 252] | `InterfaceDeclaration[@js 253] | `TypeAliasDeclaration[@js 254] | `EnumDeclaration[@js 255] | `ModuleDeclaration[@js 256] | `ModuleBlock[@js 257] | `CaseBlock[@js 258] | `NamespaceExportDeclaration[@js 259] | `ImportEqualsDeclaration[@js 260] | `ImportDeclaration[@js 261] | `ImportClause[@js 262] | `NamespaceImport[@js 263] | `NamedImports[@js 264] | `ImportSpecifier[@js 265] | `ExportAssignment[@js 266] | `ExportDeclaration[@js 267] | `NamedExports[@js 268] | `NamespaceExport[@js 269] | `ExportSpecifier[@js 270] | `MissingDeclaration[@js 271] | `ExternalModuleReference[@js 272] | `JsxElement[@js 273] | `JsxSelfClosingElement[@js 274] | `JsxOpeningElement[@js 275] | `JsxClosingElement[@js 276] | `JsxFragment[@js 277] | `JsxOpeningFragment[@js 278] | `JsxClosingFragment[@js 279] | `JsxAttribute[@js 280] | `JsxAttributes[@js 281] | `JsxSpreadAttribute[@js 282] | `JsxExpression[@js 283] | `CaseClause[@js 284] | `DefaultClause[@js 285] | `HeritageClause[@js 286] | `CatchClause[@js 287] | `PropertyAssignment[@js 288] | `ShorthandPropertyAssignment[@js 289] | `SpreadAssignment[@js 290] | `EnumMember[@js 291] | `UnparsedPrologue[@js 292] | `UnparsedPrepend[@js 293] | `UnparsedText[@js 294] | `UnparsedInternalText[@js 295] | `UnparsedSyntheticReference[@js 296] | `SourceFile[@js 297] | `Bundle[@js 298] | `UnparsedSource[@js 299] | `InputFiles[@js 300] | `JSDocTypeExpression[@js 301] | `JSDocNameReference[@js 302] | `JSDocAllType[@js 303] | `JSDocUnknownType[@js 304] | `JSDocNullableType[@js 305] | `JSDocNonNullableType[@js 306] | `JSDocOptionalType[@js 307] | `JSDocFunctionType[@js 308] | `JSDocVariadicType[@js 309] | `JSDocNamepathType[@js 310] | `JSDocComment[@js 311] | `JSDocTypeLiteral[@js 312] | `JSDocSignature[@js 313] | `JSDocTag[@js 314] | `JSDocAugmentsTag[@js 315] | `JSDocImplementsTag[@js 316] | `JSDocAuthorTag[@js 317] | `JSDocDeprecatedTag[@js 318] | `JSDocClassTag[@js 319] | `JSDocPublicTag[@js 320] | `JSDocPrivateTag[@js 321] | `JSDocProtectedTag[@js 322] | `JSDocReadonlyTag[@js 323] | `JSDocCallbackTag[@js 324] | `JSDocEnumTag[@js 325] | `JSDocParameterTag[@js 326] | `JSDocReturnTag[@js 327] | `JSDocThisTag[@js 328] | `JSDocTypeTag[@js 329] | `JSDocTemplateTag[@js 330] | `JSDocTypedefTag[@js 331] | `JSDocSeeTag[@js 332] | `JSDocPropertyTag[@js 333] | `SyntaxList[@js 334] | `NotEmittedStatement[@js 335] | `PartiallyEmittedExpression[@js 336] | `CommaListExpression[@js 337] | `MergeDeclarationMarker[@js 338] | `EndOfDeclarationMarker[@js 339] | `SyntheticReferenceExpression[@js 340] | `Count[@js 341] | `FirstAssignment[@js 62] | `LastAssignment[@js 77] | `FirstCompoundAssignment[@js 63] | `LastCompoundAssignment[@js 77] | `FirstReservedWord[@js 80] | `LastReservedWord[@js 115] | `FirstKeyword[@js 80] | `LastKeyword[@js 156] | `FirstFutureReservedWord[@js 116] | `LastFutureReservedWord[@js 124] | `FirstTypeNode[@js 172] | `LastTypeNode[@js 195] | `FirstPunctuation[@js 18] | `LastPunctuation[@js 77] | `FirstToken[@js 0] | `LastToken[@js 156] | `FirstTriviaToken[@js 2] | `LastTriviaToken[@js 7] | `FirstLiteralToken[@js 8] | `LastLiteralToken[@js 14] | `FirstTemplateToken[@js 14] | `LastTemplateToken[@js 17] | `FirstBinaryOperator[@js 29] | `LastBinaryOperator[@js 77] | `FirstStatement[@js 232] | `LastStatement[@js 248] | `FirstNode[@js 157] | `FirstJSDocNode[@js 301] | `LastJSDocNode[@js 333] | `FirstJSDocTagNode[@js 314] | `LastJSDocTagNode[@js 333]] [@js.enum]
    and ts_SyntaxKind_Unknown = [`Unknown[@js 0]] [@js.enum]
    and ts_SyntaxKind_EndOfFileToken = [`EndOfFileToken[@js 1]] [@js.enum]
    and ts_SyntaxKind_SingleLineCommentTrivia = [`SingleLineCommentTrivia[@js 2]] [@js.enum]
    and ts_SyntaxKind_MultiLineCommentTrivia = [`MultiLineCommentTrivia[@js 3]] [@js.enum]
    and ts_SyntaxKind_NewLineTrivia = [`NewLineTrivia[@js 4]] [@js.enum]
    and ts_SyntaxKind_WhitespaceTrivia = [`WhitespaceTrivia[@js 5]] [@js.enum]
    and ts_SyntaxKind_ShebangTrivia = [`ShebangTrivia[@js 6]] [@js.enum]
    and ts_SyntaxKind_ConflictMarkerTrivia = [`ConflictMarkerTrivia[@js 7]] [@js.enum]
    and ts_SyntaxKind_NumericLiteral = [`NumericLiteral[@js 8]] [@js.enum]
    and ts_SyntaxKind_BigIntLiteral = [`BigIntLiteral[@js 9]] [@js.enum]
    and ts_SyntaxKind_StringLiteral = [`StringLiteral[@js 10]] [@js.enum]
    and ts_SyntaxKind_JsxText = [`JsxText[@js 11]] [@js.enum]
    and ts_SyntaxKind_JsxTextAllWhiteSpaces = [`JsxTextAllWhiteSpaces[@js 12]] [@js.enum]
    and ts_SyntaxKind_RegularExpressionLiteral = [`RegularExpressionLiteral[@js 13]] [@js.enum]
    and ts_SyntaxKind_NoSubstitutionTemplateLiteral = [`NoSubstitutionTemplateLiteral[@js 14]] [@js.enum]
    and ts_SyntaxKind_TemplateHead = [`TemplateHead[@js 15]] [@js.enum]
    and ts_SyntaxKind_TemplateMiddle = [`TemplateMiddle[@js 16]] [@js.enum]
    and ts_SyntaxKind_TemplateTail = [`TemplateTail[@js 17]] [@js.enum]
    and ts_SyntaxKind_OpenBraceToken = [`OpenBraceToken[@js 18]] [@js.enum]
    and ts_SyntaxKind_CloseBraceToken = [`CloseBraceToken[@js 19]] [@js.enum]
    and ts_SyntaxKind_OpenParenToken = [`OpenParenToken[@js 20]] [@js.enum]
    and ts_SyntaxKind_CloseParenToken = [`CloseParenToken[@js 21]] [@js.enum]
    and ts_SyntaxKind_OpenBracketToken = [`OpenBracketToken[@js 22]] [@js.enum]
    and ts_SyntaxKind_CloseBracketToken = [`CloseBracketToken[@js 23]] [@js.enum]
    and ts_SyntaxKind_DotToken = [`DotToken[@js 24]] [@js.enum]
    and ts_SyntaxKind_DotDotDotToken = [`DotDotDotToken[@js 25]] [@js.enum]
    and ts_SyntaxKind_SemicolonToken = [`SemicolonToken[@js 26]] [@js.enum]
    and ts_SyntaxKind_CommaToken = [`CommaToken[@js 27]] [@js.enum]
    and ts_SyntaxKind_QuestionDotToken = [`QuestionDotToken[@js 28]] [@js.enum]
    and ts_SyntaxKind_LessThanToken = [`LessThanToken[@js 29]] [@js.enum]
    and ts_SyntaxKind_LessThanSlashToken = [`LessThanSlashToken[@js 30]] [@js.enum]
    and ts_SyntaxKind_GreaterThanToken = [`GreaterThanToken[@js 31]] [@js.enum]
    and ts_SyntaxKind_LessThanEqualsToken = [`LessThanEqualsToken[@js 32]] [@js.enum]
    and ts_SyntaxKind_GreaterThanEqualsToken = [`GreaterThanEqualsToken[@js 33]] [@js.enum]
    and ts_SyntaxKind_EqualsEqualsToken = [`EqualsEqualsToken[@js 34]] [@js.enum]
    and ts_SyntaxKind_ExclamationEqualsToken = [`ExclamationEqualsToken[@js 35]] [@js.enum]
    and ts_SyntaxKind_EqualsEqualsEqualsToken = [`EqualsEqualsEqualsToken[@js 36]] [@js.enum]
    and ts_SyntaxKind_ExclamationEqualsEqualsToken = [`ExclamationEqualsEqualsToken[@js 37]] [@js.enum]
    and ts_SyntaxKind_EqualsGreaterThanToken = [`EqualsGreaterThanToken[@js 38]] [@js.enum]
    and ts_SyntaxKind_PlusToken = [`PlusToken[@js 39]] [@js.enum]
    and ts_SyntaxKind_MinusToken = [`MinusToken[@js 40]] [@js.enum]
    and ts_SyntaxKind_AsteriskToken = [`AsteriskToken[@js 41]] [@js.enum]
    and ts_SyntaxKind_AsteriskAsteriskToken = [`AsteriskAsteriskToken[@js 42]] [@js.enum]
    and ts_SyntaxKind_SlashToken = [`SlashToken[@js 43]] [@js.enum]
    and ts_SyntaxKind_PercentToken = [`PercentToken[@js 44]] [@js.enum]
    and ts_SyntaxKind_PlusPlusToken = [`PlusPlusToken[@js 45]] [@js.enum]
    and ts_SyntaxKind_MinusMinusToken = [`MinusMinusToken[@js 46]] [@js.enum]
    and ts_SyntaxKind_LessThanLessThanToken = [`LessThanLessThanToken[@js 47]] [@js.enum]
    and ts_SyntaxKind_GreaterThanGreaterThanToken = [`GreaterThanGreaterThanToken[@js 48]] [@js.enum]
    and ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken = [`GreaterThanGreaterThanGreaterThanToken[@js 49]] [@js.enum]
    and ts_SyntaxKind_AmpersandToken = [`AmpersandToken[@js 50]] [@js.enum]
    and ts_SyntaxKind_BarToken = [`BarToken[@js 51]] [@js.enum]
    and ts_SyntaxKind_CaretToken = [`CaretToken[@js 52]] [@js.enum]
    and ts_SyntaxKind_ExclamationToken = [`ExclamationToken[@js 53]] [@js.enum]
    and ts_SyntaxKind_TildeToken = [`TildeToken[@js 54]] [@js.enum]
    and ts_SyntaxKind_AmpersandAmpersandToken = [`AmpersandAmpersandToken[@js 55]] [@js.enum]
    and ts_SyntaxKind_BarBarToken = [`BarBarToken[@js 56]] [@js.enum]
    and ts_SyntaxKind_QuestionToken = [`QuestionToken[@js 57]] [@js.enum]
    and ts_SyntaxKind_ColonToken = [`ColonToken[@js 58]] [@js.enum]
    and ts_SyntaxKind_AtToken = [`AtToken[@js 59]] [@js.enum]
    and ts_SyntaxKind_QuestionQuestionToken = [`QuestionQuestionToken[@js 60]] [@js.enum]
    and ts_SyntaxKind_BacktickToken = [`BacktickToken[@js 61]] [@js.enum]
    and ts_SyntaxKind_EqualsToken = [`EqualsToken[@js 62]] [@js.enum]
    and ts_SyntaxKind_PlusEqualsToken = [`PlusEqualsToken[@js 63]] [@js.enum]
    and ts_SyntaxKind_MinusEqualsToken = [`MinusEqualsToken[@js 64]] [@js.enum]
    and ts_SyntaxKind_AsteriskEqualsToken = [`AsteriskEqualsToken[@js 65]] [@js.enum]
    and ts_SyntaxKind_AsteriskAsteriskEqualsToken = [`AsteriskAsteriskEqualsToken[@js 66]] [@js.enum]
    and ts_SyntaxKind_SlashEqualsToken = [`SlashEqualsToken[@js 67]] [@js.enum]
    and ts_SyntaxKind_PercentEqualsToken = [`PercentEqualsToken[@js 68]] [@js.enum]
    and ts_SyntaxKind_LessThanLessThanEqualsToken = [`LessThanLessThanEqualsToken[@js 69]] [@js.enum]
    and ts_SyntaxKind_GreaterThanGreaterThanEqualsToken = [`GreaterThanGreaterThanEqualsToken[@js 70]] [@js.enum]
    and ts_SyntaxKind_GreaterThanGreaterThanGreaterThanEqualsToken = [`GreaterThanGreaterThanGreaterThanEqualsToken[@js 71]] [@js.enum]
    and ts_SyntaxKind_AmpersandEqualsToken = [`AmpersandEqualsToken[@js 72]] [@js.enum]
    and ts_SyntaxKind_BarEqualsToken = [`BarEqualsToken[@js 73]] [@js.enum]
    and ts_SyntaxKind_BarBarEqualsToken = [`BarBarEqualsToken[@js 74]] [@js.enum]
    and ts_SyntaxKind_AmpersandAmpersandEqualsToken = [`AmpersandAmpersandEqualsToken[@js 75]] [@js.enum]
    and ts_SyntaxKind_QuestionQuestionEqualsToken = [`QuestionQuestionEqualsToken[@js 76]] [@js.enum]
    and ts_SyntaxKind_CaretEqualsToken = [`CaretEqualsToken[@js 77]] [@js.enum]
    and ts_SyntaxKind_Identifier = [`Identifier[@js 78]] [@js.enum]
    and ts_SyntaxKind_PrivateIdentifier = [`PrivateIdentifier[@js 79]] [@js.enum]
    and ts_SyntaxKind_BreakKeyword = [`BreakKeyword[@js 80]] [@js.enum]
    and ts_SyntaxKind_CaseKeyword = [`CaseKeyword[@js 81]] [@js.enum]
    and ts_SyntaxKind_CatchKeyword = [`CatchKeyword[@js 82]] [@js.enum]
    and ts_SyntaxKind_ClassKeyword = [`ClassKeyword[@js 83]] [@js.enum]
    and ts_SyntaxKind_ConstKeyword = [`ConstKeyword[@js 84]] [@js.enum]
    and ts_SyntaxKind_ContinueKeyword = [`ContinueKeyword[@js 85]] [@js.enum]
    and ts_SyntaxKind_DebuggerKeyword = [`DebuggerKeyword[@js 86]] [@js.enum]
    and ts_SyntaxKind_DefaultKeyword = [`DefaultKeyword[@js 87]] [@js.enum]
    and ts_SyntaxKind_DeleteKeyword = [`DeleteKeyword[@js 88]] [@js.enum]
    and ts_SyntaxKind_DoKeyword = [`DoKeyword[@js 89]] [@js.enum]
    and ts_SyntaxKind_ElseKeyword = [`ElseKeyword[@js 90]] [@js.enum]
    and ts_SyntaxKind_EnumKeyword = [`EnumKeyword[@js 91]] [@js.enum]
    and ts_SyntaxKind_ExportKeyword = [`ExportKeyword[@js 92]] [@js.enum]
    and ts_SyntaxKind_ExtendsKeyword = [`ExtendsKeyword[@js 93]] [@js.enum]
    and ts_SyntaxKind_FalseKeyword = [`FalseKeyword[@js 94]] [@js.enum]
    and ts_SyntaxKind_FinallyKeyword = [`FinallyKeyword[@js 95]] [@js.enum]
    and ts_SyntaxKind_ForKeyword = [`ForKeyword[@js 96]] [@js.enum]
    and ts_SyntaxKind_FunctionKeyword = [`FunctionKeyword[@js 97]] [@js.enum]
    and ts_SyntaxKind_IfKeyword = [`IfKeyword[@js 98]] [@js.enum]
    and ts_SyntaxKind_ImportKeyword = [`ImportKeyword[@js 99]] [@js.enum]
    and ts_SyntaxKind_InKeyword = [`InKeyword[@js 100]] [@js.enum]
    and ts_SyntaxKind_InstanceOfKeyword = [`InstanceOfKeyword[@js 101]] [@js.enum]
    and ts_SyntaxKind_NewKeyword = [`NewKeyword[@js 102]] [@js.enum]
    and ts_SyntaxKind_NullKeyword = [`NullKeyword[@js 103]] [@js.enum]
    and ts_SyntaxKind_ReturnKeyword = [`ReturnKeyword[@js 104]] [@js.enum]
    and ts_SyntaxKind_SuperKeyword = [`SuperKeyword[@js 105]] [@js.enum]
    and ts_SyntaxKind_SwitchKeyword = [`SwitchKeyword[@js 106]] [@js.enum]
    and ts_SyntaxKind_ThisKeyword = [`ThisKeyword[@js 107]] [@js.enum]
    and ts_SyntaxKind_ThrowKeyword = [`ThrowKeyword[@js 108]] [@js.enum]
    and ts_SyntaxKind_TrueKeyword = [`TrueKeyword[@js 109]] [@js.enum]
    and ts_SyntaxKind_TryKeyword = [`TryKeyword[@js 110]] [@js.enum]
    and ts_SyntaxKind_TypeOfKeyword = [`TypeOfKeyword[@js 111]] [@js.enum]
    and ts_SyntaxKind_VarKeyword = [`VarKeyword[@js 112]] [@js.enum]
    and ts_SyntaxKind_VoidKeyword = [`VoidKeyword[@js 113]] [@js.enum]
    and ts_SyntaxKind_WhileKeyword = [`WhileKeyword[@js 114]] [@js.enum]
    and ts_SyntaxKind_WithKeyword = [`WithKeyword[@js 115]] [@js.enum]
    and ts_SyntaxKind_ImplementsKeyword = [`ImplementsKeyword[@js 116]] [@js.enum]
    and ts_SyntaxKind_InterfaceKeyword = [`InterfaceKeyword[@js 117]] [@js.enum]
    and ts_SyntaxKind_LetKeyword = [`LetKeyword[@js 118]] [@js.enum]
    and ts_SyntaxKind_PackageKeyword = [`PackageKeyword[@js 119]] [@js.enum]
    and ts_SyntaxKind_PrivateKeyword = [`PrivateKeyword[@js 120]] [@js.enum]
    and ts_SyntaxKind_ProtectedKeyword = [`ProtectedKeyword[@js 121]] [@js.enum]
    and ts_SyntaxKind_PublicKeyword = [`PublicKeyword[@js 122]] [@js.enum]
    and ts_SyntaxKind_StaticKeyword = [`StaticKeyword[@js 123]] [@js.enum]
    and ts_SyntaxKind_YieldKeyword = [`YieldKeyword[@js 124]] [@js.enum]
    and ts_SyntaxKind_AbstractKeyword = [`AbstractKeyword[@js 125]] [@js.enum]
    and ts_SyntaxKind_AsKeyword = [`AsKeyword[@js 126]] [@js.enum]
    and ts_SyntaxKind_AssertsKeyword = [`AssertsKeyword[@js 127]] [@js.enum]
    and ts_SyntaxKind_AnyKeyword = [`AnyKeyword[@js 128]] [@js.enum]
    and ts_SyntaxKind_AsyncKeyword = [`AsyncKeyword[@js 129]] [@js.enum]
    and ts_SyntaxKind_AwaitKeyword = [`AwaitKeyword[@js 130]] [@js.enum]
    and ts_SyntaxKind_BooleanKeyword = [`BooleanKeyword[@js 131]] [@js.enum]
    and ts_SyntaxKind_ConstructorKeyword = [`ConstructorKeyword[@js 132]] [@js.enum]
    and ts_SyntaxKind_DeclareKeyword = [`DeclareKeyword[@js 133]] [@js.enum]
    and ts_SyntaxKind_GetKeyword = [`GetKeyword[@js 134]] [@js.enum]
    and ts_SyntaxKind_InferKeyword = [`InferKeyword[@js 135]] [@js.enum]
    and ts_SyntaxKind_IntrinsicKeyword = [`IntrinsicKeyword[@js 136]] [@js.enum]
    and ts_SyntaxKind_IsKeyword = [`IsKeyword[@js 137]] [@js.enum]
    and ts_SyntaxKind_KeyOfKeyword = [`KeyOfKeyword[@js 138]] [@js.enum]
    and ts_SyntaxKind_ModuleKeyword = [`ModuleKeyword[@js 139]] [@js.enum]
    and ts_SyntaxKind_NamespaceKeyword = [`NamespaceKeyword[@js 140]] [@js.enum]
    and ts_SyntaxKind_NeverKeyword = [`NeverKeyword[@js 141]] [@js.enum]
    and ts_SyntaxKind_ReadonlyKeyword = [`ReadonlyKeyword[@js 142]] [@js.enum]
    and ts_SyntaxKind_RequireKeyword = [`RequireKeyword[@js 143]] [@js.enum]
    and ts_SyntaxKind_NumberKeyword = [`NumberKeyword[@js 144]] [@js.enum]
    and ts_SyntaxKind_ObjectKeyword = [`ObjectKeyword[@js 145]] [@js.enum]
    and ts_SyntaxKind_SetKeyword = [`SetKeyword[@js 146]] [@js.enum]
    and ts_SyntaxKind_StringKeyword = [`StringKeyword[@js 147]] [@js.enum]
    and ts_SyntaxKind_SymbolKeyword = [`SymbolKeyword[@js 148]] [@js.enum]
    and ts_SyntaxKind_TypeKeyword = [`TypeKeyword[@js 149]] [@js.enum]
    and ts_SyntaxKind_UndefinedKeyword = [`UndefinedKeyword[@js 150]] [@js.enum]
    and ts_SyntaxKind_UniqueKeyword = [`UniqueKeyword[@js 151]] [@js.enum]
    and ts_SyntaxKind_UnknownKeyword = [`UnknownKeyword[@js 152]] [@js.enum]
    and ts_SyntaxKind_FromKeyword = [`FromKeyword[@js 153]] [@js.enum]
    and ts_SyntaxKind_GlobalKeyword = [`GlobalKeyword[@js 154]] [@js.enum]
    and ts_SyntaxKind_BigIntKeyword = [`BigIntKeyword[@js 155]] [@js.enum]
    and ts_SyntaxKind_OfKeyword = [`OfKeyword[@js 156]] [@js.enum]
    and ts_SyntaxKind_QualifiedName = [`QualifiedName[@js 157]] [@js.enum]
    and ts_SyntaxKind_ComputedPropertyName = [`ComputedPropertyName[@js 158]] [@js.enum]
    and ts_SyntaxKind_TypeParameter = [`TypeParameter[@js 159]] [@js.enum]
    and ts_SyntaxKind_Parameter = [`Parameter[@js 160]] [@js.enum]
    and ts_SyntaxKind_Decorator = [`Decorator[@js 161]] [@js.enum]
    and ts_SyntaxKind_PropertySignature = [`PropertySignature[@js 162]] [@js.enum]
    and ts_SyntaxKind_PropertyDeclaration = [`PropertyDeclaration[@js 163]] [@js.enum]
    and ts_SyntaxKind_MethodSignature = [`MethodSignature[@js 164]] [@js.enum]
    and ts_SyntaxKind_MethodDeclaration = [`MethodDeclaration[@js 165]] [@js.enum]
    and ts_SyntaxKind_Constructor = [`Constructor[@js 166]] [@js.enum]
    and ts_SyntaxKind_GetAccessor = [`GetAccessor[@js 167]] [@js.enum]
    and ts_SyntaxKind_SetAccessor = [`SetAccessor[@js 168]] [@js.enum]
    and ts_SyntaxKind_CallSignature = [`CallSignature[@js 169]] [@js.enum]
    and ts_SyntaxKind_ConstructSignature = [`ConstructSignature[@js 170]] [@js.enum]
    and ts_SyntaxKind_IndexSignature = [`IndexSignature[@js 171]] [@js.enum]
    and ts_SyntaxKind_TypePredicate = [`TypePredicate[@js 172]] [@js.enum]
    and ts_SyntaxKind_TypeReference = [`TypeReference[@js 173]] [@js.enum]
    and ts_SyntaxKind_FunctionType = [`FunctionType[@js 174]] [@js.enum]
    and ts_SyntaxKind_ConstructorType = [`ConstructorType[@js 175]] [@js.enum]
    and ts_SyntaxKind_TypeQuery = [`TypeQuery[@js 176]] [@js.enum]
    and ts_SyntaxKind_TypeLiteral = [`TypeLiteral[@js 177]] [@js.enum]
    and ts_SyntaxKind_ArrayType = [`ArrayType[@js 178]] [@js.enum]
    and ts_SyntaxKind_TupleType = [`TupleType[@js 179]] [@js.enum]
    and ts_SyntaxKind_OptionalType = [`OptionalType[@js 180]] [@js.enum]
    and ts_SyntaxKind_RestType = [`RestType[@js 181]] [@js.enum]
    and ts_SyntaxKind_UnionType = [`UnionType[@js 182]] [@js.enum]
    and ts_SyntaxKind_IntersectionType = [`IntersectionType[@js 183]] [@js.enum]
    and ts_SyntaxKind_ConditionalType = [`ConditionalType[@js 184]] [@js.enum]
    and ts_SyntaxKind_InferType = [`InferType[@js 185]] [@js.enum]
    and ts_SyntaxKind_ParenthesizedType = [`ParenthesizedType[@js 186]] [@js.enum]
    and ts_SyntaxKind_ThisType = [`ThisType[@js 187]] [@js.enum]
    and ts_SyntaxKind_TypeOperator = [`TypeOperator[@js 188]] [@js.enum]
    and ts_SyntaxKind_IndexedAccessType = [`IndexedAccessType[@js 189]] [@js.enum]
    and ts_SyntaxKind_MappedType = [`MappedType[@js 190]] [@js.enum]
    and ts_SyntaxKind_LiteralType = [`LiteralType[@js 191]] [@js.enum]
    and ts_SyntaxKind_NamedTupleMember = [`NamedTupleMember[@js 192]] [@js.enum]
    and ts_SyntaxKind_TemplateLiteralType = [`TemplateLiteralType[@js 193]] [@js.enum]
    and ts_SyntaxKind_TemplateLiteralTypeSpan = [`TemplateLiteralTypeSpan[@js 194]] [@js.enum]
    and ts_SyntaxKind_ImportType = [`ImportType[@js 195]] [@js.enum]
    and ts_SyntaxKind_ObjectBindingPattern = [`ObjectBindingPattern[@js 196]] [@js.enum]
    and ts_SyntaxKind_ArrayBindingPattern = [`ArrayBindingPattern[@js 197]] [@js.enum]
    and ts_SyntaxKind_BindingElement = [`BindingElement[@js 198]] [@js.enum]
    and ts_SyntaxKind_ArrayLiteralExpression = [`ArrayLiteralExpression[@js 199]] [@js.enum]
    and ts_SyntaxKind_ObjectLiteralExpression = [`ObjectLiteralExpression[@js 200]] [@js.enum]
    and ts_SyntaxKind_PropertyAccessExpression = [`PropertyAccessExpression[@js 201]] [@js.enum]
    and ts_SyntaxKind_ElementAccessExpression = [`ElementAccessExpression[@js 202]] [@js.enum]
    and ts_SyntaxKind_CallExpression = [`CallExpression[@js 203]] [@js.enum]
    and ts_SyntaxKind_NewExpression = [`NewExpression[@js 204]] [@js.enum]
    and ts_SyntaxKind_TaggedTemplateExpression = [`TaggedTemplateExpression[@js 205]] [@js.enum]
    and ts_SyntaxKind_TypeAssertionExpression = [`TypeAssertionExpression[@js 206]] [@js.enum]
    and ts_SyntaxKind_ParenthesizedExpression = [`ParenthesizedExpression[@js 207]] [@js.enum]
    and ts_SyntaxKind_FunctionExpression = [`FunctionExpression[@js 208]] [@js.enum]
    and ts_SyntaxKind_ArrowFunction = [`ArrowFunction[@js 209]] [@js.enum]
    and ts_SyntaxKind_DeleteExpression = [`DeleteExpression[@js 210]] [@js.enum]
    and ts_SyntaxKind_TypeOfExpression = [`TypeOfExpression[@js 211]] [@js.enum]
    and ts_SyntaxKind_VoidExpression = [`VoidExpression[@js 212]] [@js.enum]
    and ts_SyntaxKind_AwaitExpression = [`AwaitExpression[@js 213]] [@js.enum]
    and ts_SyntaxKind_PrefixUnaryExpression = [`PrefixUnaryExpression[@js 214]] [@js.enum]
    and ts_SyntaxKind_PostfixUnaryExpression = [`PostfixUnaryExpression[@js 215]] [@js.enum]
    and ts_SyntaxKind_BinaryExpression = [`BinaryExpression[@js 216]] [@js.enum]
    and ts_SyntaxKind_ConditionalExpression = [`ConditionalExpression[@js 217]] [@js.enum]
    and ts_SyntaxKind_TemplateExpression = [`TemplateExpression[@js 218]] [@js.enum]
    and ts_SyntaxKind_YieldExpression = [`YieldExpression[@js 219]] [@js.enum]
    and ts_SyntaxKind_SpreadElement = [`SpreadElement[@js 220]] [@js.enum]
    and ts_SyntaxKind_ClassExpression = [`ClassExpression[@js 221]] [@js.enum]
    and ts_SyntaxKind_OmittedExpression = [`OmittedExpression[@js 222]] [@js.enum]
    and ts_SyntaxKind_ExpressionWithTypeArguments = [`ExpressionWithTypeArguments[@js 223]] [@js.enum]
    and ts_SyntaxKind_AsExpression = [`AsExpression[@js 224]] [@js.enum]
    and ts_SyntaxKind_NonNullExpression = [`NonNullExpression[@js 225]] [@js.enum]
    and ts_SyntaxKind_MetaProperty = [`MetaProperty[@js 226]] [@js.enum]
    and ts_SyntaxKind_SyntheticExpression = [`SyntheticExpression[@js 227]] [@js.enum]
    and ts_SyntaxKind_TemplateSpan = [`TemplateSpan[@js 228]] [@js.enum]
    and ts_SyntaxKind_SemicolonClassElement = [`SemicolonClassElement[@js 229]] [@js.enum]
    and ts_SyntaxKind_Block = [`Block[@js 230]] [@js.enum]
    and ts_SyntaxKind_EmptyStatement = [`EmptyStatement[@js 231]] [@js.enum]
    and ts_SyntaxKind_VariableStatement = [`VariableStatement[@js 232]] [@js.enum]
    and ts_SyntaxKind_ExpressionStatement = [`ExpressionStatement[@js 233]] [@js.enum]
    and ts_SyntaxKind_IfStatement = [`IfStatement[@js 234]] [@js.enum]
    and ts_SyntaxKind_DoStatement = [`DoStatement[@js 235]] [@js.enum]
    and ts_SyntaxKind_WhileStatement = [`WhileStatement[@js 236]] [@js.enum]
    and ts_SyntaxKind_ForStatement = [`ForStatement[@js 237]] [@js.enum]
    and ts_SyntaxKind_ForInStatement = [`ForInStatement[@js 238]] [@js.enum]
    and ts_SyntaxKind_ForOfStatement = [`ForOfStatement[@js 239]] [@js.enum]
    and ts_SyntaxKind_ContinueStatement = [`ContinueStatement[@js 240]] [@js.enum]
    and ts_SyntaxKind_BreakStatement = [`BreakStatement[@js 241]] [@js.enum]
    and ts_SyntaxKind_ReturnStatement = [`ReturnStatement[@js 242]] [@js.enum]
    and ts_SyntaxKind_WithStatement = [`WithStatement[@js 243]] [@js.enum]
    and ts_SyntaxKind_SwitchStatement = [`SwitchStatement[@js 244]] [@js.enum]
    and ts_SyntaxKind_LabeledStatement = [`LabeledStatement[@js 245]] [@js.enum]
    and ts_SyntaxKind_ThrowStatement = [`ThrowStatement[@js 246]] [@js.enum]
    and ts_SyntaxKind_TryStatement = [`TryStatement[@js 247]] [@js.enum]
    and ts_SyntaxKind_DebuggerStatement = [`DebuggerStatement[@js 248]] [@js.enum]
    and ts_SyntaxKind_VariableDeclaration = [`VariableDeclaration[@js 249]] [@js.enum]
    and ts_SyntaxKind_VariableDeclarationList = [`VariableDeclarationList[@js 250]] [@js.enum]
    and ts_SyntaxKind_FunctionDeclaration = [`FunctionDeclaration[@js 251]] [@js.enum]
    and ts_SyntaxKind_ClassDeclaration = [`ClassDeclaration[@js 252]] [@js.enum]
    and ts_SyntaxKind_InterfaceDeclaration = [`InterfaceDeclaration[@js 253]] [@js.enum]
    and ts_SyntaxKind_TypeAliasDeclaration = [`TypeAliasDeclaration[@js 254]] [@js.enum]
    and ts_SyntaxKind_EnumDeclaration = [`EnumDeclaration[@js 255]] [@js.enum]
    and ts_SyntaxKind_ModuleDeclaration = [`ModuleDeclaration[@js 256]] [@js.enum]
    and ts_SyntaxKind_ModuleBlock = [`ModuleBlock[@js 257]] [@js.enum]
    and ts_SyntaxKind_CaseBlock = [`CaseBlock[@js 258]] [@js.enum]
    and ts_SyntaxKind_NamespaceExportDeclaration = [`NamespaceExportDeclaration[@js 259]] [@js.enum]
    and ts_SyntaxKind_ImportEqualsDeclaration = [`ImportEqualsDeclaration[@js 260]] [@js.enum]
    and ts_SyntaxKind_ImportDeclaration = [`ImportDeclaration[@js 261]] [@js.enum]
    and ts_SyntaxKind_ImportClause = [`ImportClause[@js 262]] [@js.enum]
    and ts_SyntaxKind_NamespaceImport = [`NamespaceImport[@js 263]] [@js.enum]
    and ts_SyntaxKind_NamedImports = [`NamedImports[@js 264]] [@js.enum]
    and ts_SyntaxKind_ImportSpecifier = [`ImportSpecifier[@js 265]] [@js.enum]
    and ts_SyntaxKind_ExportAssignment = [`ExportAssignment[@js 266]] [@js.enum]
    and ts_SyntaxKind_ExportDeclaration = [`ExportDeclaration[@js 267]] [@js.enum]
    and ts_SyntaxKind_NamedExports = [`NamedExports[@js 268]] [@js.enum]
    and ts_SyntaxKind_NamespaceExport = [`NamespaceExport[@js 269]] [@js.enum]
    and ts_SyntaxKind_ExportSpecifier = [`ExportSpecifier[@js 270]] [@js.enum]
    and ts_SyntaxKind_MissingDeclaration = [`MissingDeclaration[@js 271]] [@js.enum]
    and ts_SyntaxKind_ExternalModuleReference = [`ExternalModuleReference[@js 272]] [@js.enum]
    and ts_SyntaxKind_JsxElement = [`JsxElement[@js 273]] [@js.enum]
    and ts_SyntaxKind_JsxSelfClosingElement = [`JsxSelfClosingElement[@js 274]] [@js.enum]
    and ts_SyntaxKind_JsxOpeningElement = [`JsxOpeningElement[@js 275]] [@js.enum]
    and ts_SyntaxKind_JsxClosingElement = [`JsxClosingElement[@js 276]] [@js.enum]
    and ts_SyntaxKind_JsxFragment = [`JsxFragment[@js 277]] [@js.enum]
    and ts_SyntaxKind_JsxOpeningFragment = [`JsxOpeningFragment[@js 278]] [@js.enum]
    and ts_SyntaxKind_JsxClosingFragment = [`JsxClosingFragment[@js 279]] [@js.enum]
    and ts_SyntaxKind_JsxAttribute = [`JsxAttribute[@js 280]] [@js.enum]
    and ts_SyntaxKind_JsxAttributes = [`JsxAttributes[@js 281]] [@js.enum]
    and ts_SyntaxKind_JsxSpreadAttribute = [`JsxSpreadAttribute[@js 282]] [@js.enum]
    and ts_SyntaxKind_JsxExpression = [`JsxExpression[@js 283]] [@js.enum]
    and ts_SyntaxKind_CaseClause = [`CaseClause[@js 284]] [@js.enum]
    and ts_SyntaxKind_DefaultClause = [`DefaultClause[@js 285]] [@js.enum]
    and ts_SyntaxKind_HeritageClause = [`HeritageClause[@js 286]] [@js.enum]
    and ts_SyntaxKind_CatchClause = [`CatchClause[@js 287]] [@js.enum]
    and ts_SyntaxKind_PropertyAssignment = [`PropertyAssignment[@js 288]] [@js.enum]
    and ts_SyntaxKind_ShorthandPropertyAssignment = [`ShorthandPropertyAssignment[@js 289]] [@js.enum]
    and ts_SyntaxKind_SpreadAssignment = [`SpreadAssignment[@js 290]] [@js.enum]
    and ts_SyntaxKind_EnumMember = [`EnumMember[@js 291]] [@js.enum]
    and ts_SyntaxKind_UnparsedPrologue = [`UnparsedPrologue[@js 292]] [@js.enum]
    and ts_SyntaxKind_UnparsedPrepend = [`UnparsedPrepend[@js 293]] [@js.enum]
    and ts_SyntaxKind_UnparsedText = [`UnparsedText[@js 294]] [@js.enum]
    and ts_SyntaxKind_UnparsedInternalText = [`UnparsedInternalText[@js 295]] [@js.enum]
    and ts_SyntaxKind_UnparsedSyntheticReference = [`UnparsedSyntheticReference[@js 296]] [@js.enum]
    and ts_SyntaxKind_SourceFile = [`SourceFile[@js 297]] [@js.enum]
    and ts_SyntaxKind_Bundle = [`Bundle[@js 298]] [@js.enum]
    and ts_SyntaxKind_UnparsedSource = [`UnparsedSource[@js 299]] [@js.enum]
    and ts_SyntaxKind_InputFiles = [`InputFiles[@js 300]] [@js.enum]
    and ts_SyntaxKind_JSDocTypeExpression = [`JSDocTypeExpression[@js 301]] [@js.enum]
    and ts_SyntaxKind_JSDocNameReference = [`JSDocNameReference[@js 302]] [@js.enum]
    and ts_SyntaxKind_JSDocAllType = [`JSDocAllType[@js 303]] [@js.enum]
    and ts_SyntaxKind_JSDocUnknownType = [`JSDocUnknownType[@js 304]] [@js.enum]
    and ts_SyntaxKind_JSDocNullableType = [`JSDocNullableType[@js 305]] [@js.enum]
    and ts_SyntaxKind_JSDocNonNullableType = [`JSDocNonNullableType[@js 306]] [@js.enum]
    and ts_SyntaxKind_JSDocOptionalType = [`JSDocOptionalType[@js 307]] [@js.enum]
    and ts_SyntaxKind_JSDocFunctionType = [`JSDocFunctionType[@js 308]] [@js.enum]
    and ts_SyntaxKind_JSDocVariadicType = [`JSDocVariadicType[@js 309]] [@js.enum]
    and ts_SyntaxKind_JSDocNamepathType = [`JSDocNamepathType[@js 310]] [@js.enum]
    and ts_SyntaxKind_JSDocComment = [`JSDocComment[@js 311]] [@js.enum]
    and ts_SyntaxKind_JSDocTypeLiteral = [`JSDocTypeLiteral[@js 312]] [@js.enum]
    and ts_SyntaxKind_JSDocSignature = [`JSDocSignature[@js 313]] [@js.enum]
    and ts_SyntaxKind_JSDocTag = [`JSDocTag[@js 314]] [@js.enum]
    and ts_SyntaxKind_JSDocAugmentsTag = [`JSDocAugmentsTag[@js 315]] [@js.enum]
    and ts_SyntaxKind_JSDocImplementsTag = [`JSDocImplementsTag[@js 316]] [@js.enum]
    and ts_SyntaxKind_JSDocAuthorTag = [`JSDocAuthorTag[@js 317]] [@js.enum]
    and ts_SyntaxKind_JSDocDeprecatedTag = [`JSDocDeprecatedTag[@js 318]] [@js.enum]
    and ts_SyntaxKind_JSDocClassTag = [`JSDocClassTag[@js 319]] [@js.enum]
    and ts_SyntaxKind_JSDocPublicTag = [`JSDocPublicTag[@js 320]] [@js.enum]
    and ts_SyntaxKind_JSDocPrivateTag = [`JSDocPrivateTag[@js 321]] [@js.enum]
    and ts_SyntaxKind_JSDocProtectedTag = [`JSDocProtectedTag[@js 322]] [@js.enum]
    and ts_SyntaxKind_JSDocReadonlyTag = [`JSDocReadonlyTag[@js 323]] [@js.enum]
    and ts_SyntaxKind_JSDocCallbackTag = [`JSDocCallbackTag[@js 324]] [@js.enum]
    and ts_SyntaxKind_JSDocEnumTag = [`JSDocEnumTag[@js 325]] [@js.enum]
    and ts_SyntaxKind_JSDocParameterTag = [`JSDocParameterTag[@js 326]] [@js.enum]
    and ts_SyntaxKind_JSDocReturnTag = [`JSDocReturnTag[@js 327]] [@js.enum]
    and ts_SyntaxKind_JSDocThisTag = [`JSDocThisTag[@js 328]] [@js.enum]
    and ts_SyntaxKind_JSDocTypeTag = [`JSDocTypeTag[@js 329]] [@js.enum]
    and ts_SyntaxKind_JSDocTemplateTag = [`JSDocTemplateTag[@js 330]] [@js.enum]
    and ts_SyntaxKind_JSDocTypedefTag = [`JSDocTypedefTag[@js 331]] [@js.enum]
    and ts_SyntaxKind_JSDocSeeTag = [`JSDocSeeTag[@js 332]] [@js.enum]
    and ts_SyntaxKind_JSDocPropertyTag = [`JSDocPropertyTag[@js 333]] [@js.enum]
    and ts_SyntaxKind_SyntaxList = [`SyntaxList[@js 334]] [@js.enum]
    and ts_SyntaxKind_NotEmittedStatement = [`NotEmittedStatement[@js 335]] [@js.enum]
    and ts_SyntaxKind_PartiallyEmittedExpression = [`PartiallyEmittedExpression[@js 336]] [@js.enum]
    and ts_SyntaxKind_CommaListExpression = [`CommaListExpression[@js 337]] [@js.enum]
    and ts_SyntaxKind_MergeDeclarationMarker = [`MergeDeclarationMarker[@js 338]] [@js.enum]
    and ts_SyntaxKind_EndOfDeclarationMarker = [`EndOfDeclarationMarker[@js 339]] [@js.enum]
    and ts_SyntaxKind_SyntheticReferenceExpression = [`SyntheticReferenceExpression[@js 340]] [@js.enum]
    and ts_SyntaxKind_Count = [`Count[@js 341]] [@js.enum]
    and ts_SyntaxKind_FirstAssignment = [`FirstAssignment[@js 62]] [@js.enum]
    and ts_SyntaxKind_LastAssignment = [`LastAssignment[@js 77]] [@js.enum]
    and ts_SyntaxKind_FirstCompoundAssignment = [`FirstCompoundAssignment[@js 63]] [@js.enum]
    and ts_SyntaxKind_LastCompoundAssignment = [`LastCompoundAssignment[@js 77]] [@js.enum]
    and ts_SyntaxKind_FirstReservedWord = [`FirstReservedWord[@js 80]] [@js.enum]
    and ts_SyntaxKind_LastReservedWord = [`LastReservedWord[@js 115]] [@js.enum]
    and ts_SyntaxKind_FirstKeyword = [`FirstKeyword[@js 80]] [@js.enum]
    and ts_SyntaxKind_LastKeyword = [`LastKeyword[@js 156]] [@js.enum]
    and ts_SyntaxKind_FirstFutureReservedWord = [`FirstFutureReservedWord[@js 116]] [@js.enum]
    and ts_SyntaxKind_LastFutureReservedWord = [`LastFutureReservedWord[@js 124]] [@js.enum]
    and ts_SyntaxKind_FirstTypeNode = [`FirstTypeNode[@js 172]] [@js.enum]
    and ts_SyntaxKind_LastTypeNode = [`LastTypeNode[@js 195]] [@js.enum]
    and ts_SyntaxKind_FirstPunctuation = [`FirstPunctuation[@js 18]] [@js.enum]
    and ts_SyntaxKind_LastPunctuation = [`LastPunctuation[@js 77]] [@js.enum]
    and ts_SyntaxKind_FirstToken = [`FirstToken[@js 0]] [@js.enum]
    and ts_SyntaxKind_LastToken = [`LastToken[@js 156]] [@js.enum]
    and ts_SyntaxKind_FirstTriviaToken = [`FirstTriviaToken[@js 2]] [@js.enum]
    and ts_SyntaxKind_LastTriviaToken = [`LastTriviaToken[@js 7]] [@js.enum]
    and ts_SyntaxKind_FirstLiteralToken = [`FirstLiteralToken[@js 8]] [@js.enum]
    and ts_SyntaxKind_LastLiteralToken = [`LastLiteralToken[@js 14]] [@js.enum]
    and ts_SyntaxKind_FirstTemplateToken = [`FirstTemplateToken[@js 14]] [@js.enum]
    and ts_SyntaxKind_LastTemplateToken = [`LastTemplateToken[@js 17]] [@js.enum]
    and ts_SyntaxKind_FirstBinaryOperator = [`FirstBinaryOperator[@js 29]] [@js.enum]
    and ts_SyntaxKind_LastBinaryOperator = [`LastBinaryOperator[@js 77]] [@js.enum]
    and ts_SyntaxKind_FirstStatement = [`FirstStatement[@js 232]] [@js.enum]
    and ts_SyntaxKind_LastStatement = [`LastStatement[@js 248]] [@js.enum]
    and ts_SyntaxKind_FirstNode = [`FirstNode[@js 157]] [@js.enum]
    and ts_SyntaxKind_FirstJSDocNode = [`FirstJSDocNode[@js 301]] [@js.enum]
    and ts_SyntaxKind_LastJSDocNode = [`LastJSDocNode[@js 333]] [@js.enum]
    and ts_SyntaxKind_FirstJSDocTagNode = [`FirstJSDocTagNode[@js 314]] [@js.enum]
    and ts_SyntaxKind_LastJSDocTagNode = [`LastJSDocTagNode[@js 333]] [@js.enum]
    and ts_SyntaxList = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_SyntaxList] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SynthesizedComment = [`Ts_CommentRange | `Ts_SynthesizedComment | `Ts_TextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_SyntheticExpression = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SyntheticExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_System = [`Ts_System] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TaggedTemplateExpression = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TaggedTemplateExpression | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TemplateExpression = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_TemplateExpression | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TemplateHead = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateHead | `Ts_TemplateLiteralLikeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TemplateLiteral = ([`U_n_14 of ts_NoSubstitutionTemplateLiteral [@js 14] | `U_n_218 of ts_TemplateExpression [@js 218]] [@js.union on_field "kind"])
    and ts_TemplateLiteralLikeNode = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralLikeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TemplateLiteralToken = ([`U_n_14 of ts_NoSubstitutionTemplateLiteral [@js 14] | `U_n_15 of ts_PseudoLiteralToken [@js 15] | `U_n_16 of ts_PseudoLiteralToken [@js 16] | `U_n_17 of ts_PseudoLiteralToken [@js 17]] [@js.union on_field "kind"])
    and ts_TemplateLiteralType = [`Ts_InstantiableType | `Ts_TemplateLiteralType | `Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TemplateLiteralTypeNode = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralTypeNode | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TemplateLiteralTypeSpan = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralTypeSpan | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TemplateMiddle = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralLikeNode | `Ts_TemplateMiddle] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TemplateSpan = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateSpan] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TemplateTail = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralLikeNode | `Ts_TemplateTail] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TextChange = [`Ts_TextChange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TextChangeRange = [`Ts_TextChangeRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TextInsertion = [`Ts_TextInsertion] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TextRange = [`Ts_TextRange] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TextSpan = [`Ts_TextSpan] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ThisExpression = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_ThisExpression | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ThisTypeNode = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_ThisTypeNode | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ThisTypePredicate = [`Ts_ThisTypePredicate | `Ts_TypePredicateBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_ThrowStatement = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_ThrowStatement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TodoComment = [`Ts_TodoComment] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TodoCommentDescriptor = [`Ts_TodoCommentDescriptor] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'TKind ts_Token = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind] intf
    [@@js.custom { of_js=(fun _TKind -> Obj.magic); to_js=(fun _TKind -> Obj.magic) }]
    and ts_TokenClass = [`Punctuation[@js 0] | `Keyword[@js 1] | `Operator[@js 2] | `Comment[@js 3] | `Whitespace[@js 4] | `Identifier[@js 5] | `NumberLiteral[@js 6] | `BigIntLiteral[@js 7] | `StringLiteral[@js 8] | `RegExpLiteral[@js 9]] [@js.enum]
    and ts_TokenClass_Punctuation = [`Punctuation[@js 0]] [@js.enum]
    and ts_TokenClass_Keyword = [`Keyword[@js 1]] [@js.enum]
    and ts_TokenClass_Operator = [`Operator[@js 2]] [@js.enum]
    and ts_TokenClass_Comment = [`Comment[@js 3]] [@js.enum]
    and ts_TokenClass_Whitespace = [`Whitespace[@js 4]] [@js.enum]
    and ts_TokenClass_Identifier = [`Identifier[@js 5]] [@js.enum]
    and ts_TokenClass_NumberLiteral = [`NumberLiteral[@js 6]] [@js.enum]
    and ts_TokenClass_BigIntLiteral = [`BigIntLiteral[@js 7]] [@js.enum]
    and ts_TokenClass_StringLiteral = [`StringLiteral[@js 8]] [@js.enum]
    and ts_TokenClass_RegExpLiteral = [`RegExpLiteral[@js 9]] [@js.enum]
    and ts_TokenFlags = [`None[@js 0] | `Scientific[@js 16] | `Octal[@js 32] | `HexSpecifier[@js 64] | `BinarySpecifier[@js 128] | `OctalSpecifier[@js 256]] [@js.enum]
    and ts_TokenFlags_None = [`None[@js 0]] [@js.enum]
    and ts_TokenFlags_Scientific = [`Scientific[@js 16]] [@js.enum]
    and ts_TokenFlags_Octal = [`Octal[@js 32]] [@js.enum]
    and ts_TokenFlags_HexSpecifier = [`HexSpecifier[@js 64]] [@js.enum]
    and ts_TokenFlags_BinarySpecifier = [`BinarySpecifier[@js 128]] [@js.enum]
    and ts_TokenFlags_OctalSpecifier = [`OctalSpecifier[@js 256]] [@js.enum]
    and ts_TokenSyntaxKind = ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((ts_SyntaxKind_UnknownKeyword, ts_SyntaxKind_VarKeyword, ts_SyntaxKind_VoidKeyword, ts_SyntaxKind_WhileKeyword, ts_SyntaxKind_WhitespaceTrivia, ts_SyntaxKind_WithKeyword, ts_SyntaxKind_YieldKeyword, ts_TriviaSyntaxKind) union8, ts_SyntaxKind_Unknown) or_, ts_SyntaxKind_UniqueKeyword) or_, ts_SyntaxKind_UndefinedKeyword) or_, ts_SyntaxKind_TypeOfKeyword) or_, ts_SyntaxKind_TypeKeyword) or_, ts_SyntaxKind_TryKeyword) or_, ts_SyntaxKind_TrueKeyword) or_, ts_SyntaxKind_TildeToken) or_, ts_SyntaxKind_ThrowKeyword) or_, ts_SyntaxKind_ThisKeyword) or_, ts_SyntaxKind_TemplateTail) or_, ts_SyntaxKind_TemplateMiddle) or_, ts_SyntaxKind_TemplateHead) or_, ts_SyntaxKind_SymbolKeyword) or_, ts_SyntaxKind_SwitchKeyword) or_, ts_SyntaxKind_SuperKeyword) or_, ts_SyntaxKind_StringLiteral) or_, ts_SyntaxKind_StringKeyword) or_, ts_SyntaxKind_StaticKeyword) or_, ts_SyntaxKind_SlashToken) or_, ts_SyntaxKind_SlashEqualsToken) or_, ts_SyntaxKind_SingleLineCommentTrivia) or_, ts_SyntaxKind_ShebangTrivia) or_, ts_SyntaxKind_SetKeyword) or_, ts_SyntaxKind_SemicolonToken) or_, ts_SyntaxKind_ReturnKeyword) or_, ts_SyntaxKind_RequireKeyword) or_, ts_SyntaxKind_RegularExpressionLiteral) or_, ts_SyntaxKind_ReadonlyKeyword) or_, ts_SyntaxKind_QuestionToken) or_, ts_SyntaxKind_QuestionQuestionToken) or_, ts_SyntaxKind_QuestionDotToken) or_, ts_SyntaxKind_PublicKeyword) or_, ts_SyntaxKind_ProtectedKeyword) or_, ts_SyntaxKind_PrivateKeyword) or_, ts_SyntaxKind_PlusToken) or_, ts_SyntaxKind_PlusPlusToken) or_, ts_SyntaxKind_PlusEqualsToken) or_, ts_SyntaxKind_PercentToken) or_, ts_SyntaxKind_PercentEqualsToken) or_, ts_SyntaxKind_PackageKeyword) or_, ts_SyntaxKind_OpenParenToken) or_, ts_SyntaxKind_OpenBracketToken) or_, ts_SyntaxKind_OpenBraceToken) or_, ts_SyntaxKind_OfKeyword) or_, ts_SyntaxKind_ObjectKeyword) or_, ts_SyntaxKind_NumericLiteral) or_, ts_SyntaxKind_NumberKeyword) or_, ts_SyntaxKind_NullKeyword) or_, ts_SyntaxKind_NoSubstitutionTemplateLiteral) or_, ts_SyntaxKind_NewLineTrivia) or_, ts_SyntaxKind_NewKeyword) or_, ts_SyntaxKind_NeverKeyword) or_, ts_SyntaxKind_NamespaceKeyword) or_, ts_SyntaxKind_MultiLineCommentTrivia) or_, ts_SyntaxKind_ModuleKeyword) or_, ts_SyntaxKind_MinusToken) or_, ts_SyntaxKind_MinusMinusToken) or_, ts_SyntaxKind_MinusEqualsToken) or_, ts_SyntaxKind_LetKeyword) or_, ts_SyntaxKind_LessThanToken) or_, ts_SyntaxKind_LessThanSlashToken) or_, ts_SyntaxKind_LessThanLessThanToken) or_, ts_SyntaxKind_LessThanLessThanEqualsToken) or_, ts_SyntaxKind_LessThanEqualsToken) or_, ts_SyntaxKind_KeyOfKeyword) or_, ts_SyntaxKind_JsxTextAllWhiteSpaces) or_, ts_SyntaxKind_JsxText) or_, ts_SyntaxKind_IsKeyword) or_, ts_SyntaxKind_IntrinsicKeyword) or_, ts_SyntaxKind_InterfaceKeyword) or_, ts_SyntaxKind_InstanceOfKeyword) or_, ts_SyntaxKind_InferKeyword) or_, ts_SyntaxKind_InKeyword) or_, ts_SyntaxKind_ImportKeyword) or_, ts_SyntaxKind_ImplementsKeyword) or_, ts_SyntaxKind_IfKeyword) or_, ts_SyntaxKind_Identifier) or_, ts_SyntaxKind_GreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanEqualsToken) or_, ts_SyntaxKind_GlobalKeyword) or_, ts_SyntaxKind_GetKeyword) or_, ts_SyntaxKind_FunctionKeyword) or_, ts_SyntaxKind_FromKeyword) or_, ts_SyntaxKind_ForKeyword) or_, ts_SyntaxKind_FinallyKeyword) or_, ts_SyntaxKind_FalseKeyword) or_, ts_SyntaxKind_ExtendsKeyword) or_, ts_SyntaxKind_ExportKeyword) or_, ts_SyntaxKind_ExclamationToken) or_, ts_SyntaxKind_ExclamationEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsEqualsToken) or_, ts_SyntaxKind_EqualsToken) or_, ts_SyntaxKind_EqualsGreaterThanToken) or_, ts_SyntaxKind_EqualsEqualsToken) or_, ts_SyntaxKind_EqualsEqualsEqualsToken) or_, ts_SyntaxKind_EnumKeyword) or_, ts_SyntaxKind_EndOfFileToken) or_, ts_SyntaxKind_ElseKeyword) or_, ts_SyntaxKind_DotToken) or_, ts_SyntaxKind_DotDotDotToken) or_, ts_SyntaxKind_DoKeyword) or_, ts_SyntaxKind_DeleteKeyword) or_, ts_SyntaxKind_DefaultKeyword) or_, ts_SyntaxKind_DeclareKeyword) or_, ts_SyntaxKind_DebuggerKeyword) or_, ts_SyntaxKind_ContinueKeyword) or_, ts_SyntaxKind_ConstructorKeyword) or_, ts_SyntaxKind_ConstKeyword) or_, ts_SyntaxKind_ConflictMarkerTrivia) or_, ts_SyntaxKind_CommaToken) or_, ts_SyntaxKind_ColonToken) or_, ts_SyntaxKind_CloseParenToken) or_, ts_SyntaxKind_CloseBracketToken) or_, ts_SyntaxKind_CloseBraceToken) or_, ts_SyntaxKind_ClassKeyword) or_, ts_SyntaxKind_CatchKeyword) or_, ts_SyntaxKind_CaseKeyword) or_, ts_SyntaxKind_CaretToken) or_, ts_SyntaxKind_CaretEqualsToken) or_, ts_SyntaxKind_BreakKeyword) or_, ts_SyntaxKind_BooleanKeyword) or_, ts_SyntaxKind_BigIntLiteral) or_, ts_SyntaxKind_BigIntKeyword) or_, ts_SyntaxKind_BarToken) or_, ts_SyntaxKind_BarEqualsToken) or_, ts_SyntaxKind_BarBarToken) or_, ts_SyntaxKind_BacktickToken) or_, ts_SyntaxKind_AwaitKeyword) or_, ts_SyntaxKind_AtToken) or_, ts_SyntaxKind_AsyncKeyword) or_, ts_SyntaxKind_AsteriskToken) or_, ts_SyntaxKind_AsteriskEqualsToken) or_, ts_SyntaxKind_AsteriskAsteriskToken) or_, ts_SyntaxKind_AsteriskAsteriskEqualsToken) or_, ts_SyntaxKind_AssertsKeyword) or_, ts_SyntaxKind_AsKeyword) or_, ts_SyntaxKind_AnyKeyword) or_, ts_SyntaxKind_AmpersandToken) or_, ts_SyntaxKind_AmpersandEqualsToken) or_, ts_SyntaxKind_AmpersandAmpersandToken) or_, ts_SyntaxKind_AbstractKeyword) or_, ts_PunctuationSyntaxKind) or_, ts_PseudoLiteralSyntaxKind) or_, ts_LiteralSyntaxKind) or_, ts_KeywordSyntaxKind) or_, ([`AbstractKeyword[@js 125] | `AmpersandAmpersandToken[@js 55] | `AmpersandEqualsToken[@js 72] | `AmpersandToken[@js 50] | `AnyKeyword[@js 128] | `AsKeyword[@js 126] | `AssertsKeyword[@js 127] | `AsteriskAsteriskEqualsToken[@js 66] | `AsteriskAsteriskToken[@js 42] | `AsteriskEqualsToken[@js 65] | `AsteriskToken[@js 41] | `AsyncKeyword[@js 129] | `AtToken[@js 59] | `AwaitKeyword[@js 130] | `BacktickToken[@js 61] | `BarBarToken[@js 56] | `BarEqualsToken[@js 73] | `BarToken[@js 51] | `BigIntKeyword[@js 155] | `BigIntLiteral[@js 9] | `BooleanKeyword[@js 131] | `BreakKeyword[@js 80] | `CaretEqualsToken[@js 77] | `CaretToken[@js 52] | `CaseKeyword[@js 81] | `CatchKeyword[@js 82] | `ClassKeyword[@js 83] | `CloseBraceToken[@js 19] | `CloseBracketToken[@js 23] | `CloseParenToken[@js 21] | `ColonToken[@js 58] | `CommaToken[@js 27] | `ConflictMarkerTrivia[@js 7] | `ConstKeyword[@js 84] | `ConstructorKeyword[@js 132] | `ContinueKeyword[@js 85] | `DebuggerKeyword[@js 86] | `DeclareKeyword[@js 133] | `DefaultKeyword[@js 87] | `DeleteKeyword[@js 88] | `DoKeyword[@js 89] | `DotDotDotToken[@js 25] | `DotToken[@js 24] | `ElseKeyword[@js 90] | `EndOfFileToken[@js 1] | `EnumKeyword[@js 91] | `EqualsEqualsEqualsToken[@js 36] | `EqualsEqualsToken[@js 34] | `EqualsGreaterThanToken[@js 38] | `EqualsToken[@js 62] | `ExclamationEqualsEqualsToken[@js 37] | `ExclamationEqualsToken[@js 35] | `ExclamationToken[@js 53] | `ExportKeyword[@js 92] | `ExtendsKeyword[@js 93] | `FalseKeyword[@js 94] | `FinallyKeyword[@js 95] | `ForKeyword[@js 96] | `FromKeyword[@js 153] | `FunctionKeyword[@js 97] | `GetKeyword[@js 134] | `GlobalKeyword[@js 154] | `GreaterThanEqualsToken[@js 33] | `GreaterThanGreaterThanEqualsToken[@js 70] | `GreaterThanGreaterThanGreaterThanEqualsToken[@js 71] | `GreaterThanGreaterThanGreaterThanToken[@js 49] | `GreaterThanGreaterThanToken[@js 48] | `GreaterThanToken[@js 31] | `Identifier[@js 78] | `IfKeyword[@js 98] | `ImplementsKeyword[@js 116] | `ImportKeyword[@js 99] | `InKeyword[@js 100] | `InferKeyword[@js 135] | `InstanceOfKeyword[@js 101] | `InterfaceKeyword[@js 117] | `IntrinsicKeyword[@js 136] | `IsKeyword[@js 137] | `JsxText[@js 11] | `JsxTextAllWhiteSpaces[@js 12] | `KeyOfKeyword[@js 138] | `LessThanEqualsToken[@js 32] | `LessThanLessThanEqualsToken[@js 69] | `LessThanLessThanToken[@js 47] | `LessThanSlashToken[@js 30] | `LessThanToken[@js 29] | `LetKeyword[@js 118] | `MinusEqualsToken[@js 64] | `MinusMinusToken[@js 46] | `MinusToken[@js 40] | `ModuleKeyword[@js 139] | `MultiLineCommentTrivia[@js 3] | `NamespaceKeyword[@js 140] | `NeverKeyword[@js 141] | `NewKeyword[@js 102] | `NewLineTrivia[@js 4] | `NoSubstitutionTemplateLiteral[@js 14] | `NullKeyword[@js 103] | `NumberKeyword[@js 144] | `NumericLiteral[@js 8] | `ObjectKeyword[@js 145] | `OfKeyword[@js 156] | `OpenBraceToken[@js 18] | `OpenBracketToken[@js 22] | `OpenParenToken[@js 20] | `PackageKeyword[@js 119] | `PercentEqualsToken[@js 68] | `PercentToken[@js 44] | `PlusEqualsToken[@js 63] | `PlusPlusToken[@js 45] | `PlusToken[@js 39] | `PrivateKeyword[@js 120] | `ProtectedKeyword[@js 121] | `PublicKeyword[@js 122] | `QuestionDotToken[@js 28] | `QuestionQuestionToken[@js 60] | `QuestionToken[@js 57] | `ReadonlyKeyword[@js 142] | `RegularExpressionLiteral[@js 13] | `RequireKeyword[@js 143] | `ReturnKeyword[@js 104] | `SemicolonToken[@js 26] | `SetKeyword[@js 146] | `ShebangTrivia[@js 6] | `SingleLineCommentTrivia[@js 2] | `SlashEqualsToken[@js 67] | `SlashToken[@js 43] | `StaticKeyword[@js 123] | `StringKeyword[@js 147] | `StringLiteral[@js 10] | `SuperKeyword[@js 105] | `SwitchKeyword[@js 106] | `SymbolKeyword[@js 148] | `TemplateHead[@js 15] | `TemplateMiddle[@js 16] | `TemplateTail[@js 17] | `ThisKeyword[@js 107] | `ThrowKeyword[@js 108] | `TildeToken[@js 54] | `TrueKeyword[@js 109] | `TryKeyword[@js 110] | `TypeKeyword[@js 149] | `TypeOfKeyword[@js 111] | `UndefinedKeyword[@js 150] | `UniqueKeyword[@js 151] | `Unknown[@js 0] | `UnknownKeyword[@js 152] | `VarKeyword[@js 112] | `VoidKeyword[@js 113] | `WhileKeyword[@js 114] | `WhitespaceTrivia[@js 5] | `WithKeyword[@js 115] | `YieldKeyword[@js 124]] [@js.enum])) or_enum
    and ts_TransformationContext = [`Ts_CoreTransformationContext | `Ts_TransformationContext] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'T ts_TransformationResult = [`Ts_TransformationResult of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and 'T ts_Transformer = [`Ts_Transformer of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and 'T ts_TransformerFactory = [`Ts_TransformerFactory of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_TransientIdentifier = [`Ts_Declaration | `Ts_Expression | `Ts_Identifier | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_TransientIdentifier | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TranspileOptions = [`Ts_TranspileOptions] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TranspileOutput = [`Ts_TranspileOutput] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TriviaSyntaxKind = ((ts_SyntaxKind_ConflictMarkerTrivia, ts_SyntaxKind_MultiLineCommentTrivia, ts_SyntaxKind_NewLineTrivia, ts_SyntaxKind_ShebangTrivia, ts_SyntaxKind_SingleLineCommentTrivia, ts_SyntaxKind_WhitespaceTrivia) union6, ([`ConflictMarkerTrivia[@js 7] | `MultiLineCommentTrivia[@js 3] | `NewLineTrivia[@js 4] | `ShebangTrivia[@js 6] | `SingleLineCommentTrivia[@js 2] | `WhitespaceTrivia[@js 5]] [@js.enum])) or_enum
    and ts_TrueLiteral = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_TrueLiteral | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TryStatement = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_TryStatement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TsConfigSourceFile = [`Ts_Declaration | `Ts_JsonSourceFile | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SourceFile | `Ts_TsConfigSourceFile] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TupleType = [`Ts_GenericType | `Ts_InterfaceType | `Ts_ObjectType | `Ts_TupleType | `Ts_Type | `Ts_TypeReference] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TupleTypeNode = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TupleTypeNode | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TupleTypeReference = [`Ts_ObjectType | `Ts_TupleTypeReference | `Ts_Type | `Ts_TypeReference] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_Type = [`Ts_Type] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeAcquisition = [`Ts_TypeAcquisition] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeAliasDeclaration = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_TypeAliasDeclaration] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeAssertion = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeAssertion | `Ts_UnaryExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeChecker = [`Ts_TypeChecker] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeElement = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeElement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeFlags = [`Any[@js 1] | `Unknown[@js 2] | `String[@js 4] | `Number[@js 8] | `Boolean[@js 16] | `Enum[@js 32] | `BigInt[@js 64] | `StringLiteral[@js 128] | `NumberLiteral[@js 256] | `BooleanLiteral[@js 512] | `EnumLiteral[@js 1024] | `BigIntLiteral[@js 2048] | `ESSymbol[@js 4096] | `UniqueESSymbol[@js 8192] | `Void[@js 16384] | `Undefined[@js 32768] | `Null[@js 65536] | `Never[@js 131072] | `TypeParameter[@js 262144] | `Object[@js 524288] | `Union[@js 1048576] | `Intersection[@js 2097152] | `Index[@js 4194304] | `IndexedAccess[@js 8388608] | `Conditional[@js 16777216] | `Substitution[@js 33554432] | `NonPrimitive[@js 67108864] | `TemplateLiteral[@js 134217728] | `StringMapping[@js 268435456] | `Literal[@js 2944] | `Unit[@js 109440] | `StringOrNumberLiteral[@js 384] | `PossiblyFalsy[@js 117724] | `StringLike[@js 402653316] | `NumberLike[@js 296] | `BigIntLike[@js 2112] | `BooleanLike[@js 528] | `EnumLike[@js 1056] | `ESSymbolLike[@js 12288] | `VoidLike[@js 49152] | `UnionOrIntersection[@js 3145728] | `StructuredType[@js 3670016] | `TypeVariable[@js 8650752] | `InstantiableNonPrimitive[@js 58982400] | `InstantiablePrimitive[@js 406847488] | `Instantiable[@js 465829888] | `StructuredOrInstantiable[@js 469499904] | `Narrowable[@js 536624127]] [@js.enum]
    and ts_TypeFlags_Any = [`Any[@js 1]] [@js.enum]
    and ts_TypeFlags_Unknown = [`Unknown[@js 2]] [@js.enum]
    and ts_TypeFlags_String = [`String[@js 4]] [@js.enum]
    and ts_TypeFlags_Number = [`Number[@js 8]] [@js.enum]
    and ts_TypeFlags_Boolean = [`Boolean[@js 16]] [@js.enum]
    and ts_TypeFlags_Enum = [`Enum[@js 32]] [@js.enum]
    and ts_TypeFlags_BigInt = [`BigInt[@js 64]] [@js.enum]
    and ts_TypeFlags_StringLiteral = [`StringLiteral[@js 128]] [@js.enum]
    and ts_TypeFlags_NumberLiteral = [`NumberLiteral[@js 256]] [@js.enum]
    and ts_TypeFlags_BooleanLiteral = [`BooleanLiteral[@js 512]] [@js.enum]
    and ts_TypeFlags_EnumLiteral = [`EnumLiteral[@js 1024]] [@js.enum]
    and ts_TypeFlags_BigIntLiteral = [`BigIntLiteral[@js 2048]] [@js.enum]
    and ts_TypeFlags_ESSymbol = [`ESSymbol[@js 4096]] [@js.enum]
    and ts_TypeFlags_UniqueESSymbol = [`UniqueESSymbol[@js 8192]] [@js.enum]
    and ts_TypeFlags_Void = [`Void[@js 16384]] [@js.enum]
    and ts_TypeFlags_Undefined = [`Undefined[@js 32768]] [@js.enum]
    and ts_TypeFlags_Null = [`Null[@js 65536]] [@js.enum]
    and ts_TypeFlags_Never = [`Never[@js 131072]] [@js.enum]
    and ts_TypeFlags_TypeParameter = [`TypeParameter[@js 262144]] [@js.enum]
    and ts_TypeFlags_Object = [`Object[@js 524288]] [@js.enum]
    and ts_TypeFlags_Union = [`Union[@js 1048576]] [@js.enum]
    and ts_TypeFlags_Intersection = [`Intersection[@js 2097152]] [@js.enum]
    and ts_TypeFlags_Index = [`Index[@js 4194304]] [@js.enum]
    and ts_TypeFlags_IndexedAccess = [`IndexedAccess[@js 8388608]] [@js.enum]
    and ts_TypeFlags_Conditional = [`Conditional[@js 16777216]] [@js.enum]
    and ts_TypeFlags_Substitution = [`Substitution[@js 33554432]] [@js.enum]
    and ts_TypeFlags_NonPrimitive = [`NonPrimitive[@js 67108864]] [@js.enum]
    and ts_TypeFlags_TemplateLiteral = [`TemplateLiteral[@js 134217728]] [@js.enum]
    and ts_TypeFlags_StringMapping = [`StringMapping[@js 268435456]] [@js.enum]
    and ts_TypeFlags_Literal = [`Literal[@js 2944]] [@js.enum]
    and ts_TypeFlags_Unit = [`Unit[@js 109440]] [@js.enum]
    and ts_TypeFlags_StringOrNumberLiteral = [`StringOrNumberLiteral[@js 384]] [@js.enum]
    and ts_TypeFlags_PossiblyFalsy = [`PossiblyFalsy[@js 117724]] [@js.enum]
    and ts_TypeFlags_StringLike = [`StringLike[@js 402653316]] [@js.enum]
    and ts_TypeFlags_NumberLike = [`NumberLike[@js 296]] [@js.enum]
    and ts_TypeFlags_BigIntLike = [`BigIntLike[@js 2112]] [@js.enum]
    and ts_TypeFlags_BooleanLike = [`BooleanLike[@js 528]] [@js.enum]
    and ts_TypeFlags_EnumLike = [`EnumLike[@js 1056]] [@js.enum]
    and ts_TypeFlags_ESSymbolLike = [`ESSymbolLike[@js 12288]] [@js.enum]
    and ts_TypeFlags_VoidLike = [`VoidLike[@js 49152]] [@js.enum]
    and ts_TypeFlags_UnionOrIntersection = [`UnionOrIntersection[@js 3145728]] [@js.enum]
    and ts_TypeFlags_StructuredType = [`StructuredType[@js 3670016]] [@js.enum]
    and ts_TypeFlags_TypeVariable = [`TypeVariable[@js 8650752]] [@js.enum]
    and ts_TypeFlags_InstantiableNonPrimitive = [`InstantiableNonPrimitive[@js 58982400]] [@js.enum]
    and ts_TypeFlags_InstantiablePrimitive = [`InstantiablePrimitive[@js 406847488]] [@js.enum]
    and ts_TypeFlags_Instantiable = [`Instantiable[@js 465829888]] [@js.enum]
    and ts_TypeFlags_StructuredOrInstantiable = [`StructuredOrInstantiable[@js 469499904]] [@js.enum]
    and ts_TypeFlags_Narrowable = [`Narrowable[@js 536624127]] [@js.enum]
    and ts_TypeFormatFlags = [`None[@js 0] | `NoTruncation[@js 1] | `WriteArrayAsGenericType[@js 2] | `UseStructuralFallback[@js 8] | `WriteTypeArgumentsOfSignature[@js 32] | `UseFullyQualifiedType[@js 64] | `SuppressAnyReturnType[@js 256] | `MultilineObjectLiterals[@js 1024] | `WriteClassExpressionAsTypeLiteral[@js 2048] | `UseTypeOfFunction[@js 4096] | `OmitParameterModifiers[@js 8192] | `UseAliasDefinedOutsideCurrentScope[@js 16384] | `UseSingleQuotesForStringLiteralType[@js 268435456] | `NoTypeReduction[@js 536870912] | `AllowUniqueESSymbolType[@js 1048576] | `AddUndefined[@js 131072] | `WriteArrowStyleSignature[@js 262144] | `InArrayType[@js 524288] | `InElementType[@js 2097152] | `InFirstTypeArgument[@js 4194304] | `InTypeAlias[@js 8388608] | `WriteOwnNameForAnyLike[@js 0] | `NodeBuilderFlagsMask[@js 814775659]] [@js.enum]
    and ts_TypeFormatFlags_None = [`None[@js 0]] [@js.enum]
    and ts_TypeFormatFlags_NoTruncation = [`NoTruncation[@js 1]] [@js.enum]
    and ts_TypeFormatFlags_WriteArrayAsGenericType = [`WriteArrayAsGenericType[@js 2]] [@js.enum]
    and ts_TypeFormatFlags_UseStructuralFallback = [`UseStructuralFallback[@js 8]] [@js.enum]
    and ts_TypeFormatFlags_WriteTypeArgumentsOfSignature = [`WriteTypeArgumentsOfSignature[@js 32]] [@js.enum]
    and ts_TypeFormatFlags_UseFullyQualifiedType = [`UseFullyQualifiedType[@js 64]] [@js.enum]
    and ts_TypeFormatFlags_SuppressAnyReturnType = [`SuppressAnyReturnType[@js 256]] [@js.enum]
    and ts_TypeFormatFlags_MultilineObjectLiterals = [`MultilineObjectLiterals[@js 1024]] [@js.enum]
    and ts_TypeFormatFlags_WriteClassExpressionAsTypeLiteral = [`WriteClassExpressionAsTypeLiteral[@js 2048]] [@js.enum]
    and ts_TypeFormatFlags_UseTypeOfFunction = [`UseTypeOfFunction[@js 4096]] [@js.enum]
    and ts_TypeFormatFlags_OmitParameterModifiers = [`OmitParameterModifiers[@js 8192]] [@js.enum]
    and ts_TypeFormatFlags_UseAliasDefinedOutsideCurrentScope = [`UseAliasDefinedOutsideCurrentScope[@js 16384]] [@js.enum]
    and ts_TypeFormatFlags_UseSingleQuotesForStringLiteralType = [`UseSingleQuotesForStringLiteralType[@js 268435456]] [@js.enum]
    and ts_TypeFormatFlags_NoTypeReduction = [`NoTypeReduction[@js 536870912]] [@js.enum]
    and ts_TypeFormatFlags_AllowUniqueESSymbolType = [`AllowUniqueESSymbolType[@js 1048576]] [@js.enum]
    and ts_TypeFormatFlags_AddUndefined = [`AddUndefined[@js 131072]] [@js.enum]
    and ts_TypeFormatFlags_WriteArrowStyleSignature = [`WriteArrowStyleSignature[@js 262144]] [@js.enum]
    and ts_TypeFormatFlags_InArrayType = [`InArrayType[@js 524288]] [@js.enum]
    and ts_TypeFormatFlags_InElementType = [`InElementType[@js 2097152]] [@js.enum]
    and ts_TypeFormatFlags_InFirstTypeArgument = [`InFirstTypeArgument[@js 4194304]] [@js.enum]
    and ts_TypeFormatFlags_InTypeAlias = [`InTypeAlias[@js 8388608]] [@js.enum]
    and ts_TypeFormatFlags_WriteOwnNameForAnyLike = [`WriteOwnNameForAnyLike[@js 0]] [@js.enum]
    and ts_TypeFormatFlags_NodeBuilderFlagsMask = [`NodeBuilderFlagsMask[@js 814775659]] [@js.enum]
    and ts_TypeLiteralNode = [`Ts_Declaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeLiteralNode | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeNode = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeOfExpression = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeOfExpression | `Ts_UnaryExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeOfTag = ([`L_s43_bigint[@js "bigint"] | `L_s44_boolean[@js "boolean"] | `L_s77_function[@js "function"] | `L_s108_number[@js "number"] | `L_s109_object[@js "object"] | `L_s136_string[@js "string"] | `L_s138_symbol[@js "symbol"] | `L_s146_undefined[@js "undefined"]] [@js.enum])
    and ts_TypeOnlyCompatibleAliasDeclaration = ([`U_n_260 of ts_ImportEqualsDeclaration [@js 260] | `U_n_262 of ts_ImportClause [@js 262] | `U_n_263 of ts_NamespaceImport [@js 263] | `U_n_265 of ts_ImportOrExportSpecifier [@js 265] | `U_n_270 of ts_ImportOrExportSpecifier [@js 270]] [@js.union on_field "kind"])
    and ts_TypeOperatorNode = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_TypeOperatorNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeParameter = [`Ts_InstantiableType | `Ts_Type | `Ts_TypeParameter] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeParameterDeclaration = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeParameterDeclaration] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypePredicate = ([`U_n_0 of ts_ThisTypePredicate [@js 0] | `U_n_1 of ts_IdentifierTypePredicate [@js 1] | `U_n_2 of ts_AssertsThisTypePredicate [@js 2] | `U_n_3 of ts_AssertsIdentifierTypePredicate [@js 3]] [@js.union on_field "kind"])
    and ts_TypePredicateBase = [`Ts_TypePredicateBase] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypePredicateKind = [`This[@js 0] | `Identifier[@js 1] | `AssertsThis[@js 2] | `AssertsIdentifier[@js 3]] [@js.enum]
    and ts_TypePredicateKind_This = [`This[@js 0]] [@js.enum]
    and ts_TypePredicateKind_Identifier = [`Identifier[@js 1]] [@js.enum]
    and ts_TypePredicateKind_AssertsThis = [`AssertsThis[@js 2]] [@js.enum]
    and ts_TypePredicateKind_AssertsIdentifier = [`AssertsIdentifier[@js 3]] [@js.enum]
    and ts_TypePredicateNode = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_TypePredicateNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeQueryNode = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_TypeQueryNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeReference = [`Ts_ObjectType | `Ts_Type | `Ts_TypeReference] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeReferenceNode = [`Ts_Node | `Ts_NodeWithTypeArguments | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_TypeReferenceNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_TypeReferenceType = ([`U_n_173 of ts_TypeReferenceNode [@js 173] | `U_n_223 of ts_ExpressionWithTypeArguments [@js 223]] [@js.union on_field "kind"])
    and ts_TypeVariable = ([`U_n_1 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 1] | `U_n_2 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 2] | `U_n_4 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 4] | `U_n_8 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 8] | `U_n_16 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 16] | `U_n_32 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 32] | `U_n_64 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 64] | `U_n_128 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 128] | `U_n_256 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 256] | `U_n_296 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 296] | `U_n_384 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 384] | `U_n_512 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 512] | `U_n_528 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 528] | `U_n_1024 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 1024] | `U_n_1056 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 1056] | `U_n_2048 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 2048] | `U_n_2112 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 2112] | `U_n_2944 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 2944] | `U_n_4096 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 4096] | `U_n_8192 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 8192] | `U_n_12288 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 12288] | `U_n_16384 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 16384] | `U_n_32768 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 32768] | `U_n_49152 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 49152] | `U_n_65536 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 65536] | `U_n_109440 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 109440] | `U_n_117724 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 117724] | `U_n_131072 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 131072] | `U_n_262144 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 262144] | `U_n_524288 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 524288] | `U_n_1048576 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 1048576] | `U_n_2097152 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 2097152] | `U_n_3145728 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 3145728] | `U_n_3670016 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 3670016] | `U_n_4194304 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 4194304] | `U_n_8388608 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 8388608] | `U_n_8650752 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 8650752] | `U_n_16777216 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 16777216] | `U_n_33554432 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 33554432] | `U_n_58982400 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 58982400] | `U_n_67108864 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 67108864] | `U_n_134217728 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 134217728] | `U_n_268435456 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 268435456] | `U_n_402653316 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 402653316] | `U_n_406847488 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 406847488] | `U_n_465829888 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 465829888] | `U_n_469499904 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 469499904] | `U_n_536624127 of (ts_TypeParameter, ts_IndexedAccessType) union2 [@js 536624127]] [@js.union on_field "flags"])
    and ts_UnaryExpression = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'T ts_UnderscoreEscapedMap = [`Ts_Collection of ts___String | `Ts_ESMap of (ts___String * 'T) | `Ts_ReadonlyCollection of ts___String | `Ts_ReadonlyESMap of (ts___String * 'T) | `Ts_ReadonlyUnderscoreEscapedMap of 'T | `Ts_UnderscoreEscapedMap of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_UnionOrIntersectionType = [`Ts_Type | `Ts_UnionOrIntersectionType] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_UnionOrIntersectionTypeNode = ([`U_n_182 of ts_UnionTypeNode [@js 182] | `U_n_183 of ts_IntersectionTypeNode [@js 183]] [@js.union on_field "kind"])
    and ts_UnionType = [`Ts_Type | `Ts_UnionOrIntersectionType | `Ts_UnionType] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_UnionTypeNode = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_UnionTypeNode] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_UniqueESSymbolType = [`Ts_Type | `Ts_UniqueESSymbolType] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_UnparsedNode = ([`U_n_292 of ts_UnparsedPrologue [@js 292] | `U_n_293 of ts_UnparsedSourceText [@js 293] | `U_n_294 of ts_UnparsedSourceText [@js 294] | `U_n_295 of ts_UnparsedSourceText [@js 295] | `U_n_296 of ts_UnparsedSyntheticReference [@js 296]] [@js.union on_field "kind"])
    and ts_UnparsedPrepend = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedPrepend | `Ts_UnparsedSection] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_UnparsedPrologue = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedPrologue | `Ts_UnparsedSection] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_UnparsedSection = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedSection] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_UnparsedSource = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedSource] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_UnparsedSourceText = ([`U_n_293 of ts_UnparsedPrepend [@js 293] | `U_n_294 of ts_UnparsedTextLike [@js 294] | `U_n_295 of ts_UnparsedTextLike [@js 295]] [@js.union on_field "kind"])
    and ts_UnparsedSyntheticReference = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedSection | `Ts_UnparsedSyntheticReference] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_UnparsedTextLike = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedSection | `Ts_UnparsedTextLike] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_UnscopedEmitHelper = [`Ts_EmitHelper | `Ts_UnscopedEmitHelper] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'T ts_UpdateBundleProject = [`Ts_InvalidatedProjectBase | `Ts_UpdateBundleProject of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_UpdateExpression = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_UpdateOutputFileStampsProject = [`Ts_InvalidatedProjectBase | `Ts_UpdateOutputFileStampsProject] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_UserPreferences = [`Ts_UserPreferences] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_VariableDeclaration = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_VariableDeclaration] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_VariableDeclarationList = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_VariableDeclarationList] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_VariableLikeDeclaration = ([`U_n_160 of ts_ParameterDeclaration [@js 160] | `U_n_162 of ts_PropertySignature [@js 162] | `U_n_163 of ts_PropertyDeclaration [@js 163] | `U_n_198 of ts_BindingElement [@js 198] | `U_n_249 of ts_VariableDeclaration [@js 249] | `U_n_280 of ts_JsxAttribute [@js 280] | `U_n_288 of ts_PropertyAssignment [@js 288] | `U_n_289 of ts_ShorthandPropertyAssignment [@js 289] | `U_n_291 of ts_EnumMember [@js 291] | `U_n_326 of ts_JSDocParameterTag [@js 326] | `U_n_333 of ts_JSDocPropertyTag [@js 333]] [@js.union on_field "kind"])
    and ts_VariableStatement = [`Ts_JSDocContainer | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_VariableStatement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'T ts_VisitResult = ('T, 'T) or_array or_undefined
    and ts_Visitor = [`Ts_Visitor] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_VoidExpression = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_VoidExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'T ts_Watch = [`Ts_Watch of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and 'T ts_WatchCompilerHost = [`Ts_ProgramHost of 'T | `Ts_WatchCompilerHost of 'T | `Ts_WatchHost] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and 'T ts_WatchCompilerHostOfConfigFile = [`Ts_ConfigFileDiagnosticsReporter | `Ts_ProgramHost of 'T | `Ts_WatchCompilerHost of 'T | `Ts_WatchCompilerHostOfConfigFile of 'T | `Ts_WatchHost] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and 'T ts_WatchCompilerHostOfFilesAndCompilerOptions = [`Ts_ProgramHost of 'T | `Ts_WatchCompilerHost of 'T | `Ts_WatchCompilerHostOfFilesAndCompilerOptions of 'T | `Ts_WatchHost] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_WatchDirectoryFlags = [`None[@js 0] | `Recursive[@js 1]] [@js.enum]
    and ts_WatchDirectoryFlags_None = [`None[@js 0]] [@js.enum]
    and ts_WatchDirectoryFlags_Recursive = [`Recursive[@js 1]] [@js.enum]
    and ts_WatchDirectoryKind = [`UseFsEvents[@js 0] | `FixedPollingInterval[@js 1] | `DynamicPriorityPolling[@js 2]] [@js.enum]
    and ts_WatchDirectoryKind_UseFsEvents = [`UseFsEvents[@js 0]] [@js.enum]
    and ts_WatchDirectoryKind_FixedPollingInterval = [`FixedPollingInterval[@js 1]] [@js.enum]
    and ts_WatchDirectoryKind_DynamicPriorityPolling = [`DynamicPriorityPolling[@js 2]] [@js.enum]
    and ts_WatchFileKind = [`FixedPollingInterval[@js 0] | `PriorityPollingInterval[@js 1] | `DynamicPriorityPolling[@js 2] | `UseFsEvents[@js 3] | `UseFsEventsOnParentDirectory[@js 4]] [@js.enum]
    and ts_WatchFileKind_FixedPollingInterval = [`FixedPollingInterval[@js 0]] [@js.enum]
    and ts_WatchFileKind_PriorityPollingInterval = [`PriorityPollingInterval[@js 1]] [@js.enum]
    and ts_WatchFileKind_DynamicPriorityPolling = [`DynamicPriorityPolling[@js 2]] [@js.enum]
    and ts_WatchFileKind_UseFsEvents = [`UseFsEvents[@js 3]] [@js.enum]
    and ts_WatchFileKind_UseFsEventsOnParentDirectory = [`UseFsEventsOnParentDirectory[@js 4]] [@js.enum]
    and ts_WatchHost = [`Ts_WatchHost] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'T ts_WatchOfConfigFile = [`Ts_Watch of 'T | `Ts_WatchOfConfigFile of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and 'T ts_WatchOfFilesAndCompilerOptions = [`Ts_Watch of 'T | `Ts_WatchOfFilesAndCompilerOptions of 'T] intf
    [@@js.custom { of_js=(fun _T -> Obj.magic); to_js=(fun _T -> Obj.magic) }]
    and ts_WatchOptions = [`Ts_WatchOptions] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_WatchStatusReporter = [`Ts_WatchStatusReporter] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_WhileStatement = [`Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_WhileStatement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and 'T ts_WithMetadata = ('T, anonymous_interface_8) intersection2
    and ts_WithStatement = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_WithStatement] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_WriteFileCallback = [`Ts_WriteFileCallback] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_YieldExpression = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_YieldExpression] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts___String = (ts_InternalSymbolName, ([`Call[@js "__call"] | `Class[@js "__class"] | `Computed[@js "__computed"] | `Constructor[@js "__constructor"] | `Default[@js "default"] | `ExportEquals[@js "export="] | `ExportStar[@js "__export"] | `Function[@js "__function"] | `Global[@js "__global"] | `Index[@js "__index"] | `JSXAttributes[@js "__jsxAttributes"] | `Missing[@js "__missing"] | `New[@js "__new"] | `Object[@js "__object"] | `Resolving[@js "__resolving__"] | `This[@js "this"] | `Type[@js "__type"]] [@js.enum])) or_enum
    and ts_server_ActionInvalidate = ([`L_s38_action__invalidate[@js "action::invalidate"]] [@js.enum])
    and ts_server_ActionPackageInstalled = ([`L_s39_action__packageInstalled[@js "action::packageInstalled"]] [@js.enum])
    and ts_server_ActionSet = ([`L_s40_action__set[@js "action::set"]] [@js.enum])
    and ts_server_BeginInstallTypes = [`Ts_server_BeginInstallTypes | `Ts_server_InstallTypes | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_server_CloseProject = [`Ts_server_CloseProject | `Ts_server_TypingInstallerRequestWithProjectName] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_server_DiscoverTypings = [`Ts_server_DiscoverTypings | `Ts_server_TypingInstallerRequestWithProjectName] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_server_EndInstallTypes = [`Ts_server_EndInstallTypes | `Ts_server_InstallTypes | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_server_EventBeginInstallTypes = ([`L_s68_event__beginInstallTypes[@js "event::beginInstallTypes"]] [@js.enum])
    and ts_server_EventEndInstallTypes = ([`L_s69_event__endInstallTypes[@js "event::endInstallTypes"]] [@js.enum])
    and ts_server_EventInitializationFailed = ([`L_s70_event__initializationFailed[@js "event::initializationFailed"]] [@js.enum])
    and ts_server_EventTypesRegistry = ([`L_s71_event__typesRegistry[@js "event::typesRegistry"]] [@js.enum])
    and ts_server_InitializationFailedResponse = [`Ts_server_InitializationFailedResponse | `Ts_server_TypingInstallerResponse] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_server_InstallPackageRequest = [`Ts_server_InstallPackageRequest | `Ts_server_TypingInstallerRequestWithProjectName] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_server_InstallTypes = [`Ts_server_InstallTypes | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_server_InvalidateCachedTypings = [`Ts_server_InvalidateCachedTypings | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_server_PackageInstalledResponse = [`Ts_server_PackageInstalledResponse | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_server_ProjectResponse = [`Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_server_SetTypings = [`Ts_server_ProjectResponse | `Ts_server_SetTypings | `Ts_server_TypingInstallerResponse] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_server_TypesRegistryRequest = [`Ts_server_TypesRegistryRequest] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_server_TypingInstallerRequestWithProjectName = [`Ts_server_TypingInstallerRequestWithProjectName] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
    and ts_server_TypingInstallerResponse = [`Ts_server_TypingInstallerResponse] intf
    [@@js.custom { of_js=Obj.magic; to_js=Obj.magic }]
  end
end

open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 : sig
  type t = anonymous_interface_0
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
end
module AnonymousInterface1 : sig
  type t = anonymous_interface_1
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get___bucketKey: t -> any [@@js.get "__bucketKey"]
  val set___bucketKey: t -> any -> unit [@@js.set "__bucketKey"]
end
module AnonymousInterface2 : sig
  type t = anonymous_interface_2
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get___escapedIdentifier: t -> unknown [@@js.get "__escapedIdentifier"]
  val set___escapedIdentifier: t -> unknown -> unit [@@js.set "__escapedIdentifier"]
end
module AnonymousInterface3 : sig
  type t = anonymous_interface_3
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get___pathBrand: t -> any [@@js.get "__pathBrand"]
  val set___pathBrand: t -> any -> unit [@@js.set "__pathBrand"]
end
module AnonymousInterface4 : sig
  type t = anonymous_interface_4
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get__isResolvedConfigFileName: t -> never [@@js.get "_isResolvedConfigFileName"]
  val set__isResolvedConfigFileName: t -> never -> unit [@@js.set "_isResolvedConfigFileName"]
end
module AnonymousInterface5 : sig
  type t = anonymous_interface_5
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_assignable: t -> float [@@js.get "assignable"]
  val set_assignable: t -> float -> unit [@@js.set "assignable"]
  val get_identity: t -> float [@@js.get "identity"]
  val set_identity: t -> float -> unit [@@js.set "identity"]
  val get_subtype: t -> float [@@js.get "subtype"]
  val set_subtype: t -> float -> unit [@@js.set "subtype"]
  val get_strictSubtype: t -> float [@@js.get "strictSubtype"]
  val set_strictSubtype: t -> float -> unit [@@js.set "strictSubtype"]
end
module AnonymousInterface6 : sig
  type t = anonymous_interface_6
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_config: t -> any [@@js.get "config"]
  val set_config: t -> any -> unit [@@js.set "config"]
  val get_error: t -> ts_Diagnostic [@@js.get "error"]
  val set_error: t -> ts_Diagnostic -> unit [@@js.set "error"]
end
module AnonymousInterface7 : sig
  type t = anonymous_interface_7
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_expression: t -> ([`U_n_78 of ts_Identifier [@js 78] | `U_n_201 of ts_PropertyAccessEntityNameExpression [@js 201]] [@js.union on_field "kind"]) [@@js.get "expression"]
end
module AnonymousInterface8 : sig
  type t = anonymous_interface_8
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_metadata: t -> unknown [@@js.get "metadata"]
  val set_metadata: t -> unknown -> unit [@@js.set "metadata"]
end
module AnonymousInterface9 : sig
  type t = anonymous_interface_9
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_options: t -> ts_CompilerOptions [@@js.get "options"]
  val set_options: t -> ts_CompilerOptions -> unit [@@js.set "options"]
  val get_errors: t -> ts_Diagnostic list [@@js.get "errors"]
  val set_errors: t -> ts_Diagnostic list -> unit [@@js.set "errors"]
end
module AnonymousInterface10 : sig
  type t = anonymous_interface_10
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_options: t -> ts_TypeAcquisition [@@js.get "options"]
  val set_options: t -> ts_TypeAcquisition -> unit [@@js.set "options"]
  val get_errors: t -> ts_Diagnostic list [@@js.get "errors"]
  val set_errors: t -> ts_Diagnostic list -> unit [@@js.set "errors"]
end
module AnonymousInterface11 : sig
  type t = anonymous_interface_11
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_parent: t -> ts_ConstructorDeclaration [@@js.get "parent"]
  val set_parent: t -> ts_ConstructorDeclaration -> unit [@@js.set "parent"]
  val get_name: t -> ts_Identifier [@@js.get "name"]
  val set_name: t -> ts_Identifier -> unit [@@js.set "name"]
end
module AnonymousInterface12 : sig
  type t = anonymous_interface_12
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_result: t -> 'T [@@js.get "result"]
  val set_result: t -> 'T -> unit [@@js.set "result"]
  val get_affected: t -> (ts_Program, ts_SourceFile) union2 [@@js.get "affected"]
  val set_affected: t -> (ts_Program, ts_SourceFile) union2 -> unit [@@js.set "affected"]
end
module AnonymousInterface13 : sig
  type t = anonymous_interface_13
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_typeArguments: t -> ts_TypeNode ts_NodeArray [@@js.get "typeArguments"]
  val set_typeArguments: t -> ts_TypeNode ts_NodeArray -> unit [@@js.set "typeArguments"]
end
module AnonymousInterface14 : sig
  type t = anonymous_interface_14
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_value: t -> 'T [@@js.get "value"]
  val set_value: t -> 'T -> unit [@@js.set "value"]
  val get_done: t -> ([`L_b_false[@js false]] [@js.enum]) [@@js.get "done"]
  val set_done: t -> ([`L_b_false] [@js.enum]) -> unit [@@js.set "done"]
end
module AnonymousInterface15 : sig
  type t = anonymous_interface_15
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val get_value: t -> unknown [@@js.get "value"]
  val set_value: t -> unknown -> unit [@@js.set "value"]
  val get_done: t -> ([`L_b_true[@js true]] [@js.enum]) [@@js.get "done"]
  val set_done: t -> ([`L_b_true] [@js.enum]) -> unit [@@js.set "done"]
end
module AnonymousInterface16 : sig
  type t = anonymous_interface_16
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val getExecutingFilePath: t -> string [@@js.call "getExecutingFilePath"]
  val resolvePath: t -> path:string -> string [@@js.call "resolvePath"]
  val fileExists: t -> fileName:string -> bool [@@js.call "fileExists"]
  val readFile: t -> fileName:string -> string or_undefined [@@js.call "readFile"]
end
module AnonymousInterface17 : sig
  type t = anonymous_interface_17
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> condition:ts_Expression -> whenTrue:ts_Expression -> whenFalse:ts_Expression -> ts_ConditionalExpression [@@js.apply]
  val apply': t -> condition:ts_Expression -> questionToken:ts_QuestionToken -> whenTrue:ts_Expression -> colonToken:ts_ColonToken -> whenFalse:ts_Expression -> ts_ConditionalExpression [@@js.apply]
end
module AnonymousInterface18 : sig
  type t = anonymous_interface_18
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> ?expression:ts_Expression or_undefined -> unit -> ts_YieldExpression [@@js.apply]
  val apply': t -> asteriskToken:ts_AsteriskToken or_undefined -> expression:ts_Expression -> ts_YieldExpression [@@js.apply]
end
module AnonymousInterface19 : sig
  type t = anonymous_interface_19
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> modifiers:ts_Modifier list or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> equalsGreaterThanToken:ts_EqualsGreaterThanToken or_undefined -> body:ts_ConciseBody -> ts_ArrowFunction [@@js.apply]
  val apply': t -> modifiers:ts_Modifier list or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_ConciseBody -> ts_ArrowFunction [@@js.apply]
end
module AnonymousInterface20 : sig
  type t = anonymous_interface_20
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> name:ts_BindingName or_string -> ?type_:ts_TypeNode or_undefined -> ?initializer_:ts_Expression or_undefined -> unit -> ts_VariableDeclaration [@@js.apply]
  val apply': t -> name:ts_BindingName or_string -> exclamationToken:ts_ExclamationToken or_undefined -> type_:ts_TypeNode or_undefined -> initializer_:ts_Expression or_undefined -> ts_VariableDeclaration [@@js.apply]
end
module AnonymousInterface21 : sig
  type t = anonymous_interface_21
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> node:ts_ArrowFunction -> modifiers:ts_Modifier list or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> equalsGreaterThanToken:ts_EqualsGreaterThanToken -> body:ts_ConciseBody -> ts_ArrowFunction [@@js.apply]
  val apply': t -> node:ts_ArrowFunction -> modifiers:ts_Modifier list or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_ConciseBody -> ts_ArrowFunction [@@js.apply]
end
module AnonymousInterface22 : sig
  type t = anonymous_interface_22
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> node:ts_TaggedTemplateExpression -> tag:ts_Expression -> template:ts_TemplateLiteral -> ts_TaggedTemplateExpression [@@js.apply]
  val apply': t -> node:ts_TaggedTemplateExpression -> tag:ts_Expression -> typeArguments:ts_TypeNode list or_undefined -> template:ts_TemplateLiteral -> ts_TaggedTemplateExpression [@@js.apply]
end
module AnonymousInterface23 : sig
  type t = anonymous_interface_23
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> node:ts_VariableDeclaration -> name:ts_BindingName -> type_:ts_TypeNode or_undefined -> initializer_:ts_Expression or_undefined -> ts_VariableDeclaration [@@js.apply]
  val apply': t -> node:ts_VariableDeclaration -> name:ts_BindingName -> exclamationToken:ts_ExclamationToken or_undefined -> type_:ts_TypeNode or_undefined -> initializer_:ts_Expression or_undefined -> ts_VariableDeclaration [@@js.apply]
end
module AnonymousInterface24 : sig
  type t = anonymous_interface_24
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> nodes:'T ts_NodeArray -> visitor:ts_Visitor or_undefined -> ?test:(node:ts_Node -> bool) -> ?start:float -> ?count:float -> unit -> 'T ts_NodeArray [@@js.apply]
end
module AnonymousInterface25 : sig
  type t = anonymous_interface_25
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> statements:ts_Statement list -> ts_CallExpression [@@js.apply]
  val apply': t -> statements:ts_Statement list -> param:ts_ParameterDeclaration -> paramValue:ts_Expression -> ts_CallExpression [@@js.apply]
end
module AnonymousInterface26 : sig
  type t = anonymous_interface_26
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> tag:ts_Expression -> template:ts_TemplateLiteral -> ts_TaggedTemplateExpression [@@js.apply]
  val apply': t -> tag:ts_Expression -> typeArguments:ts_TypeNode list or_undefined -> template:ts_TemplateLiteral -> ts_TaggedTemplateExpression [@@js.apply]
end
module AnonymousInterface27 : sig
  type t = anonymous_interface_27
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> text:string -> ?isSingleQuote:bool or_undefined -> unit -> ts_StringLiteral [@@js.apply]
  val apply': t -> text:string -> ?isSingleQuote:bool or_undefined -> ?hasExtendedUnicodeEscape:bool or_undefined -> unit -> ts_StringLiteral [@@js.apply]
end
module AnonymousInterface28 : sig
  type t = anonymous_interface_28
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> text:string -> ?rawText:string or_undefined -> unit -> ts_NoSubstitutionTemplateLiteral [@@js.apply]
  val apply': t -> text:string or_undefined -> rawText:string -> ts_NoSubstitutionTemplateLiteral [@@js.apply]
end
module AnonymousInterface29 : sig
  type t = anonymous_interface_29
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> text:string -> ?rawText:string or_undefined -> ?templateFlags:ts_TokenFlags or_undefined -> unit -> ts_TemplateHead [@@js.apply]
  val apply': t -> text:string or_undefined -> rawText:string -> ?templateFlags:ts_TokenFlags or_undefined -> unit -> ts_TemplateHead [@@js.apply]
end
module AnonymousInterface30 : sig
  type t = anonymous_interface_30
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> text:string -> ?rawText:string or_undefined -> ?templateFlags:ts_TokenFlags or_undefined -> unit -> ts_TemplateMiddle [@@js.apply]
  val apply': t -> text:string or_undefined -> rawText:string -> ?templateFlags:ts_TokenFlags or_undefined -> unit -> ts_TemplateMiddle [@@js.apply]
end
module AnonymousInterface31 : sig
  type t = anonymous_interface_31
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> text:string -> ?rawText:string or_undefined -> ?templateFlags:ts_TokenFlags or_undefined -> unit -> ts_TemplateTail [@@js.apply]
  val apply': t -> text:string or_undefined -> rawText:string -> ?templateFlags:ts_TokenFlags or_undefined -> unit -> ts_TemplateTail [@@js.apply]
end
module AnonymousInterface32 : sig
  type t = anonymous_interface_32
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> type_:ts_TypeNode -> ts_TypeOperatorNode [@@js.apply]
  val apply': t -> operator:((ts_SyntaxKind_KeyOfKeyword, ts_SyntaxKind_ReadonlyKeyword, ts_SyntaxKind_UniqueKeyword) union3, ([`KeyOfKeyword | `ReadonlyKeyword | `UniqueKeyword] [@js.enum])) or_enum -> type_:ts_TypeNode -> ts_TypeOperatorNode [@@js.apply]
end
module AnonymousInterface33 : sig
  type t = anonymous_interface_33
  val t_to_js: t -> Ojs.t
  val t_of_js: Ojs.t -> t
  type t_0 = t
  val t_0_to_js: t_0 -> Ojs.t
  val t_0_of_js: Ojs.t -> t_0
  val apply: t -> value:([`U_n_8 of ts_NumericLiteral  | `U_n_10 of ts_StringLiteral  | `U_n_14 of ts_NoSubstitutionTemplateLiteral  | `U_n_78 of ts_Identifier ] [@js.union on_field "kind"]) or_string -> ts_StringLiteral [@@js.apply]
  val apply': t -> value:ts_PseudoBigInt or_number -> ts_NumericLiteral [@@js.apply]
  val apply'': t -> value:bool -> ts_BooleanLiteral [@@js.apply]
  val apply''': t -> value:ts_PseudoBigInt or_boolean or_string or_number -> ts_PrimaryExpression [@@js.apply]
end
module[@js.scope "ts"] Ts : sig
  val versionMajorMinor: string [@@js.global "versionMajorMinor"]
  (** The version of the TypeScript compiler release *)
  val version: string [@@js.global "version"]
  (**
    Type of objects whose values are all of the same type.
    The `in` and `for-in` operators can *not* be safely used,
    since `Object.prototype` may be modified by outside code.
  *)
  module[@js.scope "MapLike"] MapLike : sig
    type 'T t = 'T ts_MapLike
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_MapLike of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_MapLike of 'T]
    ]
    val get: 'T t -> string -> 'T [@@js.index_get]
    val set: 'T t -> string -> 'T -> unit [@@js.index_set]
  end
  module[@js.scope "SortedReadonlyArray"] SortedReadonlyArray : sig
    type 'T t = 'T ts_SortedReadonlyArray
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_SortedReadonlyArray of 'T | `Array of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_SortedReadonlyArray of 'T | `Array of 'T]
    ]
    val get___sortedArrayBrand: 'T t -> any [@@js.get "__sortedArrayBrand"]
    val set___sortedArrayBrand: 'T t -> any -> unit [@@js.set "__sortedArrayBrand"]
    val cast: 'T t -> 'T list [@@js.cast]
  end
  module[@js.scope "SortedArray"] SortedArray : sig
    type 'T t = 'T ts_SortedArray
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_SortedArray of 'T | `Array of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_SortedArray of 'T | `Array of 'T]
    ]
    val get___sortedArrayBrand: 'T t -> any [@@js.get "__sortedArrayBrand"]
    val set___sortedArrayBrand: 'T t -> any -> unit [@@js.set "__sortedArrayBrand"]
    val cast: 'T t -> 'T list [@@js.cast]
  end
  (** Common read methods for ES6 Map/Set. *)
  module[@js.scope "ReadonlyCollection"] ReadonlyCollection : sig
    type 'K t = 'K ts_ReadonlyCollection
    val t_to_js: ('K -> Ojs.t) -> 'K t -> Ojs.t
    val t_of_js: (Ojs.t -> 'K) -> Ojs.t -> 'K t
    type 'K t_1 = 'K t
    val t_1_to_js: ('K -> Ojs.t) -> 'K t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'K) -> Ojs.t -> 'K t_1
    [@@@js.stop]
    type 'K tags = [`Ts_ReadonlyCollection of 'K]
    [@@@js.start]
    [@@@js.implem 
      type 'K tags = [`Ts_ReadonlyCollection of 'K]
    ]
    val get_size: 'K t -> float [@@js.get "size"]
    val has: 'K t -> key:'K -> bool [@@js.call "has"]
    val keys: 'K t -> 'K ts_Iterator [@@js.call "keys"]
  end
  (** Common write methods for ES6 Map/Set. *)
  module[@js.scope "Collection"] Collection : sig
    type 'K t = 'K ts_Collection
    val t_to_js: ('K -> Ojs.t) -> 'K t -> Ojs.t
    val t_of_js: (Ojs.t -> 'K) -> Ojs.t -> 'K t
    type 'K t_1 = 'K t
    val t_1_to_js: ('K -> Ojs.t) -> 'K t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'K) -> Ojs.t -> 'K t_1
    [@@@js.stop]
    type 'K tags = [`Ts_Collection of 'K | `Ts_ReadonlyCollection of 'K]
    [@@@js.start]
    [@@@js.implem 
      type 'K tags = [`Ts_Collection of 'K | `Ts_ReadonlyCollection of 'K]
    ]
    val delete: 'K t -> key:'K -> bool [@@js.call "delete"]
    val clear: 'K t -> unit [@@js.call "clear"]
    val cast: 'K t -> 'K ts_ReadonlyCollection [@@js.cast]
  end
  (** ES6 Map interface, only read methods included. *)
  module[@js.scope "ReadonlyESMap"] ReadonlyESMap : sig
    type ('K, 'V) t = ('K, 'V) ts_ReadonlyESMap
    val t_to_js: ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t -> Ojs.t
    val t_of_js: (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t
    type ('K, 'V) t_2 = ('K, 'V) t
    val t_2_to_js: ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t_2 -> Ojs.t
    val t_2_of_js: (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t_2
    [@@@js.stop]
    type ('K, 'V) tags = [`Ts_ReadonlyCollection of 'K | `Ts_ReadonlyESMap of ('K * 'V)]
    [@@@js.start]
    [@@@js.implem 
      type ('K, 'V) tags = [`Ts_ReadonlyCollection of 'K | `Ts_ReadonlyESMap of ('K * 'V)]
    ]
    val get_: ('K, 'V) t -> key:'K -> 'V or_undefined [@@js.call "get"]
    val values: ('K, 'V) t -> 'V ts_Iterator [@@js.call "values"]
    val entries: ('K, 'V) t -> ('K * 'V) ts_Iterator [@@js.call "entries"]
    val forEach: ('K, 'V) t -> action:(value:'V -> key:'K -> unit) -> unit [@@js.call "forEach"]
    val cast: ('K, 'V) t -> 'K ts_ReadonlyCollection [@@js.cast]
  end
  (** ES6 Map interface, only read methods included. *)
  module[@js.scope "ReadonlyMap"] ReadonlyMap : sig
    type 'T t = 'T ts_ReadonlyMap
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_ReadonlyCollection of string | `Ts_ReadonlyESMap of (string * 'T) | `Ts_ReadonlyMap of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_ReadonlyCollection of string | `Ts_ReadonlyESMap of (string * 'T) | `Ts_ReadonlyMap of 'T]
    ]
    val cast: 'T t -> (string, 'T) ts_ReadonlyESMap [@@js.cast]
  end
  (** ES6 Map interface. *)
  module[@js.scope "ESMap"] ESMap : sig
    type ('K, 'V) t = ('K, 'V) ts_ESMap
    val t_to_js: ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t -> Ojs.t
    val t_of_js: (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t
    type ('K, 'V) t_2 = ('K, 'V) t
    val t_2_to_js: ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t_2 -> Ojs.t
    val t_2_of_js: (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t_2
    [@@@js.stop]
    type ('K, 'V) tags = [`Ts_Collection of 'K | `Ts_ESMap of ('K * 'V) | `Ts_ReadonlyCollection of 'K | `Ts_ReadonlyESMap of ('K * 'V)]
    [@@@js.start]
    [@@@js.implem 
      type ('K, 'V) tags = [`Ts_Collection of 'K | `Ts_ESMap of ('K * 'V) | `Ts_ReadonlyCollection of 'K | `Ts_ReadonlyESMap of ('K * 'V)]
    ]
    val set_: ('K, 'V) t -> key:'K -> value:'V -> ('K, 'V) t [@@js.call "set"]
    val cast: ('K, 'V) t -> ('K, 'V) ts_ReadonlyESMap [@@js.cast]
    val cast': ('K, 'V) t -> 'K ts_Collection [@@js.cast]
  end
  (** ES6 Map interface. *)
  module[@js.scope "Map"] Map : sig
    type 'T t = 'T ts_Map
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_Collection of string | `Ts_ESMap of (string * 'T) | `Ts_Map of 'T | `Ts_ReadonlyCollection of string | `Ts_ReadonlyESMap of (string * 'T)]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_Collection of string | `Ts_ESMap of (string * 'T) | `Ts_Map of 'T | `Ts_ReadonlyCollection of string | `Ts_ReadonlyESMap of (string * 'T)]
    ]
    val cast: 'T t -> (string, 'T) ts_ESMap [@@js.cast]
  end
  (** ES6 Set interface, only read methods included. *)
  module[@js.scope "ReadonlySet"] ReadonlySet : sig
    type 'T t = 'T ts_ReadonlySet
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_ReadonlyCollection of 'T | `Ts_ReadonlySet of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_ReadonlyCollection of 'T | `Ts_ReadonlySet of 'T]
    ]
    val has: 'T t -> value:'T -> bool [@@js.call "has"]
    val values: 'T t -> 'T ts_Iterator [@@js.call "values"]
    val entries: 'T t -> ('T * 'T) ts_Iterator [@@js.call "entries"]
    val forEach: 'T t -> action:(value:'T -> key:'T -> unit) -> unit [@@js.call "forEach"]
    val cast: 'T t -> 'T ts_ReadonlyCollection [@@js.cast]
  end
  (** ES6 Set interface. *)
  module[@js.scope "Set"] Set : sig
    type 'T t = 'T ts_Set
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_Collection of 'T | `Ts_ReadonlyCollection of 'T | `Ts_ReadonlySet of 'T | `Ts_Set of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_Collection of 'T | `Ts_ReadonlyCollection of 'T | `Ts_ReadonlySet of 'T | `Ts_Set of 'T]
    ]
    val add: 'T t -> value:'T -> 'T t [@@js.call "add"]
    val delete: 'T t -> value:'T -> bool [@@js.call "delete"]
    val cast: 'T t -> 'T ts_ReadonlySet [@@js.cast]
    val cast': 'T t -> 'T ts_Collection [@@js.cast]
  end
  (** ES6 Iterator type. *)
  module[@js.scope "Iterator"] Iterator : sig
    type 'T t = 'T ts_Iterator
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_Iterator of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_Iterator of 'T]
    ]
    val next: 'T t -> ([`U_b_false of anonymous_interface_14 [@js false] | `U_b_true of anonymous_interface_15 [@js true]] [@js.union on_field "done"]) [@@js.call "next"]
  end
  (** Array that is only intended to be pushed to, never read. *)
  module[@js.scope "Push"] Push : sig
    type 'T t = 'T ts_Push
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_Push of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_Push of 'T]
    ]
    val push: 'T t -> values:('T list [@js.variadic]) -> unit [@@js.call "push"]
  end
  module Path : sig
    type t = ts_Path
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Path]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Path]
    ]
  end
  module[@js.scope "TextRange"] TextRange : sig
    type t = ts_TextRange
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TextRange]
    ]
    val get_pos: t -> float [@@js.get "pos"]
    val set_pos: t -> float -> unit [@@js.set "pos"]
    val get_end: t -> float [@@js.get "end"]
    val set_end: t -> float -> unit [@@js.set "end"]
  end
  module[@js.scope "ReadonlyTextRange"] ReadonlyTextRange : sig
    type t = ts_ReadonlyTextRange
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ReadonlyTextRange]
    ]
    val get_pos: t -> float [@@js.get "pos"]
    val get_end: t -> float [@@js.get "end"]
  end
  module SyntaxKind : sig
    type t = ts_SyntaxKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module TriviaSyntaxKind : sig
    type t = ts_TriviaSyntaxKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TriviaSyntaxKind]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TriviaSyntaxKind]
    ]
  end
  module LiteralSyntaxKind : sig
    type t = ts_LiteralSyntaxKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LiteralSyntaxKind]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LiteralSyntaxKind]
    ]
  end
  module PseudoLiteralSyntaxKind : sig
    type t = ts_PseudoLiteralSyntaxKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PseudoLiteralSyntaxKind]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PseudoLiteralSyntaxKind]
    ]
  end
  module PunctuationSyntaxKind : sig
    type t = ts_PunctuationSyntaxKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PunctuationSyntaxKind]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PunctuationSyntaxKind]
    ]
  end
  module KeywordSyntaxKind : sig
    type t = ts_KeywordSyntaxKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_KeywordSyntaxKind]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_KeywordSyntaxKind]
    ]
  end
  module ModifierSyntaxKind : sig
    type t = ts_ModifierSyntaxKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ModifierSyntaxKind]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ModifierSyntaxKind]
    ]
  end
  module KeywordTypeSyntaxKind : sig
    type t = ts_KeywordTypeSyntaxKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_KeywordTypeSyntaxKind]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_KeywordTypeSyntaxKind]
    ]
  end
  module TokenSyntaxKind : sig
    type t = ts_TokenSyntaxKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TokenSyntaxKind]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TokenSyntaxKind]
    ]
  end
  module JsxTokenSyntaxKind : sig
    type t = ts_JsxTokenSyntaxKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JsxTokenSyntaxKind]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JsxTokenSyntaxKind]
    ]
  end
  module JSDocSyntaxKind : sig
    type t = ts_JSDocSyntaxKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocSyntaxKind]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocSyntaxKind]
    ]
  end
  module NodeFlags : sig
    type t = ts_NodeFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module ModifierFlags : sig
    type t = ts_ModifierFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module JsxFlags : sig
    type t = ts_JsxFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "Node"] Node : sig
    type t = ts_Node
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val getSourceFile: t -> ts_SourceFile [@@js.call "getSourceFile"]
    val getChildCount: t -> ?sourceFile:ts_SourceFile -> unit -> float [@@js.call "getChildCount"]
    val getChildAt: t -> index:float -> ?sourceFile:ts_SourceFile -> unit -> t [@@js.call "getChildAt"]
    val getChildren: t -> ?sourceFile:ts_SourceFile -> unit -> t list [@@js.call "getChildren"]
    val getStart: t -> ?sourceFile:ts_SourceFile -> ?includeJsDocComment:bool -> unit -> float [@@js.call "getStart"]
    val getFullStart: t -> float [@@js.call "getFullStart"]
    val getEnd: t -> float [@@js.call "getEnd"]
    val getWidth: t -> ?sourceFile:ts_SourceFileLike -> unit -> float [@@js.call "getWidth"]
    val getFullWidth: t -> float [@@js.call "getFullWidth"]
    val getLeadingTriviaWidth: t -> ?sourceFile:ts_SourceFile -> unit -> float [@@js.call "getLeadingTriviaWidth"]
    val getFullText: t -> ?sourceFile:ts_SourceFile -> unit -> string [@@js.call "getFullText"]
    val getText: t -> ?sourceFile:ts_SourceFile -> unit -> string [@@js.call "getText"]
    val getFirstToken: t -> ?sourceFile:ts_SourceFile -> unit -> t or_undefined [@@js.call "getFirstToken"]
    val getLastToken: t -> ?sourceFile:ts_SourceFile -> unit -> t or_undefined [@@js.call "getLastToken"]
    val forEachChild: t -> cbNode:(node:t -> 'T or_undefined) -> ?cbNodeArray:(nodes:t ts_NodeArray -> 'T or_undefined) -> unit -> 'T or_undefined [@@js.call "forEachChild"]
    val get_kind: t -> ts_SyntaxKind [@@js.get "kind"]
    val get_flags: t -> ts_NodeFlags [@@js.get "flags"]
    val get_decorators: t -> ts_Decorator ts_NodeArray [@@js.get "decorators"]
    val get_modifiers: t -> ts_ModifiersArray [@@js.get "modifiers"]
    val get_parent: t -> t [@@js.get "parent"]
    val cast: t -> ts_ReadonlyTextRange [@@js.cast]
  end
  module JSDocContainer : sig
    type t = ts_JSDocContainer
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocContainer]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocContainer]
    ]
  end
  module HasJSDoc : sig
    type t = ts_HasJSDoc
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_HasJSDoc]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_HasJSDoc]
    ]
  end
  module HasType : sig
    type t = ts_HasType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_HasType]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_HasType]
    ]
  end
  module HasTypeArguments : sig
    type t = ts_HasTypeArguments
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_HasTypeArguments]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_HasTypeArguments]
    ]
  end
  module HasInitializer : sig
    type t = ts_HasInitializer
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_HasInitializer]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_HasInitializer]
    ]
  end
  module HasExpressionInitializer : sig
    type t = ts_HasExpressionInitializer
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_HasExpressionInitializer]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_HasExpressionInitializer]
    ]
  end
  module[@js.scope "NodeArray"] NodeArray : sig
    type 'T t = 'T ts_NodeArray
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_NodeArray of 'T | `Ts_ReadonlyTextRange | `Array of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_NodeArray of 'T | `Ts_ReadonlyTextRange | `Array of 'T]
    ]
    val get_hasTrailingComma: 'T t -> bool [@@js.get "hasTrailingComma"]
    val set_hasTrailingComma: 'T t -> bool -> unit [@@js.set "hasTrailingComma"]
    val cast: 'T t -> 'T list [@@js.cast]
    val cast': 'T t -> ts_ReadonlyTextRange [@@js.cast]
  end
  module[@js.scope "Token"] Token : sig
    type 'TKind t = 'TKind ts_Token
    val t_to_js: ('TKind -> Ojs.t) -> 'TKind t -> Ojs.t
    val t_of_js: (Ojs.t -> 'TKind) -> Ojs.t -> 'TKind t
    type 'TKind t_1 = 'TKind t
    val t_1_to_js: ('TKind -> Ojs.t) -> 'TKind t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'TKind) -> Ojs.t -> 'TKind t_1
    [@@@js.stop]
    type 'TKind tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind]
    [@@@js.start]
    [@@@js.implem 
      type 'TKind tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind]
    ]
    val get_kind: 'TKind t -> 'TKind [@@js.get "kind"]
    val cast: 'TKind t -> ts_Node [@@js.cast]
  end
  module EndOfFileToken : sig
    type t = ts_EndOfFileToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EndOfFileToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EndOfFileToken]
    ]
  end
  module[@js.scope "PunctuationToken"] PunctuationToken : sig
    type 'TKind t = 'TKind ts_PunctuationToken
    val t_to_js: ('TKind -> Ojs.t) -> 'TKind t -> Ojs.t
    val t_of_js: (Ojs.t -> 'TKind) -> Ojs.t -> 'TKind t
    type 'TKind t_1 = 'TKind t
    val t_1_to_js: ('TKind -> Ojs.t) -> 'TKind t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'TKind) -> Ojs.t -> 'TKind t_1
    [@@@js.stop]
    type 'TKind tags = [`Ts_Node | `Ts_PunctuationToken of 'TKind | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind]
    [@@@js.start]
    [@@@js.implem 
      type 'TKind tags = [`Ts_Node | `Ts_PunctuationToken of 'TKind | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind]
    ]
    val cast: 'TKind t -> 'TKind ts_Token [@@js.cast]
  end
  module DotToken : sig
    type t = ts_DotToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DotToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_DotToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_DotToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DotToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_DotToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_DotToken]
    ]
  end
  module DotDotDotToken : sig
    type t = ts_DotDotDotToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DotDotDotToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_DotDotDotToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_DotDotDotToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DotDotDotToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_DotDotDotToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_DotDotDotToken]
    ]
  end
  module QuestionToken : sig
    type t = ts_QuestionToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_QuestionToken | `Ts_QuestionToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_QuestionToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_QuestionToken | `Ts_QuestionToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_QuestionToken]
    ]
  end
  module ExclamationToken : sig
    type t = ts_ExclamationToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ExclamationToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_ExclamationToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_ExclamationToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ExclamationToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_ExclamationToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_ExclamationToken]
    ]
  end
  module ColonToken : sig
    type t = ts_ColonToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ColonToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_ColonToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_ColonToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ColonToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_ColonToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_ColonToken]
    ]
  end
  module EqualsToken : sig
    type t = ts_EqualsToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EqualsToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_EqualsToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_EqualsToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EqualsToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_EqualsToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_EqualsToken]
    ]
  end
  module AsteriskToken : sig
    type t = ts_AsteriskToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AsteriskToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_AsteriskToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_AsteriskToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AsteriskToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_AsteriskToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_AsteriskToken]
    ]
  end
  module EqualsGreaterThanToken : sig
    type t = ts_EqualsGreaterThanToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EqualsGreaterThanToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_EqualsGreaterThanToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_EqualsGreaterThanToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EqualsGreaterThanToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_EqualsGreaterThanToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_EqualsGreaterThanToken]
    ]
  end
  module PlusToken : sig
    type t = ts_PlusToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_PlusToken | `Ts_PunctuationToken of ts_SyntaxKind_PlusToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_PlusToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_PlusToken | `Ts_PunctuationToken of ts_SyntaxKind_PlusToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_PlusToken]
    ]
  end
  module MinusToken : sig
    type t = ts_MinusToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_MinusToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_MinusToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_MinusToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_MinusToken | `Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_MinusToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_MinusToken]
    ]
  end
  module QuestionDotToken : sig
    type t = ts_QuestionDotToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_QuestionDotToken | `Ts_QuestionDotToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_QuestionDotToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_PunctuationToken of ts_SyntaxKind_QuestionDotToken | `Ts_QuestionDotToken | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_QuestionDotToken]
    ]
  end
  module[@js.scope "KeywordToken"] KeywordToken : sig
    type 'TKind t = 'TKind ts_KeywordToken
    val t_to_js: ('TKind -> Ojs.t) -> 'TKind t -> Ojs.t
    val t_of_js: (Ojs.t -> 'TKind) -> Ojs.t -> 'TKind t
    type 'TKind t_1 = 'TKind t
    val t_1_to_js: ('TKind -> Ojs.t) -> 'TKind t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'TKind) -> Ojs.t -> 'TKind t_1
    [@@@js.stop]
    type 'TKind tags = [`Ts_KeywordToken of 'TKind | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind]
    [@@@js.start]
    [@@@js.implem 
      type 'TKind tags = [`Ts_KeywordToken of 'TKind | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind]
    ]
    val cast: 'TKind t -> 'TKind ts_Token [@@js.cast]
  end
  module AssertsKeyword : sig
    type t = ts_AssertsKeyword
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AssertsKeyword | `Ts_KeywordToken of ts_SyntaxKind_AssertsKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_AssertsKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AssertsKeyword | `Ts_KeywordToken of ts_SyntaxKind_AssertsKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_AssertsKeyword]
    ]
  end
  module AwaitKeyword : sig
    type t = ts_AwaitKeyword
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AwaitKeyword | `Ts_KeywordToken of ts_SyntaxKind_AwaitKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_AwaitKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AwaitKeyword | `Ts_KeywordToken of ts_SyntaxKind_AwaitKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_AwaitKeyword]
    ]
  end
  (** @deprecated Use `AwaitKeyword` instead. *)
  module AwaitKeywordToken : sig
    type t = ts_AwaitKeywordToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AwaitKeyword | `Ts_AwaitKeywordToken | `Ts_KeywordToken of ts_SyntaxKind_AwaitKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_AwaitKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AwaitKeyword | `Ts_AwaitKeywordToken | `Ts_KeywordToken of ts_SyntaxKind_AwaitKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_AwaitKeyword]
    ]
  end
  (** @deprecated Use `AssertsKeyword` instead. *)
  module AssertsToken : sig
    type t = ts_AssertsToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AssertsKeyword | `Ts_AssertsToken | `Ts_KeywordToken of ts_SyntaxKind_AssertsKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_AssertsKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AssertsKeyword | `Ts_AssertsToken | `Ts_KeywordToken of ts_SyntaxKind_AssertsKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_AssertsKeyword]
    ]
  end
  module[@js.scope "ModifierToken"] ModifierToken : sig
    type 'TKind t = 'TKind ts_ModifierToken
    val t_to_js: ('TKind -> Ojs.t) -> 'TKind t -> Ojs.t
    val t_of_js: (Ojs.t -> 'TKind) -> Ojs.t -> 'TKind t
    type 'TKind t_1 = 'TKind t
    val t_1_to_js: ('TKind -> Ojs.t) -> 'TKind t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'TKind) -> Ojs.t -> 'TKind t_1
    [@@@js.stop]
    type 'TKind tags = [`Ts_KeywordToken of 'TKind | `Ts_ModifierToken of 'TKind | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind]
    [@@@js.start]
    [@@@js.implem 
      type 'TKind tags = [`Ts_KeywordToken of 'TKind | `Ts_ModifierToken of 'TKind | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind]
    ]
    val cast: 'TKind t -> 'TKind ts_KeywordToken [@@js.cast]
  end
  module AbstractKeyword : sig
    type t = ts_AbstractKeyword
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AbstractKeyword | `Ts_KeywordToken of ts_SyntaxKind_AbstractKeyword | `Ts_ModifierToken of ts_SyntaxKind_AbstractKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_AbstractKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AbstractKeyword | `Ts_KeywordToken of ts_SyntaxKind_AbstractKeyword | `Ts_ModifierToken of ts_SyntaxKind_AbstractKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_AbstractKeyword]
    ]
  end
  module AsyncKeyword : sig
    type t = ts_AsyncKeyword
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AsyncKeyword | `Ts_KeywordToken of ts_SyntaxKind_AsyncKeyword | `Ts_ModifierToken of ts_SyntaxKind_AsyncKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_AsyncKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AsyncKeyword | `Ts_KeywordToken of ts_SyntaxKind_AsyncKeyword | `Ts_ModifierToken of ts_SyntaxKind_AsyncKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_AsyncKeyword]
    ]
  end
  module ConstKeyword : sig
    type t = ts_ConstKeyword
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ConstKeyword | `Ts_KeywordToken of ts_SyntaxKind_ConstKeyword | `Ts_ModifierToken of ts_SyntaxKind_ConstKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_ConstKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ConstKeyword | `Ts_KeywordToken of ts_SyntaxKind_ConstKeyword | `Ts_ModifierToken of ts_SyntaxKind_ConstKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_ConstKeyword]
    ]
  end
  module DeclareKeyword : sig
    type t = ts_DeclareKeyword
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DeclareKeyword | `Ts_KeywordToken of ts_SyntaxKind_DeclareKeyword | `Ts_ModifierToken of ts_SyntaxKind_DeclareKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_DeclareKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DeclareKeyword | `Ts_KeywordToken of ts_SyntaxKind_DeclareKeyword | `Ts_ModifierToken of ts_SyntaxKind_DeclareKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_DeclareKeyword]
    ]
  end
  module DefaultKeyword : sig
    type t = ts_DefaultKeyword
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DefaultKeyword | `Ts_KeywordToken of ts_SyntaxKind_DefaultKeyword | `Ts_ModifierToken of ts_SyntaxKind_DefaultKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_DefaultKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DefaultKeyword | `Ts_KeywordToken of ts_SyntaxKind_DefaultKeyword | `Ts_ModifierToken of ts_SyntaxKind_DefaultKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_DefaultKeyword]
    ]
  end
  module ExportKeyword : sig
    type t = ts_ExportKeyword
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ExportKeyword | `Ts_KeywordToken of ts_SyntaxKind_ExportKeyword | `Ts_ModifierToken of ts_SyntaxKind_ExportKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_ExportKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ExportKeyword | `Ts_KeywordToken of ts_SyntaxKind_ExportKeyword | `Ts_ModifierToken of ts_SyntaxKind_ExportKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_ExportKeyword]
    ]
  end
  module PrivateKeyword : sig
    type t = ts_PrivateKeyword
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_KeywordToken of ts_SyntaxKind_PrivateKeyword | `Ts_ModifierToken of ts_SyntaxKind_PrivateKeyword | `Ts_Node | `Ts_PrivateKeyword | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_PrivateKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_KeywordToken of ts_SyntaxKind_PrivateKeyword | `Ts_ModifierToken of ts_SyntaxKind_PrivateKeyword | `Ts_Node | `Ts_PrivateKeyword | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_PrivateKeyword]
    ]
  end
  module ProtectedKeyword : sig
    type t = ts_ProtectedKeyword
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_KeywordToken of ts_SyntaxKind_ProtectedKeyword | `Ts_ModifierToken of ts_SyntaxKind_ProtectedKeyword | `Ts_Node | `Ts_ProtectedKeyword | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_ProtectedKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_KeywordToken of ts_SyntaxKind_ProtectedKeyword | `Ts_ModifierToken of ts_SyntaxKind_ProtectedKeyword | `Ts_Node | `Ts_ProtectedKeyword | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_ProtectedKeyword]
    ]
  end
  module PublicKeyword : sig
    type t = ts_PublicKeyword
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_KeywordToken of ts_SyntaxKind_PublicKeyword | `Ts_ModifierToken of ts_SyntaxKind_PublicKeyword | `Ts_Node | `Ts_PublicKeyword | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_PublicKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_KeywordToken of ts_SyntaxKind_PublicKeyword | `Ts_ModifierToken of ts_SyntaxKind_PublicKeyword | `Ts_Node | `Ts_PublicKeyword | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_PublicKeyword]
    ]
  end
  module ReadonlyKeyword : sig
    type t = ts_ReadonlyKeyword
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_KeywordToken of ts_SyntaxKind_ReadonlyKeyword | `Ts_ModifierToken of ts_SyntaxKind_ReadonlyKeyword | `Ts_Node | `Ts_ReadonlyKeyword | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_ReadonlyKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_KeywordToken of ts_SyntaxKind_ReadonlyKeyword | `Ts_ModifierToken of ts_SyntaxKind_ReadonlyKeyword | `Ts_Node | `Ts_ReadonlyKeyword | `Ts_ReadonlyTextRange | `Ts_Token of ts_SyntaxKind_ReadonlyKeyword]
    ]
  end
  module StaticKeyword : sig
    type t = ts_StaticKeyword
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_KeywordToken of ts_SyntaxKind_StaticKeyword | `Ts_ModifierToken of ts_SyntaxKind_StaticKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_StaticKeyword | `Ts_Token of ts_SyntaxKind_StaticKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_KeywordToken of ts_SyntaxKind_StaticKeyword | `Ts_ModifierToken of ts_SyntaxKind_StaticKeyword | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_StaticKeyword | `Ts_Token of ts_SyntaxKind_StaticKeyword]
    ]
  end
  (** @deprecated Use `ReadonlyKeyword` instead. *)
  module ReadonlyToken : sig
    type t = ts_ReadonlyToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_KeywordToken of ts_SyntaxKind_ReadonlyKeyword | `Ts_ModifierToken of ts_SyntaxKind_ReadonlyKeyword | `Ts_Node | `Ts_ReadonlyKeyword | `Ts_ReadonlyTextRange | `Ts_ReadonlyToken | `Ts_Token of ts_SyntaxKind_ReadonlyKeyword]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_KeywordToken of ts_SyntaxKind_ReadonlyKeyword | `Ts_ModifierToken of ts_SyntaxKind_ReadonlyKeyword | `Ts_Node | `Ts_ReadonlyKeyword | `Ts_ReadonlyTextRange | `Ts_ReadonlyToken | `Ts_Token of ts_SyntaxKind_ReadonlyKeyword]
    ]
  end
  module Modifier : sig
    type t = ts_Modifier
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Modifier]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Modifier]
    ]
  end
  module AccessibilityModifier : sig
    type t = ts_AccessibilityModifier
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AccessibilityModifier]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AccessibilityModifier]
    ]
  end
  module ParameterPropertyModifier : sig
    type t = ts_ParameterPropertyModifier
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ParameterPropertyModifier]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ParameterPropertyModifier]
    ]
  end
  module ClassMemberModifier : sig
    type t = ts_ClassMemberModifier
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassMemberModifier]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassMemberModifier]
    ]
  end
  module ModifiersArray : sig
    type t = ts_ModifiersArray
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ModifiersArray | `Ts_NodeArray of ts_Modifier | `Ts_ReadonlyTextRange | `Array of ts_Modifier]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ModifiersArray | `Ts_NodeArray of ts_Modifier | `Ts_ReadonlyTextRange | `Array of ts_Modifier]
    ]
  end
  module GeneratedIdentifierFlags : sig
    type t = ts_GeneratedIdentifierFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "Identifier"] Identifier : sig
    type t = ts_Identifier
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Expression | `Ts_Identifier | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Expression | `Ts_Identifier | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_text: t -> string [@@js.get "text"]
    val get_kind: t -> ts_SyntaxKind_Identifier [@@js.get "kind"]
    (**
      Prefer to use `id.unescapedText`. (Note: This is available only in services, not internally to the TypeScript compiler.)
      Text of identifier, but if the identifier begins with two underscores, this will begin with three.
    *)
    val get_escapedText: t -> ts___String [@@js.get "escapedText"]
    val get_originalKeywordKind: t -> ts_SyntaxKind [@@js.get "originalKeywordKind"]
    val get_isInJSDocNamespace: t -> bool [@@js.get "isInJSDocNamespace"]
    val set_isInJSDocNamespace: t -> bool -> unit [@@js.set "isInJSDocNamespace"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
    val cast': t -> ts_Declaration [@@js.cast]
  end
  module[@js.scope "TransientIdentifier"] TransientIdentifier : sig
    type t = ts_TransientIdentifier
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Expression | `Ts_Identifier | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_TransientIdentifier | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Expression | `Ts_Identifier | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_TransientIdentifier | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_resolvedSymbol: t -> ts_Symbol [@@js.get "resolvedSymbol"]
    val set_resolvedSymbol: t -> ts_Symbol -> unit [@@js.set "resolvedSymbol"]
    val cast: t -> ts_Identifier [@@js.cast]
  end
  module[@js.scope "QualifiedName"] QualifiedName : sig
    type t = ts_QualifiedName
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_QualifiedName | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_QualifiedName | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_QualifiedName [@@js.get "kind"]
    val get_left: t -> ts_EntityName [@@js.get "left"]
    val get_right: t -> ts_Identifier [@@js.get "right"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module EntityName : sig
    type t = ts_EntityName
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EntityName]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EntityName]
    ]
  end
  module PropertyName : sig
    type t = ts_PropertyName
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PropertyName]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PropertyName]
    ]
  end
  module DeclarationName : sig
    type t = ts_DeclarationName
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DeclarationName]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DeclarationName]
    ]
  end
  module[@js.scope "Declaration"] Declaration : sig
    type t = ts_Declaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get__declarationBrand: t -> any [@@js.get "_declarationBrand"]
    val set__declarationBrand: t -> any -> unit [@@js.set "_declarationBrand"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "NamedDeclaration"] NamedDeclaration : sig
    type t = ts_NamedDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_name: t -> ts_DeclarationName [@@js.get "name"]
    val cast: t -> ts_Declaration [@@js.cast]
  end
  module[@js.scope "DeclarationStatement"] DeclarationStatement : sig
    type t = ts_DeclarationStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_name: t -> ([`U_n_8 of ts_NumericLiteral [@js 8] | `U_n_10 of ts_StringLiteral [@js 10] | `U_n_78 of ts_Identifier [@js 78]] [@js.union on_field "kind"]) [@@js.get "name"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
    val cast': t -> ts_Statement [@@js.cast]
  end
  module[@js.scope "ComputedPropertyName"] ComputedPropertyName : sig
    type t = ts_ComputedPropertyName
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ComputedPropertyName | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ComputedPropertyName | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_ComputedPropertyName [@@js.get "kind"]
    val get_parent: t -> ts_Declaration [@@js.get "parent"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "PrivateIdentifier"] PrivateIdentifier : sig
    type t = ts_PrivateIdentifier
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_PrivateIdentifier | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_PrivateIdentifier | `Ts_ReadonlyTextRange]
    ]
    val get_text: t -> string [@@js.get "text"]
    val get_kind: t -> ts_SyntaxKind_PrivateIdentifier [@@js.get "kind"]
    val get_escapedText: t -> ts___String [@@js.get "escapedText"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "Decorator"] Decorator : sig
    type t = ts_Decorator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Decorator | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Decorator | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_Decorator [@@js.get "kind"]
    val get_parent: t -> ts_NamedDeclaration [@@js.get "parent"]
    val get_expression: t -> ts_LeftHandSideExpression [@@js.get "expression"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "TypeParameterDeclaration"] TypeParameterDeclaration : sig
    type t = ts_TypeParameterDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeParameterDeclaration]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeParameterDeclaration]
    ]
    val get_kind: t -> ts_SyntaxKind_TypeParameter [@@js.get "kind"]
    val get_parent: t -> ([`U_n_164 of ts_DeclarationWithTypeParameterChildren [@js 164] | `U_n_165 of ts_DeclarationWithTypeParameterChildren [@js 165] | `U_n_166 of ts_DeclarationWithTypeParameterChildren [@js 166] | `U_n_167 of ts_DeclarationWithTypeParameterChildren [@js 167] | `U_n_168 of ts_DeclarationWithTypeParameterChildren [@js 168] | `U_n_169 of ts_DeclarationWithTypeParameterChildren [@js 169] | `U_n_170 of ts_DeclarationWithTypeParameterChildren [@js 170] | `U_n_171 of ts_DeclarationWithTypeParameterChildren [@js 171] | `U_n_174 of ts_DeclarationWithTypeParameterChildren [@js 174] | `U_n_175 of ts_DeclarationWithTypeParameterChildren [@js 175] | `U_n_185 of ts_InferTypeNode [@js 185] | `U_n_208 of ts_DeclarationWithTypeParameterChildren [@js 208] | `U_n_209 of ts_DeclarationWithTypeParameterChildren [@js 209] | `U_n_221 of ts_DeclarationWithTypeParameterChildren [@js 221] | `U_n_251 of ts_DeclarationWithTypeParameterChildren [@js 251] | `U_n_252 of ts_DeclarationWithTypeParameterChildren [@js 252] | `U_n_253 of ts_DeclarationWithTypeParameterChildren [@js 253] | `U_n_254 of ts_DeclarationWithTypeParameterChildren [@js 254] | `U_n_308 of ts_DeclarationWithTypeParameterChildren [@js 308] | `U_n_330 of ts_DeclarationWithTypeParameterChildren [@js 330]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    (** Note: Consider calling `getEffectiveConstraintOfTypeParameter` *)
    val get_constraint: t -> ts_TypeNode [@@js.get "constraint"]
    val get_default: t -> ts_TypeNode [@@js.get "default"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val set_expression: t -> ts_Expression -> unit [@@js.set "expression"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
  end
  module[@js.scope "SignatureDeclarationBase"] SignatureDeclarationBase : sig
    type t = ts_SignatureDeclarationBase
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase]
    ]
    val get_kind: t -> ((((((((ts_SyntaxKind_FunctionExpression, ts_SyntaxKind_FunctionType, ts_SyntaxKind_GetAccessor, ts_SyntaxKind_IndexSignature, ts_SyntaxKind_JSDocFunctionType, ts_SyntaxKind_MethodDeclaration, ts_SyntaxKind_MethodSignature, ts_SyntaxKind_SetAccessor) union8, ts_SyntaxKind_FunctionDeclaration) or_, ts_SyntaxKind_ConstructorType) or_, ts_SyntaxKind_Constructor) or_, ts_SyntaxKind_ConstructSignature) or_, ts_SyntaxKind_CallSignature) or_, ts_SyntaxKind_ArrowFunction) or_, ([`ArrowFunction[@js 209] | `CallSignature[@js 169] | `ConstructSignature[@js 170] | `Constructor[@js 166] | `ConstructorType[@js 175] | `FunctionDeclaration[@js 251] | `FunctionExpression[@js 208] | `FunctionType[@js 174] | `GetAccessor[@js 167] | `IndexSignature[@js 171] | `JSDocFunctionType[@js 308] | `MethodDeclaration[@js 165] | `MethodSignature[@js 164] | `SetAccessor[@js 168]] [@js.enum])) or_enum [@@js.get "kind"]
    val get_name: t -> ts_PropertyName [@@js.get "name"]
    val get_typeParameters: t -> ts_TypeParameterDeclaration ts_NodeArray [@@js.get "typeParameters"]
    val get_parameters: t -> ts_ParameterDeclaration ts_NodeArray [@@js.get "parameters"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module SignatureDeclaration : sig
    type t = ts_SignatureDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SignatureDeclaration]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SignatureDeclaration]
    ]
  end
  module[@js.scope "CallSignatureDeclaration"] CallSignatureDeclaration : sig
    type t = ts_CallSignatureDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CallSignatureDeclaration | `Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeElement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CallSignatureDeclaration | `Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeElement]
    ]
    val get_kind: t -> ts_SyntaxKind_CallSignature [@@js.get "kind"]
    val cast: t -> ts_SignatureDeclarationBase [@@js.cast]
    val cast': t -> ts_TypeElement [@@js.cast]
  end
  module[@js.scope "ConstructSignatureDeclaration"] ConstructSignatureDeclaration : sig
    type t = ts_ConstructSignatureDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ConstructSignatureDeclaration | `Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeElement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ConstructSignatureDeclaration | `Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeElement]
    ]
    val get_kind: t -> ts_SyntaxKind_ConstructSignature [@@js.get "kind"]
    val cast: t -> ts_SignatureDeclarationBase [@@js.cast]
    val cast': t -> ts_TypeElement [@@js.cast]
  end
  module BindingName : sig
    type t = ts_BindingName
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BindingName]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BindingName]
    ]
  end
  module[@js.scope "VariableDeclaration"] VariableDeclaration : sig
    type t = ts_VariableDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_VariableDeclaration]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_VariableDeclaration]
    ]
    val get_kind: t -> ts_SyntaxKind_VariableDeclaration [@@js.get "kind"]
    val get_parent: t -> ([`U_n_250 of ts_VariableDeclarationList [@js 250] | `U_n_287 of ts_CatchClause [@js 287]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_name: t -> ts_BindingName [@@js.get "name"]
    val get_exclamationToken: t -> ts_ExclamationToken [@@js.get "exclamationToken"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val get_initializer: t -> ts_Expression [@@js.get "initializer"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
  end
  module[@js.scope "VariableDeclarationList"] VariableDeclarationList : sig
    type t = ts_VariableDeclarationList
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_VariableDeclarationList]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_VariableDeclarationList]
    ]
    val get_kind: t -> ts_SyntaxKind_VariableDeclarationList [@@js.get "kind"]
    val get_parent: t -> ([`U_n_232 of ts_VariableStatement [@js 232] | `U_n_237 of ts_ForStatement [@js 237] | `U_n_238 of ts_ForInStatement [@js 238] | `U_n_239 of ts_ForOfStatement [@js 239]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_declarations: t -> ts_VariableDeclaration ts_NodeArray [@@js.get "declarations"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "ParameterDeclaration"] ParameterDeclaration : sig
    type t = ts_ParameterDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ParameterDeclaration | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ParameterDeclaration | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_Parameter [@@js.get "kind"]
    val get_parent: t -> ts_SignatureDeclaration [@@js.get "parent"]
    val get_dotDotDotToken: t -> ts_DotDotDotToken [@@js.get "dotDotDotToken"]
    val get_name: t -> ts_BindingName [@@js.get "name"]
    val get_questionToken: t -> ts_QuestionToken [@@js.get "questionToken"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val get_initializer: t -> ts_Expression [@@js.get "initializer"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "BindingElement"] BindingElement : sig
    type t = ts_BindingElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BindingElement | `Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BindingElement | `Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_BindingElement [@@js.get "kind"]
    val get_parent: t -> ts_BindingPattern [@@js.get "parent"]
    val get_propertyName: t -> ts_PropertyName [@@js.get "propertyName"]
    val get_dotDotDotToken: t -> ts_DotDotDotToken [@@js.get "dotDotDotToken"]
    val get_name: t -> ts_BindingName [@@js.get "name"]
    val get_initializer: t -> ts_Expression [@@js.get "initializer"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
  end
  module[@js.scope "PropertySignature"] PropertySignature : sig
    type t = ts_PropertySignature
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertySignature | `Ts_ReadonlyTextRange | `Ts_TypeElement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertySignature | `Ts_ReadonlyTextRange | `Ts_TypeElement]
    ]
    val get_kind: t -> ts_SyntaxKind_PropertySignature [@@js.get "kind"]
    val get_name: t -> ts_PropertyName [@@js.get "name"]
    val get_questionToken: t -> ts_QuestionToken [@@js.get "questionToken"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val get_initializer: t -> ts_Expression [@@js.get "initializer"]
    val set_initializer: t -> ts_Expression -> unit [@@js.set "initializer"]
    val cast: t -> ts_TypeElement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "PropertyDeclaration"] PropertyDeclaration : sig
    type t = ts_PropertyDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassElement | `Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyDeclaration | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassElement | `Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyDeclaration | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_PropertyDeclaration [@@js.get "kind"]
    val get_parent: t -> ts_ClassLikeDeclaration [@@js.get "parent"]
    val get_name: t -> ts_PropertyName [@@js.get "name"]
    val get_questionToken: t -> ts_QuestionToken [@@js.get "questionToken"]
    val get_exclamationToken: t -> ts_ExclamationToken [@@js.get "exclamationToken"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val get_initializer: t -> ts_Expression [@@js.get "initializer"]
    val cast: t -> ts_ClassElement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "ObjectLiteralElement"] ObjectLiteralElement : sig
    type t = ts_ObjectLiteralElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange]
    ]
    val get__objectLiteralBrand: t -> any [@@js.get "_objectLiteralBrand"]
    val set__objectLiteralBrand: t -> any -> unit [@@js.set "_objectLiteralBrand"]
    val get_name: t -> ts_PropertyName [@@js.get "name"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
  end
  (** Unlike ObjectLiteralElement, excludes JSXAttribute and JSXSpreadAttribute. *)
  module ObjectLiteralElementLike : sig
    type t = ts_ObjectLiteralElementLike
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ObjectLiteralElementLike]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ObjectLiteralElementLike]
    ]
  end
  module[@js.scope "PropertyAssignment"] PropertyAssignment : sig
    type t = ts_PropertyAssignment
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_PropertyAssignment | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_PropertyAssignment | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_PropertyAssignment [@@js.get "kind"]
    val get_parent: t -> ts_ObjectLiteralExpression [@@js.get "parent"]
    val get_name: t -> ts_PropertyName [@@js.get "name"]
    val get_questionToken: t -> ts_QuestionToken [@@js.get "questionToken"]
    val get_exclamationToken: t -> ts_ExclamationToken [@@js.get "exclamationToken"]
    val get_initializer: t -> ts_Expression [@@js.get "initializer"]
    val cast: t -> ts_ObjectLiteralElement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "ShorthandPropertyAssignment"] ShorthandPropertyAssignment : sig
    type t = ts_ShorthandPropertyAssignment
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_ShorthandPropertyAssignment]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_ShorthandPropertyAssignment]
    ]
    val get_kind: t -> ts_SyntaxKind_ShorthandPropertyAssignment [@@js.get "kind"]
    val get_parent: t -> ts_ObjectLiteralExpression [@@js.get "parent"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_questionToken: t -> ts_QuestionToken [@@js.get "questionToken"]
    val get_exclamationToken: t -> ts_ExclamationToken [@@js.get "exclamationToken"]
    val get_equalsToken: t -> ts_EqualsToken [@@js.get "equalsToken"]
    val get_objectAssignmentInitializer: t -> ts_Expression [@@js.get "objectAssignmentInitializer"]
    val cast: t -> ts_ObjectLiteralElement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "SpreadAssignment"] SpreadAssignment : sig
    type t = ts_SpreadAssignment
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_SpreadAssignment]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_SpreadAssignment]
    ]
    val get_kind: t -> ts_SyntaxKind_SpreadAssignment [@@js.get "kind"]
    val get_parent: t -> ts_ObjectLiteralExpression [@@js.get "parent"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_ObjectLiteralElement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module VariableLikeDeclaration : sig
    type t = ts_VariableLikeDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_VariableLikeDeclaration]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_VariableLikeDeclaration]
    ]
  end
  module[@js.scope "PropertyLikeDeclaration"] PropertyLikeDeclaration : sig
    type t = ts_PropertyLikeDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyLikeDeclaration | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyLikeDeclaration | `Ts_ReadonlyTextRange]
    ]
    val get_name: t -> ts_PropertyName [@@js.get "name"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
  end
  module[@js.scope "ObjectBindingPattern"] ObjectBindingPattern : sig
    type t = ts_ObjectBindingPattern
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ObjectBindingPattern | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ObjectBindingPattern | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_ObjectBindingPattern [@@js.get "kind"]
    val get_parent: t -> ([`U_n_160 of ts_ParameterDeclaration [@js 160] | `U_n_198 of ts_BindingElement [@js 198] | `U_n_249 of ts_VariableDeclaration [@js 249]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_elements: t -> ts_BindingElement ts_NodeArray [@@js.get "elements"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "ArrayBindingPattern"] ArrayBindingPattern : sig
    type t = ts_ArrayBindingPattern
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ArrayBindingPattern | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ArrayBindingPattern | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_ArrayBindingPattern [@@js.get "kind"]
    val get_parent: t -> ([`U_n_160 of ts_ParameterDeclaration [@js 160] | `U_n_198 of ts_BindingElement [@js 198] | `U_n_249 of ts_VariableDeclaration [@js 249]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_elements: t -> ts_ArrayBindingElement ts_NodeArray [@@js.get "elements"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module BindingPattern : sig
    type t = ts_BindingPattern
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BindingPattern]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BindingPattern]
    ]
  end
  module ArrayBindingElement : sig
    type t = ts_ArrayBindingElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ArrayBindingElement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ArrayBindingElement]
    ]
  end
  (**
    Several node kinds share function-like features such as a signature,
    a name, and a body. These nodes should extend FunctionLikeDeclarationBase.
    Examples:
    - FunctionDeclaration
    - MethodDeclaration
    - AccessorDeclaration
  *)
  module[@js.scope "FunctionLikeDeclarationBase"] FunctionLikeDeclarationBase : sig
    type t = ts_FunctionLikeDeclarationBase
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase]
    ]
    val get__functionLikeDeclarationBrand: t -> any [@@js.get "_functionLikeDeclarationBrand"]
    val set__functionLikeDeclarationBrand: t -> any -> unit [@@js.set "_functionLikeDeclarationBrand"]
    val get_asteriskToken: t -> ts_AsteriskToken [@@js.get "asteriskToken"]
    val get_questionToken: t -> ts_QuestionToken [@@js.get "questionToken"]
    val get_exclamationToken: t -> ts_ExclamationToken [@@js.get "exclamationToken"]
    val get_body: t -> ([`U_n_0 of ts_Expression [@js 0] | `U_n_1 of ts_Expression [@js 1] | `U_n_2 of ts_Expression [@js 2] | `U_n_3 of ts_Expression [@js 3] | `U_n_4 of ts_Expression [@js 4] | `U_n_5 of ts_Expression [@js 5] | `U_n_6 of ts_Expression [@js 6] | `U_n_7 of ts_Expression [@js 7] | `U_n_8 of ts_Expression [@js 8] | `U_n_9 of ts_Expression [@js 9] | `U_n_10 of ts_Expression [@js 10] | `U_n_11 of ts_Expression [@js 11] | `U_n_12 of ts_Expression [@js 12] | `U_n_13 of ts_Expression [@js 13] | `U_n_14 of ts_Expression [@js 14] | `U_n_15 of ts_Expression [@js 15] | `U_n_16 of ts_Expression [@js 16] | `U_n_17 of ts_Expression [@js 17] | `U_n_18 of ts_Expression [@js 18] | `U_n_19 of ts_Expression [@js 19] | `U_n_20 of ts_Expression [@js 20] | `U_n_21 of ts_Expression [@js 21] | `U_n_22 of ts_Expression [@js 22] | `U_n_23 of ts_Expression [@js 23] | `U_n_24 of ts_Expression [@js 24] | `U_n_25 of ts_Expression [@js 25] | `U_n_26 of ts_Expression [@js 26] | `U_n_27 of ts_Expression [@js 27] | `U_n_28 of ts_Expression [@js 28] | `U_n_29 of ts_Expression [@js 29] | `U_n_30 of ts_Expression [@js 30] | `U_n_31 of ts_Expression [@js 31] | `U_n_32 of ts_Expression [@js 32] | `U_n_33 of ts_Expression [@js 33] | `U_n_34 of ts_Expression [@js 34] | `U_n_35 of ts_Expression [@js 35] | `U_n_36 of ts_Expression [@js 36] | `U_n_37 of ts_Expression [@js 37] | `U_n_38 of ts_Expression [@js 38] | `U_n_39 of ts_Expression [@js 39] | `U_n_40 of ts_Expression [@js 40] | `U_n_41 of ts_Expression [@js 41] | `U_n_42 of ts_Expression [@js 42] | `U_n_43 of ts_Expression [@js 43] | `U_n_44 of ts_Expression [@js 44] | `U_n_45 of ts_Expression [@js 45] | `U_n_46 of ts_Expression [@js 46] | `U_n_47 of ts_Expression [@js 47] | `U_n_48 of ts_Expression [@js 48] | `U_n_49 of ts_Expression [@js 49] | `U_n_50 of ts_Expression [@js 50] | `U_n_51 of ts_Expression [@js 51] | `U_n_52 of ts_Expression [@js 52] | `U_n_53 of ts_Expression [@js 53] | `U_n_54 of ts_Expression [@js 54] | `U_n_55 of ts_Expression [@js 55] | `U_n_56 of ts_Expression [@js 56] | `U_n_57 of ts_Expression [@js 57] | `U_n_58 of ts_Expression [@js 58] | `U_n_59 of ts_Expression [@js 59] | `U_n_60 of ts_Expression [@js 60] | `U_n_61 of ts_Expression [@js 61] | `U_n_62 of ts_Expression [@js 62] | `U_n_63 of ts_Expression [@js 63] | `U_n_64 of ts_Expression [@js 64] | `U_n_65 of ts_Expression [@js 65] | `U_n_66 of ts_Expression [@js 66] | `U_n_67 of ts_Expression [@js 67] | `U_n_68 of ts_Expression [@js 68] | `U_n_69 of ts_Expression [@js 69] | `U_n_70 of ts_Expression [@js 70] | `U_n_71 of ts_Expression [@js 71] | `U_n_72 of ts_Expression [@js 72] | `U_n_73 of ts_Expression [@js 73] | `U_n_74 of ts_Expression [@js 74] | `U_n_75 of ts_Expression [@js 75] | `U_n_76 of ts_Expression [@js 76] | `U_n_77 of ts_Expression [@js 77] | `U_n_78 of ts_Expression [@js 78] | `U_n_79 of ts_Expression [@js 79] | `U_n_80 of ts_Expression [@js 80] | `U_n_81 of ts_Expression [@js 81] | `U_n_82 of ts_Expression [@js 82] | `U_n_83 of ts_Expression [@js 83] | `U_n_84 of ts_Expression [@js 84] | `U_n_85 of ts_Expression [@js 85] | `U_n_86 of ts_Expression [@js 86] | `U_n_87 of ts_Expression [@js 87] | `U_n_88 of ts_Expression [@js 88] | `U_n_89 of ts_Expression [@js 89] | `U_n_90 of ts_Expression [@js 90] | `U_n_91 of ts_Expression [@js 91] | `U_n_92 of ts_Expression [@js 92] | `U_n_93 of ts_Expression [@js 93] | `U_n_94 of ts_Expression [@js 94] | `U_n_95 of ts_Expression [@js 95] | `U_n_96 of ts_Expression [@js 96] | `U_n_97 of ts_Expression [@js 97] | `U_n_98 of ts_Expression [@js 98] | `U_n_99 of ts_Expression [@js 99] | `U_n_100 of ts_Expression [@js 100] | `U_n_101 of ts_Expression [@js 101] | `U_n_102 of ts_Expression [@js 102] | `U_n_103 of ts_Expression [@js 103] | `U_n_104 of ts_Expression [@js 104] | `U_n_105 of ts_Expression [@js 105] | `U_n_106 of ts_Expression [@js 106] | `U_n_107 of ts_Expression [@js 107] | `U_n_108 of ts_Expression [@js 108] | `U_n_109 of ts_Expression [@js 109] | `U_n_110 of ts_Expression [@js 110] | `U_n_111 of ts_Expression [@js 111] | `U_n_112 of ts_Expression [@js 112] | `U_n_113 of ts_Expression [@js 113] | `U_n_114 of ts_Expression [@js 114] | `U_n_115 of ts_Expression [@js 115] | `U_n_116 of ts_Expression [@js 116] | `U_n_117 of ts_Expression [@js 117] | `U_n_118 of ts_Expression [@js 118] | `U_n_119 of ts_Expression [@js 119] | `U_n_120 of ts_Expression [@js 120] | `U_n_121 of ts_Expression [@js 121] | `U_n_122 of ts_Expression [@js 122] | `U_n_123 of ts_Expression [@js 123] | `U_n_124 of ts_Expression [@js 124] | `U_n_125 of ts_Expression [@js 125] | `U_n_126 of ts_Expression [@js 126] | `U_n_127 of ts_Expression [@js 127] | `U_n_128 of ts_Expression [@js 128] | `U_n_129 of ts_Expression [@js 129] | `U_n_130 of ts_Expression [@js 130] | `U_n_131 of ts_Expression [@js 131] | `U_n_132 of ts_Expression [@js 132] | `U_n_133 of ts_Expression [@js 133] | `U_n_134 of ts_Expression [@js 134] | `U_n_135 of ts_Expression [@js 135] | `U_n_136 of ts_Expression [@js 136] | `U_n_137 of ts_Expression [@js 137] | `U_n_138 of ts_Expression [@js 138] | `U_n_139 of ts_Expression [@js 139] | `U_n_140 of ts_Expression [@js 140] | `U_n_141 of ts_Expression [@js 141] | `U_n_142 of ts_Expression [@js 142] | `U_n_143 of ts_Expression [@js 143] | `U_n_144 of ts_Expression [@js 144] | `U_n_145 of ts_Expression [@js 145] | `U_n_146 of ts_Expression [@js 146] | `U_n_147 of ts_Expression [@js 147] | `U_n_148 of ts_Expression [@js 148] | `U_n_149 of ts_Expression [@js 149] | `U_n_150 of ts_Expression [@js 150] | `U_n_151 of ts_Expression [@js 151] | `U_n_152 of ts_Expression [@js 152] | `U_n_153 of ts_Expression [@js 153] | `U_n_154 of ts_Expression [@js 154] | `U_n_155 of ts_Expression [@js 155] | `U_n_156 of ts_Expression [@js 156] | `U_n_157 of ts_Expression [@js 157] | `U_n_158 of ts_Expression [@js 158] | `U_n_159 of ts_Expression [@js 159] | `U_n_160 of ts_Expression [@js 160] | `U_n_161 of ts_Expression [@js 161] | `U_n_162 of ts_Expression [@js 162] | `U_n_163 of ts_Expression [@js 163] | `U_n_164 of ts_Expression [@js 164] | `U_n_165 of ts_Expression [@js 165] | `U_n_166 of ts_Expression [@js 166] | `U_n_167 of ts_Expression [@js 167] | `U_n_168 of ts_Expression [@js 168] | `U_n_169 of ts_Expression [@js 169] | `U_n_170 of ts_Expression [@js 170] | `U_n_171 of ts_Expression [@js 171] | `U_n_172 of ts_Expression [@js 172] | `U_n_173 of ts_Expression [@js 173] | `U_n_174 of ts_Expression [@js 174] | `U_n_175 of ts_Expression [@js 175] | `U_n_176 of ts_Expression [@js 176] | `U_n_177 of ts_Expression [@js 177] | `U_n_178 of ts_Expression [@js 178] | `U_n_179 of ts_Expression [@js 179] | `U_n_180 of ts_Expression [@js 180] | `U_n_181 of ts_Expression [@js 181] | `U_n_182 of ts_Expression [@js 182] | `U_n_183 of ts_Expression [@js 183] | `U_n_184 of ts_Expression [@js 184] | `U_n_185 of ts_Expression [@js 185] | `U_n_186 of ts_Expression [@js 186] | `U_n_187 of ts_Expression [@js 187] | `U_n_188 of ts_Expression [@js 188] | `U_n_189 of ts_Expression [@js 189] | `U_n_190 of ts_Expression [@js 190] | `U_n_191 of ts_Expression [@js 191] | `U_n_192 of ts_Expression [@js 192] | `U_n_193 of ts_Expression [@js 193] | `U_n_194 of ts_Expression [@js 194] | `U_n_195 of ts_Expression [@js 195] | `U_n_196 of ts_Expression [@js 196] | `U_n_197 of ts_Expression [@js 197] | `U_n_198 of ts_Expression [@js 198] | `U_n_199 of ts_Expression [@js 199] | `U_n_200 of ts_Expression [@js 200] | `U_n_201 of ts_Expression [@js 201] | `U_n_202 of ts_Expression [@js 202] | `U_n_203 of ts_Expression [@js 203] | `U_n_204 of ts_Expression [@js 204] | `U_n_205 of ts_Expression [@js 205] | `U_n_206 of ts_Expression [@js 206] | `U_n_207 of ts_Expression [@js 207] | `U_n_208 of ts_Expression [@js 208] | `U_n_209 of ts_Expression [@js 209] | `U_n_210 of ts_Expression [@js 210] | `U_n_211 of ts_Expression [@js 211] | `U_n_212 of ts_Expression [@js 212] | `U_n_213 of ts_Expression [@js 213] | `U_n_214 of ts_Expression [@js 214] | `U_n_215 of ts_Expression [@js 215] | `U_n_216 of ts_Expression [@js 216] | `U_n_217 of ts_Expression [@js 217] | `U_n_218 of ts_Expression [@js 218] | `U_n_219 of ts_Expression [@js 219] | `U_n_220 of ts_Expression [@js 220] | `U_n_221 of ts_Expression [@js 221] | `U_n_222 of ts_Expression [@js 222] | `U_n_223 of ts_Expression [@js 223] | `U_n_224 of ts_Expression [@js 224] | `U_n_225 of ts_Expression [@js 225] | `U_n_226 of ts_Expression [@js 226] | `U_n_227 of ts_Expression [@js 227] | `U_n_228 of ts_Expression [@js 228] | `U_n_229 of ts_Expression [@js 229] | `U_n_230 of (ts_Block, ts_Expression) union2 [@js 230] | `U_n_231 of ts_Expression [@js 231] | `U_n_232 of ts_Expression [@js 232] | `U_n_233 of ts_Expression [@js 233] | `U_n_234 of ts_Expression [@js 234] | `U_n_235 of ts_Expression [@js 235] | `U_n_236 of ts_Expression [@js 236] | `U_n_237 of ts_Expression [@js 237] | `U_n_238 of ts_Expression [@js 238] | `U_n_239 of ts_Expression [@js 239] | `U_n_240 of ts_Expression [@js 240] | `U_n_241 of ts_Expression [@js 241] | `U_n_242 of ts_Expression [@js 242] | `U_n_243 of ts_Expression [@js 243] | `U_n_244 of ts_Expression [@js 244] | `U_n_245 of ts_Expression [@js 245] | `U_n_246 of ts_Expression [@js 246] | `U_n_247 of ts_Expression [@js 247] | `U_n_248 of ts_Expression [@js 248] | `U_n_249 of ts_Expression [@js 249] | `U_n_250 of ts_Expression [@js 250] | `U_n_251 of ts_Expression [@js 251] | `U_n_252 of ts_Expression [@js 252] | `U_n_253 of ts_Expression [@js 253] | `U_n_254 of ts_Expression [@js 254] | `U_n_255 of ts_Expression [@js 255] | `U_n_256 of ts_Expression [@js 256] | `U_n_257 of ts_Expression [@js 257] | `U_n_258 of ts_Expression [@js 258] | `U_n_259 of ts_Expression [@js 259] | `U_n_260 of ts_Expression [@js 260] | `U_n_261 of ts_Expression [@js 261] | `U_n_262 of ts_Expression [@js 262] | `U_n_263 of ts_Expression [@js 263] | `U_n_264 of ts_Expression [@js 264] | `U_n_265 of ts_Expression [@js 265] | `U_n_266 of ts_Expression [@js 266] | `U_n_267 of ts_Expression [@js 267] | `U_n_268 of ts_Expression [@js 268] | `U_n_269 of ts_Expression [@js 269] | `U_n_270 of ts_Expression [@js 270] | `U_n_271 of ts_Expression [@js 271] | `U_n_272 of ts_Expression [@js 272] | `U_n_273 of ts_Expression [@js 273] | `U_n_274 of ts_Expression [@js 274] | `U_n_275 of ts_Expression [@js 275] | `U_n_276 of ts_Expression [@js 276] | `U_n_277 of ts_Expression [@js 277] | `U_n_278 of ts_Expression [@js 278] | `U_n_279 of ts_Expression [@js 279] | `U_n_280 of ts_Expression [@js 280] | `U_n_281 of ts_Expression [@js 281] | `U_n_282 of ts_Expression [@js 282] | `U_n_283 of ts_Expression [@js 283] | `U_n_284 of ts_Expression [@js 284] | `U_n_285 of ts_Expression [@js 285] | `U_n_286 of ts_Expression [@js 286] | `U_n_287 of ts_Expression [@js 287] | `U_n_288 of ts_Expression [@js 288] | `U_n_289 of ts_Expression [@js 289] | `U_n_290 of ts_Expression [@js 290] | `U_n_291 of ts_Expression [@js 291] | `U_n_292 of ts_Expression [@js 292] | `U_n_293 of ts_Expression [@js 293] | `U_n_294 of ts_Expression [@js 294] | `U_n_295 of ts_Expression [@js 295] | `U_n_296 of ts_Expression [@js 296] | `U_n_297 of ts_Expression [@js 297] | `U_n_298 of ts_Expression [@js 298] | `U_n_299 of ts_Expression [@js 299] | `U_n_300 of ts_Expression [@js 300] | `U_n_301 of ts_Expression [@js 301] | `U_n_302 of ts_Expression [@js 302] | `U_n_303 of ts_Expression [@js 303] | `U_n_304 of ts_Expression [@js 304] | `U_n_305 of ts_Expression [@js 305] | `U_n_306 of ts_Expression [@js 306] | `U_n_307 of ts_Expression [@js 307] | `U_n_308 of ts_Expression [@js 308] | `U_n_309 of ts_Expression [@js 309] | `U_n_310 of ts_Expression [@js 310] | `U_n_311 of ts_Expression [@js 311] | `U_n_312 of ts_Expression [@js 312] | `U_n_313 of ts_Expression [@js 313] | `U_n_314 of ts_Expression [@js 314] | `U_n_315 of ts_Expression [@js 315] | `U_n_316 of ts_Expression [@js 316] | `U_n_317 of ts_Expression [@js 317] | `U_n_318 of ts_Expression [@js 318] | `U_n_319 of ts_Expression [@js 319] | `U_n_320 of ts_Expression [@js 320] | `U_n_321 of ts_Expression [@js 321] | `U_n_322 of ts_Expression [@js 322] | `U_n_323 of ts_Expression [@js 323] | `U_n_324 of ts_Expression [@js 324] | `U_n_325 of ts_Expression [@js 325] | `U_n_326 of ts_Expression [@js 326] | `U_n_327 of ts_Expression [@js 327] | `U_n_328 of ts_Expression [@js 328] | `U_n_329 of ts_Expression [@js 329] | `U_n_330 of ts_Expression [@js 330] | `U_n_331 of ts_Expression [@js 331] | `U_n_332 of ts_Expression [@js 332] | `U_n_333 of ts_Expression [@js 333] | `U_n_334 of ts_Expression [@js 334] | `U_n_335 of ts_Expression [@js 335] | `U_n_336 of ts_Expression [@js 336] | `U_n_337 of ts_Expression [@js 337] | `U_n_338 of ts_Expression [@js 338] | `U_n_339 of ts_Expression [@js 339] | `U_n_340 of ts_Expression [@js 340] | `U_n_341 of ts_Expression [@js 341]] [@js.union on_field "kind"]) [@@js.get "body"]
    val cast: t -> ts_SignatureDeclarationBase [@@js.cast]
  end
  module FunctionLikeDeclaration : sig
    type t = ts_FunctionLikeDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FunctionLikeDeclaration]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FunctionLikeDeclaration]
    ]
  end
  (** @deprecated Use SignatureDeclaration *)
  module FunctionLike : sig
    type t = ts_FunctionLike
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FunctionLike | `Ts_SignatureDeclaration]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FunctionLike | `Ts_SignatureDeclaration]
    ]
  end
  module[@js.scope "FunctionDeclaration"] FunctionDeclaration : sig
    type t = ts_FunctionDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_FunctionDeclaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_FunctionDeclaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_FunctionDeclaration [@@js.get "kind"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_body: t -> ts_FunctionBody [@@js.get "body"]
    val cast: t -> ts_FunctionLikeDeclarationBase [@@js.cast]
    val cast': t -> ts_DeclarationStatement [@@js.cast]
  end
  module[@js.scope "MethodSignature"] MethodSignature : sig
    type t = ts_MethodSignature
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_MethodSignature | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeElement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_MethodSignature | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeElement]
    ]
    val get_kind: t -> ts_SyntaxKind_MethodSignature [@@js.get "kind"]
    val get_parent: t -> ts_ObjectTypeDeclaration [@@js.get "parent"]
    val get_name: t -> ts_PropertyName [@@js.get "name"]
    val cast: t -> ts_SignatureDeclarationBase [@@js.cast]
    val cast': t -> ts_TypeElement [@@js.cast]
  end
  module[@js.scope "MethodDeclaration"] MethodDeclaration : sig
    type t = ts_MethodDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassElement | `Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_MethodDeclaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassElement | `Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_MethodDeclaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase]
    ]
    val get_kind: t -> ts_SyntaxKind_MethodDeclaration [@@js.get "kind"]
    val get_parent: t -> ([`U_n_200 of ts_ObjectLiteralExpression [@js 200] | `U_n_221 of ts_ClassLikeDeclaration [@js 221] | `U_n_252 of ts_ClassLikeDeclaration [@js 252]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_name: t -> ts_PropertyName [@@js.get "name"]
    val get_body: t -> ts_FunctionBody [@@js.get "body"]
    val cast: t -> ts_FunctionLikeDeclarationBase [@@js.cast]
    val cast': t -> ts_ClassElement [@@js.cast]
    val cast'': t -> ts_ObjectLiteralElement [@@js.cast]
    val cast''': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "ConstructorDeclaration"] ConstructorDeclaration : sig
    type t = ts_ConstructorDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassElement | `Ts_ConstructorDeclaration | `Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassElement | `Ts_ConstructorDeclaration | `Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase]
    ]
    val get_kind: t -> ts_SyntaxKind_Constructor [@@js.get "kind"]
    val get_parent: t -> ts_ClassLikeDeclaration [@@js.get "parent"]
    val get_body: t -> ts_FunctionBody [@@js.get "body"]
    val cast: t -> ts_FunctionLikeDeclarationBase [@@js.cast]
    val cast': t -> ts_ClassElement [@@js.cast]
    val cast'': t -> ts_JSDocContainer [@@js.cast]
  end
  (** For when we encounter a semicolon in a class declaration. ES6 allows these as class elements. *)
  module[@js.scope "SemicolonClassElement"] SemicolonClassElement : sig
    type t = ts_SemicolonClassElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassElement | `Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SemicolonClassElement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassElement | `Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SemicolonClassElement]
    ]
    val get_kind: t -> ts_SyntaxKind_SemicolonClassElement [@@js.get "kind"]
    val get_parent: t -> ts_ClassLikeDeclaration [@@js.get "parent"]
    val cast: t -> ts_ClassElement [@@js.cast]
  end
  module[@js.scope "GetAccessorDeclaration"] GetAccessorDeclaration : sig
    type t = ts_GetAccessorDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassElement | `Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_GetAccessorDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassElement | `Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_GetAccessorDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase]
    ]
    val get_kind: t -> ts_SyntaxKind_GetAccessor [@@js.get "kind"]
    val get_parent: t -> ([`U_n_200 of ts_ObjectLiteralExpression [@js 200] | `U_n_221 of ts_ClassLikeDeclaration [@js 221] | `U_n_252 of ts_ClassLikeDeclaration [@js 252]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_name: t -> ts_PropertyName [@@js.get "name"]
    val get_body: t -> ts_FunctionBody [@@js.get "body"]
    val cast: t -> ts_FunctionLikeDeclarationBase [@@js.cast]
    val cast': t -> ts_ClassElement [@@js.cast]
    val cast'': t -> ts_ObjectLiteralElement [@@js.cast]
    val cast''': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "SetAccessorDeclaration"] SetAccessorDeclaration : sig
    type t = ts_SetAccessorDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassElement | `Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_SetAccessorDeclaration | `Ts_SignatureDeclarationBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassElement | `Ts_Declaration | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange | `Ts_SetAccessorDeclaration | `Ts_SignatureDeclarationBase]
    ]
    val get_kind: t -> ts_SyntaxKind_SetAccessor [@@js.get "kind"]
    val get_parent: t -> ([`U_n_200 of ts_ObjectLiteralExpression [@js 200] | `U_n_221 of ts_ClassLikeDeclaration [@js 221] | `U_n_252 of ts_ClassLikeDeclaration [@js 252]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_name: t -> ts_PropertyName [@@js.get "name"]
    val get_body: t -> ts_FunctionBody [@@js.get "body"]
    val cast: t -> ts_FunctionLikeDeclarationBase [@@js.cast]
    val cast': t -> ts_ClassElement [@@js.cast]
    val cast'': t -> ts_ObjectLiteralElement [@@js.cast]
    val cast''': t -> ts_JSDocContainer [@@js.cast]
  end
  module AccessorDeclaration : sig
    type t = ts_AccessorDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AccessorDeclaration]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AccessorDeclaration]
    ]
  end
  module[@js.scope "IndexSignatureDeclaration"] IndexSignatureDeclaration : sig
    type t = ts_IndexSignatureDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassElement | `Ts_Declaration | `Ts_IndexSignatureDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeElement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassElement | `Ts_Declaration | `Ts_IndexSignatureDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeElement]
    ]
    val get_kind: t -> ts_SyntaxKind_IndexSignature [@@js.get "kind"]
    val get_parent: t -> ts_ObjectTypeDeclaration [@@js.get "parent"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_SignatureDeclarationBase [@@js.cast]
    val cast': t -> ts_ClassElement [@@js.cast]
    val cast'': t -> ts_TypeElement [@@js.cast]
  end
  module[@js.scope "TypeNode"] TypeNode : sig
    type t = ts_TypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get__typeNodeBrand: t -> any [@@js.get "_typeNodeBrand"]
    val set__typeNodeBrand: t -> any -> unit [@@js.set "_typeNodeBrand"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "KeywordTypeNode"] KeywordTypeNode : sig
    type 'TKind t = 'TKind ts_KeywordTypeNode
    val t_to_js: ('TKind -> Ojs.t) -> 'TKind t -> Ojs.t
    val t_of_js: (Ojs.t -> 'TKind) -> Ojs.t -> 'TKind t
    type 'TKind t_1 = 'TKind t
    val t_1_to_js: ('TKind -> Ojs.t) -> 'TKind t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'TKind) -> Ojs.t -> 'TKind t_1
    type t_0 = ts_KeywordTypeSyntaxKind t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type 'TKind tags = [`Ts_KeywordToken of 'TKind | `Ts_KeywordTypeNode of 'TKind | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type 'TKind tags = [`Ts_KeywordToken of 'TKind | `Ts_KeywordTypeNode of 'TKind | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of 'TKind | `Ts_TypeNode]
    ]
    val get_kind: 'TKind t -> 'TKind [@@js.get "kind"]
    val cast: 'TKind t -> 'TKind ts_KeywordToken [@@js.cast]
    val cast': 'TKind t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "ImportTypeNode"] ImportTypeNode : sig
    type t = ts_ImportTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ImportTypeNode | `Ts_Node | `Ts_NodeWithTypeArguments | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ImportTypeNode | `Ts_Node | `Ts_NodeWithTypeArguments | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_ImportType [@@js.get "kind"]
    val get_isTypeOf: t -> bool [@@js.get "isTypeOf"]
    val get_argument: t -> ts_TypeNode [@@js.get "argument"]
    val get_qualifier: t -> ts_EntityName [@@js.get "qualifier"]
    val cast: t -> ts_NodeWithTypeArguments [@@js.cast]
  end
  module[@js.scope "ThisTypeNode"] ThisTypeNode : sig
    type t = ts_ThisTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_ThisTypeNode | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_ThisTypeNode | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_ThisType [@@js.get "kind"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module FunctionOrConstructorTypeNode : sig
    type t = ts_FunctionOrConstructorTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FunctionOrConstructorTypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FunctionOrConstructorTypeNode]
    ]
  end
  module[@js.scope "FunctionOrConstructorTypeNodeBase"] FunctionOrConstructorTypeNodeBase : sig
    type t = ts_FunctionOrConstructorTypeNodeBase
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_FunctionOrConstructorTypeNodeBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_FunctionOrConstructorTypeNodeBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeNode]
    ]
    val get_kind: t -> ((ts_SyntaxKind_ConstructorType, ts_SyntaxKind_FunctionType) union2, ([`ConstructorType[@js 175] | `FunctionType[@js 174]] [@js.enum])) or_enum [@@js.get "kind"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_TypeNode [@@js.cast]
    val cast': t -> ts_SignatureDeclarationBase [@@js.cast]
  end
  module[@js.scope "FunctionTypeNode"] FunctionTypeNode : sig
    type t = ts_FunctionTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_FunctionOrConstructorTypeNodeBase | `Ts_FunctionTypeNode | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_FunctionOrConstructorTypeNodeBase | `Ts_FunctionTypeNode | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_FunctionType [@@js.get "kind"]
    val cast: t -> ts_FunctionOrConstructorTypeNodeBase [@@js.cast]
  end
  module[@js.scope "ConstructorTypeNode"] ConstructorTypeNode : sig
    type t = ts_ConstructorTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ConstructorTypeNode | `Ts_Declaration | `Ts_FunctionOrConstructorTypeNodeBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ConstructorTypeNode | `Ts_Declaration | `Ts_FunctionOrConstructorTypeNodeBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_ConstructorType [@@js.get "kind"]
    val cast: t -> ts_FunctionOrConstructorTypeNodeBase [@@js.cast]
  end
  module[@js.scope "NodeWithTypeArguments"] NodeWithTypeArguments : sig
    type t = ts_NodeWithTypeArguments
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_NodeWithTypeArguments | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_NodeWithTypeArguments | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_typeArguments: t -> ts_TypeNode ts_NodeArray [@@js.get "typeArguments"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module TypeReferenceType : sig
    type t = ts_TypeReferenceType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TypeReferenceType]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TypeReferenceType]
    ]
  end
  module[@js.scope "TypeReferenceNode"] TypeReferenceNode : sig
    type t = ts_TypeReferenceNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_NodeWithTypeArguments | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_TypeReferenceNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_NodeWithTypeArguments | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_TypeReferenceNode]
    ]
    val get_kind: t -> ts_SyntaxKind_TypeReference [@@js.get "kind"]
    val get_typeName: t -> ts_EntityName [@@js.get "typeName"]
    val cast: t -> ts_NodeWithTypeArguments [@@js.cast]
  end
  module[@js.scope "TypePredicateNode"] TypePredicateNode : sig
    type t = ts_TypePredicateNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_TypePredicateNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_TypePredicateNode]
    ]
    val get_kind: t -> ts_SyntaxKind_TypePredicate [@@js.get "kind"]
    val get_parent: t -> ([`U_n_164 of ts_SignatureDeclaration [@js 164] | `U_n_165 of ts_SignatureDeclaration [@js 165] | `U_n_166 of ts_SignatureDeclaration [@js 166] | `U_n_167 of ts_SignatureDeclaration [@js 167] | `U_n_168 of ts_SignatureDeclaration [@js 168] | `U_n_169 of ts_SignatureDeclaration [@js 169] | `U_n_170 of ts_SignatureDeclaration [@js 170] | `U_n_171 of ts_SignatureDeclaration [@js 171] | `U_n_174 of ts_SignatureDeclaration [@js 174] | `U_n_175 of ts_SignatureDeclaration [@js 175] | `U_n_208 of ts_SignatureDeclaration [@js 208] | `U_n_209 of ts_SignatureDeclaration [@js 209] | `U_n_251 of ts_SignatureDeclaration [@js 251] | `U_n_301 of ts_JSDocTypeExpression [@js 301] | `U_n_308 of ts_SignatureDeclaration [@js 308]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_assertsModifier: t -> ts_AssertsToken [@@js.get "assertsModifier"]
    val get_parameterName: t -> ([`U_n_78 of ts_Identifier [@js 78] | `U_n_187 of ts_ThisTypeNode [@js 187]] [@js.union on_field "kind"]) [@@js.get "parameterName"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "TypeQueryNode"] TypeQueryNode : sig
    type t = ts_TypeQueryNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_TypeQueryNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_TypeQueryNode]
    ]
    val get_kind: t -> ts_SyntaxKind_TypeQuery [@@js.get "kind"]
    val get_exprName: t -> ts_EntityName [@@js.get "exprName"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "TypeLiteralNode"] TypeLiteralNode : sig
    type t = ts_TypeLiteralNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeLiteralNode | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeLiteralNode | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_TypeLiteral [@@js.get "kind"]
    val get_members: t -> ts_TypeElement ts_NodeArray [@@js.get "members"]
    val cast: t -> ts_TypeNode [@@js.cast]
    val cast': t -> ts_Declaration [@@js.cast]
  end
  module[@js.scope "ArrayTypeNode"] ArrayTypeNode : sig
    type t = ts_ArrayTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ArrayTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ArrayTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_ArrayType [@@js.get "kind"]
    val get_elementType: t -> ts_TypeNode [@@js.get "elementType"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "TupleTypeNode"] TupleTypeNode : sig
    type t = ts_TupleTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TupleTypeNode | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TupleTypeNode | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_TupleType [@@js.get "kind"]
    val get_elements: t -> ([`U_n_0 of ts_TypeNode [@js 0] | `U_n_1 of ts_TypeNode [@js 1] | `U_n_2 of ts_TypeNode [@js 2] | `U_n_3 of ts_TypeNode [@js 3] | `U_n_4 of ts_TypeNode [@js 4] | `U_n_5 of ts_TypeNode [@js 5] | `U_n_6 of ts_TypeNode [@js 6] | `U_n_7 of ts_TypeNode [@js 7] | `U_n_8 of ts_TypeNode [@js 8] | `U_n_9 of ts_TypeNode [@js 9] | `U_n_10 of ts_TypeNode [@js 10] | `U_n_11 of ts_TypeNode [@js 11] | `U_n_12 of ts_TypeNode [@js 12] | `U_n_13 of ts_TypeNode [@js 13] | `U_n_14 of ts_TypeNode [@js 14] | `U_n_15 of ts_TypeNode [@js 15] | `U_n_16 of ts_TypeNode [@js 16] | `U_n_17 of ts_TypeNode [@js 17] | `U_n_18 of ts_TypeNode [@js 18] | `U_n_19 of ts_TypeNode [@js 19] | `U_n_20 of ts_TypeNode [@js 20] | `U_n_21 of ts_TypeNode [@js 21] | `U_n_22 of ts_TypeNode [@js 22] | `U_n_23 of ts_TypeNode [@js 23] | `U_n_24 of ts_TypeNode [@js 24] | `U_n_25 of ts_TypeNode [@js 25] | `U_n_26 of ts_TypeNode [@js 26] | `U_n_27 of ts_TypeNode [@js 27] | `U_n_28 of ts_TypeNode [@js 28] | `U_n_29 of ts_TypeNode [@js 29] | `U_n_30 of ts_TypeNode [@js 30] | `U_n_31 of ts_TypeNode [@js 31] | `U_n_32 of ts_TypeNode [@js 32] | `U_n_33 of ts_TypeNode [@js 33] | `U_n_34 of ts_TypeNode [@js 34] | `U_n_35 of ts_TypeNode [@js 35] | `U_n_36 of ts_TypeNode [@js 36] | `U_n_37 of ts_TypeNode [@js 37] | `U_n_38 of ts_TypeNode [@js 38] | `U_n_39 of ts_TypeNode [@js 39] | `U_n_40 of ts_TypeNode [@js 40] | `U_n_41 of ts_TypeNode [@js 41] | `U_n_42 of ts_TypeNode [@js 42] | `U_n_43 of ts_TypeNode [@js 43] | `U_n_44 of ts_TypeNode [@js 44] | `U_n_45 of ts_TypeNode [@js 45] | `U_n_46 of ts_TypeNode [@js 46] | `U_n_47 of ts_TypeNode [@js 47] | `U_n_48 of ts_TypeNode [@js 48] | `U_n_49 of ts_TypeNode [@js 49] | `U_n_50 of ts_TypeNode [@js 50] | `U_n_51 of ts_TypeNode [@js 51] | `U_n_52 of ts_TypeNode [@js 52] | `U_n_53 of ts_TypeNode [@js 53] | `U_n_54 of ts_TypeNode [@js 54] | `U_n_55 of ts_TypeNode [@js 55] | `U_n_56 of ts_TypeNode [@js 56] | `U_n_57 of ts_TypeNode [@js 57] | `U_n_58 of ts_TypeNode [@js 58] | `U_n_59 of ts_TypeNode [@js 59] | `U_n_60 of ts_TypeNode [@js 60] | `U_n_61 of ts_TypeNode [@js 61] | `U_n_62 of ts_TypeNode [@js 62] | `U_n_63 of ts_TypeNode [@js 63] | `U_n_64 of ts_TypeNode [@js 64] | `U_n_65 of ts_TypeNode [@js 65] | `U_n_66 of ts_TypeNode [@js 66] | `U_n_67 of ts_TypeNode [@js 67] | `U_n_68 of ts_TypeNode [@js 68] | `U_n_69 of ts_TypeNode [@js 69] | `U_n_70 of ts_TypeNode [@js 70] | `U_n_71 of ts_TypeNode [@js 71] | `U_n_72 of ts_TypeNode [@js 72] | `U_n_73 of ts_TypeNode [@js 73] | `U_n_74 of ts_TypeNode [@js 74] | `U_n_75 of ts_TypeNode [@js 75] | `U_n_76 of ts_TypeNode [@js 76] | `U_n_77 of ts_TypeNode [@js 77] | `U_n_78 of ts_TypeNode [@js 78] | `U_n_79 of ts_TypeNode [@js 79] | `U_n_80 of ts_TypeNode [@js 80] | `U_n_81 of ts_TypeNode [@js 81] | `U_n_82 of ts_TypeNode [@js 82] | `U_n_83 of ts_TypeNode [@js 83] | `U_n_84 of ts_TypeNode [@js 84] | `U_n_85 of ts_TypeNode [@js 85] | `U_n_86 of ts_TypeNode [@js 86] | `U_n_87 of ts_TypeNode [@js 87] | `U_n_88 of ts_TypeNode [@js 88] | `U_n_89 of ts_TypeNode [@js 89] | `U_n_90 of ts_TypeNode [@js 90] | `U_n_91 of ts_TypeNode [@js 91] | `U_n_92 of ts_TypeNode [@js 92] | `U_n_93 of ts_TypeNode [@js 93] | `U_n_94 of ts_TypeNode [@js 94] | `U_n_95 of ts_TypeNode [@js 95] | `U_n_96 of ts_TypeNode [@js 96] | `U_n_97 of ts_TypeNode [@js 97] | `U_n_98 of ts_TypeNode [@js 98] | `U_n_99 of ts_TypeNode [@js 99] | `U_n_100 of ts_TypeNode [@js 100] | `U_n_101 of ts_TypeNode [@js 101] | `U_n_102 of ts_TypeNode [@js 102] | `U_n_103 of ts_TypeNode [@js 103] | `U_n_104 of ts_TypeNode [@js 104] | `U_n_105 of ts_TypeNode [@js 105] | `U_n_106 of ts_TypeNode [@js 106] | `U_n_107 of ts_TypeNode [@js 107] | `U_n_108 of ts_TypeNode [@js 108] | `U_n_109 of ts_TypeNode [@js 109] | `U_n_110 of ts_TypeNode [@js 110] | `U_n_111 of ts_TypeNode [@js 111] | `U_n_112 of ts_TypeNode [@js 112] | `U_n_113 of ts_TypeNode [@js 113] | `U_n_114 of ts_TypeNode [@js 114] | `U_n_115 of ts_TypeNode [@js 115] | `U_n_116 of ts_TypeNode [@js 116] | `U_n_117 of ts_TypeNode [@js 117] | `U_n_118 of ts_TypeNode [@js 118] | `U_n_119 of ts_TypeNode [@js 119] | `U_n_120 of ts_TypeNode [@js 120] | `U_n_121 of ts_TypeNode [@js 121] | `U_n_122 of ts_TypeNode [@js 122] | `U_n_123 of ts_TypeNode [@js 123] | `U_n_124 of ts_TypeNode [@js 124] | `U_n_125 of ts_TypeNode [@js 125] | `U_n_126 of ts_TypeNode [@js 126] | `U_n_127 of ts_TypeNode [@js 127] | `U_n_128 of ts_TypeNode [@js 128] | `U_n_129 of ts_TypeNode [@js 129] | `U_n_130 of ts_TypeNode [@js 130] | `U_n_131 of ts_TypeNode [@js 131] | `U_n_132 of ts_TypeNode [@js 132] | `U_n_133 of ts_TypeNode [@js 133] | `U_n_134 of ts_TypeNode [@js 134] | `U_n_135 of ts_TypeNode [@js 135] | `U_n_136 of ts_TypeNode [@js 136] | `U_n_137 of ts_TypeNode [@js 137] | `U_n_138 of ts_TypeNode [@js 138] | `U_n_139 of ts_TypeNode [@js 139] | `U_n_140 of ts_TypeNode [@js 140] | `U_n_141 of ts_TypeNode [@js 141] | `U_n_142 of ts_TypeNode [@js 142] | `U_n_143 of ts_TypeNode [@js 143] | `U_n_144 of ts_TypeNode [@js 144] | `U_n_145 of ts_TypeNode [@js 145] | `U_n_146 of ts_TypeNode [@js 146] | `U_n_147 of ts_TypeNode [@js 147] | `U_n_148 of ts_TypeNode [@js 148] | `U_n_149 of ts_TypeNode [@js 149] | `U_n_150 of ts_TypeNode [@js 150] | `U_n_151 of ts_TypeNode [@js 151] | `U_n_152 of ts_TypeNode [@js 152] | `U_n_153 of ts_TypeNode [@js 153] | `U_n_154 of ts_TypeNode [@js 154] | `U_n_155 of ts_TypeNode [@js 155] | `U_n_156 of ts_TypeNode [@js 156] | `U_n_157 of ts_TypeNode [@js 157] | `U_n_158 of ts_TypeNode [@js 158] | `U_n_159 of ts_TypeNode [@js 159] | `U_n_160 of ts_TypeNode [@js 160] | `U_n_161 of ts_TypeNode [@js 161] | `U_n_162 of ts_TypeNode [@js 162] | `U_n_163 of ts_TypeNode [@js 163] | `U_n_164 of ts_TypeNode [@js 164] | `U_n_165 of ts_TypeNode [@js 165] | `U_n_166 of ts_TypeNode [@js 166] | `U_n_167 of ts_TypeNode [@js 167] | `U_n_168 of ts_TypeNode [@js 168] | `U_n_169 of ts_TypeNode [@js 169] | `U_n_170 of ts_TypeNode [@js 170] | `U_n_171 of ts_TypeNode [@js 171] | `U_n_172 of ts_TypeNode [@js 172] | `U_n_173 of ts_TypeNode [@js 173] | `U_n_174 of ts_TypeNode [@js 174] | `U_n_175 of ts_TypeNode [@js 175] | `U_n_176 of ts_TypeNode [@js 176] | `U_n_177 of ts_TypeNode [@js 177] | `U_n_178 of ts_TypeNode [@js 178] | `U_n_179 of ts_TypeNode [@js 179] | `U_n_180 of ts_TypeNode [@js 180] | `U_n_181 of ts_TypeNode [@js 181] | `U_n_182 of ts_TypeNode [@js 182] | `U_n_183 of ts_TypeNode [@js 183] | `U_n_184 of ts_TypeNode [@js 184] | `U_n_185 of ts_TypeNode [@js 185] | `U_n_186 of ts_TypeNode [@js 186] | `U_n_187 of ts_TypeNode [@js 187] | `U_n_188 of ts_TypeNode [@js 188] | `U_n_189 of ts_TypeNode [@js 189] | `U_n_190 of ts_TypeNode [@js 190] | `U_n_191 of ts_TypeNode [@js 191] | `U_n_192 of (ts_TypeNode, ts_NamedTupleMember) union2 [@js 192] | `U_n_193 of ts_TypeNode [@js 193] | `U_n_194 of ts_TypeNode [@js 194] | `U_n_195 of ts_TypeNode [@js 195] | `U_n_196 of ts_TypeNode [@js 196] | `U_n_197 of ts_TypeNode [@js 197] | `U_n_198 of ts_TypeNode [@js 198] | `U_n_199 of ts_TypeNode [@js 199] | `U_n_200 of ts_TypeNode [@js 200] | `U_n_201 of ts_TypeNode [@js 201] | `U_n_202 of ts_TypeNode [@js 202] | `U_n_203 of ts_TypeNode [@js 203] | `U_n_204 of ts_TypeNode [@js 204] | `U_n_205 of ts_TypeNode [@js 205] | `U_n_206 of ts_TypeNode [@js 206] | `U_n_207 of ts_TypeNode [@js 207] | `U_n_208 of ts_TypeNode [@js 208] | `U_n_209 of ts_TypeNode [@js 209] | `U_n_210 of ts_TypeNode [@js 210] | `U_n_211 of ts_TypeNode [@js 211] | `U_n_212 of ts_TypeNode [@js 212] | `U_n_213 of ts_TypeNode [@js 213] | `U_n_214 of ts_TypeNode [@js 214] | `U_n_215 of ts_TypeNode [@js 215] | `U_n_216 of ts_TypeNode [@js 216] | `U_n_217 of ts_TypeNode [@js 217] | `U_n_218 of ts_TypeNode [@js 218] | `U_n_219 of ts_TypeNode [@js 219] | `U_n_220 of ts_TypeNode [@js 220] | `U_n_221 of ts_TypeNode [@js 221] | `U_n_222 of ts_TypeNode [@js 222] | `U_n_223 of ts_TypeNode [@js 223] | `U_n_224 of ts_TypeNode [@js 224] | `U_n_225 of ts_TypeNode [@js 225] | `U_n_226 of ts_TypeNode [@js 226] | `U_n_227 of ts_TypeNode [@js 227] | `U_n_228 of ts_TypeNode [@js 228] | `U_n_229 of ts_TypeNode [@js 229] | `U_n_230 of ts_TypeNode [@js 230] | `U_n_231 of ts_TypeNode [@js 231] | `U_n_232 of ts_TypeNode [@js 232] | `U_n_233 of ts_TypeNode [@js 233] | `U_n_234 of ts_TypeNode [@js 234] | `U_n_235 of ts_TypeNode [@js 235] | `U_n_236 of ts_TypeNode [@js 236] | `U_n_237 of ts_TypeNode [@js 237] | `U_n_238 of ts_TypeNode [@js 238] | `U_n_239 of ts_TypeNode [@js 239] | `U_n_240 of ts_TypeNode [@js 240] | `U_n_241 of ts_TypeNode [@js 241] | `U_n_242 of ts_TypeNode [@js 242] | `U_n_243 of ts_TypeNode [@js 243] | `U_n_244 of ts_TypeNode [@js 244] | `U_n_245 of ts_TypeNode [@js 245] | `U_n_246 of ts_TypeNode [@js 246] | `U_n_247 of ts_TypeNode [@js 247] | `U_n_248 of ts_TypeNode [@js 248] | `U_n_249 of ts_TypeNode [@js 249] | `U_n_250 of ts_TypeNode [@js 250] | `U_n_251 of ts_TypeNode [@js 251] | `U_n_252 of ts_TypeNode [@js 252] | `U_n_253 of ts_TypeNode [@js 253] | `U_n_254 of ts_TypeNode [@js 254] | `U_n_255 of ts_TypeNode [@js 255] | `U_n_256 of ts_TypeNode [@js 256] | `U_n_257 of ts_TypeNode [@js 257] | `U_n_258 of ts_TypeNode [@js 258] | `U_n_259 of ts_TypeNode [@js 259] | `U_n_260 of ts_TypeNode [@js 260] | `U_n_261 of ts_TypeNode [@js 261] | `U_n_262 of ts_TypeNode [@js 262] | `U_n_263 of ts_TypeNode [@js 263] | `U_n_264 of ts_TypeNode [@js 264] | `U_n_265 of ts_TypeNode [@js 265] | `U_n_266 of ts_TypeNode [@js 266] | `U_n_267 of ts_TypeNode [@js 267] | `U_n_268 of ts_TypeNode [@js 268] | `U_n_269 of ts_TypeNode [@js 269] | `U_n_270 of ts_TypeNode [@js 270] | `U_n_271 of ts_TypeNode [@js 271] | `U_n_272 of ts_TypeNode [@js 272] | `U_n_273 of ts_TypeNode [@js 273] | `U_n_274 of ts_TypeNode [@js 274] | `U_n_275 of ts_TypeNode [@js 275] | `U_n_276 of ts_TypeNode [@js 276] | `U_n_277 of ts_TypeNode [@js 277] | `U_n_278 of ts_TypeNode [@js 278] | `U_n_279 of ts_TypeNode [@js 279] | `U_n_280 of ts_TypeNode [@js 280] | `U_n_281 of ts_TypeNode [@js 281] | `U_n_282 of ts_TypeNode [@js 282] | `U_n_283 of ts_TypeNode [@js 283] | `U_n_284 of ts_TypeNode [@js 284] | `U_n_285 of ts_TypeNode [@js 285] | `U_n_286 of ts_TypeNode [@js 286] | `U_n_287 of ts_TypeNode [@js 287] | `U_n_288 of ts_TypeNode [@js 288] | `U_n_289 of ts_TypeNode [@js 289] | `U_n_290 of ts_TypeNode [@js 290] | `U_n_291 of ts_TypeNode [@js 291] | `U_n_292 of ts_TypeNode [@js 292] | `U_n_293 of ts_TypeNode [@js 293] | `U_n_294 of ts_TypeNode [@js 294] | `U_n_295 of ts_TypeNode [@js 295] | `U_n_296 of ts_TypeNode [@js 296] | `U_n_297 of ts_TypeNode [@js 297] | `U_n_298 of ts_TypeNode [@js 298] | `U_n_299 of ts_TypeNode [@js 299] | `U_n_300 of ts_TypeNode [@js 300] | `U_n_301 of ts_TypeNode [@js 301] | `U_n_302 of ts_TypeNode [@js 302] | `U_n_303 of ts_TypeNode [@js 303] | `U_n_304 of ts_TypeNode [@js 304] | `U_n_305 of ts_TypeNode [@js 305] | `U_n_306 of ts_TypeNode [@js 306] | `U_n_307 of ts_TypeNode [@js 307] | `U_n_308 of ts_TypeNode [@js 308] | `U_n_309 of ts_TypeNode [@js 309] | `U_n_310 of ts_TypeNode [@js 310] | `U_n_311 of ts_TypeNode [@js 311] | `U_n_312 of ts_TypeNode [@js 312] | `U_n_313 of ts_TypeNode [@js 313] | `U_n_314 of ts_TypeNode [@js 314] | `U_n_315 of ts_TypeNode [@js 315] | `U_n_316 of ts_TypeNode [@js 316] | `U_n_317 of ts_TypeNode [@js 317] | `U_n_318 of ts_TypeNode [@js 318] | `U_n_319 of ts_TypeNode [@js 319] | `U_n_320 of ts_TypeNode [@js 320] | `U_n_321 of ts_TypeNode [@js 321] | `U_n_322 of ts_TypeNode [@js 322] | `U_n_323 of ts_TypeNode [@js 323] | `U_n_324 of ts_TypeNode [@js 324] | `U_n_325 of ts_TypeNode [@js 325] | `U_n_326 of ts_TypeNode [@js 326] | `U_n_327 of ts_TypeNode [@js 327] | `U_n_328 of ts_TypeNode [@js 328] | `U_n_329 of ts_TypeNode [@js 329] | `U_n_330 of ts_TypeNode [@js 330] | `U_n_331 of ts_TypeNode [@js 331] | `U_n_332 of ts_TypeNode [@js 332] | `U_n_333 of ts_TypeNode [@js 333] | `U_n_334 of ts_TypeNode [@js 334] | `U_n_335 of ts_TypeNode [@js 335] | `U_n_336 of ts_TypeNode [@js 336] | `U_n_337 of ts_TypeNode [@js 337] | `U_n_338 of ts_TypeNode [@js 338] | `U_n_339 of ts_TypeNode [@js 339] | `U_n_340 of ts_TypeNode [@js 340] | `U_n_341 of ts_TypeNode [@js 341]] [@js.union on_field "kind"]) ts_NodeArray [@@js.get "elements"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "NamedTupleMember"] NamedTupleMember : sig
    type t = ts_NamedTupleMember
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedTupleMember | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedTupleMember | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_NamedTupleMember [@@js.get "kind"]
    val get_dotDotDotToken: t -> ts_SyntaxKind_DotDotDotToken ts_Token [@@js.get "dotDotDotToken"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_questionToken: t -> ts_SyntaxKind_QuestionToken ts_Token [@@js.get "questionToken"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_TypeNode [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
    val cast'': t -> ts_Declaration [@@js.cast]
  end
  module[@js.scope "OptionalTypeNode"] OptionalTypeNode : sig
    type t = ts_OptionalTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_OptionalTypeNode | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_OptionalTypeNode | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_OptionalType [@@js.get "kind"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "RestTypeNode"] RestTypeNode : sig
    type t = ts_RestTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_RestTypeNode | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_RestTypeNode | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_RestType [@@js.get "kind"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module UnionOrIntersectionTypeNode : sig
    type t = ts_UnionOrIntersectionTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_UnionOrIntersectionTypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_UnionOrIntersectionTypeNode]
    ]
  end
  module[@js.scope "UnionTypeNode"] UnionTypeNode : sig
    type t = ts_UnionTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_UnionTypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_UnionTypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_UnionType [@@js.get "kind"]
    val get_types: t -> ts_TypeNode ts_NodeArray [@@js.get "types"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "IntersectionTypeNode"] IntersectionTypeNode : sig
    type t = ts_IntersectionTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_IntersectionTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_IntersectionTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_IntersectionType [@@js.get "kind"]
    val get_types: t -> ts_TypeNode ts_NodeArray [@@js.get "types"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "ConditionalTypeNode"] ConditionalTypeNode : sig
    type t = ts_ConditionalTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ConditionalTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ConditionalTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_ConditionalType [@@js.get "kind"]
    val get_checkType: t -> ts_TypeNode [@@js.get "checkType"]
    val get_extendsType: t -> ts_TypeNode [@@js.get "extendsType"]
    val get_trueType: t -> ts_TypeNode [@@js.get "trueType"]
    val get_falseType: t -> ts_TypeNode [@@js.get "falseType"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "InferTypeNode"] InferTypeNode : sig
    type t = ts_InferTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_InferTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_InferTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_InferType [@@js.get "kind"]
    val get_typeParameter: t -> ts_TypeParameterDeclaration [@@js.get "typeParameter"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "ParenthesizedTypeNode"] ParenthesizedTypeNode : sig
    type t = ts_ParenthesizedTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ParenthesizedTypeNode | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ParenthesizedTypeNode | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_ParenthesizedType [@@js.get "kind"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "TypeOperatorNode"] TypeOperatorNode : sig
    type t = ts_TypeOperatorNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_TypeOperatorNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode | `Ts_TypeOperatorNode]
    ]
    val get_kind: t -> ts_SyntaxKind_TypeOperator [@@js.get "kind"]
    val get_operator: t -> ((ts_SyntaxKind_KeyOfKeyword, ts_SyntaxKind_ReadonlyKeyword, ts_SyntaxKind_UniqueKeyword) union3, ([`KeyOfKeyword[@js 138] | `ReadonlyKeyword[@js 142] | `UniqueKeyword[@js 151]] [@js.enum])) or_enum [@@js.get "operator"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "IndexedAccessTypeNode"] IndexedAccessTypeNode : sig
    type t = ts_IndexedAccessTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_IndexedAccessTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_IndexedAccessTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_IndexedAccessType [@@js.get "kind"]
    val get_objectType: t -> ts_TypeNode [@@js.get "objectType"]
    val get_indexType: t -> ts_TypeNode [@@js.get "indexType"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "MappedTypeNode"] MappedTypeNode : sig
    type t = ts_MappedTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_MappedTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_MappedTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_MappedType [@@js.get "kind"]
    val get_readonlyToken: t -> ([`U_n_39 of ts_PlusToken [@js 39] | `U_n_40 of ts_MinusToken [@js 40] | `U_n_142 of ts_ReadonlyToken [@js 142]] [@js.union on_field "kind"]) [@@js.get "readonlyToken"]
    val get_typeParameter: t -> ts_TypeParameterDeclaration [@@js.get "typeParameter"]
    val get_nameType: t -> ts_TypeNode [@@js.get "nameType"]
    val get_questionToken: t -> ([`U_n_39 of ts_PlusToken [@js 39] | `U_n_40 of ts_MinusToken [@js 40] | `U_n_57 of ts_QuestionToken [@js 57]] [@js.union on_field "kind"]) [@@js.get "questionToken"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_TypeNode [@@js.cast]
    val cast': t -> ts_Declaration [@@js.cast]
  end
  module[@js.scope "LiteralTypeNode"] LiteralTypeNode : sig
    type t = ts_LiteralTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LiteralTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LiteralTypeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_LiteralType [@@js.get "kind"]
    val get_literal: t -> ([`U_n_0 of ts_LiteralExpression [@js 0] | `U_n_1 of ts_LiteralExpression [@js 1] | `U_n_2 of ts_LiteralExpression [@js 2] | `U_n_3 of ts_LiteralExpression [@js 3] | `U_n_4 of ts_LiteralExpression [@js 4] | `U_n_5 of ts_LiteralExpression [@js 5] | `U_n_6 of ts_LiteralExpression [@js 6] | `U_n_7 of ts_LiteralExpression [@js 7] | `U_n_8 of ts_LiteralExpression [@js 8] | `U_n_9 of ts_LiteralExpression [@js 9] | `U_n_10 of ts_LiteralExpression [@js 10] | `U_n_11 of ts_LiteralExpression [@js 11] | `U_n_12 of ts_LiteralExpression [@js 12] | `U_n_13 of ts_LiteralExpression [@js 13] | `U_n_14 of ts_LiteralExpression [@js 14] | `U_n_15 of ts_LiteralExpression [@js 15] | `U_n_16 of ts_LiteralExpression [@js 16] | `U_n_17 of ts_LiteralExpression [@js 17] | `U_n_18 of ts_LiteralExpression [@js 18] | `U_n_19 of ts_LiteralExpression [@js 19] | `U_n_20 of ts_LiteralExpression [@js 20] | `U_n_21 of ts_LiteralExpression [@js 21] | `U_n_22 of ts_LiteralExpression [@js 22] | `U_n_23 of ts_LiteralExpression [@js 23] | `U_n_24 of ts_LiteralExpression [@js 24] | `U_n_25 of ts_LiteralExpression [@js 25] | `U_n_26 of ts_LiteralExpression [@js 26] | `U_n_27 of ts_LiteralExpression [@js 27] | `U_n_28 of ts_LiteralExpression [@js 28] | `U_n_29 of ts_LiteralExpression [@js 29] | `U_n_30 of ts_LiteralExpression [@js 30] | `U_n_31 of ts_LiteralExpression [@js 31] | `U_n_32 of ts_LiteralExpression [@js 32] | `U_n_33 of ts_LiteralExpression [@js 33] | `U_n_34 of ts_LiteralExpression [@js 34] | `U_n_35 of ts_LiteralExpression [@js 35] | `U_n_36 of ts_LiteralExpression [@js 36] | `U_n_37 of ts_LiteralExpression [@js 37] | `U_n_38 of ts_LiteralExpression [@js 38] | `U_n_39 of ts_LiteralExpression [@js 39] | `U_n_40 of ts_LiteralExpression [@js 40] | `U_n_41 of ts_LiteralExpression [@js 41] | `U_n_42 of ts_LiteralExpression [@js 42] | `U_n_43 of ts_LiteralExpression [@js 43] | `U_n_44 of ts_LiteralExpression [@js 44] | `U_n_45 of ts_LiteralExpression [@js 45] | `U_n_46 of ts_LiteralExpression [@js 46] | `U_n_47 of ts_LiteralExpression [@js 47] | `U_n_48 of ts_LiteralExpression [@js 48] | `U_n_49 of ts_LiteralExpression [@js 49] | `U_n_50 of ts_LiteralExpression [@js 50] | `U_n_51 of ts_LiteralExpression [@js 51] | `U_n_52 of ts_LiteralExpression [@js 52] | `U_n_53 of ts_LiteralExpression [@js 53] | `U_n_54 of ts_LiteralExpression [@js 54] | `U_n_55 of ts_LiteralExpression [@js 55] | `U_n_56 of ts_LiteralExpression [@js 56] | `U_n_57 of ts_LiteralExpression [@js 57] | `U_n_58 of ts_LiteralExpression [@js 58] | `U_n_59 of ts_LiteralExpression [@js 59] | `U_n_60 of ts_LiteralExpression [@js 60] | `U_n_61 of ts_LiteralExpression [@js 61] | `U_n_62 of ts_LiteralExpression [@js 62] | `U_n_63 of ts_LiteralExpression [@js 63] | `U_n_64 of ts_LiteralExpression [@js 64] | `U_n_65 of ts_LiteralExpression [@js 65] | `U_n_66 of ts_LiteralExpression [@js 66] | `U_n_67 of ts_LiteralExpression [@js 67] | `U_n_68 of ts_LiteralExpression [@js 68] | `U_n_69 of ts_LiteralExpression [@js 69] | `U_n_70 of ts_LiteralExpression [@js 70] | `U_n_71 of ts_LiteralExpression [@js 71] | `U_n_72 of ts_LiteralExpression [@js 72] | `U_n_73 of ts_LiteralExpression [@js 73] | `U_n_74 of ts_LiteralExpression [@js 74] | `U_n_75 of ts_LiteralExpression [@js 75] | `U_n_76 of ts_LiteralExpression [@js 76] | `U_n_77 of ts_LiteralExpression [@js 77] | `U_n_78 of ts_LiteralExpression [@js 78] | `U_n_79 of ts_LiteralExpression [@js 79] | `U_n_80 of ts_LiteralExpression [@js 80] | `U_n_81 of ts_LiteralExpression [@js 81] | `U_n_82 of ts_LiteralExpression [@js 82] | `U_n_83 of ts_LiteralExpression [@js 83] | `U_n_84 of ts_LiteralExpression [@js 84] | `U_n_85 of ts_LiteralExpression [@js 85] | `U_n_86 of ts_LiteralExpression [@js 86] | `U_n_87 of ts_LiteralExpression [@js 87] | `U_n_88 of ts_LiteralExpression [@js 88] | `U_n_89 of ts_LiteralExpression [@js 89] | `U_n_90 of ts_LiteralExpression [@js 90] | `U_n_91 of ts_LiteralExpression [@js 91] | `U_n_92 of ts_LiteralExpression [@js 92] | `U_n_93 of ts_LiteralExpression [@js 93] | `U_n_94 of (ts_BooleanLiteral, ts_LiteralExpression) union2 [@js 94] | `U_n_95 of ts_LiteralExpression [@js 95] | `U_n_96 of ts_LiteralExpression [@js 96] | `U_n_97 of ts_LiteralExpression [@js 97] | `U_n_98 of ts_LiteralExpression [@js 98] | `U_n_99 of ts_LiteralExpression [@js 99] | `U_n_100 of ts_LiteralExpression [@js 100] | `U_n_101 of ts_LiteralExpression [@js 101] | `U_n_102 of ts_LiteralExpression [@js 102] | `U_n_103 of (ts_NullLiteral, ts_LiteralExpression) union2 [@js 103] | `U_n_104 of ts_LiteralExpression [@js 104] | `U_n_105 of ts_LiteralExpression [@js 105] | `U_n_106 of ts_LiteralExpression [@js 106] | `U_n_107 of ts_LiteralExpression [@js 107] | `U_n_108 of ts_LiteralExpression [@js 108] | `U_n_109 of (ts_BooleanLiteral, ts_LiteralExpression) union2 [@js 109] | `U_n_110 of ts_LiteralExpression [@js 110] | `U_n_111 of ts_LiteralExpression [@js 111] | `U_n_112 of ts_LiteralExpression [@js 112] | `U_n_113 of ts_LiteralExpression [@js 113] | `U_n_114 of ts_LiteralExpression [@js 114] | `U_n_115 of ts_LiteralExpression [@js 115] | `U_n_116 of ts_LiteralExpression [@js 116] | `U_n_117 of ts_LiteralExpression [@js 117] | `U_n_118 of ts_LiteralExpression [@js 118] | `U_n_119 of ts_LiteralExpression [@js 119] | `U_n_120 of ts_LiteralExpression [@js 120] | `U_n_121 of ts_LiteralExpression [@js 121] | `U_n_122 of ts_LiteralExpression [@js 122] | `U_n_123 of ts_LiteralExpression [@js 123] | `U_n_124 of ts_LiteralExpression [@js 124] | `U_n_125 of ts_LiteralExpression [@js 125] | `U_n_126 of ts_LiteralExpression [@js 126] | `U_n_127 of ts_LiteralExpression [@js 127] | `U_n_128 of ts_LiteralExpression [@js 128] | `U_n_129 of ts_LiteralExpression [@js 129] | `U_n_130 of ts_LiteralExpression [@js 130] | `U_n_131 of ts_LiteralExpression [@js 131] | `U_n_132 of ts_LiteralExpression [@js 132] | `U_n_133 of ts_LiteralExpression [@js 133] | `U_n_134 of ts_LiteralExpression [@js 134] | `U_n_135 of ts_LiteralExpression [@js 135] | `U_n_136 of ts_LiteralExpression [@js 136] | `U_n_137 of ts_LiteralExpression [@js 137] | `U_n_138 of ts_LiteralExpression [@js 138] | `U_n_139 of ts_LiteralExpression [@js 139] | `U_n_140 of ts_LiteralExpression [@js 140] | `U_n_141 of ts_LiteralExpression [@js 141] | `U_n_142 of ts_LiteralExpression [@js 142] | `U_n_143 of ts_LiteralExpression [@js 143] | `U_n_144 of ts_LiteralExpression [@js 144] | `U_n_145 of ts_LiteralExpression [@js 145] | `U_n_146 of ts_LiteralExpression [@js 146] | `U_n_147 of ts_LiteralExpression [@js 147] | `U_n_148 of ts_LiteralExpression [@js 148] | `U_n_149 of ts_LiteralExpression [@js 149] | `U_n_150 of ts_LiteralExpression [@js 150] | `U_n_151 of ts_LiteralExpression [@js 151] | `U_n_152 of ts_LiteralExpression [@js 152] | `U_n_153 of ts_LiteralExpression [@js 153] | `U_n_154 of ts_LiteralExpression [@js 154] | `U_n_155 of ts_LiteralExpression [@js 155] | `U_n_156 of ts_LiteralExpression [@js 156] | `U_n_157 of ts_LiteralExpression [@js 157] | `U_n_158 of ts_LiteralExpression [@js 158] | `U_n_159 of ts_LiteralExpression [@js 159] | `U_n_160 of ts_LiteralExpression [@js 160] | `U_n_161 of ts_LiteralExpression [@js 161] | `U_n_162 of ts_LiteralExpression [@js 162] | `U_n_163 of ts_LiteralExpression [@js 163] | `U_n_164 of ts_LiteralExpression [@js 164] | `U_n_165 of ts_LiteralExpression [@js 165] | `U_n_166 of ts_LiteralExpression [@js 166] | `U_n_167 of ts_LiteralExpression [@js 167] | `U_n_168 of ts_LiteralExpression [@js 168] | `U_n_169 of ts_LiteralExpression [@js 169] | `U_n_170 of ts_LiteralExpression [@js 170] | `U_n_171 of ts_LiteralExpression [@js 171] | `U_n_172 of ts_LiteralExpression [@js 172] | `U_n_173 of ts_LiteralExpression [@js 173] | `U_n_174 of ts_LiteralExpression [@js 174] | `U_n_175 of ts_LiteralExpression [@js 175] | `U_n_176 of ts_LiteralExpression [@js 176] | `U_n_177 of ts_LiteralExpression [@js 177] | `U_n_178 of ts_LiteralExpression [@js 178] | `U_n_179 of ts_LiteralExpression [@js 179] | `U_n_180 of ts_LiteralExpression [@js 180] | `U_n_181 of ts_LiteralExpression [@js 181] | `U_n_182 of ts_LiteralExpression [@js 182] | `U_n_183 of ts_LiteralExpression [@js 183] | `U_n_184 of ts_LiteralExpression [@js 184] | `U_n_185 of ts_LiteralExpression [@js 185] | `U_n_186 of ts_LiteralExpression [@js 186] | `U_n_187 of ts_LiteralExpression [@js 187] | `U_n_188 of ts_LiteralExpression [@js 188] | `U_n_189 of ts_LiteralExpression [@js 189] | `U_n_190 of ts_LiteralExpression [@js 190] | `U_n_191 of ts_LiteralExpression [@js 191] | `U_n_192 of ts_LiteralExpression [@js 192] | `U_n_193 of ts_LiteralExpression [@js 193] | `U_n_194 of ts_LiteralExpression [@js 194] | `U_n_195 of ts_LiteralExpression [@js 195] | `U_n_196 of ts_LiteralExpression [@js 196] | `U_n_197 of ts_LiteralExpression [@js 197] | `U_n_198 of ts_LiteralExpression [@js 198] | `U_n_199 of ts_LiteralExpression [@js 199] | `U_n_200 of ts_LiteralExpression [@js 200] | `U_n_201 of ts_LiteralExpression [@js 201] | `U_n_202 of ts_LiteralExpression [@js 202] | `U_n_203 of ts_LiteralExpression [@js 203] | `U_n_204 of ts_LiteralExpression [@js 204] | `U_n_205 of ts_LiteralExpression [@js 205] | `U_n_206 of ts_LiteralExpression [@js 206] | `U_n_207 of ts_LiteralExpression [@js 207] | `U_n_208 of ts_LiteralExpression [@js 208] | `U_n_209 of ts_LiteralExpression [@js 209] | `U_n_210 of ts_LiteralExpression [@js 210] | `U_n_211 of ts_LiteralExpression [@js 211] | `U_n_212 of ts_LiteralExpression [@js 212] | `U_n_213 of ts_LiteralExpression [@js 213] | `U_n_214 of (ts_LiteralExpression, ts_PrefixUnaryExpression) union2 [@js 214] | `U_n_215 of ts_LiteralExpression [@js 215] | `U_n_216 of ts_LiteralExpression [@js 216] | `U_n_217 of ts_LiteralExpression [@js 217] | `U_n_218 of ts_LiteralExpression [@js 218] | `U_n_219 of ts_LiteralExpression [@js 219] | `U_n_220 of ts_LiteralExpression [@js 220] | `U_n_221 of ts_LiteralExpression [@js 221] | `U_n_222 of ts_LiteralExpression [@js 222] | `U_n_223 of ts_LiteralExpression [@js 223] | `U_n_224 of ts_LiteralExpression [@js 224] | `U_n_225 of ts_LiteralExpression [@js 225] | `U_n_226 of ts_LiteralExpression [@js 226] | `U_n_227 of ts_LiteralExpression [@js 227] | `U_n_228 of ts_LiteralExpression [@js 228] | `U_n_229 of ts_LiteralExpression [@js 229] | `U_n_230 of ts_LiteralExpression [@js 230] | `U_n_231 of ts_LiteralExpression [@js 231] | `U_n_232 of ts_LiteralExpression [@js 232] | `U_n_233 of ts_LiteralExpression [@js 233] | `U_n_234 of ts_LiteralExpression [@js 234] | `U_n_235 of ts_LiteralExpression [@js 235] | `U_n_236 of ts_LiteralExpression [@js 236] | `U_n_237 of ts_LiteralExpression [@js 237] | `U_n_238 of ts_LiteralExpression [@js 238] | `U_n_239 of ts_LiteralExpression [@js 239] | `U_n_240 of ts_LiteralExpression [@js 240] | `U_n_241 of ts_LiteralExpression [@js 241] | `U_n_242 of ts_LiteralExpression [@js 242] | `U_n_243 of ts_LiteralExpression [@js 243] | `U_n_244 of ts_LiteralExpression [@js 244] | `U_n_245 of ts_LiteralExpression [@js 245] | `U_n_246 of ts_LiteralExpression [@js 246] | `U_n_247 of ts_LiteralExpression [@js 247] | `U_n_248 of ts_LiteralExpression [@js 248] | `U_n_249 of ts_LiteralExpression [@js 249] | `U_n_250 of ts_LiteralExpression [@js 250] | `U_n_251 of ts_LiteralExpression [@js 251] | `U_n_252 of ts_LiteralExpression [@js 252] | `U_n_253 of ts_LiteralExpression [@js 253] | `U_n_254 of ts_LiteralExpression [@js 254] | `U_n_255 of ts_LiteralExpression [@js 255] | `U_n_256 of ts_LiteralExpression [@js 256] | `U_n_257 of ts_LiteralExpression [@js 257] | `U_n_258 of ts_LiteralExpression [@js 258] | `U_n_259 of ts_LiteralExpression [@js 259] | `U_n_260 of ts_LiteralExpression [@js 260] | `U_n_261 of ts_LiteralExpression [@js 261] | `U_n_262 of ts_LiteralExpression [@js 262] | `U_n_263 of ts_LiteralExpression [@js 263] | `U_n_264 of ts_LiteralExpression [@js 264] | `U_n_265 of ts_LiteralExpression [@js 265] | `U_n_266 of ts_LiteralExpression [@js 266] | `U_n_267 of ts_LiteralExpression [@js 267] | `U_n_268 of ts_LiteralExpression [@js 268] | `U_n_269 of ts_LiteralExpression [@js 269] | `U_n_270 of ts_LiteralExpression [@js 270] | `U_n_271 of ts_LiteralExpression [@js 271] | `U_n_272 of ts_LiteralExpression [@js 272] | `U_n_273 of ts_LiteralExpression [@js 273] | `U_n_274 of ts_LiteralExpression [@js 274] | `U_n_275 of ts_LiteralExpression [@js 275] | `U_n_276 of ts_LiteralExpression [@js 276] | `U_n_277 of ts_LiteralExpression [@js 277] | `U_n_278 of ts_LiteralExpression [@js 278] | `U_n_279 of ts_LiteralExpression [@js 279] | `U_n_280 of ts_LiteralExpression [@js 280] | `U_n_281 of ts_LiteralExpression [@js 281] | `U_n_282 of ts_LiteralExpression [@js 282] | `U_n_283 of ts_LiteralExpression [@js 283] | `U_n_284 of ts_LiteralExpression [@js 284] | `U_n_285 of ts_LiteralExpression [@js 285] | `U_n_286 of ts_LiteralExpression [@js 286] | `U_n_287 of ts_LiteralExpression [@js 287] | `U_n_288 of ts_LiteralExpression [@js 288] | `U_n_289 of ts_LiteralExpression [@js 289] | `U_n_290 of ts_LiteralExpression [@js 290] | `U_n_291 of ts_LiteralExpression [@js 291] | `U_n_292 of ts_LiteralExpression [@js 292] | `U_n_293 of ts_LiteralExpression [@js 293] | `U_n_294 of ts_LiteralExpression [@js 294] | `U_n_295 of ts_LiteralExpression [@js 295] | `U_n_296 of ts_LiteralExpression [@js 296] | `U_n_297 of ts_LiteralExpression [@js 297] | `U_n_298 of ts_LiteralExpression [@js 298] | `U_n_299 of ts_LiteralExpression [@js 299] | `U_n_300 of ts_LiteralExpression [@js 300] | `U_n_301 of ts_LiteralExpression [@js 301] | `U_n_302 of ts_LiteralExpression [@js 302] | `U_n_303 of ts_LiteralExpression [@js 303] | `U_n_304 of ts_LiteralExpression [@js 304] | `U_n_305 of ts_LiteralExpression [@js 305] | `U_n_306 of ts_LiteralExpression [@js 306] | `U_n_307 of ts_LiteralExpression [@js 307] | `U_n_308 of ts_LiteralExpression [@js 308] | `U_n_309 of ts_LiteralExpression [@js 309] | `U_n_310 of ts_LiteralExpression [@js 310] | `U_n_311 of ts_LiteralExpression [@js 311] | `U_n_312 of ts_LiteralExpression [@js 312] | `U_n_313 of ts_LiteralExpression [@js 313] | `U_n_314 of ts_LiteralExpression [@js 314] | `U_n_315 of ts_LiteralExpression [@js 315] | `U_n_316 of ts_LiteralExpression [@js 316] | `U_n_317 of ts_LiteralExpression [@js 317] | `U_n_318 of ts_LiteralExpression [@js 318] | `U_n_319 of ts_LiteralExpression [@js 319] | `U_n_320 of ts_LiteralExpression [@js 320] | `U_n_321 of ts_LiteralExpression [@js 321] | `U_n_322 of ts_LiteralExpression [@js 322] | `U_n_323 of ts_LiteralExpression [@js 323] | `U_n_324 of ts_LiteralExpression [@js 324] | `U_n_325 of ts_LiteralExpression [@js 325] | `U_n_326 of ts_LiteralExpression [@js 326] | `U_n_327 of ts_LiteralExpression [@js 327] | `U_n_328 of ts_LiteralExpression [@js 328] | `U_n_329 of ts_LiteralExpression [@js 329] | `U_n_330 of ts_LiteralExpression [@js 330] | `U_n_331 of ts_LiteralExpression [@js 331] | `U_n_332 of ts_LiteralExpression [@js 332] | `U_n_333 of ts_LiteralExpression [@js 333] | `U_n_334 of ts_LiteralExpression [@js 334] | `U_n_335 of ts_LiteralExpression [@js 335] | `U_n_336 of ts_LiteralExpression [@js 336] | `U_n_337 of ts_LiteralExpression [@js 337] | `U_n_338 of ts_LiteralExpression [@js 338] | `U_n_339 of ts_LiteralExpression [@js 339] | `U_n_340 of ts_LiteralExpression [@js 340] | `U_n_341 of ts_LiteralExpression [@js 341]] [@js.union on_field "kind"]) [@@js.get "literal"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "StringLiteral"] StringLiteral : sig
    type t = ts_StringLiteral
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_StringLiteral | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_StringLiteral | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_StringLiteral [@@js.get "kind"]
    val cast: t -> ts_LiteralExpression [@@js.cast]
    val cast': t -> ts_Declaration [@@js.cast]
  end
  module StringLiteralLike : sig
    type t = ts_StringLiteralLike
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_StringLiteralLike]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_StringLiteralLike]
    ]
  end
  module PropertyNameLiteral : sig
    type t = ts_PropertyNameLiteral
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PropertyNameLiteral]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PropertyNameLiteral]
    ]
  end
  module[@js.scope "TemplateLiteralTypeNode"] TemplateLiteralTypeNode : sig
    type t = ts_TemplateLiteralTypeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralTypeNode | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralTypeNode | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_TemplateLiteralType [@@js.get "kind"]
    val set_kind: t -> ts_SyntaxKind_TemplateLiteralType -> unit [@@js.set "kind"]
    val get_head: t -> ts_TemplateHead [@@js.get "head"]
    val get_templateSpans: t -> ts_TemplateLiteralTypeSpan ts_NodeArray [@@js.get "templateSpans"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "TemplateLiteralTypeSpan"] TemplateLiteralTypeSpan : sig
    type t = ts_TemplateLiteralTypeSpan
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralTypeSpan | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralTypeSpan | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_TemplateLiteralTypeSpan [@@js.get "kind"]
    val get_parent: t -> ts_TemplateLiteralTypeNode [@@js.get "parent"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val get_literal: t -> ([`U_n_16 of ts_TemplateMiddle [@js 16] | `U_n_17 of ts_TemplateTail [@js 17]] [@js.union on_field "kind"]) [@@js.get "literal"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "Expression"] Expression : sig
    type t = ts_Expression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get__expressionBrand: t -> any [@@js.get "_expressionBrand"]
    val set__expressionBrand: t -> any -> unit [@@js.set "_expressionBrand"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "OmittedExpression"] OmittedExpression : sig
    type t = ts_OmittedExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_Node | `Ts_OmittedExpression | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_Node | `Ts_OmittedExpression | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_OmittedExpression [@@js.get "kind"]
    val cast: t -> ts_Expression [@@js.cast]
  end
  module[@js.scope "PartiallyEmittedExpression"] PartiallyEmittedExpression : sig
    type t = ts_PartiallyEmittedExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_PartiallyEmittedExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_PartiallyEmittedExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_PartiallyEmittedExpression [@@js.get "kind"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_LeftHandSideExpression [@@js.cast]
  end
  module[@js.scope "UnaryExpression"] UnaryExpression : sig
    type t = ts_UnaryExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression]
    ]
    val get__unaryExpressionBrand: t -> any [@@js.get "_unaryExpressionBrand"]
    val set__unaryExpressionBrand: t -> any -> unit [@@js.set "_unaryExpressionBrand"]
    val cast: t -> ts_Expression [@@js.cast]
  end
  (** Deprecated, please use UpdateExpression *)
  module IncrementExpression : sig
    type t = ts_IncrementExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_IncrementExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_IncrementExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
  end
  module[@js.scope "UpdateExpression"] UpdateExpression : sig
    type t = ts_UpdateExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get__updateExpressionBrand: t -> any [@@js.get "_updateExpressionBrand"]
    val set__updateExpressionBrand: t -> any -> unit [@@js.set "_updateExpressionBrand"]
    val cast: t -> ts_UnaryExpression [@@js.cast]
  end
  module PrefixUnaryOperator : sig
    type t = ts_PrefixUnaryOperator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PrefixUnaryOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PrefixUnaryOperator]
    ]
  end
  module[@js.scope "PrefixUnaryExpression"] PrefixUnaryExpression : sig
    type t = ts_PrefixUnaryExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_Node | `Ts_PrefixUnaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_Node | `Ts_PrefixUnaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_PrefixUnaryExpression [@@js.get "kind"]
    val get_operator: t -> ts_PrefixUnaryOperator [@@js.get "operator"]
    val get_operand: t -> ts_UnaryExpression [@@js.get "operand"]
    val cast: t -> ts_UpdateExpression [@@js.cast]
  end
  module PostfixUnaryOperator : sig
    type t = ts_PostfixUnaryOperator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PostfixUnaryOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PostfixUnaryOperator]
    ]
  end
  module[@js.scope "PostfixUnaryExpression"] PostfixUnaryExpression : sig
    type t = ts_PostfixUnaryExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_Node | `Ts_PostfixUnaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_Node | `Ts_PostfixUnaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_PostfixUnaryExpression [@@js.get "kind"]
    val get_operand: t -> ts_LeftHandSideExpression [@@js.get "operand"]
    val get_operator: t -> ts_PostfixUnaryOperator [@@js.get "operator"]
    val cast: t -> ts_UpdateExpression [@@js.cast]
  end
  module[@js.scope "LeftHandSideExpression"] LeftHandSideExpression : sig
    type t = ts_LeftHandSideExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get__leftHandSideExpressionBrand: t -> any [@@js.get "_leftHandSideExpressionBrand"]
    val set__leftHandSideExpressionBrand: t -> any -> unit [@@js.set "_leftHandSideExpressionBrand"]
    val cast: t -> ts_UpdateExpression [@@js.cast]
  end
  module[@js.scope "MemberExpression"] MemberExpression : sig
    type t = ts_MemberExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get__memberExpressionBrand: t -> any [@@js.get "_memberExpressionBrand"]
    val set__memberExpressionBrand: t -> any -> unit [@@js.set "_memberExpressionBrand"]
    val cast: t -> ts_LeftHandSideExpression [@@js.cast]
  end
  module[@js.scope "PrimaryExpression"] PrimaryExpression : sig
    type t = ts_PrimaryExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get__primaryExpressionBrand: t -> any [@@js.get "_primaryExpressionBrand"]
    val set__primaryExpressionBrand: t -> any -> unit [@@js.set "_primaryExpressionBrand"]
    val cast: t -> ts_MemberExpression [@@js.cast]
  end
  module[@js.scope "NullLiteral"] NullLiteral : sig
    type t = ts_NullLiteral
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_NullLiteral | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_NullLiteral | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_NullKeyword [@@js.get "kind"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
  end
  module[@js.scope "TrueLiteral"] TrueLiteral : sig
    type t = ts_TrueLiteral
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_TrueLiteral | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_TrueLiteral | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_TrueKeyword [@@js.get "kind"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
  end
  module[@js.scope "FalseLiteral"] FalseLiteral : sig
    type t = ts_FalseLiteral
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_FalseLiteral | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_FalseLiteral | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_FalseKeyword [@@js.get "kind"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
  end
  module BooleanLiteral : sig
    type t = ts_BooleanLiteral
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BooleanLiteral]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BooleanLiteral]
    ]
  end
  module[@js.scope "ThisExpression"] ThisExpression : sig
    type t = ts_ThisExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_ThisExpression | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_ThisExpression | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_ThisKeyword [@@js.get "kind"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
  end
  module[@js.scope "SuperExpression"] SuperExpression : sig
    type t = ts_SuperExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_SuperExpression | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_SuperExpression | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_SuperKeyword [@@js.get "kind"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
  end
  module[@js.scope "ImportExpression"] ImportExpression : sig
    type t = ts_ImportExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_ImportExpression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_ImportExpression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_ImportKeyword [@@js.get "kind"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
  end
  module[@js.scope "DeleteExpression"] DeleteExpression : sig
    type t = ts_DeleteExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DeleteExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DeleteExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_DeleteExpression [@@js.get "kind"]
    val get_expression: t -> ts_UnaryExpression [@@js.get "expression"]
    val cast: t -> ts_UnaryExpression [@@js.cast]
  end
  module[@js.scope "TypeOfExpression"] TypeOfExpression : sig
    type t = ts_TypeOfExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeOfExpression | `Ts_UnaryExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeOfExpression | `Ts_UnaryExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_TypeOfExpression [@@js.get "kind"]
    val get_expression: t -> ts_UnaryExpression [@@js.get "expression"]
    val cast: t -> ts_UnaryExpression [@@js.cast]
  end
  module[@js.scope "VoidExpression"] VoidExpression : sig
    type t = ts_VoidExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_VoidExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_VoidExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_VoidExpression [@@js.get "kind"]
    val get_expression: t -> ts_UnaryExpression [@@js.get "expression"]
    val cast: t -> ts_UnaryExpression [@@js.cast]
  end
  module[@js.scope "AwaitExpression"] AwaitExpression : sig
    type t = ts_AwaitExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AwaitExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AwaitExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_AwaitExpression [@@js.get "kind"]
    val get_expression: t -> ts_UnaryExpression [@@js.get "expression"]
    val cast: t -> ts_UnaryExpression [@@js.cast]
  end
  module[@js.scope "YieldExpression"] YieldExpression : sig
    type t = ts_YieldExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_YieldExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_YieldExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_YieldExpression [@@js.get "kind"]
    val get_asteriskToken: t -> ts_AsteriskToken [@@js.get "asteriskToken"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_Expression [@@js.cast]
  end
  module[@js.scope "SyntheticExpression"] SyntheticExpression : sig
    type t = ts_SyntheticExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SyntheticExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SyntheticExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_SyntheticExpression [@@js.get "kind"]
    val get_isSpread: t -> bool [@@js.get "isSpread"]
    val get_type: t -> ts_Type [@@js.get "type"]
    val get_tupleNameSource: t -> ([`U_n_160 of ts_ParameterDeclaration [@js 160] | `U_n_192 of ts_NamedTupleMember [@js 192]] [@js.union on_field "kind"]) [@@js.get "tupleNameSource"]
    val cast: t -> ts_Expression [@@js.cast]
  end
  module ExponentiationOperator : sig
    type t = ts_ExponentiationOperator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ExponentiationOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ExponentiationOperator]
    ]
  end
  module MultiplicativeOperator : sig
    type t = ts_MultiplicativeOperator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_MultiplicativeOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_MultiplicativeOperator]
    ]
  end
  module MultiplicativeOperatorOrHigher : sig
    type t = ts_MultiplicativeOperatorOrHigher
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_MultiplicativeOperatorOrHigher]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_MultiplicativeOperatorOrHigher]
    ]
  end
  module AdditiveOperator : sig
    type t = ts_AdditiveOperator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AdditiveOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AdditiveOperator]
    ]
  end
  module AdditiveOperatorOrHigher : sig
    type t = ts_AdditiveOperatorOrHigher
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AdditiveOperatorOrHigher]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AdditiveOperatorOrHigher]
    ]
  end
  module ShiftOperator : sig
    type t = ts_ShiftOperator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ShiftOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ShiftOperator]
    ]
  end
  module ShiftOperatorOrHigher : sig
    type t = ts_ShiftOperatorOrHigher
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ShiftOperatorOrHigher]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ShiftOperatorOrHigher]
    ]
  end
  module RelationalOperator : sig
    type t = ts_RelationalOperator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_RelationalOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_RelationalOperator]
    ]
  end
  module RelationalOperatorOrHigher : sig
    type t = ts_RelationalOperatorOrHigher
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_RelationalOperatorOrHigher]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_RelationalOperatorOrHigher]
    ]
  end
  module EqualityOperator : sig
    type t = ts_EqualityOperator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EqualityOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EqualityOperator]
    ]
  end
  module EqualityOperatorOrHigher : sig
    type t = ts_EqualityOperatorOrHigher
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EqualityOperatorOrHigher]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EqualityOperatorOrHigher]
    ]
  end
  module BitwiseOperator : sig
    type t = ts_BitwiseOperator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BitwiseOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BitwiseOperator]
    ]
  end
  module BitwiseOperatorOrHigher : sig
    type t = ts_BitwiseOperatorOrHigher
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BitwiseOperatorOrHigher]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BitwiseOperatorOrHigher]
    ]
  end
  module LogicalOperator : sig
    type t = ts_LogicalOperator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LogicalOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LogicalOperator]
    ]
  end
  module LogicalOperatorOrHigher : sig
    type t = ts_LogicalOperatorOrHigher
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LogicalOperatorOrHigher]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LogicalOperatorOrHigher]
    ]
  end
  module CompoundAssignmentOperator : sig
    type t = ts_CompoundAssignmentOperator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CompoundAssignmentOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CompoundAssignmentOperator]
    ]
  end
  module AssignmentOperator : sig
    type t = ts_AssignmentOperator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AssignmentOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AssignmentOperator]
    ]
  end
  module AssignmentOperatorOrHigher : sig
    type t = ts_AssignmentOperatorOrHigher
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AssignmentOperatorOrHigher]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AssignmentOperatorOrHigher]
    ]
  end
  module BinaryOperator : sig
    type t = ts_BinaryOperator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BinaryOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BinaryOperator]
    ]
  end
  module LogicalOrCoalescingAssignmentOperator : sig
    type t = ts_LogicalOrCoalescingAssignmentOperator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LogicalOrCoalescingAssignmentOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LogicalOrCoalescingAssignmentOperator]
    ]
  end
  module BinaryOperatorToken : sig
    type t = ts_BinaryOperatorToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BinaryOperatorToken | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_BinaryOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BinaryOperatorToken | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_BinaryOperator]
    ]
  end
  module[@js.scope "BinaryExpression"] BinaryExpression : sig
    type t = ts_BinaryExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BinaryExpression | `Ts_Declaration | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BinaryExpression | `Ts_Declaration | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_BinaryExpression [@@js.get "kind"]
    val get_left: t -> ts_Expression [@@js.get "left"]
    val get_operatorToken: t -> ts_BinaryOperatorToken [@@js.get "operatorToken"]
    val get_right: t -> ts_Expression [@@js.get "right"]
    val cast: t -> ts_Expression [@@js.cast]
    val cast': t -> ts_Declaration [@@js.cast]
  end
  module AssignmentOperatorToken : sig
    type t = ts_AssignmentOperatorToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AssignmentOperatorToken | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_AssignmentOperator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AssignmentOperatorToken | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Token of ts_AssignmentOperator]
    ]
  end
  module[@js.scope "AssignmentExpression"] AssignmentExpression : sig
    type 'TOperator t = 'TOperator ts_AssignmentExpression
    val t_to_js: ('TOperator -> Ojs.t) -> 'TOperator t -> Ojs.t
    val t_of_js: (Ojs.t -> 'TOperator) -> Ojs.t -> 'TOperator t
    type 'TOperator t_1 = 'TOperator t
    val t_1_to_js: ('TOperator -> Ojs.t) -> 'TOperator t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'TOperator) -> Ojs.t -> 'TOperator t_1
    [@@@js.stop]
    type 'TOperator tags = [`Ts_AssignmentExpression of 'TOperator | `Ts_BinaryExpression | `Ts_Declaration | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type 'TOperator tags = [`Ts_AssignmentExpression of 'TOperator | `Ts_BinaryExpression | `Ts_Declaration | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_left: 'TOperator t -> ts_LeftHandSideExpression [@@js.get "left"]
    val get_operatorToken: 'TOperator t -> 'TOperator [@@js.get "operatorToken"]
    val cast: 'TOperator t -> ts_BinaryExpression [@@js.cast]
  end
  module[@js.scope "ObjectDestructuringAssignment"] ObjectDestructuringAssignment : sig
    type t = ts_ObjectDestructuringAssignment
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AssignmentExpression of ts_EqualsToken | `Ts_BinaryExpression | `Ts_Declaration | `Ts_Expression | `Ts_Node | `Ts_ObjectDestructuringAssignment | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AssignmentExpression of ts_EqualsToken | `Ts_BinaryExpression | `Ts_Declaration | `Ts_Expression | `Ts_Node | `Ts_ObjectDestructuringAssignment | `Ts_ReadonlyTextRange]
    ]
    val get_left: t -> ts_ObjectLiteralExpression [@@js.get "left"]
    val cast: t -> ts_EqualsToken ts_AssignmentExpression [@@js.cast]
  end
  module[@js.scope "ArrayDestructuringAssignment"] ArrayDestructuringAssignment : sig
    type t = ts_ArrayDestructuringAssignment
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ArrayDestructuringAssignment | `Ts_AssignmentExpression of ts_EqualsToken | `Ts_BinaryExpression | `Ts_Declaration | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ArrayDestructuringAssignment | `Ts_AssignmentExpression of ts_EqualsToken | `Ts_BinaryExpression | `Ts_Declaration | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_left: t -> ts_ArrayLiteralExpression [@@js.get "left"]
    val cast: t -> ts_EqualsToken ts_AssignmentExpression [@@js.cast]
  end
  module DestructuringAssignment : sig
    type t = ts_DestructuringAssignment
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DestructuringAssignment]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DestructuringAssignment]
    ]
  end
  module BindingOrAssignmentElement : sig
    type t = ts_BindingOrAssignmentElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BindingOrAssignmentElement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BindingOrAssignmentElement]
    ]
  end
  module ObjectBindingOrAssignmentElement : sig
    type t = ts_ObjectBindingOrAssignmentElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ObjectBindingOrAssignmentElement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ObjectBindingOrAssignmentElement]
    ]
  end
  module ArrayBindingOrAssignmentElement : sig
    type t = ts_ArrayBindingOrAssignmentElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ArrayBindingOrAssignmentElement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ArrayBindingOrAssignmentElement]
    ]
  end
  module BindingOrAssignmentElementRestIndicator : sig
    type t = ts_BindingOrAssignmentElementRestIndicator
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BindingOrAssignmentElementRestIndicator]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BindingOrAssignmentElementRestIndicator]
    ]
  end
  module BindingOrAssignmentElementTarget : sig
    type t = ts_BindingOrAssignmentElementTarget
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BindingOrAssignmentElementTarget]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BindingOrAssignmentElementTarget]
    ]
  end
  module ObjectBindingOrAssignmentPattern : sig
    type t = ts_ObjectBindingOrAssignmentPattern
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ObjectBindingOrAssignmentPattern]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ObjectBindingOrAssignmentPattern]
    ]
  end
  module ArrayBindingOrAssignmentPattern : sig
    type t = ts_ArrayBindingOrAssignmentPattern
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ArrayBindingOrAssignmentPattern]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ArrayBindingOrAssignmentPattern]
    ]
  end
  module AssignmentPattern : sig
    type t = ts_AssignmentPattern
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AssignmentPattern]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AssignmentPattern]
    ]
  end
  module BindingOrAssignmentPattern : sig
    type t = ts_BindingOrAssignmentPattern
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BindingOrAssignmentPattern]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BindingOrAssignmentPattern]
    ]
  end
  module[@js.scope "ConditionalExpression"] ConditionalExpression : sig
    type t = ts_ConditionalExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ConditionalExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ConditionalExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_ConditionalExpression [@@js.get "kind"]
    val get_condition: t -> ts_Expression [@@js.get "condition"]
    val get_questionToken: t -> ts_QuestionToken [@@js.get "questionToken"]
    val get_whenTrue: t -> ts_Expression [@@js.get "whenTrue"]
    val get_colonToken: t -> ts_ColonToken [@@js.get "colonToken"]
    val get_whenFalse: t -> ts_Expression [@@js.get "whenFalse"]
    val cast: t -> ts_Expression [@@js.cast]
  end
  module FunctionBody : sig
    type t = ts_FunctionBody
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Block | `Ts_FunctionBody | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Block | `Ts_FunctionBody | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
  end
  module ConciseBody : sig
    type t = ts_ConciseBody
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ConciseBody]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ConciseBody]
    ]
  end
  module[@js.scope "FunctionExpression"] FunctionExpression : sig
    type t = ts_FunctionExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Expression | `Ts_FunctionExpression | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Expression | `Ts_FunctionExpression | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_FunctionExpression [@@js.get "kind"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_body: t -> ts_FunctionBody [@@js.get "body"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
    val cast': t -> ts_FunctionLikeDeclarationBase [@@js.cast]
    val cast'': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "ArrowFunction"] ArrowFunction : sig
    type t = ts_ArrowFunction
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ArrowFunction | `Ts_Declaration | `Ts_Expression | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ArrowFunction | `Ts_Declaration | `Ts_Expression | `Ts_FunctionLikeDeclarationBase | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase]
    ]
    val get_kind: t -> ts_SyntaxKind_ArrowFunction [@@js.get "kind"]
    val get_equalsGreaterThanToken: t -> ts_EqualsGreaterThanToken [@@js.get "equalsGreaterThanToken"]
    val get_body: t -> ts_ConciseBody [@@js.get "body"]
    val get_name: t -> never [@@js.get "name"]
    val cast: t -> ts_Expression [@@js.cast]
    val cast': t -> ts_FunctionLikeDeclarationBase [@@js.cast]
    val cast'': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "LiteralLikeNode"] LiteralLikeNode : sig
    type t = ts_LiteralLikeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_text: t -> string [@@js.get "text"]
    val set_text: t -> string -> unit [@@js.set "text"]
    val get_isUnterminated: t -> bool [@@js.get "isUnterminated"]
    val set_isUnterminated: t -> bool -> unit [@@js.set "isUnterminated"]
    val get_hasExtendedUnicodeEscape: t -> bool [@@js.get "hasExtendedUnicodeEscape"]
    val set_hasExtendedUnicodeEscape: t -> bool -> unit [@@js.set "hasExtendedUnicodeEscape"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "TemplateLiteralLikeNode"] TemplateLiteralLikeNode : sig
    type t = ts_TemplateLiteralLikeNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralLikeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralLikeNode]
    ]
    val get_rawText: t -> string [@@js.get "rawText"]
    val set_rawText: t -> string -> unit [@@js.set "rawText"]
    val cast: t -> ts_LiteralLikeNode [@@js.cast]
  end
  module[@js.scope "LiteralExpression"] LiteralExpression : sig
    type t = ts_LiteralExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get__literalExpressionBrand: t -> any [@@js.get "_literalExpressionBrand"]
    val set__literalExpressionBrand: t -> any -> unit [@@js.set "_literalExpressionBrand"]
    val cast: t -> ts_LiteralLikeNode [@@js.cast]
    val cast': t -> ts_PrimaryExpression [@@js.cast]
  end
  module[@js.scope "RegularExpressionLiteral"] RegularExpressionLiteral : sig
    type t = ts_RegularExpressionLiteral
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_RegularExpressionLiteral | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_RegularExpressionLiteral | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_RegularExpressionLiteral [@@js.get "kind"]
    val cast: t -> ts_LiteralExpression [@@js.cast]
  end
  module[@js.scope "NoSubstitutionTemplateLiteral"] NoSubstitutionTemplateLiteral : sig
    type t = ts_NoSubstitutionTemplateLiteral
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_NoSubstitutionTemplateLiteral | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralLikeNode | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_NoSubstitutionTemplateLiteral | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralLikeNode | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_NoSubstitutionTemplateLiteral [@@js.get "kind"]
    val cast: t -> ts_LiteralExpression [@@js.cast]
    val cast': t -> ts_TemplateLiteralLikeNode [@@js.cast]
    val cast'': t -> ts_Declaration [@@js.cast]
  end
  module TokenFlags : sig
    type t = ts_TokenFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "NumericLiteral"] NumericLiteral : sig
    type t = ts_NumericLiteral
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_NumericLiteral | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_NumericLiteral | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_NumericLiteral [@@js.get "kind"]
    val cast: t -> ts_LiteralExpression [@@js.cast]
    val cast': t -> ts_Declaration [@@js.cast]
  end
  module[@js.scope "BigIntLiteral"] BigIntLiteral : sig
    type t = ts_BigIntLiteral
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BigIntLiteral | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BigIntLiteral | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_LiteralExpression | `Ts_LiteralLikeNode | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_BigIntLiteral [@@js.get "kind"]
    val cast: t -> ts_LiteralExpression [@@js.cast]
  end
  module LiteralToken : sig
    type t = ts_LiteralToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LiteralToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LiteralToken]
    ]
  end
  module[@js.scope "TemplateHead"] TemplateHead : sig
    type t = ts_TemplateHead
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateHead | `Ts_TemplateLiteralLikeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateHead | `Ts_TemplateLiteralLikeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_TemplateHead [@@js.get "kind"]
    val get_parent: t -> ([`U_n_193 of ts_TemplateLiteralTypeNode [@js 193] | `U_n_218 of ts_TemplateExpression [@js 218]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val cast: t -> ts_TemplateLiteralLikeNode [@@js.cast]
  end
  module[@js.scope "TemplateMiddle"] TemplateMiddle : sig
    type t = ts_TemplateMiddle
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralLikeNode | `Ts_TemplateMiddle]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralLikeNode | `Ts_TemplateMiddle]
    ]
    val get_kind: t -> ts_SyntaxKind_TemplateMiddle [@@js.get "kind"]
    val get_parent: t -> ([`U_n_194 of ts_TemplateLiteralTypeSpan [@js 194] | `U_n_228 of ts_TemplateSpan [@js 228]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val cast: t -> ts_TemplateLiteralLikeNode [@@js.cast]
  end
  module[@js.scope "TemplateTail"] TemplateTail : sig
    type t = ts_TemplateTail
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralLikeNode | `Ts_TemplateTail]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateLiteralLikeNode | `Ts_TemplateTail]
    ]
    val get_kind: t -> ts_SyntaxKind_TemplateTail [@@js.get "kind"]
    val get_parent: t -> ([`U_n_194 of ts_TemplateLiteralTypeSpan [@js 194] | `U_n_228 of ts_TemplateSpan [@js 228]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val cast: t -> ts_TemplateLiteralLikeNode [@@js.cast]
  end
  module PseudoLiteralToken : sig
    type t = ts_PseudoLiteralToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PseudoLiteralToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PseudoLiteralToken]
    ]
  end
  module TemplateLiteralToken : sig
    type t = ts_TemplateLiteralToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TemplateLiteralToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TemplateLiteralToken]
    ]
  end
  module[@js.scope "TemplateExpression"] TemplateExpression : sig
    type t = ts_TemplateExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_TemplateExpression | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_TemplateExpression | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_TemplateExpression [@@js.get "kind"]
    val get_head: t -> ts_TemplateHead [@@js.get "head"]
    val get_templateSpans: t -> ts_TemplateSpan ts_NodeArray [@@js.get "templateSpans"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
  end
  module TemplateLiteral : sig
    type t = ts_TemplateLiteral
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TemplateLiteral]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TemplateLiteral]
    ]
  end
  module[@js.scope "TemplateSpan"] TemplateSpan : sig
    type t = ts_TemplateSpan
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateSpan]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_TemplateSpan]
    ]
    val get_kind: t -> ts_SyntaxKind_TemplateSpan [@@js.get "kind"]
    val get_parent: t -> ts_TemplateExpression [@@js.get "parent"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val get_literal: t -> ([`U_n_16 of ts_TemplateMiddle [@js 16] | `U_n_17 of ts_TemplateTail [@js 17]] [@js.union on_field "kind"]) [@@js.get "literal"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "ParenthesizedExpression"] ParenthesizedExpression : sig
    type t = ts_ParenthesizedExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_JSDocContainer | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ParenthesizedExpression | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_JSDocContainer | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ParenthesizedExpression | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_ParenthesizedExpression [@@js.get "kind"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "ArrayLiteralExpression"] ArrayLiteralExpression : sig
    type t = ts_ArrayLiteralExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ArrayLiteralExpression | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ArrayLiteralExpression | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_ArrayLiteralExpression [@@js.get "kind"]
    val get_elements: t -> ts_Expression ts_NodeArray [@@js.get "elements"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
  end
  module[@js.scope "SpreadElement"] SpreadElement : sig
    type t = ts_SpreadElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SpreadElement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SpreadElement]
    ]
    val get_kind: t -> ts_SyntaxKind_SpreadElement [@@js.get "kind"]
    val get_parent: t -> ([`U_n_199 of ts_ArrayLiteralExpression [@js 199] | `U_n_203 of ts_CallExpression [@js 203] | `U_n_204 of ts_NewExpression [@js 204]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_Expression [@@js.cast]
  end
  (**
    This interface is a base interface for ObjectLiteralExpression and JSXAttributes to extend from. JSXAttributes is similar to
    ObjectLiteralExpression in that it contains array of properties; however, JSXAttributes' properties can only be
    JSXAttribute or JSXSpreadAttribute. ObjectLiteralExpression, on the other hand, can only have properties of type
    ObjectLiteralElement (e.g. PropertyAssignment, ShorthandPropertyAssignment etc.)
  *)
  module[@js.scope "ObjectLiteralExpressionBase"] ObjectLiteralExpressionBase : sig
    type 'T t = 'T ts_ObjectLiteralExpressionBase
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ObjectLiteralExpressionBase of 'T | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ObjectLiteralExpressionBase of 'T | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_properties: 'T t -> 'T ts_NodeArray [@@js.get "properties"]
    val cast: 'T t -> ts_PrimaryExpression [@@js.cast]
    val cast': 'T t -> ts_Declaration [@@js.cast]
  end
  module[@js.scope "ObjectLiteralExpression"] ObjectLiteralExpression : sig
    type t = ts_ObjectLiteralExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ObjectLiteralExpression | `Ts_ObjectLiteralExpressionBase of ts_ObjectLiteralElementLike | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ObjectLiteralExpression | `Ts_ObjectLiteralExpressionBase of ts_ObjectLiteralElementLike | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_ObjectLiteralExpression [@@js.get "kind"]
    val cast: t -> ts_ObjectLiteralElementLike ts_ObjectLiteralExpressionBase [@@js.cast]
  end
  module EntityNameExpression : sig
    type t = ts_EntityNameExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EntityNameExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EntityNameExpression]
    ]
  end
  module EntityNameOrEntityNameExpression : sig
    type t = ts_EntityNameOrEntityNameExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EntityNameOrEntityNameExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EntityNameOrEntityNameExpression]
    ]
  end
  module AccessExpression : sig
    type t = ts_AccessExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AccessExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AccessExpression]
    ]
  end
  module[@js.scope "PropertyAccessExpression"] PropertyAccessExpression : sig
    type t = ts_PropertyAccessExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_PropertyAccessExpression [@@js.get "kind"]
    val get_expression: t -> ts_LeftHandSideExpression [@@js.get "expression"]
    val get_questionDotToken: t -> ts_QuestionDotToken [@@js.get "questionDotToken"]
    val get_name: t -> ([`U_n_78 of ts_Identifier [@js 78] | `U_n_79 of ts_PrivateIdentifier [@js 79]] [@js.union on_field "kind"]) [@@js.get "name"]
    val cast: t -> ts_MemberExpression [@@js.cast]
    val cast': t -> ts_NamedDeclaration [@@js.cast]
  end
  module[@js.scope "PropertyAccessChain"] PropertyAccessChain : sig
    type t = ts_PropertyAccessChain
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessChain | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessChain | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get__optionalChainBrand: t -> any [@@js.get "_optionalChainBrand"]
    val set__optionalChainBrand: t -> any -> unit [@@js.set "_optionalChainBrand"]
    val get_name: t -> ([`U_n_78 of ts_Identifier [@js 78] | `U_n_79 of ts_PrivateIdentifier [@js 79]] [@js.union on_field "kind"]) [@@js.get "name"]
    val cast: t -> ts_PropertyAccessExpression [@@js.cast]
  end
  module[@js.scope "SuperPropertyAccessExpression"] SuperPropertyAccessExpression : sig
    type t = ts_SuperPropertyAccessExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_SuperPropertyAccessExpression | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_SuperPropertyAccessExpression | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_expression: t -> ts_SuperExpression [@@js.get "expression"]
    val cast: t -> ts_PropertyAccessExpression [@@js.cast]
  end
  (** Brand for a PropertyAccessExpression which, like a QualifiedName, consists of a sequence of identifiers separated by dots. *)
  module[@js.scope "PropertyAccessEntityNameExpression"] PropertyAccessEntityNameExpression : sig
    type t = ts_PropertyAccessEntityNameExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessEntityNameExpression | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessEntityNameExpression | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get__propertyAccessExpressionLikeQualifiedNameBrand: t -> any [@@js.get "_propertyAccessExpressionLikeQualifiedNameBrand"]
    val set__propertyAccessExpressionLikeQualifiedNameBrand: t -> any -> unit [@@js.set "_propertyAccessExpressionLikeQualifiedNameBrand"]
    val get_expression: t -> ts_EntityNameExpression [@@js.get "expression"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val cast: t -> ts_PropertyAccessExpression [@@js.cast]
  end
  module[@js.scope "ElementAccessExpression"] ElementAccessExpression : sig
    type t = ts_ElementAccessExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ElementAccessExpression | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ElementAccessExpression | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_ElementAccessExpression [@@js.get "kind"]
    val get_expression: t -> ts_LeftHandSideExpression [@@js.get "expression"]
    val get_questionDotToken: t -> ts_QuestionDotToken [@@js.get "questionDotToken"]
    val get_argumentExpression: t -> ts_Expression [@@js.get "argumentExpression"]
    val cast: t -> ts_MemberExpression [@@js.cast]
  end
  module[@js.scope "ElementAccessChain"] ElementAccessChain : sig
    type t = ts_ElementAccessChain
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ElementAccessChain | `Ts_ElementAccessExpression | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ElementAccessChain | `Ts_ElementAccessExpression | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get__optionalChainBrand: t -> any [@@js.get "_optionalChainBrand"]
    val set__optionalChainBrand: t -> any -> unit [@@js.set "_optionalChainBrand"]
    val cast: t -> ts_ElementAccessExpression [@@js.cast]
  end
  module[@js.scope "SuperElementAccessExpression"] SuperElementAccessExpression : sig
    type t = ts_SuperElementAccessExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ElementAccessExpression | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SuperElementAccessExpression | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ElementAccessExpression | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SuperElementAccessExpression | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_expression: t -> ts_SuperExpression [@@js.get "expression"]
    val cast: t -> ts_ElementAccessExpression [@@js.cast]
  end
  module SuperProperty : sig
    type t = ts_SuperProperty
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SuperProperty]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SuperProperty]
    ]
  end
  module[@js.scope "CallExpression"] CallExpression : sig
    type t = ts_CallExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CallExpression | `Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CallExpression | `Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_CallExpression [@@js.get "kind"]
    val get_expression: t -> ts_LeftHandSideExpression [@@js.get "expression"]
    val get_questionDotToken: t -> ts_QuestionDotToken [@@js.get "questionDotToken"]
    val get_typeArguments: t -> ts_TypeNode ts_NodeArray [@@js.get "typeArguments"]
    val get_arguments: t -> ts_Expression ts_NodeArray [@@js.get "arguments"]
    val cast: t -> ts_LeftHandSideExpression [@@js.cast]
    val cast': t -> ts_Declaration [@@js.cast]
  end
  module[@js.scope "CallChain"] CallChain : sig
    type t = ts_CallChain
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CallChain | `Ts_CallExpression | `Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CallChain | `Ts_CallExpression | `Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get__optionalChainBrand: t -> any [@@js.get "_optionalChainBrand"]
    val set__optionalChainBrand: t -> any -> unit [@@js.set "_optionalChainBrand"]
    val cast: t -> ts_CallExpression [@@js.cast]
  end
  module OptionalChain : sig
    type t = ts_OptionalChain
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_OptionalChain]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_OptionalChain]
    ]
  end
  module[@js.scope "SuperCall"] SuperCall : sig
    type t = ts_SuperCall
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CallExpression | `Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SuperCall | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CallExpression | `Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SuperCall | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_expression: t -> ts_SuperExpression [@@js.get "expression"]
    val cast: t -> ts_CallExpression [@@js.cast]
  end
  module[@js.scope "ImportCall"] ImportCall : sig
    type t = ts_ImportCall
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CallExpression | `Ts_Declaration | `Ts_Expression | `Ts_ImportCall | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CallExpression | `Ts_Declaration | `Ts_Expression | `Ts_ImportCall | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_expression: t -> ts_ImportExpression [@@js.get "expression"]
    val cast: t -> ts_CallExpression [@@js.cast]
  end
  module[@js.scope "ExpressionWithTypeArguments"] ExpressionWithTypeArguments : sig
    type t = ts_ExpressionWithTypeArguments
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ExpressionWithTypeArguments | `Ts_Node | `Ts_NodeWithTypeArguments | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ExpressionWithTypeArguments | `Ts_Node | `Ts_NodeWithTypeArguments | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_ExpressionWithTypeArguments [@@js.get "kind"]
    val get_parent: t -> ([`U_n_286 of ts_HeritageClause [@js 286] | `U_n_315 of ts_JSDocAugmentsTag [@js 315] | `U_n_316 of ts_JSDocImplementsTag [@js 316]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_expression: t -> ts_LeftHandSideExpression [@@js.get "expression"]
    val cast: t -> ts_NodeWithTypeArguments [@@js.cast]
  end
  module[@js.scope "NewExpression"] NewExpression : sig
    type t = ts_NewExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NewExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NewExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_NewExpression [@@js.get "kind"]
    val get_expression: t -> ts_LeftHandSideExpression [@@js.get "expression"]
    val get_typeArguments: t -> ts_TypeNode ts_NodeArray [@@js.get "typeArguments"]
    val get_arguments: t -> ts_Expression ts_NodeArray [@@js.get "arguments"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
    val cast': t -> ts_Declaration [@@js.cast]
  end
  module[@js.scope "TaggedTemplateExpression"] TaggedTemplateExpression : sig
    type t = ts_TaggedTemplateExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TaggedTemplateExpression | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TaggedTemplateExpression | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_TaggedTemplateExpression [@@js.get "kind"]
    val get_tag: t -> ts_LeftHandSideExpression [@@js.get "tag"]
    val get_typeArguments: t -> ts_TypeNode ts_NodeArray [@@js.get "typeArguments"]
    val get_template: t -> ts_TemplateLiteral [@@js.get "template"]
    val cast: t -> ts_MemberExpression [@@js.cast]
  end
  module CallLikeExpression : sig
    type t = ts_CallLikeExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CallLikeExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CallLikeExpression]
    ]
  end
  module[@js.scope "AsExpression"] AsExpression : sig
    type t = ts_AsExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AsExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AsExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_AsExpression [@@js.get "kind"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_Expression [@@js.cast]
  end
  module[@js.scope "TypeAssertion"] TypeAssertion : sig
    type t = ts_TypeAssertion
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeAssertion | `Ts_UnaryExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeAssertion | `Ts_UnaryExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_TypeAssertionExpression [@@js.get "kind"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val get_expression: t -> ts_UnaryExpression [@@js.get "expression"]
    val cast: t -> ts_UnaryExpression [@@js.cast]
  end
  module AssertionExpression : sig
    type t = ts_AssertionExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AssertionExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AssertionExpression]
    ]
  end
  module[@js.scope "NonNullExpression"] NonNullExpression : sig
    type t = ts_NonNullExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_NonNullExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_NonNullExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_NonNullExpression [@@js.get "kind"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_LeftHandSideExpression [@@js.cast]
  end
  module[@js.scope "NonNullChain"] NonNullChain : sig
    type t = ts_NonNullChain
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_NonNullChain | `Ts_NonNullExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_Node | `Ts_NonNullChain | `Ts_NonNullExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get__optionalChainBrand: t -> any [@@js.get "_optionalChainBrand"]
    val set__optionalChainBrand: t -> any -> unit [@@js.set "_optionalChainBrand"]
    val cast: t -> ts_NonNullExpression [@@js.cast]
  end
  module[@js.scope "MetaProperty"] MetaProperty : sig
    type t = ts_MetaProperty
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_MetaProperty | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_MetaProperty | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_MetaProperty [@@js.get "kind"]
    val get_keywordToken: t -> ((ts_SyntaxKind_ImportKeyword, ts_SyntaxKind_NewKeyword) union2, ([`ImportKeyword[@js 99] | `NewKeyword[@js 102]] [@js.enum])) or_enum [@@js.get "keywordToken"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
  end
  module[@js.scope "JsxElement"] JsxElement : sig
    type t = ts_JsxElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_JsxElement | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_JsxElement | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_JsxElement [@@js.get "kind"]
    val get_openingElement: t -> ts_JsxOpeningElement [@@js.get "openingElement"]
    val get_children: t -> ts_JsxChild ts_NodeArray [@@js.get "children"]
    val get_closingElement: t -> ts_JsxClosingElement [@@js.get "closingElement"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
  end
  module JsxOpeningLikeElement : sig
    type t = ts_JsxOpeningLikeElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JsxOpeningLikeElement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JsxOpeningLikeElement]
    ]
  end
  module JsxAttributeLike : sig
    type t = ts_JsxAttributeLike
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JsxAttributeLike]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JsxAttributeLike]
    ]
  end
  module JsxTagNameExpression : sig
    type t = ts_JsxTagNameExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JsxTagNameExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JsxTagNameExpression]
    ]
  end
  module[@js.scope "JsxTagNamePropertyAccess"] JsxTagNamePropertyAccess : sig
    type t = ts_JsxTagNamePropertyAccess
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Expression | `Ts_JsxTagNamePropertyAccess | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Expression | `Ts_JsxTagNamePropertyAccess | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PropertyAccessExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_expression: t -> ts_JsxTagNameExpression [@@js.get "expression"]
    val cast: t -> ts_PropertyAccessExpression [@@js.cast]
  end
  module[@js.scope "JsxAttributes"] JsxAttributes : sig
    type t = ts_JsxAttributes
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Expression | `Ts_JsxAttributes | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ObjectLiteralExpressionBase of ts_JsxAttributeLike | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Expression | `Ts_JsxAttributes | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_ObjectLiteralExpressionBase of ts_JsxAttributeLike | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_JsxAttributes [@@js.get "kind"]
    val get_parent: t -> ts_JsxOpeningLikeElement [@@js.get "parent"]
    val cast: t -> ts_JsxAttributeLike ts_ObjectLiteralExpressionBase [@@js.cast]
  end
  module[@js.scope "JsxOpeningElement"] JsxOpeningElement : sig
    type t = ts_JsxOpeningElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_JsxOpeningElement | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_JsxOpeningElement | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JsxOpeningElement [@@js.get "kind"]
    val get_parent: t -> ts_JsxElement [@@js.get "parent"]
    val get_tagName: t -> ts_JsxTagNameExpression [@@js.get "tagName"]
    val get_typeArguments: t -> ts_TypeNode ts_NodeArray [@@js.get "typeArguments"]
    val get_attributes: t -> ts_JsxAttributes [@@js.get "attributes"]
    val cast: t -> ts_Expression [@@js.cast]
  end
  module[@js.scope "JsxSelfClosingElement"] JsxSelfClosingElement : sig
    type t = ts_JsxSelfClosingElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_JsxSelfClosingElement | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_JsxSelfClosingElement | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_JsxSelfClosingElement [@@js.get "kind"]
    val get_tagName: t -> ts_JsxTagNameExpression [@@js.get "tagName"]
    val get_typeArguments: t -> ts_TypeNode ts_NodeArray [@@js.get "typeArguments"]
    val get_attributes: t -> ts_JsxAttributes [@@js.get "attributes"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
  end
  module[@js.scope "JsxFragment"] JsxFragment : sig
    type t = ts_JsxFragment
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_JsxFragment | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_JsxFragment | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_JsxFragment [@@js.get "kind"]
    val get_openingFragment: t -> ts_JsxOpeningFragment [@@js.get "openingFragment"]
    val get_children: t -> ts_JsxChild ts_NodeArray [@@js.get "children"]
    val get_closingFragment: t -> ts_JsxClosingFragment [@@js.get "closingFragment"]
    val cast: t -> ts_PrimaryExpression [@@js.cast]
  end
  module[@js.scope "JsxOpeningFragment"] JsxOpeningFragment : sig
    type t = ts_JsxOpeningFragment
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_JsxOpeningFragment | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_JsxOpeningFragment | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JsxOpeningFragment [@@js.get "kind"]
    val get_parent: t -> ts_JsxFragment [@@js.get "parent"]
    val cast: t -> ts_Expression [@@js.cast]
  end
  module[@js.scope "JsxClosingFragment"] JsxClosingFragment : sig
    type t = ts_JsxClosingFragment
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_JsxClosingFragment | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_JsxClosingFragment | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JsxClosingFragment [@@js.get "kind"]
    val get_parent: t -> ts_JsxFragment [@@js.get "parent"]
    val cast: t -> ts_Expression [@@js.cast]
  end
  module[@js.scope "JsxAttribute"] JsxAttribute : sig
    type t = ts_JsxAttribute
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JsxAttribute | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JsxAttribute | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JsxAttribute [@@js.get "kind"]
    val get_parent: t -> ts_JsxAttributes [@@js.get "parent"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_initializer: t -> ([`U_n_10 of ts_StringLiteral [@js 10] | `U_n_283 of ts_JsxExpression [@js 283]] [@js.union on_field "kind"]) [@@js.get "initializer"]
    val cast: t -> ts_ObjectLiteralElement [@@js.cast]
  end
  module[@js.scope "JsxSpreadAttribute"] JsxSpreadAttribute : sig
    type t = ts_JsxSpreadAttribute
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JsxSpreadAttribute | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JsxSpreadAttribute | `Ts_NamedDeclaration | `Ts_Node | `Ts_ObjectLiteralElement | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JsxSpreadAttribute [@@js.get "kind"]
    val get_parent: t -> ts_JsxAttributes [@@js.get "parent"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_ObjectLiteralElement [@@js.cast]
  end
  module[@js.scope "JsxClosingElement"] JsxClosingElement : sig
    type t = ts_JsxClosingElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JsxClosingElement | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JsxClosingElement | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JsxClosingElement [@@js.get "kind"]
    val get_parent: t -> ts_JsxElement [@@js.get "parent"]
    val get_tagName: t -> ts_JsxTagNameExpression [@@js.get "tagName"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "JsxExpression"] JsxExpression : sig
    type t = ts_JsxExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_JsxExpression | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_JsxExpression | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JsxExpression [@@js.get "kind"]
    val get_parent: t -> ([`U_n_273 of ts_JsxElement [@js 273] | `U_n_280 of ts_JsxAttributeLike [@js 280] | `U_n_282 of ts_JsxAttributeLike [@js 282]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_dotDotDotToken: t -> ts_SyntaxKind_DotDotDotToken ts_Token [@@js.get "dotDotDotToken"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_Expression [@@js.cast]
  end
  module[@js.scope "JsxText"] JsxText : sig
    type t = ts_JsxText
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JsxText | `Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JsxText | `Ts_LiteralLikeNode | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JsxText [@@js.get "kind"]
    val get_parent: t -> ts_JsxElement [@@js.get "parent"]
    val get_containsOnlyTriviaWhiteSpaces: t -> bool [@@js.get "containsOnlyTriviaWhiteSpaces"]
    val cast: t -> ts_LiteralLikeNode [@@js.cast]
  end
  module JsxChild : sig
    type t = ts_JsxChild
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JsxChild]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JsxChild]
    ]
  end
  module[@js.scope "Statement"] Statement : sig
    type t = ts_Statement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get__statementBrand: t -> any [@@js.get "_statementBrand"]
    val set__statementBrand: t -> any -> unit [@@js.set "_statementBrand"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "NotEmittedStatement"] NotEmittedStatement : sig
    type t = ts_NotEmittedStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_NotEmittedStatement | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_NotEmittedStatement | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_NotEmittedStatement [@@js.get "kind"]
    val cast: t -> ts_Statement [@@js.cast]
  end
  (** A list of comma-separated expressions. This node is only created by transformations. *)
  module[@js.scope "CommaListExpression"] CommaListExpression : sig
    type t = ts_CommaListExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CommaListExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CommaListExpression | `Ts_Expression | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_CommaListExpression [@@js.get "kind"]
    val get_elements: t -> ts_Expression ts_NodeArray [@@js.get "elements"]
    val cast: t -> ts_Expression [@@js.cast]
  end
  module[@js.scope "EmptyStatement"] EmptyStatement : sig
    type t = ts_EmptyStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EmptyStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EmptyStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_EmptyStatement [@@js.get "kind"]
    val cast: t -> ts_Statement [@@js.cast]
  end
  module[@js.scope "DebuggerStatement"] DebuggerStatement : sig
    type t = ts_DebuggerStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DebuggerStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DebuggerStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_DebuggerStatement [@@js.get "kind"]
    val cast: t -> ts_Statement [@@js.cast]
  end
  module[@js.scope "MissingDeclaration"] MissingDeclaration : sig
    type t = ts_MissingDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_MissingDeclaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_MissingDeclaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_MissingDeclaration [@@js.get "kind"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val cast: t -> ts_DeclarationStatement [@@js.cast]
  end
  module BlockLike : sig
    type t = ts_BlockLike
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BlockLike]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BlockLike]
    ]
  end
  module[@js.scope "Block"] Block : sig
    type t = ts_Block
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Block | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Block | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_Block [@@js.get "kind"]
    val get_statements: t -> ts_Statement ts_NodeArray [@@js.get "statements"]
    val cast: t -> ts_Statement [@@js.cast]
  end
  module[@js.scope "VariableStatement"] VariableStatement : sig
    type t = ts_VariableStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocContainer | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_VariableStatement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocContainer | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_VariableStatement]
    ]
    val get_kind: t -> ts_SyntaxKind_VariableStatement [@@js.get "kind"]
    val get_declarationList: t -> ts_VariableDeclarationList [@@js.get "declarationList"]
    val cast: t -> ts_Statement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "ExpressionStatement"] ExpressionStatement : sig
    type t = ts_ExpressionStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ExpressionStatement | `Ts_JSDocContainer | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ExpressionStatement | `Ts_JSDocContainer | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_ExpressionStatement [@@js.get "kind"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_Statement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "IfStatement"] IfStatement : sig
    type t = ts_IfStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_IfStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_IfStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_IfStatement [@@js.get "kind"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val get_thenStatement: t -> ts_Statement [@@js.get "thenStatement"]
    val get_elseStatement: t -> ts_Statement [@@js.get "elseStatement"]
    val cast: t -> ts_Statement [@@js.cast]
  end
  module[@js.scope "IterationStatement"] IterationStatement : sig
    type t = ts_IterationStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_statement: t -> ts_Statement [@@js.get "statement"]
    val cast: t -> ts_Statement [@@js.cast]
  end
  module[@js.scope "DoStatement"] DoStatement : sig
    type t = ts_DoStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DoStatement | `Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DoStatement | `Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_DoStatement [@@js.get "kind"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_IterationStatement [@@js.cast]
  end
  module[@js.scope "WhileStatement"] WhileStatement : sig
    type t = ts_WhileStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_WhileStatement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_WhileStatement]
    ]
    val get_kind: t -> ts_SyntaxKind_WhileStatement [@@js.get "kind"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_IterationStatement [@@js.cast]
  end
  module ForInitializer : sig
    type t = ts_ForInitializer
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ForInitializer]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ForInitializer]
    ]
  end
  module[@js.scope "ForStatement"] ForStatement : sig
    type t = ts_ForStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ForStatement | `Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ForStatement | `Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_ForStatement [@@js.get "kind"]
    val get_initializer: t -> ts_ForInitializer [@@js.get "initializer"]
    val get_condition: t -> ts_Expression [@@js.get "condition"]
    val get_incrementor: t -> ts_Expression [@@js.get "incrementor"]
    val cast: t -> ts_IterationStatement [@@js.cast]
  end
  module ForInOrOfStatement : sig
    type t = ts_ForInOrOfStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ForInOrOfStatement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ForInOrOfStatement]
    ]
  end
  module[@js.scope "ForInStatement"] ForInStatement : sig
    type t = ts_ForInStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ForInStatement | `Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ForInStatement | `Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_ForInStatement [@@js.get "kind"]
    val get_initializer: t -> ts_ForInitializer [@@js.get "initializer"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_IterationStatement [@@js.cast]
  end
  module[@js.scope "ForOfStatement"] ForOfStatement : sig
    type t = ts_ForOfStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ForOfStatement | `Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ForOfStatement | `Ts_IterationStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_ForOfStatement [@@js.get "kind"]
    val get_awaitModifier: t -> ts_AwaitKeywordToken [@@js.get "awaitModifier"]
    val get_initializer: t -> ts_ForInitializer [@@js.get "initializer"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_IterationStatement [@@js.cast]
  end
  module[@js.scope "BreakStatement"] BreakStatement : sig
    type t = ts_BreakStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BreakStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BreakStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_BreakStatement [@@js.get "kind"]
    val get_label: t -> ts_Identifier [@@js.get "label"]
    val cast: t -> ts_Statement [@@js.cast]
  end
  module[@js.scope "ContinueStatement"] ContinueStatement : sig
    type t = ts_ContinueStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ContinueStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ContinueStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_ContinueStatement [@@js.get "kind"]
    val get_label: t -> ts_Identifier [@@js.get "label"]
    val cast: t -> ts_Statement [@@js.cast]
  end
  module BreakOrContinueStatement : sig
    type t = ts_BreakOrContinueStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BreakOrContinueStatement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BreakOrContinueStatement]
    ]
  end
  module[@js.scope "ReturnStatement"] ReturnStatement : sig
    type t = ts_ReturnStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_ReturnStatement | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_ReturnStatement | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_ReturnStatement [@@js.get "kind"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_Statement [@@js.cast]
  end
  module[@js.scope "WithStatement"] WithStatement : sig
    type t = ts_WithStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_WithStatement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_WithStatement]
    ]
    val get_kind: t -> ts_SyntaxKind_WithStatement [@@js.get "kind"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val get_statement: t -> ts_Statement [@@js.get "statement"]
    val cast: t -> ts_Statement [@@js.cast]
  end
  module[@js.scope "SwitchStatement"] SwitchStatement : sig
    type t = ts_SwitchStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_SwitchStatement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_SwitchStatement]
    ]
    val get_kind: t -> ts_SyntaxKind_SwitchStatement [@@js.get "kind"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val get_caseBlock: t -> ts_CaseBlock [@@js.get "caseBlock"]
    val get_possiblyExhaustive: t -> bool [@@js.get "possiblyExhaustive"]
    val set_possiblyExhaustive: t -> bool -> unit [@@js.set "possiblyExhaustive"]
    val cast: t -> ts_Statement [@@js.cast]
  end
  module[@js.scope "CaseBlock"] CaseBlock : sig
    type t = ts_CaseBlock
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CaseBlock | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CaseBlock | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_CaseBlock [@@js.get "kind"]
    val get_parent: t -> ts_SwitchStatement [@@js.get "parent"]
    val get_clauses: t -> ts_CaseOrDefaultClause ts_NodeArray [@@js.get "clauses"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "CaseClause"] CaseClause : sig
    type t = ts_CaseClause
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CaseClause | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CaseClause | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_CaseClause [@@js.get "kind"]
    val get_parent: t -> ts_CaseBlock [@@js.get "parent"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val get_statements: t -> ts_Statement ts_NodeArray [@@js.get "statements"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "DefaultClause"] DefaultClause : sig
    type t = ts_DefaultClause
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DefaultClause | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DefaultClause | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_DefaultClause [@@js.get "kind"]
    val get_parent: t -> ts_CaseBlock [@@js.get "parent"]
    val get_statements: t -> ts_Statement ts_NodeArray [@@js.get "statements"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module CaseOrDefaultClause : sig
    type t = ts_CaseOrDefaultClause
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CaseOrDefaultClause]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CaseOrDefaultClause]
    ]
  end
  module[@js.scope "LabeledStatement"] LabeledStatement : sig
    type t = ts_LabeledStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocContainer | `Ts_LabeledStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocContainer | `Ts_LabeledStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_LabeledStatement [@@js.get "kind"]
    val get_label: t -> ts_Identifier [@@js.get "label"]
    val get_statement: t -> ts_Statement [@@js.get "statement"]
    val cast: t -> ts_Statement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "ThrowStatement"] ThrowStatement : sig
    type t = ts_ThrowStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_ThrowStatement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_ThrowStatement]
    ]
    val get_kind: t -> ts_SyntaxKind_ThrowStatement [@@js.get "kind"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_Statement [@@js.cast]
  end
  module[@js.scope "TryStatement"] TryStatement : sig
    type t = ts_TryStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_TryStatement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_TryStatement]
    ]
    val get_kind: t -> ts_SyntaxKind_TryStatement [@@js.get "kind"]
    val get_tryBlock: t -> ts_Block [@@js.get "tryBlock"]
    val get_catchClause: t -> ts_CatchClause [@@js.get "catchClause"]
    val get_finallyBlock: t -> ts_Block [@@js.get "finallyBlock"]
    val cast: t -> ts_Statement [@@js.cast]
  end
  module[@js.scope "CatchClause"] CatchClause : sig
    type t = ts_CatchClause
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CatchClause | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CatchClause | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_CatchClause [@@js.get "kind"]
    val get_parent: t -> ts_TryStatement [@@js.get "parent"]
    val get_variableDeclaration: t -> ts_VariableDeclaration [@@js.get "variableDeclaration"]
    val get_block: t -> ts_Block [@@js.get "block"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module ObjectTypeDeclaration : sig
    type t = ts_ObjectTypeDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ObjectTypeDeclaration]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ObjectTypeDeclaration]
    ]
  end
  module DeclarationWithTypeParameters : sig
    type t = ts_DeclarationWithTypeParameters
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DeclarationWithTypeParameters]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DeclarationWithTypeParameters]
    ]
  end
  module DeclarationWithTypeParameterChildren : sig
    type t = ts_DeclarationWithTypeParameterChildren
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DeclarationWithTypeParameterChildren]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DeclarationWithTypeParameterChildren]
    ]
  end
  module[@js.scope "ClassLikeDeclarationBase"] ClassLikeDeclarationBase : sig
    type t = ts_ClassLikeDeclarationBase
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassLikeDeclarationBase | `Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassLikeDeclarationBase | `Ts_Declaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ((ts_SyntaxKind_ClassDeclaration, ts_SyntaxKind_ClassExpression) union2, ([`ClassDeclaration[@js 252] | `ClassExpression[@js 221]] [@js.enum])) or_enum [@@js.get "kind"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_typeParameters: t -> ts_TypeParameterDeclaration ts_NodeArray [@@js.get "typeParameters"]
    val get_heritageClauses: t -> ts_HeritageClause ts_NodeArray [@@js.get "heritageClauses"]
    val get_members: t -> ts_ClassElement ts_NodeArray [@@js.get "members"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "ClassDeclaration"] ClassDeclaration : sig
    type t = ts_ClassDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassDeclaration | `Ts_ClassLikeDeclarationBase | `Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassDeclaration | `Ts_ClassLikeDeclarationBase | `Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_ClassDeclaration [@@js.get "kind"]
    (** May be undefined in `export default class \{ ... \}`. *)
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val cast: t -> ts_ClassLikeDeclarationBase [@@js.cast]
    val cast': t -> ts_DeclarationStatement [@@js.cast]
  end
  module[@js.scope "ClassExpression"] ClassExpression : sig
    type t = ts_ClassExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassExpression | `Ts_ClassLikeDeclarationBase | `Ts_Declaration | `Ts_Expression | `Ts_JSDocContainer | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassExpression | `Ts_ClassLikeDeclarationBase | `Ts_Declaration | `Ts_Expression | `Ts_JSDocContainer | `Ts_LeftHandSideExpression | `Ts_MemberExpression | `Ts_NamedDeclaration | `Ts_Node | `Ts_PrimaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_ClassExpression [@@js.get "kind"]
    val cast: t -> ts_ClassLikeDeclarationBase [@@js.cast]
    val cast': t -> ts_PrimaryExpression [@@js.cast]
  end
  module ClassLikeDeclaration : sig
    type t = ts_ClassLikeDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassLikeDeclaration]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassLikeDeclaration]
    ]
  end
  module[@js.scope "ClassElement"] ClassElement : sig
    type t = ts_ClassElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassElement | `Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassElement | `Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get__classElementBrand: t -> any [@@js.get "_classElementBrand"]
    val set__classElementBrand: t -> any -> unit [@@js.set "_classElementBrand"]
    val get_name: t -> ts_PropertyName [@@js.get "name"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
  end
  module[@js.scope "TypeElement"] TypeElement : sig
    type t = ts_TypeElement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeElement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeElement]
    ]
    val get__typeElementBrand: t -> any [@@js.get "_typeElementBrand"]
    val set__typeElementBrand: t -> any -> unit [@@js.set "_typeElementBrand"]
    val get_name: t -> ts_PropertyName [@@js.get "name"]
    val get_questionToken: t -> ts_QuestionToken [@@js.get "questionToken"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
  end
  module[@js.scope "InterfaceDeclaration"] InterfaceDeclaration : sig
    type t = ts_InterfaceDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_InterfaceDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_InterfaceDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_InterfaceDeclaration [@@js.get "kind"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_typeParameters: t -> ts_TypeParameterDeclaration ts_NodeArray [@@js.get "typeParameters"]
    val get_heritageClauses: t -> ts_HeritageClause ts_NodeArray [@@js.get "heritageClauses"]
    val get_members: t -> ts_TypeElement ts_NodeArray [@@js.get "members"]
    val cast: t -> ts_DeclarationStatement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "HeritageClause"] HeritageClause : sig
    type t = ts_HeritageClause
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_HeritageClause | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_HeritageClause | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_HeritageClause [@@js.get "kind"]
    val get_parent: t -> ([`U_n_221 of ts_ClassLikeDeclaration [@js 221] | `U_n_252 of ts_ClassLikeDeclaration [@js 252] | `U_n_253 of ts_InterfaceDeclaration [@js 253]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_token: t -> ((ts_SyntaxKind_ExtendsKeyword, ts_SyntaxKind_ImplementsKeyword) union2, ([`ExtendsKeyword[@js 93] | `ImplementsKeyword[@js 116]] [@js.enum])) or_enum [@@js.get "token"]
    val get_types: t -> ts_ExpressionWithTypeArguments ts_NodeArray [@@js.get "types"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "TypeAliasDeclaration"] TypeAliasDeclaration : sig
    type t = ts_TypeAliasDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_TypeAliasDeclaration]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement | `Ts_TypeAliasDeclaration]
    ]
    val get_kind: t -> ts_SyntaxKind_TypeAliasDeclaration [@@js.get "kind"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_typeParameters: t -> ts_TypeParameterDeclaration ts_NodeArray [@@js.get "typeParameters"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_DeclarationStatement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "EnumMember"] EnumMember : sig
    type t = ts_EnumMember
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_EnumMember | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_EnumMember | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_EnumMember [@@js.get "kind"]
    val get_parent: t -> ts_EnumDeclaration [@@js.get "parent"]
    val get_name: t -> ts_PropertyName [@@js.get "name"]
    val get_initializer: t -> ts_Expression [@@js.get "initializer"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "EnumDeclaration"] EnumDeclaration : sig
    type t = ts_EnumDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_EnumDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_EnumDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_EnumDeclaration [@@js.get "kind"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_members: t -> ts_EnumMember ts_NodeArray [@@js.get "members"]
    val cast: t -> ts_DeclarationStatement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module ModuleName : sig
    type t = ts_ModuleName
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ModuleName]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ModuleName]
    ]
  end
  module ModuleBody : sig
    type t = ts_ModuleBody
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ModuleBody]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ModuleBody]
    ]
  end
  module[@js.scope "ModuleDeclaration"] ModuleDeclaration : sig
    type t = ts_ModuleDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_ModuleDeclaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_ModuleDeclaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_ModuleDeclaration [@@js.get "kind"]
    val get_parent: t -> ([`U_n_78 of ts_ModuleBody [@js 78] | `U_n_256 of ts_ModuleBody [@js 256] | `U_n_257 of ts_ModuleBody [@js 257] | `U_n_297 of ts_SourceFile [@js 297]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_name: t -> ts_ModuleName [@@js.get "name"]
    val get_body: t -> ([`U_n_78 of ts_ModuleBody [@js 78] | `U_n_256 of (ts_ModuleBody, ts_JSDocNamespaceDeclaration) union2 [@js 256] | `U_n_257 of ts_ModuleBody [@js 257]] [@js.union on_field "kind"]) [@@js.get "body"]
    val cast: t -> ts_DeclarationStatement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module NamespaceBody : sig
    type t = ts_NamespaceBody
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_NamespaceBody]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_NamespaceBody]
    ]
  end
  module[@js.scope "NamespaceDeclaration"] NamespaceDeclaration : sig
    type t = ts_NamespaceDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_ModuleDeclaration | `Ts_NamedDeclaration | `Ts_NamespaceDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_ModuleDeclaration | `Ts_NamedDeclaration | `Ts_NamespaceDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_body: t -> ts_NamespaceBody [@@js.get "body"]
    val cast: t -> ts_ModuleDeclaration [@@js.cast]
  end
  module JSDocNamespaceBody : sig
    type t = ts_JSDocNamespaceBody
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocNamespaceBody]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocNamespaceBody]
    ]
  end
  module[@js.scope "JSDocNamespaceDeclaration"] JSDocNamespaceDeclaration : sig
    type t = ts_JSDocNamespaceDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_JSDocNamespaceDeclaration | `Ts_ModuleDeclaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_JSDocNamespaceDeclaration | `Ts_ModuleDeclaration | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_body: t -> ts_JSDocNamespaceBody [@@js.get "body"]
    val cast: t -> ts_ModuleDeclaration [@@js.cast]
  end
  module[@js.scope "ModuleBlock"] ModuleBlock : sig
    type t = ts_ModuleBlock
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ModuleBlock | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ModuleBlock | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_ModuleBlock [@@js.get "kind"]
    val get_parent: t -> ts_ModuleDeclaration [@@js.get "parent"]
    val get_statements: t -> ts_Statement ts_NodeArray [@@js.get "statements"]
    val cast: t -> ts_Node [@@js.cast]
    val cast': t -> ts_Statement [@@js.cast]
  end
  module ModuleReference : sig
    type t = ts_ModuleReference
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ModuleReference]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ModuleReference]
    ]
  end
  (**
    One of:
    - import x = require("mod");
    - import x = M.x;
  *)
  module[@js.scope "ImportEqualsDeclaration"] ImportEqualsDeclaration : sig
    type t = ts_ImportEqualsDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_ImportEqualsDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_ImportEqualsDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_ImportEqualsDeclaration [@@js.get "kind"]
    val get_parent: t -> ([`U_n_257 of ts_ModuleBlock [@js 257] | `U_n_297 of ts_SourceFile [@js 297]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_isTypeOnly: t -> bool [@@js.get "isTypeOnly"]
    val get_moduleReference: t -> ts_ModuleReference [@@js.get "moduleReference"]
    val cast: t -> ts_DeclarationStatement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "ExternalModuleReference"] ExternalModuleReference : sig
    type t = ts_ExternalModuleReference
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ExternalModuleReference | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ExternalModuleReference | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_ExternalModuleReference [@@js.get "kind"]
    val get_parent: t -> ts_ImportEqualsDeclaration [@@js.get "parent"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "ImportDeclaration"] ImportDeclaration : sig
    type t = ts_ImportDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ImportDeclaration | `Ts_JSDocContainer | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ImportDeclaration | `Ts_JSDocContainer | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_ImportDeclaration [@@js.get "kind"]
    val get_parent: t -> ([`U_n_257 of ts_ModuleBlock [@js 257] | `U_n_297 of ts_SourceFile [@js 297]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_importClause: t -> ts_ImportClause [@@js.get "importClause"]
    (** If this is not a StringLiteral it will be a grammar error. *)
    val get_moduleSpecifier: t -> ts_Expression [@@js.get "moduleSpecifier"]
    val cast: t -> ts_Statement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module NamedImportBindings : sig
    type t = ts_NamedImportBindings
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_NamedImportBindings]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_NamedImportBindings]
    ]
  end
  module NamedExportBindings : sig
    type t = ts_NamedExportBindings
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_NamedExportBindings]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_NamedExportBindings]
    ]
  end
  module[@js.scope "ImportClause"] ImportClause : sig
    type t = ts_ImportClause
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_ImportClause | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_ImportClause | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_ImportClause [@@js.get "kind"]
    val get_parent: t -> ts_ImportDeclaration [@@js.get "parent"]
    val get_isTypeOnly: t -> bool [@@js.get "isTypeOnly"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_namedBindings: t -> ts_NamedImportBindings [@@js.get "namedBindings"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
  end
  module[@js.scope "NamespaceImport"] NamespaceImport : sig
    type t = ts_NamespaceImport
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_NamespaceImport | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_NamespaceImport | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_NamespaceImport [@@js.get "kind"]
    val get_parent: t -> ts_ImportClause [@@js.get "parent"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
  end
  module[@js.scope "NamespaceExport"] NamespaceExport : sig
    type t = ts_NamespaceExport
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_NamespaceExport | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_NamedDeclaration | `Ts_NamespaceExport | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_NamespaceExport [@@js.get "kind"]
    val get_parent: t -> ts_ExportDeclaration [@@js.get "parent"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
  end
  module[@js.scope "NamespaceExportDeclaration"] NamespaceExportDeclaration : sig
    type t = ts_NamespaceExportDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_NamespaceExportDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_NamespaceExportDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_NamespaceExportDeclaration [@@js.get "kind"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val cast: t -> ts_DeclarationStatement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "ExportDeclaration"] ExportDeclaration : sig
    type t = ts_ExportDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_ExportDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_ExportDeclaration | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_ExportDeclaration [@@js.get "kind"]
    val get_parent: t -> ([`U_n_257 of ts_ModuleBlock [@js 257] | `U_n_297 of ts_SourceFile [@js 297]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_isTypeOnly: t -> bool [@@js.get "isTypeOnly"]
    (** Will not be assigned in the case of `export * from "foo";` *)
    val get_exportClause: t -> ts_NamedExportBindings [@@js.get "exportClause"]
    (** If this is not a StringLiteral it will be a grammar error. *)
    val get_moduleSpecifier: t -> ts_Expression [@@js.get "moduleSpecifier"]
    val cast: t -> ts_DeclarationStatement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "NamedImports"] NamedImports : sig
    type t = ts_NamedImports
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_NamedImports | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_NamedImports | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_NamedImports [@@js.get "kind"]
    val get_parent: t -> ts_ImportClause [@@js.get "parent"]
    val get_elements: t -> ts_ImportSpecifier ts_NodeArray [@@js.get "elements"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "NamedExports"] NamedExports : sig
    type t = ts_NamedExports
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_NamedExports | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_NamedExports | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_NamedExports [@@js.get "kind"]
    val get_parent: t -> ts_ExportDeclaration [@@js.get "parent"]
    val get_elements: t -> ts_ExportSpecifier ts_NodeArray [@@js.get "elements"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module NamedImportsOrExports : sig
    type t = ts_NamedImportsOrExports
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_NamedImportsOrExports]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_NamedImportsOrExports]
    ]
  end
  module[@js.scope "ImportSpecifier"] ImportSpecifier : sig
    type t = ts_ImportSpecifier
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_ImportSpecifier | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_ImportSpecifier | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_ImportSpecifier [@@js.get "kind"]
    val get_parent: t -> ts_NamedImports [@@js.get "parent"]
    val get_propertyName: t -> ts_Identifier [@@js.get "propertyName"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
  end
  module[@js.scope "ExportSpecifier"] ExportSpecifier : sig
    type t = ts_ExportSpecifier
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_ExportSpecifier | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_ExportSpecifier | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_ExportSpecifier [@@js.get "kind"]
    val get_parent: t -> ts_NamedExports [@@js.get "parent"]
    val get_propertyName: t -> ts_Identifier [@@js.get "propertyName"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val cast: t -> ts_NamedDeclaration [@@js.cast]
  end
  module ImportOrExportSpecifier : sig
    type t = ts_ImportOrExportSpecifier
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ImportOrExportSpecifier]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ImportOrExportSpecifier]
    ]
  end
  module TypeOnlyCompatibleAliasDeclaration : sig
    type t = ts_TypeOnlyCompatibleAliasDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TypeOnlyCompatibleAliasDeclaration]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TypeOnlyCompatibleAliasDeclaration]
    ]
  end
  (**
    This is either an `export =` or an `export default` declaration.
    Unless `isExportEquals` is set, this node was parsed as an `export default`.
  *)
  module[@js.scope "ExportAssignment"] ExportAssignment : sig
    type t = ts_ExportAssignment
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_ExportAssignment | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_DeclarationStatement | `Ts_ExportAssignment | `Ts_JSDocContainer | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_kind: t -> ts_SyntaxKind_ExportAssignment [@@js.get "kind"]
    val get_parent: t -> ts_SourceFile [@@js.get "parent"]
    val get_isExportEquals: t -> bool [@@js.get "isExportEquals"]
    val get_expression: t -> ts_Expression [@@js.get "expression"]
    val cast: t -> ts_DeclarationStatement [@@js.cast]
    val cast': t -> ts_JSDocContainer [@@js.cast]
  end
  module[@js.scope "FileReference"] FileReference : sig
    type t = ts_FileReference
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FileReference | `Ts_TextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FileReference | `Ts_TextRange]
    ]
    val get_fileName: t -> string [@@js.get "fileName"]
    val set_fileName: t -> string -> unit [@@js.set "fileName"]
    val cast: t -> ts_TextRange [@@js.cast]
  end
  module[@js.scope "CheckJsDirective"] CheckJsDirective : sig
    type t = ts_CheckJsDirective
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CheckJsDirective | `Ts_TextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CheckJsDirective | `Ts_TextRange]
    ]
    val get_enabled: t -> bool [@@js.get "enabled"]
    val set_enabled: t -> bool -> unit [@@js.set "enabled"]
    val cast: t -> ts_TextRange [@@js.cast]
  end
  module CommentKind : sig
    type t = ts_CommentKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CommentKind]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CommentKind]
    ]
  end
  module[@js.scope "CommentRange"] CommentRange : sig
    type t = ts_CommentRange
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CommentRange | `Ts_TextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CommentRange | `Ts_TextRange]
    ]
    val get_hasTrailingNewLine: t -> bool [@@js.get "hasTrailingNewLine"]
    val set_hasTrailingNewLine: t -> bool -> unit [@@js.set "hasTrailingNewLine"]
    val get_kind: t -> ts_CommentKind [@@js.get "kind"]
    val set_kind: t -> ts_CommentKind -> unit [@@js.set "kind"]
    val cast: t -> ts_TextRange [@@js.cast]
  end
  module[@js.scope "SynthesizedComment"] SynthesizedComment : sig
    type t = ts_SynthesizedComment
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CommentRange | `Ts_SynthesizedComment | `Ts_TextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CommentRange | `Ts_SynthesizedComment | `Ts_TextRange]
    ]
    val get_text: t -> string [@@js.get "text"]
    val set_text: t -> string -> unit [@@js.set "text"]
    val get_pos: t -> ([`L_n_minus1[@js -1]] [@js.enum]) [@@js.get "pos"]
    val set_pos: t -> ([`L_n_minus1] [@js.enum]) -> unit [@@js.set "pos"]
    val get_end: t -> ([`L_n_minus1[@js -1]] [@js.enum]) [@@js.get "end"]
    val set_end: t -> ([`L_n_minus1] [@js.enum]) -> unit [@@js.set "end"]
    val get_hasLeadingNewline: t -> bool [@@js.get "hasLeadingNewline"]
    val set_hasLeadingNewline: t -> bool -> unit [@@js.set "hasLeadingNewline"]
    val cast: t -> ts_CommentRange [@@js.cast]
  end
  module[@js.scope "JSDocTypeExpression"] JSDocTypeExpression : sig
    type t = ts_JSDocTypeExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocTypeExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocTypeExpression | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocTypeExpression [@@js.get "kind"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "JSDocNameReference"] JSDocNameReference : sig
    type t = ts_JSDocNameReference
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocNameReference | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocNameReference | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocNameReference [@@js.get "kind"]
    val get_name: t -> ts_EntityName [@@js.get "name"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "JSDocType"] JSDocType : sig
    type t = ts_JSDocType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get__jsDocTypeBrand: t -> any [@@js.get "_jsDocTypeBrand"]
    val set__jsDocTypeBrand: t -> any -> unit [@@js.set "_jsDocTypeBrand"]
    val cast: t -> ts_TypeNode [@@js.cast]
  end
  module[@js.scope "JSDocAllType"] JSDocAllType : sig
    type t = ts_JSDocAllType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocAllType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocAllType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocAllType [@@js.get "kind"]
    val cast: t -> ts_JSDocType [@@js.cast]
  end
  module[@js.scope "JSDocUnknownType"] JSDocUnknownType : sig
    type t = ts_JSDocUnknownType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocType | `Ts_JSDocUnknownType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocType | `Ts_JSDocUnknownType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocUnknownType [@@js.get "kind"]
    val cast: t -> ts_JSDocType [@@js.cast]
  end
  module[@js.scope "JSDocNonNullableType"] JSDocNonNullableType : sig
    type t = ts_JSDocNonNullableType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocNonNullableType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocNonNullableType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocNonNullableType [@@js.get "kind"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_JSDocType [@@js.cast]
  end
  module[@js.scope "JSDocNullableType"] JSDocNullableType : sig
    type t = ts_JSDocNullableType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocNullableType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocNullableType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocNullableType [@@js.get "kind"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_JSDocType [@@js.cast]
  end
  module[@js.scope "JSDocOptionalType"] JSDocOptionalType : sig
    type t = ts_JSDocOptionalType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocOptionalType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocOptionalType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocOptionalType [@@js.get "kind"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_JSDocType [@@js.cast]
  end
  module[@js.scope "JSDocFunctionType"] JSDocFunctionType : sig
    type t = ts_JSDocFunctionType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_JSDocFunctionType | `Ts_JSDocType | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocContainer | `Ts_JSDocFunctionType | `Ts_JSDocType | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SignatureDeclarationBase | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocFunctionType [@@js.get "kind"]
    val cast: t -> ts_JSDocType [@@js.cast]
    val cast': t -> ts_SignatureDeclarationBase [@@js.cast]
  end
  module[@js.scope "JSDocVariadicType"] JSDocVariadicType : sig
    type t = ts_JSDocVariadicType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocType | `Ts_JSDocVariadicType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocType | `Ts_JSDocVariadicType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocVariadicType [@@js.get "kind"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_JSDocType [@@js.cast]
  end
  module[@js.scope "JSDocNamepathType"] JSDocNamepathType : sig
    type t = ts_JSDocNamepathType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocNamepathType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocNamepathType | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocNamepathType [@@js.get "kind"]
    val get_type: t -> ts_TypeNode [@@js.get "type"]
    val cast: t -> ts_JSDocType [@@js.cast]
  end
  module JSDocTypeReferencingNode : sig
    type t = ts_JSDocTypeReferencingNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocTypeReferencingNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocTypeReferencingNode]
    ]
  end
  module[@js.scope "JSDoc"] JSDoc : sig
    type t = ts_JSDoc
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDoc | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDoc | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocComment [@@js.get "kind"]
    val get_parent: t -> ts_HasJSDoc [@@js.get "parent"]
    val get_tags: t -> ts_JSDocTag ts_NodeArray [@@js.get "tags"]
    val get_comment: t -> string [@@js.get "comment"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "JSDocTag"] JSDocTag : sig
    type t = ts_JSDocTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_parent: t -> ([`U_n_311 of ts_JSDoc [@js 311] | `U_n_312 of ts_JSDocTypeLiteral [@js 312]] [@js.union on_field "kind"]) [@@js.get "parent"]
    val get_tagName: t -> ts_Identifier [@@js.get "tagName"]
    val get_comment: t -> string [@@js.get "comment"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "JSDocUnknownTag"] JSDocUnknownTag : sig
    type t = ts_JSDocUnknownTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocTag | `Ts_JSDocUnknownTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocTag | `Ts_JSDocUnknownTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocTag [@@js.get "kind"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  (**
    Note that `\@extends` is a synonym of `\@augments`.
    Both tags are represented by this interface.
  *)
  module[@js.scope "JSDocAugmentsTag"] JSDocAugmentsTag : sig
    type t = ts_JSDocAugmentsTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocAugmentsTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocAugmentsTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocAugmentsTag [@@js.get "kind"]
    val get_class: t -> (ts_ExpressionWithTypeArguments, anonymous_interface_7) intersection2 [@@js.get "class"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  module[@js.scope "JSDocImplementsTag"] JSDocImplementsTag : sig
    type t = ts_JSDocImplementsTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocImplementsTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocImplementsTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocImplementsTag [@@js.get "kind"]
    val get_class: t -> (ts_ExpressionWithTypeArguments, anonymous_interface_7) intersection2 [@@js.get "class"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  module[@js.scope "JSDocAuthorTag"] JSDocAuthorTag : sig
    type t = ts_JSDocAuthorTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocAuthorTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocAuthorTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocAuthorTag [@@js.get "kind"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  module[@js.scope "JSDocDeprecatedTag"] JSDocDeprecatedTag : sig
    type t = ts_JSDocDeprecatedTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocDeprecatedTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocDeprecatedTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocDeprecatedTag [@@js.get "kind"]
    val set_kind: t -> ts_SyntaxKind_JSDocDeprecatedTag -> unit [@@js.set "kind"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  module[@js.scope "JSDocClassTag"] JSDocClassTag : sig
    type t = ts_JSDocClassTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocClassTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocClassTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocClassTag [@@js.get "kind"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  module[@js.scope "JSDocPublicTag"] JSDocPublicTag : sig
    type t = ts_JSDocPublicTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocPublicTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocPublicTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocPublicTag [@@js.get "kind"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  module[@js.scope "JSDocPrivateTag"] JSDocPrivateTag : sig
    type t = ts_JSDocPrivateTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocPrivateTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocPrivateTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocPrivateTag [@@js.get "kind"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  module[@js.scope "JSDocProtectedTag"] JSDocProtectedTag : sig
    type t = ts_JSDocProtectedTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocProtectedTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocProtectedTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocProtectedTag [@@js.get "kind"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  module[@js.scope "JSDocReadonlyTag"] JSDocReadonlyTag : sig
    type t = ts_JSDocReadonlyTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocReadonlyTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocReadonlyTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocReadonlyTag [@@js.get "kind"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  module[@js.scope "JSDocEnumTag"] JSDocEnumTag : sig
    type t = ts_JSDocEnumTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocEnumTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocEnumTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocEnumTag [@@js.get "kind"]
    val get_parent: t -> ts_JSDoc [@@js.get "parent"]
    val get_typeExpression: t -> ts_JSDocTypeExpression [@@js.get "typeExpression"]
    val cast: t -> ts_JSDocTag [@@js.cast]
    val cast': t -> ts_Declaration [@@js.cast]
  end
  module[@js.scope "JSDocThisTag"] JSDocThisTag : sig
    type t = ts_JSDocThisTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocTag | `Ts_JSDocThisTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocTag | `Ts_JSDocThisTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocThisTag [@@js.get "kind"]
    val get_typeExpression: t -> ts_JSDocTypeExpression [@@js.get "typeExpression"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  module[@js.scope "JSDocTemplateTag"] JSDocTemplateTag : sig
    type t = ts_JSDocTemplateTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocTag | `Ts_JSDocTemplateTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocTag | `Ts_JSDocTemplateTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocTemplateTag [@@js.get "kind"]
    val get_constraint: t -> ts_JSDocTypeExpression or_undefined [@@js.get "constraint"]
    val get_typeParameters: t -> ts_TypeParameterDeclaration ts_NodeArray [@@js.get "typeParameters"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  module[@js.scope "JSDocSeeTag"] JSDocSeeTag : sig
    type t = ts_JSDocSeeTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocSeeTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocSeeTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocSeeTag [@@js.get "kind"]
    val get_name: t -> ts_JSDocNameReference [@@js.get "name"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  module[@js.scope "JSDocReturnTag"] JSDocReturnTag : sig
    type t = ts_JSDocReturnTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocReturnTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocReturnTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocReturnTag [@@js.get "kind"]
    val get_typeExpression: t -> ts_JSDocTypeExpression [@@js.get "typeExpression"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  module[@js.scope "JSDocTypeTag"] JSDocTypeTag : sig
    type t = ts_JSDocTypeTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocTag | `Ts_JSDocTypeTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocTag | `Ts_JSDocTypeTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocTypeTag [@@js.get "kind"]
    val get_typeExpression: t -> ts_JSDocTypeExpression [@@js.get "typeExpression"]
    val cast: t -> ts_JSDocTag [@@js.cast]
  end
  module[@js.scope "JSDocTypedefTag"] JSDocTypedefTag : sig
    type t = ts_JSDocTypedefTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocTag | `Ts_JSDocTypedefTag | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocTag | `Ts_JSDocTypedefTag | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocTypedefTag [@@js.get "kind"]
    val get_parent: t -> ts_JSDoc [@@js.get "parent"]
    val get_fullName: t -> ([`U_n_78 of ts_Identifier [@js 78] | `U_n_256 of ts_JSDocNamespaceDeclaration [@js 256]] [@js.union on_field "kind"]) [@@js.get "fullName"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_typeExpression: t -> ([`U_n_301 of ts_JSDocTypeExpression [@js 301] | `U_n_312 of ts_JSDocTypeLiteral [@js 312]] [@js.union on_field "kind"]) [@@js.get "typeExpression"]
    val cast: t -> ts_JSDocTag [@@js.cast]
    val cast': t -> ts_NamedDeclaration [@@js.cast]
  end
  module[@js.scope "JSDocCallbackTag"] JSDocCallbackTag : sig
    type t = ts_JSDocCallbackTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocCallbackTag | `Ts_JSDocTag | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocCallbackTag | `Ts_JSDocTag | `Ts_NamedDeclaration | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocCallbackTag [@@js.get "kind"]
    val get_parent: t -> ts_JSDoc [@@js.get "parent"]
    val get_fullName: t -> ([`U_n_78 of ts_Identifier [@js 78] | `U_n_256 of ts_JSDocNamespaceDeclaration [@js 256]] [@js.union on_field "kind"]) [@@js.get "fullName"]
    val get_name: t -> ts_Identifier [@@js.get "name"]
    val get_typeExpression: t -> ts_JSDocSignature [@@js.get "typeExpression"]
    val cast: t -> ts_JSDocTag [@@js.cast]
    val cast': t -> ts_NamedDeclaration [@@js.cast]
  end
  module[@js.scope "JSDocSignature"] JSDocSignature : sig
    type t = ts_JSDocSignature
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocSignature | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocSignature | `Ts_JSDocType | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocSignature [@@js.get "kind"]
    val get_typeParameters: t -> ts_JSDocTemplateTag list [@@js.get "typeParameters"]
    val get_parameters: t -> ts_JSDocParameterTag list [@@js.get "parameters"]
    val get_type: t -> ts_JSDocReturnTag or_undefined [@@js.get "type"]
    val cast: t -> ts_JSDocType [@@js.cast]
    val cast': t -> ts_Declaration [@@js.cast]
  end
  module[@js.scope "JSDocPropertyLikeTag"] JSDocPropertyLikeTag : sig
    type t = ts_JSDocPropertyLikeTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocPropertyLikeTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocPropertyLikeTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_parent: t -> ts_JSDoc [@@js.get "parent"]
    val get_name: t -> ts_EntityName [@@js.get "name"]
    val get_typeExpression: t -> ts_JSDocTypeExpression [@@js.get "typeExpression"]
    (** Whether the property name came before the type -- non-standard for JSDoc, but Typescript-like *)
    val get_isNameFirst: t -> bool [@@js.get "isNameFirst"]
    val get_isBracketed: t -> bool [@@js.get "isBracketed"]
    val cast: t -> ts_JSDocTag [@@js.cast]
    val cast': t -> ts_Declaration [@@js.cast]
  end
  module[@js.scope "JSDocPropertyTag"] JSDocPropertyTag : sig
    type t = ts_JSDocPropertyTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocPropertyLikeTag | `Ts_JSDocPropertyTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocPropertyLikeTag | `Ts_JSDocPropertyTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocPropertyTag [@@js.get "kind"]
    val cast: t -> ts_JSDocPropertyLikeTag [@@js.cast]
  end
  module[@js.scope "JSDocParameterTag"] JSDocParameterTag : sig
    type t = ts_JSDocParameterTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JSDocParameterTag | `Ts_JSDocPropertyLikeTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JSDocParameterTag | `Ts_JSDocPropertyLikeTag | `Ts_JSDocTag | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocParameterTag [@@js.get "kind"]
    val cast: t -> ts_JSDocPropertyLikeTag [@@js.cast]
  end
  module[@js.scope "JSDocTypeLiteral"] JSDocTypeLiteral : sig
    type t = ts_JSDocTypeLiteral
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocType | `Ts_JSDocTypeLiteral | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocType | `Ts_JSDocTypeLiteral | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_TypeNode]
    ]
    val get_kind: t -> ts_SyntaxKind_JSDocTypeLiteral [@@js.get "kind"]
    val get_jsDocPropertyTags: t -> ts_JSDocPropertyLikeTag list [@@js.get "jsDocPropertyTags"]
    (** If true, then this type literal represents an *array* of its type. *)
    val get_isArrayType: t -> bool [@@js.get "isArrayType"]
    val cast: t -> ts_JSDocType [@@js.cast]
  end
  module FlowFlags : sig
    type t = ts_FlowFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module FlowNode : sig
    type t = ts_FlowNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FlowNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FlowNode]
    ]
  end
  module[@js.scope "FlowNodeBase"] FlowNodeBase : sig
    type t = ts_FlowNodeBase
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FlowNodeBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FlowNodeBase]
    ]
    val get_flags: t -> ts_FlowFlags [@@js.get "flags"]
    val set_flags: t -> ts_FlowFlags -> unit [@@js.set "flags"]
    val get_id: t -> float [@@js.get "id"]
    val set_id: t -> float -> unit [@@js.set "id"]
  end
  module[@js.scope "FlowStart"] FlowStart : sig
    type t = ts_FlowStart
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FlowNodeBase | `Ts_FlowStart]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FlowNodeBase | `Ts_FlowStart]
    ]
    val get_node: t -> ([`U_n_165 of ts_MethodDeclaration [@js 165] | `U_n_208 of ts_FunctionExpression [@js 208] | `U_n_209 of ts_ArrowFunction [@js 209]] [@js.union on_field "kind"]) [@@js.get "node"]
    val set_node: t -> ([`U_n_165 of ts_MethodDeclaration  | `U_n_208 of ts_FunctionExpression  | `U_n_209 of ts_ArrowFunction ] [@js.union on_field "kind"]) -> unit [@@js.set "node"]
    val cast: t -> ts_FlowNodeBase [@@js.cast]
  end
  module[@js.scope "FlowLabel"] FlowLabel : sig
    type t = ts_FlowLabel
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FlowLabel | `Ts_FlowNodeBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FlowLabel | `Ts_FlowNodeBase]
    ]
    val get_antecedents: t -> ts_FlowNode list or_undefined [@@js.get "antecedents"]
    val set_antecedents: t -> ts_FlowNode list or_undefined -> unit [@@js.set "antecedents"]
    val cast: t -> ts_FlowNodeBase [@@js.cast]
  end
  module[@js.scope "FlowAssignment"] FlowAssignment : sig
    type t = ts_FlowAssignment
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FlowAssignment | `Ts_FlowNodeBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FlowAssignment | `Ts_FlowNodeBase]
    ]
    val get_node: t -> ([`U_n_0 of ts_Expression [@js 0] | `U_n_1 of ts_Expression [@js 1] | `U_n_2 of ts_Expression [@js 2] | `U_n_3 of ts_Expression [@js 3] | `U_n_4 of ts_Expression [@js 4] | `U_n_5 of ts_Expression [@js 5] | `U_n_6 of ts_Expression [@js 6] | `U_n_7 of ts_Expression [@js 7] | `U_n_8 of ts_Expression [@js 8] | `U_n_9 of ts_Expression [@js 9] | `U_n_10 of ts_Expression [@js 10] | `U_n_11 of ts_Expression [@js 11] | `U_n_12 of ts_Expression [@js 12] | `U_n_13 of ts_Expression [@js 13] | `U_n_14 of ts_Expression [@js 14] | `U_n_15 of ts_Expression [@js 15] | `U_n_16 of ts_Expression [@js 16] | `U_n_17 of ts_Expression [@js 17] | `U_n_18 of ts_Expression [@js 18] | `U_n_19 of ts_Expression [@js 19] | `U_n_20 of ts_Expression [@js 20] | `U_n_21 of ts_Expression [@js 21] | `U_n_22 of ts_Expression [@js 22] | `U_n_23 of ts_Expression [@js 23] | `U_n_24 of ts_Expression [@js 24] | `U_n_25 of ts_Expression [@js 25] | `U_n_26 of ts_Expression [@js 26] | `U_n_27 of ts_Expression [@js 27] | `U_n_28 of ts_Expression [@js 28] | `U_n_29 of ts_Expression [@js 29] | `U_n_30 of ts_Expression [@js 30] | `U_n_31 of ts_Expression [@js 31] | `U_n_32 of ts_Expression [@js 32] | `U_n_33 of ts_Expression [@js 33] | `U_n_34 of ts_Expression [@js 34] | `U_n_35 of ts_Expression [@js 35] | `U_n_36 of ts_Expression [@js 36] | `U_n_37 of ts_Expression [@js 37] | `U_n_38 of ts_Expression [@js 38] | `U_n_39 of ts_Expression [@js 39] | `U_n_40 of ts_Expression [@js 40] | `U_n_41 of ts_Expression [@js 41] | `U_n_42 of ts_Expression [@js 42] | `U_n_43 of ts_Expression [@js 43] | `U_n_44 of ts_Expression [@js 44] | `U_n_45 of ts_Expression [@js 45] | `U_n_46 of ts_Expression [@js 46] | `U_n_47 of ts_Expression [@js 47] | `U_n_48 of ts_Expression [@js 48] | `U_n_49 of ts_Expression [@js 49] | `U_n_50 of ts_Expression [@js 50] | `U_n_51 of ts_Expression [@js 51] | `U_n_52 of ts_Expression [@js 52] | `U_n_53 of ts_Expression [@js 53] | `U_n_54 of ts_Expression [@js 54] | `U_n_55 of ts_Expression [@js 55] | `U_n_56 of ts_Expression [@js 56] | `U_n_57 of ts_Expression [@js 57] | `U_n_58 of ts_Expression [@js 58] | `U_n_59 of ts_Expression [@js 59] | `U_n_60 of ts_Expression [@js 60] | `U_n_61 of ts_Expression [@js 61] | `U_n_62 of ts_Expression [@js 62] | `U_n_63 of ts_Expression [@js 63] | `U_n_64 of ts_Expression [@js 64] | `U_n_65 of ts_Expression [@js 65] | `U_n_66 of ts_Expression [@js 66] | `U_n_67 of ts_Expression [@js 67] | `U_n_68 of ts_Expression [@js 68] | `U_n_69 of ts_Expression [@js 69] | `U_n_70 of ts_Expression [@js 70] | `U_n_71 of ts_Expression [@js 71] | `U_n_72 of ts_Expression [@js 72] | `U_n_73 of ts_Expression [@js 73] | `U_n_74 of ts_Expression [@js 74] | `U_n_75 of ts_Expression [@js 75] | `U_n_76 of ts_Expression [@js 76] | `U_n_77 of ts_Expression [@js 77] | `U_n_78 of ts_Expression [@js 78] | `U_n_79 of ts_Expression [@js 79] | `U_n_80 of ts_Expression [@js 80] | `U_n_81 of ts_Expression [@js 81] | `U_n_82 of ts_Expression [@js 82] | `U_n_83 of ts_Expression [@js 83] | `U_n_84 of ts_Expression [@js 84] | `U_n_85 of ts_Expression [@js 85] | `U_n_86 of ts_Expression [@js 86] | `U_n_87 of ts_Expression [@js 87] | `U_n_88 of ts_Expression [@js 88] | `U_n_89 of ts_Expression [@js 89] | `U_n_90 of ts_Expression [@js 90] | `U_n_91 of ts_Expression [@js 91] | `U_n_92 of ts_Expression [@js 92] | `U_n_93 of ts_Expression [@js 93] | `U_n_94 of ts_Expression [@js 94] | `U_n_95 of ts_Expression [@js 95] | `U_n_96 of ts_Expression [@js 96] | `U_n_97 of ts_Expression [@js 97] | `U_n_98 of ts_Expression [@js 98] | `U_n_99 of ts_Expression [@js 99] | `U_n_100 of ts_Expression [@js 100] | `U_n_101 of ts_Expression [@js 101] | `U_n_102 of ts_Expression [@js 102] | `U_n_103 of ts_Expression [@js 103] | `U_n_104 of ts_Expression [@js 104] | `U_n_105 of ts_Expression [@js 105] | `U_n_106 of ts_Expression [@js 106] | `U_n_107 of ts_Expression [@js 107] | `U_n_108 of ts_Expression [@js 108] | `U_n_109 of ts_Expression [@js 109] | `U_n_110 of ts_Expression [@js 110] | `U_n_111 of ts_Expression [@js 111] | `U_n_112 of ts_Expression [@js 112] | `U_n_113 of ts_Expression [@js 113] | `U_n_114 of ts_Expression [@js 114] | `U_n_115 of ts_Expression [@js 115] | `U_n_116 of ts_Expression [@js 116] | `U_n_117 of ts_Expression [@js 117] | `U_n_118 of ts_Expression [@js 118] | `U_n_119 of ts_Expression [@js 119] | `U_n_120 of ts_Expression [@js 120] | `U_n_121 of ts_Expression [@js 121] | `U_n_122 of ts_Expression [@js 122] | `U_n_123 of ts_Expression [@js 123] | `U_n_124 of ts_Expression [@js 124] | `U_n_125 of ts_Expression [@js 125] | `U_n_126 of ts_Expression [@js 126] | `U_n_127 of ts_Expression [@js 127] | `U_n_128 of ts_Expression [@js 128] | `U_n_129 of ts_Expression [@js 129] | `U_n_130 of ts_Expression [@js 130] | `U_n_131 of ts_Expression [@js 131] | `U_n_132 of ts_Expression [@js 132] | `U_n_133 of ts_Expression [@js 133] | `U_n_134 of ts_Expression [@js 134] | `U_n_135 of ts_Expression [@js 135] | `U_n_136 of ts_Expression [@js 136] | `U_n_137 of ts_Expression [@js 137] | `U_n_138 of ts_Expression [@js 138] | `U_n_139 of ts_Expression [@js 139] | `U_n_140 of ts_Expression [@js 140] | `U_n_141 of ts_Expression [@js 141] | `U_n_142 of ts_Expression [@js 142] | `U_n_143 of ts_Expression [@js 143] | `U_n_144 of ts_Expression [@js 144] | `U_n_145 of ts_Expression [@js 145] | `U_n_146 of ts_Expression [@js 146] | `U_n_147 of ts_Expression [@js 147] | `U_n_148 of ts_Expression [@js 148] | `U_n_149 of ts_Expression [@js 149] | `U_n_150 of ts_Expression [@js 150] | `U_n_151 of ts_Expression [@js 151] | `U_n_152 of ts_Expression [@js 152] | `U_n_153 of ts_Expression [@js 153] | `U_n_154 of ts_Expression [@js 154] | `U_n_155 of ts_Expression [@js 155] | `U_n_156 of ts_Expression [@js 156] | `U_n_157 of ts_Expression [@js 157] | `U_n_158 of ts_Expression [@js 158] | `U_n_159 of ts_Expression [@js 159] | `U_n_160 of ts_Expression [@js 160] | `U_n_161 of ts_Expression [@js 161] | `U_n_162 of ts_Expression [@js 162] | `U_n_163 of ts_Expression [@js 163] | `U_n_164 of ts_Expression [@js 164] | `U_n_165 of ts_Expression [@js 165] | `U_n_166 of ts_Expression [@js 166] | `U_n_167 of ts_Expression [@js 167] | `U_n_168 of ts_Expression [@js 168] | `U_n_169 of ts_Expression [@js 169] | `U_n_170 of ts_Expression [@js 170] | `U_n_171 of ts_Expression [@js 171] | `U_n_172 of ts_Expression [@js 172] | `U_n_173 of ts_Expression [@js 173] | `U_n_174 of ts_Expression [@js 174] | `U_n_175 of ts_Expression [@js 175] | `U_n_176 of ts_Expression [@js 176] | `U_n_177 of ts_Expression [@js 177] | `U_n_178 of ts_Expression [@js 178] | `U_n_179 of ts_Expression [@js 179] | `U_n_180 of ts_Expression [@js 180] | `U_n_181 of ts_Expression [@js 181] | `U_n_182 of ts_Expression [@js 182] | `U_n_183 of ts_Expression [@js 183] | `U_n_184 of ts_Expression [@js 184] | `U_n_185 of ts_Expression [@js 185] | `U_n_186 of ts_Expression [@js 186] | `U_n_187 of ts_Expression [@js 187] | `U_n_188 of ts_Expression [@js 188] | `U_n_189 of ts_Expression [@js 189] | `U_n_190 of ts_Expression [@js 190] | `U_n_191 of ts_Expression [@js 191] | `U_n_192 of ts_Expression [@js 192] | `U_n_193 of ts_Expression [@js 193] | `U_n_194 of ts_Expression [@js 194] | `U_n_195 of ts_Expression [@js 195] | `U_n_196 of ts_Expression [@js 196] | `U_n_197 of ts_Expression [@js 197] | `U_n_198 of (ts_Expression, ts_BindingElement) union2 [@js 198] | `U_n_199 of ts_Expression [@js 199] | `U_n_200 of ts_Expression [@js 200] | `U_n_201 of ts_Expression [@js 201] | `U_n_202 of ts_Expression [@js 202] | `U_n_203 of ts_Expression [@js 203] | `U_n_204 of ts_Expression [@js 204] | `U_n_205 of ts_Expression [@js 205] | `U_n_206 of ts_Expression [@js 206] | `U_n_207 of ts_Expression [@js 207] | `U_n_208 of ts_Expression [@js 208] | `U_n_209 of ts_Expression [@js 209] | `U_n_210 of ts_Expression [@js 210] | `U_n_211 of ts_Expression [@js 211] | `U_n_212 of ts_Expression [@js 212] | `U_n_213 of ts_Expression [@js 213] | `U_n_214 of ts_Expression [@js 214] | `U_n_215 of ts_Expression [@js 215] | `U_n_216 of ts_Expression [@js 216] | `U_n_217 of ts_Expression [@js 217] | `U_n_218 of ts_Expression [@js 218] | `U_n_219 of ts_Expression [@js 219] | `U_n_220 of ts_Expression [@js 220] | `U_n_221 of ts_Expression [@js 221] | `U_n_222 of ts_Expression [@js 222] | `U_n_223 of ts_Expression [@js 223] | `U_n_224 of ts_Expression [@js 224] | `U_n_225 of ts_Expression [@js 225] | `U_n_226 of ts_Expression [@js 226] | `U_n_227 of ts_Expression [@js 227] | `U_n_228 of ts_Expression [@js 228] | `U_n_229 of ts_Expression [@js 229] | `U_n_230 of ts_Expression [@js 230] | `U_n_231 of ts_Expression [@js 231] | `U_n_232 of ts_Expression [@js 232] | `U_n_233 of ts_Expression [@js 233] | `U_n_234 of ts_Expression [@js 234] | `U_n_235 of ts_Expression [@js 235] | `U_n_236 of ts_Expression [@js 236] | `U_n_237 of ts_Expression [@js 237] | `U_n_238 of ts_Expression [@js 238] | `U_n_239 of ts_Expression [@js 239] | `U_n_240 of ts_Expression [@js 240] | `U_n_241 of ts_Expression [@js 241] | `U_n_242 of ts_Expression [@js 242] | `U_n_243 of ts_Expression [@js 243] | `U_n_244 of ts_Expression [@js 244] | `U_n_245 of ts_Expression [@js 245] | `U_n_246 of ts_Expression [@js 246] | `U_n_247 of ts_Expression [@js 247] | `U_n_248 of ts_Expression [@js 248] | `U_n_249 of (ts_Expression, ts_VariableDeclaration) union2 [@js 249] | `U_n_250 of ts_Expression [@js 250] | `U_n_251 of ts_Expression [@js 251] | `U_n_252 of ts_Expression [@js 252] | `U_n_253 of ts_Expression [@js 253] | `U_n_254 of ts_Expression [@js 254] | `U_n_255 of ts_Expression [@js 255] | `U_n_256 of ts_Expression [@js 256] | `U_n_257 of ts_Expression [@js 257] | `U_n_258 of ts_Expression [@js 258] | `U_n_259 of ts_Expression [@js 259] | `U_n_260 of ts_Expression [@js 260] | `U_n_261 of ts_Expression [@js 261] | `U_n_262 of ts_Expression [@js 262] | `U_n_263 of ts_Expression [@js 263] | `U_n_264 of ts_Expression [@js 264] | `U_n_265 of ts_Expression [@js 265] | `U_n_266 of ts_Expression [@js 266] | `U_n_267 of ts_Expression [@js 267] | `U_n_268 of ts_Expression [@js 268] | `U_n_269 of ts_Expression [@js 269] | `U_n_270 of ts_Expression [@js 270] | `U_n_271 of ts_Expression [@js 271] | `U_n_272 of ts_Expression [@js 272] | `U_n_273 of ts_Expression [@js 273] | `U_n_274 of ts_Expression [@js 274] | `U_n_275 of ts_Expression [@js 275] | `U_n_276 of ts_Expression [@js 276] | `U_n_277 of ts_Expression [@js 277] | `U_n_278 of ts_Expression [@js 278] | `U_n_279 of ts_Expression [@js 279] | `U_n_280 of ts_Expression [@js 280] | `U_n_281 of ts_Expression [@js 281] | `U_n_282 of ts_Expression [@js 282] | `U_n_283 of ts_Expression [@js 283] | `U_n_284 of ts_Expression [@js 284] | `U_n_285 of ts_Expression [@js 285] | `U_n_286 of ts_Expression [@js 286] | `U_n_287 of ts_Expression [@js 287] | `U_n_288 of ts_Expression [@js 288] | `U_n_289 of ts_Expression [@js 289] | `U_n_290 of ts_Expression [@js 290] | `U_n_291 of ts_Expression [@js 291] | `U_n_292 of ts_Expression [@js 292] | `U_n_293 of ts_Expression [@js 293] | `U_n_294 of ts_Expression [@js 294] | `U_n_295 of ts_Expression [@js 295] | `U_n_296 of ts_Expression [@js 296] | `U_n_297 of ts_Expression [@js 297] | `U_n_298 of ts_Expression [@js 298] | `U_n_299 of ts_Expression [@js 299] | `U_n_300 of ts_Expression [@js 300] | `U_n_301 of ts_Expression [@js 301] | `U_n_302 of ts_Expression [@js 302] | `U_n_303 of ts_Expression [@js 303] | `U_n_304 of ts_Expression [@js 304] | `U_n_305 of ts_Expression [@js 305] | `U_n_306 of ts_Expression [@js 306] | `U_n_307 of ts_Expression [@js 307] | `U_n_308 of ts_Expression [@js 308] | `U_n_309 of ts_Expression [@js 309] | `U_n_310 of ts_Expression [@js 310] | `U_n_311 of ts_Expression [@js 311] | `U_n_312 of ts_Expression [@js 312] | `U_n_313 of ts_Expression [@js 313] | `U_n_314 of ts_Expression [@js 314] | `U_n_315 of ts_Expression [@js 315] | `U_n_316 of ts_Expression [@js 316] | `U_n_317 of ts_Expression [@js 317] | `U_n_318 of ts_Expression [@js 318] | `U_n_319 of ts_Expression [@js 319] | `U_n_320 of ts_Expression [@js 320] | `U_n_321 of ts_Expression [@js 321] | `U_n_322 of ts_Expression [@js 322] | `U_n_323 of ts_Expression [@js 323] | `U_n_324 of ts_Expression [@js 324] | `U_n_325 of ts_Expression [@js 325] | `U_n_326 of ts_Expression [@js 326] | `U_n_327 of ts_Expression [@js 327] | `U_n_328 of ts_Expression [@js 328] | `U_n_329 of ts_Expression [@js 329] | `U_n_330 of ts_Expression [@js 330] | `U_n_331 of ts_Expression [@js 331] | `U_n_332 of ts_Expression [@js 332] | `U_n_333 of ts_Expression [@js 333] | `U_n_334 of ts_Expression [@js 334] | `U_n_335 of ts_Expression [@js 335] | `U_n_336 of ts_Expression [@js 336] | `U_n_337 of ts_Expression [@js 337] | `U_n_338 of ts_Expression [@js 338] | `U_n_339 of ts_Expression [@js 339] | `U_n_340 of ts_Expression [@js 340] | `U_n_341 of ts_Expression [@js 341]] [@js.union on_field "kind"]) [@@js.get "node"]
    val set_node: t -> ([`U_n_0 of ts_Expression  | `U_n_1 of ts_Expression  | `U_n_2 of ts_Expression  | `U_n_3 of ts_Expression  | `U_n_4 of ts_Expression  | `U_n_5 of ts_Expression  | `U_n_6 of ts_Expression  | `U_n_7 of ts_Expression  | `U_n_8 of ts_Expression  | `U_n_9 of ts_Expression  | `U_n_10 of ts_Expression  | `U_n_11 of ts_Expression  | `U_n_12 of ts_Expression  | `U_n_13 of ts_Expression  | `U_n_14 of ts_Expression  | `U_n_15 of ts_Expression  | `U_n_16 of ts_Expression  | `U_n_17 of ts_Expression  | `U_n_18 of ts_Expression  | `U_n_19 of ts_Expression  | `U_n_20 of ts_Expression  | `U_n_21 of ts_Expression  | `U_n_22 of ts_Expression  | `U_n_23 of ts_Expression  | `U_n_24 of ts_Expression  | `U_n_25 of ts_Expression  | `U_n_26 of ts_Expression  | `U_n_27 of ts_Expression  | `U_n_28 of ts_Expression  | `U_n_29 of ts_Expression  | `U_n_30 of ts_Expression  | `U_n_31 of ts_Expression  | `U_n_32 of ts_Expression  | `U_n_33 of ts_Expression  | `U_n_34 of ts_Expression  | `U_n_35 of ts_Expression  | `U_n_36 of ts_Expression  | `U_n_37 of ts_Expression  | `U_n_38 of ts_Expression  | `U_n_39 of ts_Expression  | `U_n_40 of ts_Expression  | `U_n_41 of ts_Expression  | `U_n_42 of ts_Expression  | `U_n_43 of ts_Expression  | `U_n_44 of ts_Expression  | `U_n_45 of ts_Expression  | `U_n_46 of ts_Expression  | `U_n_47 of ts_Expression  | `U_n_48 of ts_Expression  | `U_n_49 of ts_Expression  | `U_n_50 of ts_Expression  | `U_n_51 of ts_Expression  | `U_n_52 of ts_Expression  | `U_n_53 of ts_Expression  | `U_n_54 of ts_Expression  | `U_n_55 of ts_Expression  | `U_n_56 of ts_Expression  | `U_n_57 of ts_Expression  | `U_n_58 of ts_Expression  | `U_n_59 of ts_Expression  | `U_n_60 of ts_Expression  | `U_n_61 of ts_Expression  | `U_n_62 of ts_Expression  | `U_n_63 of ts_Expression  | `U_n_64 of ts_Expression  | `U_n_65 of ts_Expression  | `U_n_66 of ts_Expression  | `U_n_67 of ts_Expression  | `U_n_68 of ts_Expression  | `U_n_69 of ts_Expression  | `U_n_70 of ts_Expression  | `U_n_71 of ts_Expression  | `U_n_72 of ts_Expression  | `U_n_73 of ts_Expression  | `U_n_74 of ts_Expression  | `U_n_75 of ts_Expression  | `U_n_76 of ts_Expression  | `U_n_77 of ts_Expression  | `U_n_78 of ts_Expression  | `U_n_79 of ts_Expression  | `U_n_80 of ts_Expression  | `U_n_81 of ts_Expression  | `U_n_82 of ts_Expression  | `U_n_83 of ts_Expression  | `U_n_84 of ts_Expression  | `U_n_85 of ts_Expression  | `U_n_86 of ts_Expression  | `U_n_87 of ts_Expression  | `U_n_88 of ts_Expression  | `U_n_89 of ts_Expression  | `U_n_90 of ts_Expression  | `U_n_91 of ts_Expression  | `U_n_92 of ts_Expression  | `U_n_93 of ts_Expression  | `U_n_94 of ts_Expression  | `U_n_95 of ts_Expression  | `U_n_96 of ts_Expression  | `U_n_97 of ts_Expression  | `U_n_98 of ts_Expression  | `U_n_99 of ts_Expression  | `U_n_100 of ts_Expression  | `U_n_101 of ts_Expression  | `U_n_102 of ts_Expression  | `U_n_103 of ts_Expression  | `U_n_104 of ts_Expression  | `U_n_105 of ts_Expression  | `U_n_106 of ts_Expression  | `U_n_107 of ts_Expression  | `U_n_108 of ts_Expression  | `U_n_109 of ts_Expression  | `U_n_110 of ts_Expression  | `U_n_111 of ts_Expression  | `U_n_112 of ts_Expression  | `U_n_113 of ts_Expression  | `U_n_114 of ts_Expression  | `U_n_115 of ts_Expression  | `U_n_116 of ts_Expression  | `U_n_117 of ts_Expression  | `U_n_118 of ts_Expression  | `U_n_119 of ts_Expression  | `U_n_120 of ts_Expression  | `U_n_121 of ts_Expression  | `U_n_122 of ts_Expression  | `U_n_123 of ts_Expression  | `U_n_124 of ts_Expression  | `U_n_125 of ts_Expression  | `U_n_126 of ts_Expression  | `U_n_127 of ts_Expression  | `U_n_128 of ts_Expression  | `U_n_129 of ts_Expression  | `U_n_130 of ts_Expression  | `U_n_131 of ts_Expression  | `U_n_132 of ts_Expression  | `U_n_133 of ts_Expression  | `U_n_134 of ts_Expression  | `U_n_135 of ts_Expression  | `U_n_136 of ts_Expression  | `U_n_137 of ts_Expression  | `U_n_138 of ts_Expression  | `U_n_139 of ts_Expression  | `U_n_140 of ts_Expression  | `U_n_141 of ts_Expression  | `U_n_142 of ts_Expression  | `U_n_143 of ts_Expression  | `U_n_144 of ts_Expression  | `U_n_145 of ts_Expression  | `U_n_146 of ts_Expression  | `U_n_147 of ts_Expression  | `U_n_148 of ts_Expression  | `U_n_149 of ts_Expression  | `U_n_150 of ts_Expression  | `U_n_151 of ts_Expression  | `U_n_152 of ts_Expression  | `U_n_153 of ts_Expression  | `U_n_154 of ts_Expression  | `U_n_155 of ts_Expression  | `U_n_156 of ts_Expression  | `U_n_157 of ts_Expression  | `U_n_158 of ts_Expression  | `U_n_159 of ts_Expression  | `U_n_160 of ts_Expression  | `U_n_161 of ts_Expression  | `U_n_162 of ts_Expression  | `U_n_163 of ts_Expression  | `U_n_164 of ts_Expression  | `U_n_165 of ts_Expression  | `U_n_166 of ts_Expression  | `U_n_167 of ts_Expression  | `U_n_168 of ts_Expression  | `U_n_169 of ts_Expression  | `U_n_170 of ts_Expression  | `U_n_171 of ts_Expression  | `U_n_172 of ts_Expression  | `U_n_173 of ts_Expression  | `U_n_174 of ts_Expression  | `U_n_175 of ts_Expression  | `U_n_176 of ts_Expression  | `U_n_177 of ts_Expression  | `U_n_178 of ts_Expression  | `U_n_179 of ts_Expression  | `U_n_180 of ts_Expression  | `U_n_181 of ts_Expression  | `U_n_182 of ts_Expression  | `U_n_183 of ts_Expression  | `U_n_184 of ts_Expression  | `U_n_185 of ts_Expression  | `U_n_186 of ts_Expression  | `U_n_187 of ts_Expression  | `U_n_188 of ts_Expression  | `U_n_189 of ts_Expression  | `U_n_190 of ts_Expression  | `U_n_191 of ts_Expression  | `U_n_192 of ts_Expression  | `U_n_193 of ts_Expression  | `U_n_194 of ts_Expression  | `U_n_195 of ts_Expression  | `U_n_196 of ts_Expression  | `U_n_197 of ts_Expression  | `U_n_198 of (ts_Expression, ts_BindingElement) union2  | `U_n_199 of ts_Expression  | `U_n_200 of ts_Expression  | `U_n_201 of ts_Expression  | `U_n_202 of ts_Expression  | `U_n_203 of ts_Expression  | `U_n_204 of ts_Expression  | `U_n_205 of ts_Expression  | `U_n_206 of ts_Expression  | `U_n_207 of ts_Expression  | `U_n_208 of ts_Expression  | `U_n_209 of ts_Expression  | `U_n_210 of ts_Expression  | `U_n_211 of ts_Expression  | `U_n_212 of ts_Expression  | `U_n_213 of ts_Expression  | `U_n_214 of ts_Expression  | `U_n_215 of ts_Expression  | `U_n_216 of ts_Expression  | `U_n_217 of ts_Expression  | `U_n_218 of ts_Expression  | `U_n_219 of ts_Expression  | `U_n_220 of ts_Expression  | `U_n_221 of ts_Expression  | `U_n_222 of ts_Expression  | `U_n_223 of ts_Expression  | `U_n_224 of ts_Expression  | `U_n_225 of ts_Expression  | `U_n_226 of ts_Expression  | `U_n_227 of ts_Expression  | `U_n_228 of ts_Expression  | `U_n_229 of ts_Expression  | `U_n_230 of ts_Expression  | `U_n_231 of ts_Expression  | `U_n_232 of ts_Expression  | `U_n_233 of ts_Expression  | `U_n_234 of ts_Expression  | `U_n_235 of ts_Expression  | `U_n_236 of ts_Expression  | `U_n_237 of ts_Expression  | `U_n_238 of ts_Expression  | `U_n_239 of ts_Expression  | `U_n_240 of ts_Expression  | `U_n_241 of ts_Expression  | `U_n_242 of ts_Expression  | `U_n_243 of ts_Expression  | `U_n_244 of ts_Expression  | `U_n_245 of ts_Expression  | `U_n_246 of ts_Expression  | `U_n_247 of ts_Expression  | `U_n_248 of ts_Expression  | `U_n_249 of (ts_Expression, ts_VariableDeclaration) union2  | `U_n_250 of ts_Expression  | `U_n_251 of ts_Expression  | `U_n_252 of ts_Expression  | `U_n_253 of ts_Expression  | `U_n_254 of ts_Expression  | `U_n_255 of ts_Expression  | `U_n_256 of ts_Expression  | `U_n_257 of ts_Expression  | `U_n_258 of ts_Expression  | `U_n_259 of ts_Expression  | `U_n_260 of ts_Expression  | `U_n_261 of ts_Expression  | `U_n_262 of ts_Expression  | `U_n_263 of ts_Expression  | `U_n_264 of ts_Expression  | `U_n_265 of ts_Expression  | `U_n_266 of ts_Expression  | `U_n_267 of ts_Expression  | `U_n_268 of ts_Expression  | `U_n_269 of ts_Expression  | `U_n_270 of ts_Expression  | `U_n_271 of ts_Expression  | `U_n_272 of ts_Expression  | `U_n_273 of ts_Expression  | `U_n_274 of ts_Expression  | `U_n_275 of ts_Expression  | `U_n_276 of ts_Expression  | `U_n_277 of ts_Expression  | `U_n_278 of ts_Expression  | `U_n_279 of ts_Expression  | `U_n_280 of ts_Expression  | `U_n_281 of ts_Expression  | `U_n_282 of ts_Expression  | `U_n_283 of ts_Expression  | `U_n_284 of ts_Expression  | `U_n_285 of ts_Expression  | `U_n_286 of ts_Expression  | `U_n_287 of ts_Expression  | `U_n_288 of ts_Expression  | `U_n_289 of ts_Expression  | `U_n_290 of ts_Expression  | `U_n_291 of ts_Expression  | `U_n_292 of ts_Expression  | `U_n_293 of ts_Expression  | `U_n_294 of ts_Expression  | `U_n_295 of ts_Expression  | `U_n_296 of ts_Expression  | `U_n_297 of ts_Expression  | `U_n_298 of ts_Expression  | `U_n_299 of ts_Expression  | `U_n_300 of ts_Expression  | `U_n_301 of ts_Expression  | `U_n_302 of ts_Expression  | `U_n_303 of ts_Expression  | `U_n_304 of ts_Expression  | `U_n_305 of ts_Expression  | `U_n_306 of ts_Expression  | `U_n_307 of ts_Expression  | `U_n_308 of ts_Expression  | `U_n_309 of ts_Expression  | `U_n_310 of ts_Expression  | `U_n_311 of ts_Expression  | `U_n_312 of ts_Expression  | `U_n_313 of ts_Expression  | `U_n_314 of ts_Expression  | `U_n_315 of ts_Expression  | `U_n_316 of ts_Expression  | `U_n_317 of ts_Expression  | `U_n_318 of ts_Expression  | `U_n_319 of ts_Expression  | `U_n_320 of ts_Expression  | `U_n_321 of ts_Expression  | `U_n_322 of ts_Expression  | `U_n_323 of ts_Expression  | `U_n_324 of ts_Expression  | `U_n_325 of ts_Expression  | `U_n_326 of ts_Expression  | `U_n_327 of ts_Expression  | `U_n_328 of ts_Expression  | `U_n_329 of ts_Expression  | `U_n_330 of ts_Expression  | `U_n_331 of ts_Expression  | `U_n_332 of ts_Expression  | `U_n_333 of ts_Expression  | `U_n_334 of ts_Expression  | `U_n_335 of ts_Expression  | `U_n_336 of ts_Expression  | `U_n_337 of ts_Expression  | `U_n_338 of ts_Expression  | `U_n_339 of ts_Expression  | `U_n_340 of ts_Expression  | `U_n_341 of ts_Expression ] [@js.union on_field "kind"]) -> unit [@@js.set "node"]
    val get_antecedent: t -> ts_FlowNode [@@js.get "antecedent"]
    val set_antecedent: t -> ts_FlowNode -> unit [@@js.set "antecedent"]
    val cast: t -> ts_FlowNodeBase [@@js.cast]
  end
  module[@js.scope "FlowCall"] FlowCall : sig
    type t = ts_FlowCall
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FlowCall | `Ts_FlowNodeBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FlowCall | `Ts_FlowNodeBase]
    ]
    val get_node: t -> ts_CallExpression [@@js.get "node"]
    val set_node: t -> ts_CallExpression -> unit [@@js.set "node"]
    val get_antecedent: t -> ts_FlowNode [@@js.get "antecedent"]
    val set_antecedent: t -> ts_FlowNode -> unit [@@js.set "antecedent"]
    val cast: t -> ts_FlowNodeBase [@@js.cast]
  end
  module[@js.scope "FlowCondition"] FlowCondition : sig
    type t = ts_FlowCondition
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FlowCondition | `Ts_FlowNodeBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FlowCondition | `Ts_FlowNodeBase]
    ]
    val get_node: t -> ts_Expression [@@js.get "node"]
    val set_node: t -> ts_Expression -> unit [@@js.set "node"]
    val get_antecedent: t -> ts_FlowNode [@@js.get "antecedent"]
    val set_antecedent: t -> ts_FlowNode -> unit [@@js.set "antecedent"]
    val cast: t -> ts_FlowNodeBase [@@js.cast]
  end
  module[@js.scope "FlowSwitchClause"] FlowSwitchClause : sig
    type t = ts_FlowSwitchClause
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FlowNodeBase | `Ts_FlowSwitchClause]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FlowNodeBase | `Ts_FlowSwitchClause]
    ]
    val get_switchStatement: t -> ts_SwitchStatement [@@js.get "switchStatement"]
    val set_switchStatement: t -> ts_SwitchStatement -> unit [@@js.set "switchStatement"]
    val get_clauseStart: t -> float [@@js.get "clauseStart"]
    val set_clauseStart: t -> float -> unit [@@js.set "clauseStart"]
    val get_clauseEnd: t -> float [@@js.get "clauseEnd"]
    val set_clauseEnd: t -> float -> unit [@@js.set "clauseEnd"]
    val get_antecedent: t -> ts_FlowNode [@@js.get "antecedent"]
    val set_antecedent: t -> ts_FlowNode -> unit [@@js.set "antecedent"]
    val cast: t -> ts_FlowNodeBase [@@js.cast]
  end
  module[@js.scope "FlowArrayMutation"] FlowArrayMutation : sig
    type t = ts_FlowArrayMutation
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FlowArrayMutation | `Ts_FlowNodeBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FlowArrayMutation | `Ts_FlowNodeBase]
    ]
    val get_node: t -> ([`U_n_203 of ts_CallExpression [@js 203] | `U_n_216 of ts_BinaryExpression [@js 216]] [@js.union on_field "kind"]) [@@js.get "node"]
    val set_node: t -> ([`U_n_203 of ts_CallExpression  | `U_n_216 of ts_BinaryExpression ] [@js.union on_field "kind"]) -> unit [@@js.set "node"]
    val get_antecedent: t -> ts_FlowNode [@@js.get "antecedent"]
    val set_antecedent: t -> ts_FlowNode -> unit [@@js.set "antecedent"]
    val cast: t -> ts_FlowNodeBase [@@js.cast]
  end
  module[@js.scope "FlowReduceLabel"] FlowReduceLabel : sig
    type t = ts_FlowReduceLabel
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FlowNodeBase | `Ts_FlowReduceLabel]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FlowNodeBase | `Ts_FlowReduceLabel]
    ]
    val get_target: t -> ts_FlowLabel [@@js.get "target"]
    val set_target: t -> ts_FlowLabel -> unit [@@js.set "target"]
    val get_antecedents: t -> ts_FlowNode list [@@js.get "antecedents"]
    val set_antecedents: t -> ts_FlowNode list -> unit [@@js.set "antecedents"]
    val get_antecedent: t -> ts_FlowNode [@@js.get "antecedent"]
    val set_antecedent: t -> ts_FlowNode -> unit [@@js.set "antecedent"]
    val cast: t -> ts_FlowNodeBase [@@js.cast]
  end
  module FlowType : sig
    type t = ts_FlowType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FlowType]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FlowType]
    ]
  end
  module[@js.scope "IncompleteType"] IncompleteType : sig
    type t = ts_IncompleteType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_IncompleteType]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_IncompleteType]
    ]
    val get_flags: t -> ts_TypeFlags [@@js.get "flags"]
    val set_flags: t -> ts_TypeFlags -> unit [@@js.set "flags"]
    val get_type: t -> ts_Type [@@js.get "type"]
    val set_type: t -> ts_Type -> unit [@@js.set "type"]
  end
  module[@js.scope "AmdDependency"] AmdDependency : sig
    type t = ts_AmdDependency
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AmdDependency]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AmdDependency]
    ]
    val get_path: t -> string [@@js.get "path"]
    val set_path: t -> string -> unit [@@js.set "path"]
    val get_name: t -> string [@@js.get "name"]
    val set_name: t -> string -> unit [@@js.set "name"]
  end
  module[@js.scope "SourceFile"] SourceFile : sig
    type t = ts_SourceFile
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SourceFile]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SourceFile]
    ]
    val getLineAndCharacterOfPosition: t -> pos:float -> ts_LineAndCharacter [@@js.call "getLineAndCharacterOfPosition"]
    val getLineEndOfPosition: t -> pos:float -> float [@@js.call "getLineEndOfPosition"]
    val getLineStarts: t -> float list [@@js.call "getLineStarts"]
    val getPositionOfLineAndCharacter: t -> line:float -> character:float -> float [@@js.call "getPositionOfLineAndCharacter"]
    val update: t -> newText:string -> textChangeRange:ts_TextChangeRange -> t [@@js.call "update"]
    val get_kind: t -> ts_SyntaxKind_SourceFile [@@js.get "kind"]
    val get_statements: t -> ts_Statement ts_NodeArray [@@js.get "statements"]
    val get_endOfFileToken: t -> ts_SyntaxKind_EndOfFileToken ts_Token [@@js.get "endOfFileToken"]
    val get_fileName: t -> string [@@js.get "fileName"]
    val set_fileName: t -> string -> unit [@@js.set "fileName"]
    val get_text: t -> string [@@js.get "text"]
    val set_text: t -> string -> unit [@@js.set "text"]
    val get_amdDependencies: t -> ts_AmdDependency list [@@js.get "amdDependencies"]
    val set_amdDependencies: t -> ts_AmdDependency list -> unit [@@js.set "amdDependencies"]
    val get_moduleName: t -> string [@@js.get "moduleName"]
    val set_moduleName: t -> string -> unit [@@js.set "moduleName"]
    val get_referencedFiles: t -> ts_FileReference list [@@js.get "referencedFiles"]
    val set_referencedFiles: t -> ts_FileReference list -> unit [@@js.set "referencedFiles"]
    val get_typeReferenceDirectives: t -> ts_FileReference list [@@js.get "typeReferenceDirectives"]
    val set_typeReferenceDirectives: t -> ts_FileReference list -> unit [@@js.set "typeReferenceDirectives"]
    val get_libReferenceDirectives: t -> ts_FileReference list [@@js.get "libReferenceDirectives"]
    val set_libReferenceDirectives: t -> ts_FileReference list -> unit [@@js.set "libReferenceDirectives"]
    val get_languageVariant: t -> ts_LanguageVariant [@@js.get "languageVariant"]
    val set_languageVariant: t -> ts_LanguageVariant -> unit [@@js.set "languageVariant"]
    val get_isDeclarationFile: t -> bool [@@js.get "isDeclarationFile"]
    val set_isDeclarationFile: t -> bool -> unit [@@js.set "isDeclarationFile"]
    (**
      lib.d.ts should have a reference comment like
      
       /// <reference no-default-lib="true"/>
      
      If any other file has this comment, it signals not to include lib.d.ts
      because this containing file is intended to act as a default library.
    *)
    (**
      lib.d.ts should have a reference comment like
      
       /// <reference no-default-lib="true"/>
      
      If any other file has this comment, it signals not to include lib.d.ts
      because this containing file is intended to act as a default library.
    *)
    val get_hasNoDefaultLib: t -> bool [@@js.get "hasNoDefaultLib"]
    (**
      lib.d.ts should have a reference comment like
      
       /// <reference no-default-lib="true"/>
      
      If any other file has this comment, it signals not to include lib.d.ts
      because this containing file is intended to act as a default library.
    *)
    val set_hasNoDefaultLib: t -> bool -> unit [@@js.set "hasNoDefaultLib"]
    val get_languageVersion: t -> ts_ScriptTarget [@@js.get "languageVersion"]
    val set_languageVersion: t -> ts_ScriptTarget -> unit [@@js.set "languageVersion"]
    val cast: t -> ts_Declaration [@@js.cast]
  end
  module[@js.scope "Bundle"] Bundle : sig
    type t = ts_Bundle
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Bundle | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Bundle | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_Bundle [@@js.get "kind"]
    val get_prepends: t -> ([`U_n_299 of ts_UnparsedSource [@js 299] | `U_n_300 of ts_InputFiles [@js 300]] [@js.union on_field "kind"]) list [@@js.get "prepends"]
    val get_sourceFiles: t -> ts_SourceFile list [@@js.get "sourceFiles"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "InputFiles"] InputFiles : sig
    type t = ts_InputFiles
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_InputFiles | `Ts_Node | `Ts_ReadonlyTextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_InputFiles | `Ts_Node | `Ts_ReadonlyTextRange]
    ]
    val get_kind: t -> ts_SyntaxKind_InputFiles [@@js.get "kind"]
    val get_javascriptPath: t -> string [@@js.get "javascriptPath"]
    val set_javascriptPath: t -> string -> unit [@@js.set "javascriptPath"]
    val get_javascriptText: t -> string [@@js.get "javascriptText"]
    val set_javascriptText: t -> string -> unit [@@js.set "javascriptText"]
    val get_javascriptMapPath: t -> string [@@js.get "javascriptMapPath"]
    val set_javascriptMapPath: t -> string -> unit [@@js.set "javascriptMapPath"]
    val get_javascriptMapText: t -> string [@@js.get "javascriptMapText"]
    val set_javascriptMapText: t -> string -> unit [@@js.set "javascriptMapText"]
    val get_declarationPath: t -> string [@@js.get "declarationPath"]
    val set_declarationPath: t -> string -> unit [@@js.set "declarationPath"]
    val get_declarationText: t -> string [@@js.get "declarationText"]
    val set_declarationText: t -> string -> unit [@@js.set "declarationText"]
    val get_declarationMapPath: t -> string [@@js.get "declarationMapPath"]
    val set_declarationMapPath: t -> string -> unit [@@js.set "declarationMapPath"]
    val get_declarationMapText: t -> string [@@js.get "declarationMapText"]
    val set_declarationMapText: t -> string -> unit [@@js.set "declarationMapText"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "UnparsedSource"] UnparsedSource : sig
    type t = ts_UnparsedSource
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedSource]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedSource]
    ]
    val get_kind: t -> ts_SyntaxKind_UnparsedSource [@@js.get "kind"]
    val get_fileName: t -> string [@@js.get "fileName"]
    val set_fileName: t -> string -> unit [@@js.set "fileName"]
    val get_text: t -> string [@@js.get "text"]
    val set_text: t -> string -> unit [@@js.set "text"]
    val get_prologues: t -> ts_UnparsedPrologue list [@@js.get "prologues"]
    val get_helpers: t -> ts_UnscopedEmitHelper list or_undefined [@@js.get "helpers"]
    val set_helpers: t -> ts_UnscopedEmitHelper list or_undefined -> unit [@@js.set "helpers"]
    val get_referencedFiles: t -> ts_FileReference list [@@js.get "referencedFiles"]
    val set_referencedFiles: t -> ts_FileReference list -> unit [@@js.set "referencedFiles"]
    val get_typeReferenceDirectives: t -> string list or_undefined [@@js.get "typeReferenceDirectives"]
    val set_typeReferenceDirectives: t -> string list or_undefined -> unit [@@js.set "typeReferenceDirectives"]
    val get_libReferenceDirectives: t -> ts_FileReference list [@@js.get "libReferenceDirectives"]
    val set_libReferenceDirectives: t -> ts_FileReference list -> unit [@@js.set "libReferenceDirectives"]
    val get_hasNoDefaultLib: t -> bool [@@js.get "hasNoDefaultLib"]
    val set_hasNoDefaultLib: t -> bool -> unit [@@js.set "hasNoDefaultLib"]
    val get_sourceMapPath: t -> string [@@js.get "sourceMapPath"]
    val set_sourceMapPath: t -> string -> unit [@@js.set "sourceMapPath"]
    val get_sourceMapText: t -> string [@@js.get "sourceMapText"]
    val set_sourceMapText: t -> string -> unit [@@js.set "sourceMapText"]
    val get_syntheticReferences: t -> ts_UnparsedSyntheticReference list [@@js.get "syntheticReferences"]
    val get_texts: t -> ts_UnparsedSourceText list [@@js.get "texts"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module UnparsedSourceText : sig
    type t = ts_UnparsedSourceText
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_UnparsedSourceText]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_UnparsedSourceText]
    ]
  end
  module UnparsedNode : sig
    type t = ts_UnparsedNode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_UnparsedNode]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_UnparsedNode]
    ]
  end
  module[@js.scope "UnparsedSection"] UnparsedSection : sig
    type t = ts_UnparsedSection
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedSection]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedSection]
    ]
    val get_kind: t -> ts_SyntaxKind [@@js.get "kind"]
    val get_parent: t -> ts_UnparsedSource [@@js.get "parent"]
    val get_data: t -> string [@@js.get "data"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module[@js.scope "UnparsedPrologue"] UnparsedPrologue : sig
    type t = ts_UnparsedPrologue
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedPrologue | `Ts_UnparsedSection]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedPrologue | `Ts_UnparsedSection]
    ]
    val get_kind: t -> ts_SyntaxKind_UnparsedPrologue [@@js.get "kind"]
    val get_parent: t -> ts_UnparsedSource [@@js.get "parent"]
    val get_data: t -> string [@@js.get "data"]
    val cast: t -> ts_UnparsedSection [@@js.cast]
  end
  module[@js.scope "UnparsedPrepend"] UnparsedPrepend : sig
    type t = ts_UnparsedPrepend
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedPrepend | `Ts_UnparsedSection]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedPrepend | `Ts_UnparsedSection]
    ]
    val get_kind: t -> ts_SyntaxKind_UnparsedPrepend [@@js.get "kind"]
    val get_parent: t -> ts_UnparsedSource [@@js.get "parent"]
    val get_data: t -> string [@@js.get "data"]
    val get_texts: t -> ts_UnparsedTextLike list [@@js.get "texts"]
    val cast: t -> ts_UnparsedSection [@@js.cast]
  end
  module[@js.scope "UnparsedTextLike"] UnparsedTextLike : sig
    type t = ts_UnparsedTextLike
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedSection | `Ts_UnparsedTextLike]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedSection | `Ts_UnparsedTextLike]
    ]
    val get_kind: t -> ((ts_SyntaxKind_UnparsedInternalText, ts_SyntaxKind_UnparsedText) union2, ([`UnparsedInternalText[@js 295] | `UnparsedText[@js 294]] [@js.enum])) or_enum [@@js.get "kind"]
    val get_parent: t -> ts_UnparsedSource [@@js.get "parent"]
    val cast: t -> ts_UnparsedSection [@@js.cast]
  end
  module[@js.scope "UnparsedSyntheticReference"] UnparsedSyntheticReference : sig
    type t = ts_UnparsedSyntheticReference
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedSection | `Ts_UnparsedSyntheticReference]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_UnparsedSection | `Ts_UnparsedSyntheticReference]
    ]
    val get_kind: t -> ts_SyntaxKind_UnparsedSyntheticReference [@@js.get "kind"]
    val get_parent: t -> ts_UnparsedSource [@@js.get "parent"]
    val cast: t -> ts_UnparsedSection [@@js.cast]
  end
  module[@js.scope "JsonSourceFile"] JsonSourceFile : sig
    type t = ts_JsonSourceFile
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JsonSourceFile | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SourceFile]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JsonSourceFile | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SourceFile]
    ]
    val get_statements: t -> ts_JsonObjectExpressionStatement ts_NodeArray [@@js.get "statements"]
    val cast: t -> ts_SourceFile [@@js.cast]
  end
  module[@js.scope "TsConfigSourceFile"] TsConfigSourceFile : sig
    type t = ts_TsConfigSourceFile
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Declaration | `Ts_JsonSourceFile | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SourceFile | `Ts_TsConfigSourceFile]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Declaration | `Ts_JsonSourceFile | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_SourceFile | `Ts_TsConfigSourceFile]
    ]
    val get_extendedSourceFiles: t -> string list [@@js.get "extendedSourceFiles"]
    val set_extendedSourceFiles: t -> string list -> unit [@@js.set "extendedSourceFiles"]
    val cast: t -> ts_JsonSourceFile [@@js.cast]
  end
  module[@js.scope "JsonMinusNumericLiteral"] JsonMinusNumericLiteral : sig
    type t = ts_JsonMinusNumericLiteral
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Expression | `Ts_JsonMinusNumericLiteral | `Ts_Node | `Ts_PrefixUnaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Expression | `Ts_JsonMinusNumericLiteral | `Ts_Node | `Ts_PrefixUnaryExpression | `Ts_ReadonlyTextRange | `Ts_UnaryExpression | `Ts_UpdateExpression]
    ]
    val get_kind: t -> ts_SyntaxKind_PrefixUnaryExpression [@@js.get "kind"]
    val get_operator: t -> ts_SyntaxKind_MinusToken [@@js.get "operator"]
    val get_operand: t -> ts_NumericLiteral [@@js.get "operand"]
    val cast: t -> ts_PrefixUnaryExpression [@@js.cast]
  end
  module JsonObjectExpression : sig
    type t = ts_JsonObjectExpression
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JsonObjectExpression]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JsonObjectExpression]
    ]
  end
  module[@js.scope "JsonObjectExpressionStatement"] JsonObjectExpressionStatement : sig
    type t = ts_JsonObjectExpressionStatement
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ExpressionStatement | `Ts_JSDocContainer | `Ts_JsonObjectExpressionStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ExpressionStatement | `Ts_JSDocContainer | `Ts_JsonObjectExpressionStatement | `Ts_Node | `Ts_ReadonlyTextRange | `Ts_Statement]
    ]
    val get_expression: t -> ts_JsonObjectExpression [@@js.get "expression"]
    val cast: t -> ts_ExpressionStatement [@@js.cast]
  end
  module[@js.scope "ScriptReferenceHost"] ScriptReferenceHost : sig
    type t = ts_ScriptReferenceHost
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ScriptReferenceHost]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ScriptReferenceHost]
    ]
    val getCompilerOptions: t -> ts_CompilerOptions [@@js.call "getCompilerOptions"]
    val getSourceFile: t -> fileName:string -> ts_SourceFile or_undefined [@@js.call "getSourceFile"]
    val getSourceFileByPath: t -> path:ts_Path -> ts_SourceFile or_undefined [@@js.call "getSourceFileByPath"]
    val getCurrentDirectory: t -> string [@@js.call "getCurrentDirectory"]
  end
  module[@js.scope "ParseConfigHost"] ParseConfigHost : sig
    type t = ts_ParseConfigHost
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ParseConfigHost]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ParseConfigHost]
    ]
    val get_useCaseSensitiveFileNames: t -> bool [@@js.get "useCaseSensitiveFileNames"]
    val set_useCaseSensitiveFileNames: t -> bool -> unit [@@js.set "useCaseSensitiveFileNames"]
    val readDirectory: t -> rootDir:string -> extensions:string list -> excludes:string list or_undefined -> includes:string list -> ?depth:float -> unit -> string list [@@js.call "readDirectory"]
    (**
      Gets a value indicating whether the specified path exists and is a file.
      @param path The path to test.
    *)
    val fileExists: t -> path:string -> bool [@@js.call "fileExists"]
    val readFile: t -> path:string -> string or_undefined [@@js.call "readFile"]
    val trace: t -> s:string -> unit [@@js.call "trace"]
  end
  (**
    Branded string for keeping track of when we've turned an ambiguous path
    specified like "./blah" to an absolute path to an actual
    tsconfig file, e.g. "/root/blah/tsconfig.json"
  *)
  module ResolvedConfigFileName : sig
    type t = ts_ResolvedConfigFileName
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ResolvedConfigFileName]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ResolvedConfigFileName]
    ]
  end
  module[@js.scope "WriteFileCallback"] WriteFileCallback : sig
    type t = ts_WriteFileCallback
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_WriteFileCallback]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_WriteFileCallback]
    ]
    val apply: t -> fileName:string -> data:string -> writeByteOrderMark:bool -> ?onError:(message:string -> unit) -> ?sourceFiles:ts_SourceFile list -> unit -> unit [@@js.apply]
  end
  module OperationCanceledException : sig
    type t = ts_OperationCanceledException
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_OperationCanceledException]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_OperationCanceledException]
    ]
  end
  module[@js.scope "CancellationToken"] CancellationToken : sig
    type t = ts_CancellationToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CancellationToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CancellationToken]
    ]
    val isCancellationRequested: t -> bool [@@js.call "isCancellationRequested"]
    (** @raise exn OperationCanceledException if isCancellationRequested is true *)
    val throwIfCancellationRequested: t -> unit [@@js.call "throwIfCancellationRequested"]
  end
  module[@js.scope "Program"] Program : sig
    type t = ts_Program
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Program | `Ts_ScriptReferenceHost]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Program | `Ts_ScriptReferenceHost]
    ]
    val getCurrentDirectory: t -> string [@@js.call "getCurrentDirectory"]
    (** Get a list of root file names that were passed to a 'createProgram' *)
    val getRootFileNames: t -> string list [@@js.call "getRootFileNames"]
    (** Get a list of files in the program *)
    val getSourceFiles: t -> ts_SourceFile list [@@js.call "getSourceFiles"]
    (**
      Emits the JavaScript and declaration files.  If targetSourceFile is not specified, then
      the JavaScript and declaration files will be produced for all the files in this program.
      If targetSourceFile is specified, then only the JavaScript and declaration for that
      specific file will be generated.
      
      If writeFile is not specified then the writeFile callback from the compiler host will be
      used for writing the JavaScript and declaration files.  Otherwise, the writeFile parameter
      will be invoked when writing the JavaScript and declaration files.
    *)
    val emit: t -> ?targetSourceFile:ts_SourceFile -> ?writeFile:ts_WriteFileCallback -> ?cancellationToken:ts_CancellationToken -> ?emitOnlyDtsFiles:bool -> ?customTransformers:ts_CustomTransformers -> unit -> ts_EmitResult [@@js.call "emit"]
    val getOptionsDiagnostics: t -> ?cancellationToken:ts_CancellationToken -> unit -> ts_Diagnostic list [@@js.call "getOptionsDiagnostics"]
    val getGlobalDiagnostics: t -> ?cancellationToken:ts_CancellationToken -> unit -> ts_Diagnostic list [@@js.call "getGlobalDiagnostics"]
    val getSyntacticDiagnostics: t -> ?sourceFile:ts_SourceFile -> ?cancellationToken:ts_CancellationToken -> unit -> ts_DiagnosticWithLocation list [@@js.call "getSyntacticDiagnostics"]
    (** The first time this is called, it will return global diagnostics (no location). *)
    val getSemanticDiagnostics: t -> ?sourceFile:ts_SourceFile -> ?cancellationToken:ts_CancellationToken -> unit -> ts_Diagnostic list [@@js.call "getSemanticDiagnostics"]
    val getDeclarationDiagnostics: t -> ?sourceFile:ts_SourceFile -> ?cancellationToken:ts_CancellationToken -> unit -> ts_DiagnosticWithLocation list [@@js.call "getDeclarationDiagnostics"]
    val getConfigFileParsingDiagnostics: t -> ts_Diagnostic list [@@js.call "getConfigFileParsingDiagnostics"]
    (** Gets a type checker that can be used to semantically analyze source files in the program. *)
    val getTypeChecker: t -> ts_TypeChecker [@@js.call "getTypeChecker"]
    val getTypeCatalog: t -> ts_Type list [@@js.call "getTypeCatalog"]
    val getNodeCount: t -> float [@@js.call "getNodeCount"]
    val getIdentifierCount: t -> float [@@js.call "getIdentifierCount"]
    val getSymbolCount: t -> float [@@js.call "getSymbolCount"]
    val getTypeCount: t -> float [@@js.call "getTypeCount"]
    val getInstantiationCount: t -> float [@@js.call "getInstantiationCount"]
    val getRelationCacheSizes: t -> anonymous_interface_5 [@@js.call "getRelationCacheSizes"]
    val isSourceFileFromExternalLibrary: t -> file:ts_SourceFile -> bool [@@js.call "isSourceFileFromExternalLibrary"]
    val isSourceFileDefaultLibrary: t -> file:ts_SourceFile -> bool [@@js.call "isSourceFileDefaultLibrary"]
    val getProjectReferences: t -> ts_ProjectReference list or_undefined [@@js.call "getProjectReferences"]
    val getResolvedProjectReferences: t -> ts_ResolvedProjectReference or_undefined list or_undefined [@@js.call "getResolvedProjectReferences"]
    val cast: t -> ts_ScriptReferenceHost [@@js.cast]
  end
  module[@js.scope "ResolvedProjectReference"] ResolvedProjectReference : sig
    type t = ts_ResolvedProjectReference
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ResolvedProjectReference]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ResolvedProjectReference]
    ]
    val get_commandLine: t -> ts_ParsedCommandLine [@@js.get "commandLine"]
    val set_commandLine: t -> ts_ParsedCommandLine -> unit [@@js.set "commandLine"]
    val get_sourceFile: t -> ts_SourceFile [@@js.get "sourceFile"]
    val set_sourceFile: t -> ts_SourceFile -> unit [@@js.set "sourceFile"]
    val get_references: t -> t or_undefined list [@@js.get "references"]
    val set_references: t -> t or_undefined list -> unit [@@js.set "references"]
  end
  module[@js.scope "CustomTransformerFactory"] CustomTransformerFactory : sig
    type t = ts_CustomTransformerFactory
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CustomTransformerFactory]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CustomTransformerFactory]
    ]
    val apply: t -> context:ts_TransformationContext -> ts_CustomTransformer [@@js.apply]
  end
  module[@js.scope "CustomTransformer"] CustomTransformer : sig
    type t = ts_CustomTransformer
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CustomTransformer]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CustomTransformer]
    ]
    val transformSourceFile: t -> node:ts_SourceFile -> ts_SourceFile [@@js.call "transformSourceFile"]
    val transformBundle: t -> node:ts_Bundle -> ts_Bundle [@@js.call "transformBundle"]
  end
  module[@js.scope "CustomTransformers"] CustomTransformers : sig
    type t = ts_CustomTransformers
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CustomTransformers]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CustomTransformers]
    ]
    (** Custom transformers to evaluate before built-in .js transformations. *)
    (** Custom transformers to evaluate before built-in .js transformations. *)
    val get_before: t -> (ts_CustomTransformerFactory, ts_SourceFile ts_TransformerFactory) union2 list [@@js.get "before"]
    (** Custom transformers to evaluate before built-in .js transformations. *)
    val set_before: t -> (ts_CustomTransformerFactory, ts_SourceFile ts_TransformerFactory) union2 list -> unit [@@js.set "before"]
    (** Custom transformers to evaluate after built-in .js transformations. *)
    (** Custom transformers to evaluate after built-in .js transformations. *)
    val get_after: t -> (ts_CustomTransformerFactory, ts_SourceFile ts_TransformerFactory) union2 list [@@js.get "after"]
    (** Custom transformers to evaluate after built-in .js transformations. *)
    val set_after: t -> (ts_CustomTransformerFactory, ts_SourceFile ts_TransformerFactory) union2 list -> unit [@@js.set "after"]
    (** Custom transformers to evaluate after built-in .d.ts transformations. *)
    (** Custom transformers to evaluate after built-in .d.ts transformations. *)
    val get_afterDeclarations: t -> (ts_CustomTransformerFactory, ([`U_n_297 of ts_SourceFile [@js 297] | `U_n_298 of ts_Bundle [@js 298]] [@js.union on_field "kind"]) ts_TransformerFactory) union2 list [@@js.get "afterDeclarations"]
    (** Custom transformers to evaluate after built-in .d.ts transformations. *)
    val set_afterDeclarations: t -> (ts_CustomTransformerFactory, ([`U_n_297 of ts_SourceFile  | `U_n_298 of ts_Bundle ] [@js.union on_field "kind"]) ts_TransformerFactory) union2 list -> unit [@@js.set "afterDeclarations"]
  end
  module[@js.scope "SourceMapSpan"] SourceMapSpan : sig
    type t = ts_SourceMapSpan
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SourceMapSpan]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SourceMapSpan]
    ]
    (** Line number in the .js file. *)
    (** Line number in the .js file. *)
    val get_emittedLine: t -> float [@@js.get "emittedLine"]
    (** Line number in the .js file. *)
    val set_emittedLine: t -> float -> unit [@@js.set "emittedLine"]
    (** Column number in the .js file. *)
    (** Column number in the .js file. *)
    val get_emittedColumn: t -> float [@@js.get "emittedColumn"]
    (** Column number in the .js file. *)
    val set_emittedColumn: t -> float -> unit [@@js.set "emittedColumn"]
    (** Line number in the .ts file. *)
    (** Line number in the .ts file. *)
    val get_sourceLine: t -> float [@@js.get "sourceLine"]
    (** Line number in the .ts file. *)
    val set_sourceLine: t -> float -> unit [@@js.set "sourceLine"]
    (** Column number in the .ts file. *)
    (** Column number in the .ts file. *)
    val get_sourceColumn: t -> float [@@js.get "sourceColumn"]
    (** Column number in the .ts file. *)
    val set_sourceColumn: t -> float -> unit [@@js.set "sourceColumn"]
    (** Optional name (index into names array) associated with this span. *)
    (** Optional name (index into names array) associated with this span. *)
    val get_nameIndex: t -> float [@@js.get "nameIndex"]
    (** Optional name (index into names array) associated with this span. *)
    val set_nameIndex: t -> float -> unit [@@js.set "nameIndex"]
    (** .ts file (index into sources array) associated with this span *)
    (** .ts file (index into sources array) associated with this span *)
    val get_sourceIndex: t -> float [@@js.get "sourceIndex"]
    (** .ts file (index into sources array) associated with this span *)
    val set_sourceIndex: t -> float -> unit [@@js.set "sourceIndex"]
  end
  (** Return code used by getEmitOutput function to indicate status of the function *)
  module ExitStatus : sig
    type t = ts_ExitStatus
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "EmitResult"] EmitResult : sig
    type t = ts_EmitResult
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EmitResult]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EmitResult]
    ]
    val get_emitSkipped: t -> bool [@@js.get "emitSkipped"]
    val set_emitSkipped: t -> bool -> unit [@@js.set "emitSkipped"]
    (** Contains declaration emit diagnostics *)
    (** Contains declaration emit diagnostics *)
    val get_diagnostics: t -> ts_Diagnostic list [@@js.get "diagnostics"]
    (** Contains declaration emit diagnostics *)
    val set_diagnostics: t -> ts_Diagnostic list -> unit [@@js.set "diagnostics"]
    val get_emittedFiles: t -> string list [@@js.get "emittedFiles"]
    val set_emittedFiles: t -> string list -> unit [@@js.set "emittedFiles"]
  end
  module[@js.scope "TypeChecker"] TypeChecker : sig
    type t = ts_TypeChecker
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TypeChecker]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TypeChecker]
    ]
    val getTypeOfSymbolAtLocation: t -> symbol:ts_Symbol -> node:ts_Node -> ts_Type [@@js.call "getTypeOfSymbolAtLocation"]
    val getDeclaredTypeOfSymbol: t -> symbol:ts_Symbol -> ts_Type [@@js.call "getDeclaredTypeOfSymbol"]
    val getPropertiesOfType: t -> type_:ts_Type -> ts_Symbol list [@@js.call "getPropertiesOfType"]
    val getPropertyOfType: t -> type_:ts_Type -> propertyName:string -> ts_Symbol or_undefined [@@js.call "getPropertyOfType"]
    val getPrivateIdentifierPropertyOfType: t -> leftType:ts_Type -> name:string -> location:ts_Node -> ts_Symbol or_undefined [@@js.call "getPrivateIdentifierPropertyOfType"]
    val getIndexInfoOfType: t -> type_:ts_Type -> kind:ts_IndexKind -> ts_IndexInfo or_undefined [@@js.call "getIndexInfoOfType"]
    val getSignaturesOfType: t -> type_:ts_Type -> kind:ts_SignatureKind -> ts_Signature list [@@js.call "getSignaturesOfType"]
    val getIndexTypeOfType: t -> type_:ts_Type -> kind:ts_IndexKind -> ts_Type or_undefined [@@js.call "getIndexTypeOfType"]
    val getBaseTypes: t -> type_:ts_InterfaceType -> ts_BaseType list [@@js.call "getBaseTypes"]
    val getBaseTypeOfLiteralType: t -> type_:ts_Type -> ts_Type [@@js.call "getBaseTypeOfLiteralType"]
    val getWidenedType: t -> type_:ts_Type -> ts_Type [@@js.call "getWidenedType"]
    val getReturnTypeOfSignature: t -> signature:ts_Signature -> ts_Type [@@js.call "getReturnTypeOfSignature"]
    val getNullableType: t -> type_:ts_Type -> flags:ts_TypeFlags -> ts_Type [@@js.call "getNullableType"]
    val getNonNullableType: t -> type_:ts_Type -> ts_Type [@@js.call "getNonNullableType"]
    val getTypeArguments: t -> type_:ts_TypeReference -> ts_Type list [@@js.call "getTypeArguments"]
    (** Note that the resulting nodes cannot be checked. *)
    val typeToTypeNode: t -> type_:ts_Type -> enclosingDeclaration:ts_Node or_undefined -> flags:ts_NodeBuilderFlags or_undefined -> ts_TypeNode or_undefined [@@js.call "typeToTypeNode"]
    (** Note that the resulting nodes cannot be checked. *)
    val signatureToSignatureDeclaration: t -> signature:ts_Signature -> kind:ts_SyntaxKind -> enclosingDeclaration:ts_Node or_undefined -> flags:ts_NodeBuilderFlags or_undefined -> (ts_SignatureDeclaration, anonymous_interface_13) intersection2 or_undefined [@@js.call "signatureToSignatureDeclaration"]
    (** Note that the resulting nodes cannot be checked. *)
    val indexInfoToIndexSignatureDeclaration: t -> indexInfo:ts_IndexInfo -> kind:ts_IndexKind -> enclosingDeclaration:ts_Node or_undefined -> flags:ts_NodeBuilderFlags or_undefined -> ts_IndexSignatureDeclaration or_undefined [@@js.call "indexInfoToIndexSignatureDeclaration"]
    (** Note that the resulting nodes cannot be checked. *)
    val symbolToEntityName: t -> symbol:ts_Symbol -> meaning:ts_SymbolFlags -> enclosingDeclaration:ts_Node or_undefined -> flags:ts_NodeBuilderFlags or_undefined -> ts_EntityName or_undefined [@@js.call "symbolToEntityName"]
    (** Note that the resulting nodes cannot be checked. *)
    val symbolToExpression: t -> symbol:ts_Symbol -> meaning:ts_SymbolFlags -> enclosingDeclaration:ts_Node or_undefined -> flags:ts_NodeBuilderFlags or_undefined -> ts_Expression or_undefined [@@js.call "symbolToExpression"]
    (** Note that the resulting nodes cannot be checked. *)
    val symbolToTypeParameterDeclarations: t -> symbol:ts_Symbol -> enclosingDeclaration:ts_Node or_undefined -> flags:ts_NodeBuilderFlags or_undefined -> ts_TypeParameterDeclaration ts_NodeArray or_undefined [@@js.call "symbolToTypeParameterDeclarations"]
    (** Note that the resulting nodes cannot be checked. *)
    val symbolToParameterDeclaration: t -> symbol:ts_Symbol -> enclosingDeclaration:ts_Node or_undefined -> flags:ts_NodeBuilderFlags or_undefined -> ts_ParameterDeclaration or_undefined [@@js.call "symbolToParameterDeclaration"]
    (** Note that the resulting nodes cannot be checked. *)
    val typeParameterToDeclaration: t -> parameter:ts_TypeParameter -> enclosingDeclaration:ts_Node or_undefined -> flags:ts_NodeBuilderFlags or_undefined -> ts_TypeParameterDeclaration or_undefined [@@js.call "typeParameterToDeclaration"]
    val getSymbolsInScope: t -> location:ts_Node -> meaning:ts_SymbolFlags -> ts_Symbol list [@@js.call "getSymbolsInScope"]
    val getSymbolAtLocation: t -> node:ts_Node -> ts_Symbol or_undefined [@@js.call "getSymbolAtLocation"]
    val getSymbolsOfParameterPropertyDeclaration: t -> parameter:ts_ParameterDeclaration -> parameterName:string -> ts_Symbol list [@@js.call "getSymbolsOfParameterPropertyDeclaration"]
    (**
      The function returns the value (local variable) symbol of an identifier in the short-hand property assignment.
      This is necessary as an identifier in short-hand property assignment can contains two meaning: property name and property value.
    *)
    val getShorthandAssignmentValueSymbol: t -> location:ts_Node -> ts_Symbol or_undefined [@@js.call "getShorthandAssignmentValueSymbol"]
    val getExportSpecifierLocalTargetSymbol: t -> location:([`U_n_78 of ts_Identifier  | `U_n_270 of ts_ExportSpecifier ] [@js.union on_field "kind"]) -> ts_Symbol or_undefined [@@js.call "getExportSpecifierLocalTargetSymbol"]
    (**
      If a symbol is a local symbol with an associated exported symbol, returns the exported symbol.
      Otherwise returns its input.
      For example, at `export type T = number;`:
          - `getSymbolAtLocation` at the location `T` will return the exported symbol for `T`.
          - But the result of `getSymbolsInScope` will contain the *local* symbol for `T`, not the exported symbol.
          - Calling `getExportSymbolOfSymbol` on that local symbol will return the exported symbol.
    *)
    val getExportSymbolOfSymbol: t -> symbol:ts_Symbol -> ts_Symbol [@@js.call "getExportSymbolOfSymbol"]
    val getPropertySymbolOfDestructuringAssignment: t -> location:ts_Identifier -> ts_Symbol or_undefined [@@js.call "getPropertySymbolOfDestructuringAssignment"]
    val getTypeOfAssignmentPattern: t -> pattern:ts_AssignmentPattern -> ts_Type [@@js.call "getTypeOfAssignmentPattern"]
    val getTypeAtLocation: t -> node:ts_Node -> ts_Type [@@js.call "getTypeAtLocation"]
    val getTypeFromTypeNode: t -> node:ts_TypeNode -> ts_Type [@@js.call "getTypeFromTypeNode"]
    val signatureToString: t -> signature:ts_Signature -> ?enclosingDeclaration:ts_Node -> ?flags:ts_TypeFormatFlags -> ?kind:ts_SignatureKind -> unit -> string [@@js.call "signatureToString"]
    val typeToString: t -> type_:ts_Type -> ?enclosingDeclaration:ts_Node -> ?flags:ts_TypeFormatFlags -> unit -> string [@@js.call "typeToString"]
    val symbolToString: t -> symbol:ts_Symbol -> ?enclosingDeclaration:ts_Node -> ?meaning:ts_SymbolFlags -> ?flags:ts_SymbolFormatFlags -> unit -> string [@@js.call "symbolToString"]
    val typePredicateToString: t -> predicate:ts_TypePredicate -> ?enclosingDeclaration:ts_Node -> ?flags:ts_TypeFormatFlags -> unit -> string [@@js.call "typePredicateToString"]
    val getFullyQualifiedName: t -> symbol:ts_Symbol -> string [@@js.call "getFullyQualifiedName"]
    val getAugmentedPropertiesOfType: t -> type_:ts_Type -> ts_Symbol list [@@js.call "getAugmentedPropertiesOfType"]
    val getRootSymbols: t -> symbol:ts_Symbol -> ts_Symbol list [@@js.call "getRootSymbols"]
    val getSymbolOfExpando: t -> node:ts_Node -> allowDeclaration:bool -> ts_Symbol or_undefined [@@js.call "getSymbolOfExpando"]
    val getContextualType: t -> node:ts_Expression -> ts_Type or_undefined [@@js.call "getContextualType"]
    (**
      returns unknownSignature in the case of an error.
      returns undefined if the node is not valid.
      @param argumentCount Apparent number of arguments, passed in case of a possibly incomplete call. This should come from an ArgumentListInfo. See `signatureHelp.ts`.
    *)
    val getResolvedSignature: t -> node:ts_CallLikeExpression -> ?candidatesOutArray:ts_Signature list -> ?argumentCount:float -> unit -> ts_Signature or_undefined [@@js.call "getResolvedSignature"]
    val getSignatureFromDeclaration: t -> declaration:ts_SignatureDeclaration -> ts_Signature or_undefined [@@js.call "getSignatureFromDeclaration"]
    val isImplementationOfOverload: t -> node:ts_SignatureDeclaration -> bool or_undefined [@@js.call "isImplementationOfOverload"]
    val isUndefinedSymbol: t -> symbol:ts_Symbol -> bool [@@js.call "isUndefinedSymbol"]
    val isArgumentsSymbol: t -> symbol:ts_Symbol -> bool [@@js.call "isArgumentsSymbol"]
    val isUnknownSymbol: t -> symbol:ts_Symbol -> bool [@@js.call "isUnknownSymbol"]
    val getConstantValue: t -> node:([`U_n_201 of ts_PropertyAccessExpression  | `U_n_202 of ts_ElementAccessExpression  | `U_n_291 of ts_EnumMember ] [@js.union on_field "kind"]) -> string or_number or_undefined [@@js.call "getConstantValue"]
    val isValidPropertyAccess: t -> node:([`U_n_157 of ts_QualifiedName  | `U_n_195 of ts_ImportTypeNode  | `U_n_201 of ts_PropertyAccessExpression ] [@js.union on_field "kind"]) -> propertyName:string -> bool [@@js.call "isValidPropertyAccess"]
    (** Follow all aliases to get the original symbol. *)
    val getAliasedSymbol: t -> symbol:ts_Symbol -> ts_Symbol [@@js.call "getAliasedSymbol"]
    val getExportsOfModule: t -> moduleSymbol:ts_Symbol -> ts_Symbol list [@@js.call "getExportsOfModule"]
    val getJsxIntrinsicTagNamesAt: t -> location:ts_Node -> ts_Symbol list [@@js.call "getJsxIntrinsicTagNamesAt"]
    val isOptionalParameter: t -> node:ts_ParameterDeclaration -> bool [@@js.call "isOptionalParameter"]
    val getAmbientModules: t -> ts_Symbol list [@@js.call "getAmbientModules"]
    val tryGetMemberInModuleExports: t -> memberName:string -> moduleSymbol:ts_Symbol -> ts_Symbol or_undefined [@@js.call "tryGetMemberInModuleExports"]
    val getApparentType: t -> type_:ts_Type -> ts_Type [@@js.call "getApparentType"]
    val getBaseConstraintOfType: t -> type_:ts_Type -> ts_Type or_undefined [@@js.call "getBaseConstraintOfType"]
    val getDefaultFromTypeParameter: t -> type_:ts_Type -> ts_Type or_undefined [@@js.call "getDefaultFromTypeParameter"]
    (**
      Depending on the operation performed, it may be appropriate to throw away the checker
      if the cancellation token is triggered. Typically, if it is used for error checking
      and the operation is cancelled, then it should be discarded, otherwise it is safe to keep.
    *)
    val runWithCancellationToken: t -> token:ts_CancellationToken -> cb:(checker:t -> 'T) -> 'T [@@js.call "runWithCancellationToken"]
  end
  module NodeBuilderFlags : sig
    type t = ts_NodeBuilderFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module TypeFormatFlags : sig
    type t = ts_TypeFormatFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module SymbolFormatFlags : sig
    type t = ts_SymbolFormatFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module TypePredicateKind : sig
    type t = ts_TypePredicateKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "TypePredicateBase"] TypePredicateBase : sig
    type t = ts_TypePredicateBase
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TypePredicateBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TypePredicateBase]
    ]
    val get_kind: t -> ts_TypePredicateKind [@@js.get "kind"]
    val set_kind: t -> ts_TypePredicateKind -> unit [@@js.set "kind"]
    val get_type: t -> ts_Type or_undefined [@@js.get "type"]
    val set_type: t -> ts_Type or_undefined -> unit [@@js.set "type"]
  end
  module[@js.scope "ThisTypePredicate"] ThisTypePredicate : sig
    type t = ts_ThisTypePredicate
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ThisTypePredicate | `Ts_TypePredicateBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ThisTypePredicate | `Ts_TypePredicateBase]
    ]
    val get_kind: t -> ts_TypePredicateKind_This [@@js.get "kind"]
    val set_kind: t -> ts_TypePredicateKind_This -> unit [@@js.set "kind"]
    val get_parameterName: t -> never or_undefined [@@js.get "parameterName"]
    val set_parameterName: t -> never or_undefined -> unit [@@js.set "parameterName"]
    val get_parameterIndex: t -> never or_undefined [@@js.get "parameterIndex"]
    val set_parameterIndex: t -> never or_undefined -> unit [@@js.set "parameterIndex"]
    val get_type: t -> ts_Type [@@js.get "type"]
    val set_type: t -> ts_Type -> unit [@@js.set "type"]
    val cast: t -> ts_TypePredicateBase [@@js.cast]
  end
  module[@js.scope "IdentifierTypePredicate"] IdentifierTypePredicate : sig
    type t = ts_IdentifierTypePredicate
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_IdentifierTypePredicate | `Ts_TypePredicateBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_IdentifierTypePredicate | `Ts_TypePredicateBase]
    ]
    val get_kind: t -> ts_TypePredicateKind_Identifier [@@js.get "kind"]
    val set_kind: t -> ts_TypePredicateKind_Identifier -> unit [@@js.set "kind"]
    val get_parameterName: t -> string [@@js.get "parameterName"]
    val set_parameterName: t -> string -> unit [@@js.set "parameterName"]
    val get_parameterIndex: t -> float [@@js.get "parameterIndex"]
    val set_parameterIndex: t -> float -> unit [@@js.set "parameterIndex"]
    val get_type: t -> ts_Type [@@js.get "type"]
    val set_type: t -> ts_Type -> unit [@@js.set "type"]
    val cast: t -> ts_TypePredicateBase [@@js.cast]
  end
  module[@js.scope "AssertsThisTypePredicate"] AssertsThisTypePredicate : sig
    type t = ts_AssertsThisTypePredicate
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AssertsThisTypePredicate | `Ts_TypePredicateBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AssertsThisTypePredicate | `Ts_TypePredicateBase]
    ]
    val get_kind: t -> ts_TypePredicateKind_AssertsThis [@@js.get "kind"]
    val set_kind: t -> ts_TypePredicateKind_AssertsThis -> unit [@@js.set "kind"]
    val get_parameterName: t -> never or_undefined [@@js.get "parameterName"]
    val set_parameterName: t -> never or_undefined -> unit [@@js.set "parameterName"]
    val get_parameterIndex: t -> never or_undefined [@@js.get "parameterIndex"]
    val set_parameterIndex: t -> never or_undefined -> unit [@@js.set "parameterIndex"]
    val get_type: t -> ts_Type or_undefined [@@js.get "type"]
    val set_type: t -> ts_Type or_undefined -> unit [@@js.set "type"]
    val cast: t -> ts_TypePredicateBase [@@js.cast]
  end
  module[@js.scope "AssertsIdentifierTypePredicate"] AssertsIdentifierTypePredicate : sig
    type t = ts_AssertsIdentifierTypePredicate
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_AssertsIdentifierTypePredicate | `Ts_TypePredicateBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_AssertsIdentifierTypePredicate | `Ts_TypePredicateBase]
    ]
    val get_kind: t -> ts_TypePredicateKind_AssertsIdentifier [@@js.get "kind"]
    val set_kind: t -> ts_TypePredicateKind_AssertsIdentifier -> unit [@@js.set "kind"]
    val get_parameterName: t -> string [@@js.get "parameterName"]
    val set_parameterName: t -> string -> unit [@@js.set "parameterName"]
    val get_parameterIndex: t -> float [@@js.get "parameterIndex"]
    val set_parameterIndex: t -> float -> unit [@@js.set "parameterIndex"]
    val get_type: t -> ts_Type or_undefined [@@js.get "type"]
    val set_type: t -> ts_Type or_undefined -> unit [@@js.set "type"]
    val cast: t -> ts_TypePredicateBase [@@js.cast]
  end
  module TypePredicate : sig
    type t = ts_TypePredicate
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TypePredicate]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TypePredicate]
    ]
  end
  module SymbolFlags : sig
    type t = ts_SymbolFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "Symbol"] Symbol : sig
    type t = ts_Symbol
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Symbol]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Symbol]
    ]
    val get_name: t -> string [@@js.get "name"]
    val getFlags: t -> ts_SymbolFlags [@@js.call "getFlags"]
    val getEscapedName: t -> ts___String [@@js.call "getEscapedName"]
    val getName: t -> string [@@js.call "getName"]
    val getDeclarations: t -> ts_Declaration list or_undefined [@@js.call "getDeclarations"]
    val getDocumentationComment: t -> typeChecker:ts_TypeChecker or_undefined -> ts_SymbolDisplayPart list [@@js.call "getDocumentationComment"]
    val getJsDocTags: t -> ts_JSDocTagInfo list [@@js.call "getJsDocTags"]
    val get_flags: t -> ts_SymbolFlags [@@js.get "flags"]
    val set_flags: t -> ts_SymbolFlags -> unit [@@js.set "flags"]
    val get_escapedName: t -> ts___String [@@js.get "escapedName"]
    val set_escapedName: t -> ts___String -> unit [@@js.set "escapedName"]
    val get_declarations: t -> ts_Declaration list [@@js.get "declarations"]
    val set_declarations: t -> ts_Declaration list -> unit [@@js.set "declarations"]
    val get_valueDeclaration: t -> ts_Declaration [@@js.get "valueDeclaration"]
    val set_valueDeclaration: t -> ts_Declaration -> unit [@@js.set "valueDeclaration"]
    val get_members: t -> ts_SymbolTable [@@js.get "members"]
    val set_members: t -> ts_SymbolTable -> unit [@@js.set "members"]
    val get_exports: t -> ts_SymbolTable [@@js.get "exports"]
    val set_exports: t -> ts_SymbolTable -> unit [@@js.set "exports"]
    val get_globalExports: t -> ts_SymbolTable [@@js.get "globalExports"]
    val set_globalExports: t -> ts_SymbolTable -> unit [@@js.set "globalExports"]
  end
  module InternalSymbolName : sig
    type t = ts_InternalSymbolName
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  (**
    This represents a string whose leading underscore have been escaped by adding extra leading underscores.
    The shape of this brand is rather unique compared to others we've used.
    Instead of just an intersection of a string and an object, it is that union-ed
    with an intersection of void and an object. This makes it wholly incompatible
    with a normal string (which is good, it cannot be misused on assignment or on usage),
    while still being comparable with a normal string via === (also good) and castable from a string.
  *)
  module M__String : sig
    type t = ts___String
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts___String]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts___String]
    ]
  end
  (** ReadonlyMap where keys are `__String`s. *)
  module[@js.scope "ReadonlyUnderscoreEscapedMap"] ReadonlyUnderscoreEscapedMap : sig
    type 'T t = 'T ts_ReadonlyUnderscoreEscapedMap
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_ReadonlyCollection of ts___String | `Ts_ReadonlyESMap of (ts___String * 'T) | `Ts_ReadonlyUnderscoreEscapedMap of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_ReadonlyCollection of ts___String | `Ts_ReadonlyESMap of (ts___String * 'T) | `Ts_ReadonlyUnderscoreEscapedMap of 'T]
    ]
    val cast: 'T t -> (ts___String, 'T) ts_ReadonlyESMap [@@js.cast]
  end
  (** Map where keys are `__String`s. *)
  module[@js.scope "UnderscoreEscapedMap"] UnderscoreEscapedMap : sig
    type 'T t = 'T ts_UnderscoreEscapedMap
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_Collection of ts___String | `Ts_ESMap of (ts___String * 'T) | `Ts_ReadonlyCollection of ts___String | `Ts_ReadonlyESMap of (ts___String * 'T) | `Ts_ReadonlyUnderscoreEscapedMap of 'T | `Ts_UnderscoreEscapedMap of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_Collection of ts___String | `Ts_ESMap of (ts___String * 'T) | `Ts_ReadonlyCollection of ts___String | `Ts_ReadonlyESMap of (ts___String * 'T) | `Ts_ReadonlyUnderscoreEscapedMap of 'T | `Ts_UnderscoreEscapedMap of 'T]
    ]
    val cast: 'T t -> (ts___String, 'T) ts_ESMap [@@js.cast]
    val cast': 'T t -> 'T ts_ReadonlyUnderscoreEscapedMap [@@js.cast]
  end
  (** SymbolTable based on ES6 Map interface. *)
  module SymbolTable : sig
    type t = ts_SymbolTable
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Collection of ts___String | `Ts_ESMap of (ts___String * ts_Symbol) | `Ts_ReadonlyCollection of ts___String | `Ts_ReadonlyESMap of (ts___String * ts_Symbol) | `Ts_ReadonlyUnderscoreEscapedMap of ts_Symbol | `Ts_SymbolTable | `Ts_UnderscoreEscapedMap of ts_Symbol]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Collection of ts___String | `Ts_ESMap of (ts___String * ts_Symbol) | `Ts_ReadonlyCollection of ts___String | `Ts_ReadonlyESMap of (ts___String * ts_Symbol) | `Ts_ReadonlyUnderscoreEscapedMap of ts_Symbol | `Ts_SymbolTable | `Ts_UnderscoreEscapedMap of ts_Symbol]
    ]
  end
  module TypeFlags : sig
    type t = ts_TypeFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module DestructuringPattern : sig
    type t = ts_DestructuringPattern
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DestructuringPattern]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DestructuringPattern]
    ]
  end
  module[@js.scope "Type"] Type : sig
    type t = ts_Type
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Type]
    ]
    val getFlags: t -> ts_TypeFlags [@@js.call "getFlags"]
    val getSymbol: t -> ts_Symbol or_undefined [@@js.call "getSymbol"]
    val getProperties: t -> ts_Symbol list [@@js.call "getProperties"]
    val getProperty: t -> propertyName:string -> ts_Symbol or_undefined [@@js.call "getProperty"]
    val getApparentProperties: t -> ts_Symbol list [@@js.call "getApparentProperties"]
    val getCallSignatures: t -> ts_Signature list [@@js.call "getCallSignatures"]
    val getConstructSignatures: t -> ts_Signature list [@@js.call "getConstructSignatures"]
    val getStringIndexType: t -> t or_undefined [@@js.call "getStringIndexType"]
    val getNumberIndexType: t -> t or_undefined [@@js.call "getNumberIndexType"]
    val getBaseTypes: t -> ts_BaseType list or_undefined [@@js.call "getBaseTypes"]
    val getNonNullableType: t -> t [@@js.call "getNonNullableType"]
    val getConstraint: t -> t or_undefined [@@js.call "getConstraint"]
    val getDefault: t -> t or_undefined [@@js.call "getDefault"]
    val isUnion: t -> bool [@@js.call "isUnion"]
    val isIntersection: t -> bool [@@js.call "isIntersection"]
    val isUnionOrIntersection: t -> bool [@@js.call "isUnionOrIntersection"]
    val isLiteral: t -> bool [@@js.call "isLiteral"]
    val isStringLiteral: t -> bool [@@js.call "isStringLiteral"]
    val isNumberLiteral: t -> bool [@@js.call "isNumberLiteral"]
    val isTypeParameter: t -> bool [@@js.call "isTypeParameter"]
    val isClassOrInterface: t -> bool [@@js.call "isClassOrInterface"]
    val isClass: t -> bool [@@js.call "isClass"]
    val get_flags: t -> ts_TypeFlags [@@js.get "flags"]
    val set_flags: t -> ts_TypeFlags -> unit [@@js.set "flags"]
    val get_symbol: t -> ts_Symbol [@@js.get "symbol"]
    val set_symbol: t -> ts_Symbol -> unit [@@js.set "symbol"]
    val get_pattern: t -> ts_DestructuringPattern [@@js.get "pattern"]
    val set_pattern: t -> ts_DestructuringPattern -> unit [@@js.set "pattern"]
    val get_aliasSymbol: t -> ts_Symbol [@@js.get "aliasSymbol"]
    val set_aliasSymbol: t -> ts_Symbol -> unit [@@js.set "aliasSymbol"]
    val get_aliasTypeArguments: t -> t list [@@js.get "aliasTypeArguments"]
    val set_aliasTypeArguments: t -> t list -> unit [@@js.set "aliasTypeArguments"]
  end
  module[@js.scope "LiteralType"] LiteralType : sig
    type t = ts_LiteralType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LiteralType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LiteralType | `Ts_Type]
    ]
    val get_value: t -> ts_PseudoBigInt or_string or_number [@@js.get "value"]
    val set_value: t -> ts_PseudoBigInt or_string or_number -> unit [@@js.set "value"]
    val get_freshType: t -> t [@@js.get "freshType"]
    val set_freshType: t -> t -> unit [@@js.set "freshType"]
    val get_regularType: t -> t [@@js.get "regularType"]
    val set_regularType: t -> t -> unit [@@js.set "regularType"]
    val cast: t -> ts_Type [@@js.cast]
  end
  module[@js.scope "UniqueESSymbolType"] UniqueESSymbolType : sig
    type t = ts_UniqueESSymbolType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Type | `Ts_UniqueESSymbolType]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Type | `Ts_UniqueESSymbolType]
    ]
    val get_symbol: t -> ts_Symbol [@@js.get "symbol"]
    val set_symbol: t -> ts_Symbol -> unit [@@js.set "symbol"]
    val get_escapedName: t -> ts___String [@@js.get "escapedName"]
    val set_escapedName: t -> ts___String -> unit [@@js.set "escapedName"]
    val cast: t -> ts_Type [@@js.cast]
  end
  module[@js.scope "StringLiteralType"] StringLiteralType : sig
    type t = ts_StringLiteralType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LiteralType | `Ts_StringLiteralType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LiteralType | `Ts_StringLiteralType | `Ts_Type]
    ]
    val get_value: t -> string [@@js.get "value"]
    val set_value: t -> string -> unit [@@js.set "value"]
    val cast: t -> ts_LiteralType [@@js.cast]
  end
  module[@js.scope "NumberLiteralType"] NumberLiteralType : sig
    type t = ts_NumberLiteralType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LiteralType | `Ts_NumberLiteralType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LiteralType | `Ts_NumberLiteralType | `Ts_Type]
    ]
    val get_value: t -> float [@@js.get "value"]
    val set_value: t -> float -> unit [@@js.set "value"]
    val cast: t -> ts_LiteralType [@@js.cast]
  end
  module[@js.scope "BigIntLiteralType"] BigIntLiteralType : sig
    type t = ts_BigIntLiteralType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BigIntLiteralType | `Ts_LiteralType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BigIntLiteralType | `Ts_LiteralType | `Ts_Type]
    ]
    val get_value: t -> ts_PseudoBigInt [@@js.get "value"]
    val set_value: t -> ts_PseudoBigInt -> unit [@@js.set "value"]
    val cast: t -> ts_LiteralType [@@js.cast]
  end
  module[@js.scope "EnumType"] EnumType : sig
    type t = ts_EnumType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EnumType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EnumType | `Ts_Type]
    ]
    val cast: t -> ts_Type [@@js.cast]
  end
  module ObjectFlags : sig
    type t = ts_ObjectFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "ObjectType"] ObjectType : sig
    type t = ts_ObjectType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ObjectType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ObjectType | `Ts_Type]
    ]
    val get_objectFlags: t -> ts_ObjectFlags [@@js.get "objectFlags"]
    val set_objectFlags: t -> ts_ObjectFlags -> unit [@@js.set "objectFlags"]
    val cast: t -> ts_Type [@@js.cast]
  end
  (** Class and interface types (ObjectFlags.Class and ObjectFlags.Interface). *)
  module[@js.scope "InterfaceType"] InterfaceType : sig
    type t = ts_InterfaceType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_InterfaceType | `Ts_ObjectType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_InterfaceType | `Ts_ObjectType | `Ts_Type]
    ]
    val get_typeParameters: t -> ts_TypeParameter list or_undefined [@@js.get "typeParameters"]
    val set_typeParameters: t -> ts_TypeParameter list or_undefined -> unit [@@js.set "typeParameters"]
    val get_outerTypeParameters: t -> ts_TypeParameter list or_undefined [@@js.get "outerTypeParameters"]
    val set_outerTypeParameters: t -> ts_TypeParameter list or_undefined -> unit [@@js.set "outerTypeParameters"]
    val get_localTypeParameters: t -> ts_TypeParameter list or_undefined [@@js.get "localTypeParameters"]
    val set_localTypeParameters: t -> ts_TypeParameter list or_undefined -> unit [@@js.set "localTypeParameters"]
    val get_thisType: t -> ts_TypeParameter or_undefined [@@js.get "thisType"]
    val set_thisType: t -> ts_TypeParameter or_undefined -> unit [@@js.set "thisType"]
    val cast: t -> ts_ObjectType [@@js.cast]
  end
  module BaseType : sig
    type t = ts_BaseType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BaseType]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BaseType]
    ]
  end
  module[@js.scope "InterfaceTypeWithDeclaredMembers"] InterfaceTypeWithDeclaredMembers : sig
    type t = ts_InterfaceTypeWithDeclaredMembers
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_InterfaceType | `Ts_InterfaceTypeWithDeclaredMembers | `Ts_ObjectType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_InterfaceType | `Ts_InterfaceTypeWithDeclaredMembers | `Ts_ObjectType | `Ts_Type]
    ]
    val get_declaredProperties: t -> ts_Symbol list [@@js.get "declaredProperties"]
    val set_declaredProperties: t -> ts_Symbol list -> unit [@@js.set "declaredProperties"]
    val get_declaredCallSignatures: t -> ts_Signature list [@@js.get "declaredCallSignatures"]
    val set_declaredCallSignatures: t -> ts_Signature list -> unit [@@js.set "declaredCallSignatures"]
    val get_declaredConstructSignatures: t -> ts_Signature list [@@js.get "declaredConstructSignatures"]
    val set_declaredConstructSignatures: t -> ts_Signature list -> unit [@@js.set "declaredConstructSignatures"]
    val get_declaredStringIndexInfo: t -> ts_IndexInfo [@@js.get "declaredStringIndexInfo"]
    val set_declaredStringIndexInfo: t -> ts_IndexInfo -> unit [@@js.set "declaredStringIndexInfo"]
    val get_declaredNumberIndexInfo: t -> ts_IndexInfo [@@js.get "declaredNumberIndexInfo"]
    val set_declaredNumberIndexInfo: t -> ts_IndexInfo -> unit [@@js.set "declaredNumberIndexInfo"]
    val cast: t -> ts_InterfaceType [@@js.cast]
  end
  (**
    Type references (ObjectFlags.Reference). When a class or interface has type parameters or
    a "this" type, references to the class or interface are made using type references. The
    typeArguments property specifies the types to substitute for the type parameters of the
    class or interface and optionally includes an extra element that specifies the type to
    substitute for "this" in the resulting instantiation. When no extra argument is present,
    the type reference itself is substituted for "this". The typeArguments property is undefined
    if the class or interface has no type parameters and the reference isn't specifying an
    explicit "this" argument.
  *)
  module[@js.scope "TypeReference"] TypeReference : sig
    type t = ts_TypeReference
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ObjectType | `Ts_Type | `Ts_TypeReference]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ObjectType | `Ts_Type | `Ts_TypeReference]
    ]
    val get_typeArguments: t -> ts_Type list [@@js.get "typeArguments"]
    val set_typeArguments: t -> ts_Type list -> unit [@@js.set "typeArguments"]
    val get_target: t -> ts_GenericType [@@js.get "target"]
    val set_target: t -> ts_GenericType -> unit [@@js.set "target"]
    val get_node: t -> ([`U_n_173 of ts_TypeReferenceNode [@js 173] | `U_n_178 of ts_ArrayTypeNode [@js 178] | `U_n_179 of ts_TupleTypeNode [@js 179]] [@js.union on_field "kind"]) [@@js.get "node"]
    val set_node: t -> ([`U_n_173 of ts_TypeReferenceNode  | `U_n_178 of ts_ArrayTypeNode  | `U_n_179 of ts_TupleTypeNode ] [@js.union on_field "kind"]) -> unit [@@js.set "node"]
    val cast: t -> ts_ObjectType [@@js.cast]
  end
  module[@js.scope "DeferredTypeReference"] DeferredTypeReference : sig
    type t = ts_DeferredTypeReference
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DeferredTypeReference | `Ts_ObjectType | `Ts_Type | `Ts_TypeReference]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DeferredTypeReference | `Ts_ObjectType | `Ts_Type | `Ts_TypeReference]
    ]
    val cast: t -> ts_TypeReference [@@js.cast]
  end
  module[@js.scope "GenericType"] GenericType : sig
    type t = ts_GenericType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_GenericType | `Ts_InterfaceType | `Ts_ObjectType | `Ts_Type | `Ts_TypeReference]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_GenericType | `Ts_InterfaceType | `Ts_ObjectType | `Ts_Type | `Ts_TypeReference]
    ]
    val cast: t -> ts_InterfaceType [@@js.cast]
    val cast': t -> ts_TypeReference [@@js.cast]
  end
  module ElementFlags : sig
    type t = ts_ElementFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "TupleType"] TupleType : sig
    type t = ts_TupleType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_GenericType | `Ts_InterfaceType | `Ts_ObjectType | `Ts_TupleType | `Ts_Type | `Ts_TypeReference]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_GenericType | `Ts_InterfaceType | `Ts_ObjectType | `Ts_TupleType | `Ts_Type | `Ts_TypeReference]
    ]
    val get_elementFlags: t -> ts_ElementFlags list [@@js.get "elementFlags"]
    val set_elementFlags: t -> ts_ElementFlags list -> unit [@@js.set "elementFlags"]
    val get_minLength: t -> float [@@js.get "minLength"]
    val set_minLength: t -> float -> unit [@@js.set "minLength"]
    val get_fixedLength: t -> float [@@js.get "fixedLength"]
    val set_fixedLength: t -> float -> unit [@@js.set "fixedLength"]
    val get_hasRestElement: t -> bool [@@js.get "hasRestElement"]
    val set_hasRestElement: t -> bool -> unit [@@js.set "hasRestElement"]
    val get_combinedFlags: t -> ts_ElementFlags [@@js.get "combinedFlags"]
    val set_combinedFlags: t -> ts_ElementFlags -> unit [@@js.set "combinedFlags"]
    val get_readonly: t -> bool [@@js.get "readonly"]
    val set_readonly: t -> bool -> unit [@@js.set "readonly"]
    val get_labeledElementDeclarations: t -> ([`U_n_160 of ts_ParameterDeclaration [@js 160] | `U_n_192 of ts_NamedTupleMember [@js 192]] [@js.union on_field "kind"]) list [@@js.get "labeledElementDeclarations"]
    val set_labeledElementDeclarations: t -> ([`U_n_160 of ts_ParameterDeclaration  | `U_n_192 of ts_NamedTupleMember ] [@js.union on_field "kind"]) list -> unit [@@js.set "labeledElementDeclarations"]
    val cast: t -> ts_GenericType [@@js.cast]
  end
  module[@js.scope "TupleTypeReference"] TupleTypeReference : sig
    type t = ts_TupleTypeReference
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ObjectType | `Ts_TupleTypeReference | `Ts_Type | `Ts_TypeReference]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ObjectType | `Ts_TupleTypeReference | `Ts_Type | `Ts_TypeReference]
    ]
    val get_target: t -> ts_TupleType [@@js.get "target"]
    val set_target: t -> ts_TupleType -> unit [@@js.set "target"]
    val cast: t -> ts_TypeReference [@@js.cast]
  end
  module[@js.scope "UnionOrIntersectionType"] UnionOrIntersectionType : sig
    type t = ts_UnionOrIntersectionType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Type | `Ts_UnionOrIntersectionType]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Type | `Ts_UnionOrIntersectionType]
    ]
    val get_types: t -> ts_Type list [@@js.get "types"]
    val set_types: t -> ts_Type list -> unit [@@js.set "types"]
    val cast: t -> ts_Type [@@js.cast]
  end
  module[@js.scope "UnionType"] UnionType : sig
    type t = ts_UnionType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Type | `Ts_UnionOrIntersectionType | `Ts_UnionType]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Type | `Ts_UnionOrIntersectionType | `Ts_UnionType]
    ]
    val cast: t -> ts_UnionOrIntersectionType [@@js.cast]
  end
  module[@js.scope "IntersectionType"] IntersectionType : sig
    type t = ts_IntersectionType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_IntersectionType | `Ts_Type | `Ts_UnionOrIntersectionType]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_IntersectionType | `Ts_Type | `Ts_UnionOrIntersectionType]
    ]
    val cast: t -> ts_UnionOrIntersectionType [@@js.cast]
  end
  module StructuredType : sig
    type t = ts_StructuredType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_StructuredType]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_StructuredType]
    ]
  end
  module[@js.scope "EvolvingArrayType"] EvolvingArrayType : sig
    type t = ts_EvolvingArrayType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EvolvingArrayType | `Ts_ObjectType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EvolvingArrayType | `Ts_ObjectType | `Ts_Type]
    ]
    val get_elementType: t -> ts_Type [@@js.get "elementType"]
    val set_elementType: t -> ts_Type -> unit [@@js.set "elementType"]
    val get_finalArrayType: t -> ts_Type [@@js.get "finalArrayType"]
    val set_finalArrayType: t -> ts_Type -> unit [@@js.set "finalArrayType"]
    val cast: t -> ts_ObjectType [@@js.cast]
  end
  module[@js.scope "InstantiableType"] InstantiableType : sig
    type t = ts_InstantiableType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_InstantiableType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_InstantiableType | `Ts_Type]
    ]
    val cast: t -> ts_Type [@@js.cast]
  end
  module[@js.scope "TypeParameter"] TypeParameter : sig
    type t = ts_TypeParameter
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_InstantiableType | `Ts_Type | `Ts_TypeParameter]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_InstantiableType | `Ts_Type | `Ts_TypeParameter]
    ]
    val cast: t -> ts_InstantiableType [@@js.cast]
  end
  module[@js.scope "IndexedAccessType"] IndexedAccessType : sig
    type t = ts_IndexedAccessType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_IndexedAccessType | `Ts_InstantiableType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_IndexedAccessType | `Ts_InstantiableType | `Ts_Type]
    ]
    val get_objectType: t -> ts_Type [@@js.get "objectType"]
    val set_objectType: t -> ts_Type -> unit [@@js.set "objectType"]
    val get_indexType: t -> ts_Type [@@js.get "indexType"]
    val set_indexType: t -> ts_Type -> unit [@@js.set "indexType"]
    val get_constraint: t -> ts_Type [@@js.get "constraint"]
    val set_constraint: t -> ts_Type -> unit [@@js.set "constraint"]
    val get_simplifiedForReading: t -> ts_Type [@@js.get "simplifiedForReading"]
    val set_simplifiedForReading: t -> ts_Type -> unit [@@js.set "simplifiedForReading"]
    val get_simplifiedForWriting: t -> ts_Type [@@js.get "simplifiedForWriting"]
    val set_simplifiedForWriting: t -> ts_Type -> unit [@@js.set "simplifiedForWriting"]
    val cast: t -> ts_InstantiableType [@@js.cast]
  end
  module TypeVariable : sig
    type t = ts_TypeVariable
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TypeVariable]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TypeVariable]
    ]
  end
  module[@js.scope "IndexType"] IndexType : sig
    type t = ts_IndexType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_IndexType | `Ts_InstantiableType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_IndexType | `Ts_InstantiableType | `Ts_Type]
    ]
    val get_type: t -> ([`U_n_1 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 1] | `U_n_2 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 2] | `U_n_4 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 4] | `U_n_8 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 8] | `U_n_16 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 16] | `U_n_32 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 32] | `U_n_64 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 64] | `U_n_128 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 128] | `U_n_256 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 256] | `U_n_296 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 296] | `U_n_384 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 384] | `U_n_512 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 512] | `U_n_528 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 528] | `U_n_1024 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 1024] | `U_n_1056 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 1056] | `U_n_2048 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 2048] | `U_n_2112 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 2112] | `U_n_2944 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 2944] | `U_n_4096 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 4096] | `U_n_8192 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 8192] | `U_n_12288 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 12288] | `U_n_16384 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 16384] | `U_n_32768 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 32768] | `U_n_49152 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 49152] | `U_n_65536 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 65536] | `U_n_109440 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 109440] | `U_n_117724 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 117724] | `U_n_131072 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 131072] | `U_n_262144 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 262144] | `U_n_524288 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 524288] | `U_n_1048576 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 1048576] | `U_n_2097152 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 2097152] | `U_n_3145728 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 3145728] | `U_n_3670016 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 3670016] | `U_n_4194304 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 4194304] | `U_n_8388608 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 8388608] | `U_n_8650752 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 8650752] | `U_n_16777216 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 16777216] | `U_n_33554432 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 33554432] | `U_n_58982400 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 58982400] | `U_n_67108864 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 67108864] | `U_n_134217728 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 134217728] | `U_n_268435456 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 268435456] | `U_n_402653316 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 402653316] | `U_n_406847488 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 406847488] | `U_n_465829888 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 465829888] | `U_n_469499904 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 469499904] | `U_n_536624127 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 [@js 536624127]] [@js.union on_field "flags"]) [@@js.get "type"]
    val set_type: t -> ([`U_n_1 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_2 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_4 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_8 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_16 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_32 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_64 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_128 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_256 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_296 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_384 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_512 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_528 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_1024 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_1056 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_2048 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_2112 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_2944 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_4096 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_8192 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_12288 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_16384 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_32768 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_49152 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_65536 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_109440 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_117724 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_131072 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_262144 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_524288 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_1048576 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_2097152 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_3145728 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_3670016 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_4194304 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_8388608 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_8650752 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_16777216 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_33554432 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_58982400 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_67108864 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_134217728 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_268435456 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_402653316 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_406847488 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_465829888 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_469499904 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2  | `U_n_536624127 of (ts_InstantiableType, ts_UnionOrIntersectionType) union2 ] [@js.union on_field "flags"]) -> unit [@@js.set "type"]
    val cast: t -> ts_InstantiableType [@@js.cast]
  end
  module[@js.scope "ConditionalRoot"] ConditionalRoot : sig
    type t = ts_ConditionalRoot
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ConditionalRoot]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ConditionalRoot]
    ]
    val get_node: t -> ts_ConditionalTypeNode [@@js.get "node"]
    val set_node: t -> ts_ConditionalTypeNode -> unit [@@js.set "node"]
    val get_checkType: t -> ts_Type [@@js.get "checkType"]
    val set_checkType: t -> ts_Type -> unit [@@js.set "checkType"]
    val get_extendsType: t -> ts_Type [@@js.get "extendsType"]
    val set_extendsType: t -> ts_Type -> unit [@@js.set "extendsType"]
    val get_isDistributive: t -> bool [@@js.get "isDistributive"]
    val set_isDistributive: t -> bool -> unit [@@js.set "isDistributive"]
    val get_inferTypeParameters: t -> ts_TypeParameter list [@@js.get "inferTypeParameters"]
    val set_inferTypeParameters: t -> ts_TypeParameter list -> unit [@@js.set "inferTypeParameters"]
    val get_outerTypeParameters: t -> ts_TypeParameter list [@@js.get "outerTypeParameters"]
    val set_outerTypeParameters: t -> ts_TypeParameter list -> unit [@@js.set "outerTypeParameters"]
    val get_instantiations: t -> ts_Type ts_Map [@@js.get "instantiations"]
    val set_instantiations: t -> ts_Type ts_Map -> unit [@@js.set "instantiations"]
    val get_aliasSymbol: t -> ts_Symbol [@@js.get "aliasSymbol"]
    val set_aliasSymbol: t -> ts_Symbol -> unit [@@js.set "aliasSymbol"]
    val get_aliasTypeArguments: t -> ts_Type list [@@js.get "aliasTypeArguments"]
    val set_aliasTypeArguments: t -> ts_Type list -> unit [@@js.set "aliasTypeArguments"]
  end
  module[@js.scope "ConditionalType"] ConditionalType : sig
    type t = ts_ConditionalType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ConditionalType | `Ts_InstantiableType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ConditionalType | `Ts_InstantiableType | `Ts_Type]
    ]
    val get_root: t -> ts_ConditionalRoot [@@js.get "root"]
    val set_root: t -> ts_ConditionalRoot -> unit [@@js.set "root"]
    val get_checkType: t -> ts_Type [@@js.get "checkType"]
    val set_checkType: t -> ts_Type -> unit [@@js.set "checkType"]
    val get_extendsType: t -> ts_Type [@@js.get "extendsType"]
    val set_extendsType: t -> ts_Type -> unit [@@js.set "extendsType"]
    val get_resolvedTrueType: t -> ts_Type [@@js.get "resolvedTrueType"]
    val set_resolvedTrueType: t -> ts_Type -> unit [@@js.set "resolvedTrueType"]
    val get_resolvedFalseType: t -> ts_Type [@@js.get "resolvedFalseType"]
    val set_resolvedFalseType: t -> ts_Type -> unit [@@js.set "resolvedFalseType"]
    val cast: t -> ts_InstantiableType [@@js.cast]
  end
  module[@js.scope "TemplateLiteralType"] TemplateLiteralType : sig
    type t = ts_TemplateLiteralType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_InstantiableType | `Ts_TemplateLiteralType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_InstantiableType | `Ts_TemplateLiteralType | `Ts_Type]
    ]
    val get_texts: t -> string list [@@js.get "texts"]
    val set_texts: t -> string list -> unit [@@js.set "texts"]
    val get_types: t -> ts_Type list [@@js.get "types"]
    val set_types: t -> ts_Type list -> unit [@@js.set "types"]
    val cast: t -> ts_InstantiableType [@@js.cast]
  end
  module[@js.scope "StringMappingType"] StringMappingType : sig
    type t = ts_StringMappingType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_InstantiableType | `Ts_StringMappingType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_InstantiableType | `Ts_StringMappingType | `Ts_Type]
    ]
    val get_symbol: t -> ts_Symbol [@@js.get "symbol"]
    val set_symbol: t -> ts_Symbol -> unit [@@js.set "symbol"]
    val get_type: t -> ts_Type [@@js.get "type"]
    val set_type: t -> ts_Type -> unit [@@js.set "type"]
    val cast: t -> ts_InstantiableType [@@js.cast]
  end
  module[@js.scope "SubstitutionType"] SubstitutionType : sig
    type t = ts_SubstitutionType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_InstantiableType | `Ts_SubstitutionType | `Ts_Type]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_InstantiableType | `Ts_SubstitutionType | `Ts_Type]
    ]
    val get_baseType: t -> ts_Type [@@js.get "baseType"]
    val set_baseType: t -> ts_Type -> unit [@@js.set "baseType"]
    val get_substitute: t -> ts_Type [@@js.get "substitute"]
    val set_substitute: t -> ts_Type -> unit [@@js.set "substitute"]
    val cast: t -> ts_InstantiableType [@@js.cast]
  end
  module SignatureKind : sig
    type t = ts_SignatureKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "Signature"] Signature : sig
    type t = ts_Signature
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Signature]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Signature]
    ]
    val getDeclaration: t -> ts_SignatureDeclaration [@@js.call "getDeclaration"]
    val getTypeParameters: t -> ts_TypeParameter list or_undefined [@@js.call "getTypeParameters"]
    val getParameters: t -> ts_Symbol list [@@js.call "getParameters"]
    val getReturnType: t -> ts_Type [@@js.call "getReturnType"]
    val getDocumentationComment: t -> typeChecker:ts_TypeChecker or_undefined -> ts_SymbolDisplayPart list [@@js.call "getDocumentationComment"]
    val getJsDocTags: t -> ts_JSDocTagInfo list [@@js.call "getJsDocTags"]
    val get_declaration: t -> ([`U_n_164 of ts_SignatureDeclaration [@js 164] | `U_n_165 of ts_SignatureDeclaration [@js 165] | `U_n_166 of ts_SignatureDeclaration [@js 166] | `U_n_167 of ts_SignatureDeclaration [@js 167] | `U_n_168 of ts_SignatureDeclaration [@js 168] | `U_n_169 of ts_SignatureDeclaration [@js 169] | `U_n_170 of ts_SignatureDeclaration [@js 170] | `U_n_171 of ts_SignatureDeclaration [@js 171] | `U_n_174 of ts_SignatureDeclaration [@js 174] | `U_n_175 of ts_SignatureDeclaration [@js 175] | `U_n_208 of ts_SignatureDeclaration [@js 208] | `U_n_209 of ts_SignatureDeclaration [@js 209] | `U_n_251 of ts_SignatureDeclaration [@js 251] | `U_n_308 of ts_SignatureDeclaration [@js 308] | `U_n_313 of ts_JSDocSignature [@js 313]] [@js.union on_field "kind"]) [@@js.get "declaration"]
    val set_declaration: t -> ([`U_n_164 of ts_SignatureDeclaration  | `U_n_165 of ts_SignatureDeclaration  | `U_n_166 of ts_SignatureDeclaration  | `U_n_167 of ts_SignatureDeclaration  | `U_n_168 of ts_SignatureDeclaration  | `U_n_169 of ts_SignatureDeclaration  | `U_n_170 of ts_SignatureDeclaration  | `U_n_171 of ts_SignatureDeclaration  | `U_n_174 of ts_SignatureDeclaration  | `U_n_175 of ts_SignatureDeclaration  | `U_n_208 of ts_SignatureDeclaration  | `U_n_209 of ts_SignatureDeclaration  | `U_n_251 of ts_SignatureDeclaration  | `U_n_308 of ts_SignatureDeclaration  | `U_n_313 of ts_JSDocSignature ] [@js.union on_field "kind"]) -> unit [@@js.set "declaration"]
    val get_typeParameters: t -> ts_TypeParameter list [@@js.get "typeParameters"]
    val set_typeParameters: t -> ts_TypeParameter list -> unit [@@js.set "typeParameters"]
    val get_parameters: t -> ts_Symbol list [@@js.get "parameters"]
    val set_parameters: t -> ts_Symbol list -> unit [@@js.set "parameters"]
  end
  module IndexKind : sig
    type t = ts_IndexKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "IndexInfo"] IndexInfo : sig
    type t = ts_IndexInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_IndexInfo]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_IndexInfo]
    ]
    val get_type: t -> ts_Type [@@js.get "type"]
    val set_type: t -> ts_Type -> unit [@@js.set "type"]
    val get_isReadonly: t -> bool [@@js.get "isReadonly"]
    val set_isReadonly: t -> bool -> unit [@@js.set "isReadonly"]
    val get_declaration: t -> ts_IndexSignatureDeclaration [@@js.get "declaration"]
    val set_declaration: t -> ts_IndexSignatureDeclaration -> unit [@@js.set "declaration"]
  end
  module InferencePriority : sig
    type t = ts_InferencePriority
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  (** @deprecated Use FileExtensionInfo instead. *)
  module JsFileExtensionInfo : sig
    type t = ts_JsFileExtensionInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FileExtensionInfo | `Ts_JsFileExtensionInfo]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FileExtensionInfo | `Ts_JsFileExtensionInfo]
    ]
  end
  module[@js.scope "FileExtensionInfo"] FileExtensionInfo : sig
    type t = ts_FileExtensionInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FileExtensionInfo]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FileExtensionInfo]
    ]
    val get_extension: t -> string [@@js.get "extension"]
    val set_extension: t -> string -> unit [@@js.set "extension"]
    val get_isMixedContent: t -> bool [@@js.get "isMixedContent"]
    val set_isMixedContent: t -> bool -> unit [@@js.set "isMixedContent"]
    val get_scriptKind: t -> ts_ScriptKind [@@js.get "scriptKind"]
    val set_scriptKind: t -> ts_ScriptKind -> unit [@@js.set "scriptKind"]
  end
  module[@js.scope "DiagnosticMessage"] DiagnosticMessage : sig
    type t = ts_DiagnosticMessage
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DiagnosticMessage]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DiagnosticMessage]
    ]
    val get_key: t -> string [@@js.get "key"]
    val set_key: t -> string -> unit [@@js.set "key"]
    val get_category: t -> ts_DiagnosticCategory [@@js.get "category"]
    val set_category: t -> ts_DiagnosticCategory -> unit [@@js.set "category"]
    val get_code: t -> float [@@js.get "code"]
    val set_code: t -> float -> unit [@@js.set "code"]
    val get_message: t -> string [@@js.get "message"]
    val set_message: t -> string -> unit [@@js.set "message"]
    val get_reportsUnnecessary: t -> anonymous_interface_0 [@@js.get "reportsUnnecessary"]
    val set_reportsUnnecessary: t -> anonymous_interface_0 -> unit [@@js.set "reportsUnnecessary"]
    val get_reportsDeprecated: t -> anonymous_interface_0 [@@js.get "reportsDeprecated"]
    val set_reportsDeprecated: t -> anonymous_interface_0 -> unit [@@js.set "reportsDeprecated"]
  end
  (**
    A linked list of formatted diagnostic messages to be used as part of a multiline message.
    It is built from the bottom up, leaving the head to be the "main" diagnostic.
    While it seems that DiagnosticMessageChain is structurally similar to DiagnosticMessage,
    the difference is that messages are all preformatted in DMC.
  *)
  module[@js.scope "DiagnosticMessageChain"] DiagnosticMessageChain : sig
    type t = ts_DiagnosticMessageChain
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DiagnosticMessageChain]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DiagnosticMessageChain]
    ]
    val get_messageText: t -> string [@@js.get "messageText"]
    val set_messageText: t -> string -> unit [@@js.set "messageText"]
    val get_category: t -> ts_DiagnosticCategory [@@js.get "category"]
    val set_category: t -> ts_DiagnosticCategory -> unit [@@js.set "category"]
    val get_code: t -> float [@@js.get "code"]
    val set_code: t -> float -> unit [@@js.set "code"]
    val get_next: t -> t list [@@js.get "next"]
    val set_next: t -> t list -> unit [@@js.set "next"]
  end
  module[@js.scope "Diagnostic"] Diagnostic : sig
    type t = ts_Diagnostic
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Diagnostic | `Ts_DiagnosticRelatedInformation]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Diagnostic | `Ts_DiagnosticRelatedInformation]
    ]
    (** May store more in future. For now, this will simply be `true` to indicate when a diagnostic is an unused-identifier diagnostic. *)
    (** May store more in future. For now, this will simply be `true` to indicate when a diagnostic is an unused-identifier diagnostic. *)
    val get_reportsUnnecessary: t -> anonymous_interface_0 [@@js.get "reportsUnnecessary"]
    (** May store more in future. For now, this will simply be `true` to indicate when a diagnostic is an unused-identifier diagnostic. *)
    val set_reportsUnnecessary: t -> anonymous_interface_0 -> unit [@@js.set "reportsUnnecessary"]
    val get_reportsDeprecated: t -> anonymous_interface_0 [@@js.get "reportsDeprecated"]
    val set_reportsDeprecated: t -> anonymous_interface_0 -> unit [@@js.set "reportsDeprecated"]
    val get_source: t -> string [@@js.get "source"]
    val set_source: t -> string -> unit [@@js.set "source"]
    val get_relatedInformation: t -> ts_DiagnosticRelatedInformation list [@@js.get "relatedInformation"]
    val set_relatedInformation: t -> ts_DiagnosticRelatedInformation list -> unit [@@js.set "relatedInformation"]
    val cast: t -> ts_DiagnosticRelatedInformation [@@js.cast]
  end
  module[@js.scope "DiagnosticRelatedInformation"] DiagnosticRelatedInformation : sig
    type t = ts_DiagnosticRelatedInformation
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DiagnosticRelatedInformation]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DiagnosticRelatedInformation]
    ]
    val get_category: t -> ts_DiagnosticCategory [@@js.get "category"]
    val set_category: t -> ts_DiagnosticCategory -> unit [@@js.set "category"]
    val get_code: t -> float [@@js.get "code"]
    val set_code: t -> float -> unit [@@js.set "code"]
    val get_file: t -> ts_SourceFile or_undefined [@@js.get "file"]
    val set_file: t -> ts_SourceFile or_undefined -> unit [@@js.set "file"]
    val get_start: t -> float or_undefined [@@js.get "start"]
    val set_start: t -> float or_undefined -> unit [@@js.set "start"]
    val get_length: t -> float or_undefined [@@js.get "length"]
    val set_length: t -> float or_undefined -> unit [@@js.set "length"]
    val get_messageText: t -> ts_DiagnosticMessageChain or_string [@@js.get "messageText"]
    val set_messageText: t -> ts_DiagnosticMessageChain or_string -> unit [@@js.set "messageText"]
  end
  module[@js.scope "DiagnosticWithLocation"] DiagnosticWithLocation : sig
    type t = ts_DiagnosticWithLocation
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Diagnostic | `Ts_DiagnosticRelatedInformation | `Ts_DiagnosticWithLocation]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Diagnostic | `Ts_DiagnosticRelatedInformation | `Ts_DiagnosticWithLocation]
    ]
    val get_file: t -> ts_SourceFile [@@js.get "file"]
    val set_file: t -> ts_SourceFile -> unit [@@js.set "file"]
    val get_start: t -> float [@@js.get "start"]
    val set_start: t -> float -> unit [@@js.set "start"]
    val get_length: t -> float [@@js.get "length"]
    val set_length: t -> float -> unit [@@js.set "length"]
    val cast: t -> ts_Diagnostic [@@js.cast]
  end
  module DiagnosticCategory : sig
    type t = ts_DiagnosticCategory
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module ModuleResolutionKind : sig
    type t = ts_ModuleResolutionKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "PluginImport"] PluginImport : sig
    type t = ts_PluginImport
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PluginImport]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PluginImport]
    ]
    val get_name: t -> string [@@js.get "name"]
    val set_name: t -> string -> unit [@@js.set "name"]
  end
  module[@js.scope "ProjectReference"] ProjectReference : sig
    type t = ts_ProjectReference
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ProjectReference]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ProjectReference]
    ]
    (** A normalized path on disk *)
    (** A normalized path on disk *)
    val get_path: t -> string [@@js.get "path"]
    (** A normalized path on disk *)
    val set_path: t -> string -> unit [@@js.set "path"]
    (** The path as the user originally wrote it *)
    (** The path as the user originally wrote it *)
    val get_originalPath: t -> string [@@js.get "originalPath"]
    (** The path as the user originally wrote it *)
    val set_originalPath: t -> string -> unit [@@js.set "originalPath"]
    (** True if the output of this reference should be prepended to the output of this project. Only valid for --outFile compilations *)
    (** True if the output of this reference should be prepended to the output of this project. Only valid for --outFile compilations *)
    val get_prepend: t -> bool [@@js.get "prepend"]
    (** True if the output of this reference should be prepended to the output of this project. Only valid for --outFile compilations *)
    val set_prepend: t -> bool -> unit [@@js.set "prepend"]
    (** True if it is intended that this reference form a circularity *)
    (** True if it is intended that this reference form a circularity *)
    val get_circular: t -> bool [@@js.get "circular"]
    (** True if it is intended that this reference form a circularity *)
    val set_circular: t -> bool -> unit [@@js.set "circular"]
  end
  module WatchFileKind : sig
    type t = ts_WatchFileKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module WatchDirectoryKind : sig
    type t = ts_WatchDirectoryKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module PollingWatchKind : sig
    type t = ts_PollingWatchKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module CompilerOptionsValue : sig
    type t = ts_CompilerOptionsValue
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CompilerOptionsValue]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CompilerOptionsValue]
    ]
  end
  module[@js.scope "CompilerOptions"] CompilerOptions : sig
    type t = ts_CompilerOptions
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CompilerOptions]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CompilerOptions]
    ]
    val get_allowJs: t -> bool [@@js.get "allowJs"]
    val set_allowJs: t -> bool -> unit [@@js.set "allowJs"]
    val get_allowSyntheticDefaultImports: t -> bool [@@js.get "allowSyntheticDefaultImports"]
    val set_allowSyntheticDefaultImports: t -> bool -> unit [@@js.set "allowSyntheticDefaultImports"]
    val get_allowUmdGlobalAccess: t -> bool [@@js.get "allowUmdGlobalAccess"]
    val set_allowUmdGlobalAccess: t -> bool -> unit [@@js.set "allowUmdGlobalAccess"]
    val get_allowUnreachableCode: t -> bool [@@js.get "allowUnreachableCode"]
    val set_allowUnreachableCode: t -> bool -> unit [@@js.set "allowUnreachableCode"]
    val get_allowUnusedLabels: t -> bool [@@js.get "allowUnusedLabels"]
    val set_allowUnusedLabels: t -> bool -> unit [@@js.set "allowUnusedLabels"]
    val get_alwaysStrict: t -> bool [@@js.get "alwaysStrict"]
    val set_alwaysStrict: t -> bool -> unit [@@js.set "alwaysStrict"]
    val get_baseUrl: t -> string [@@js.get "baseUrl"]
    val set_baseUrl: t -> string -> unit [@@js.set "baseUrl"]
    val get_charset: t -> string [@@js.get "charset"]
    val set_charset: t -> string -> unit [@@js.set "charset"]
    val get_checkJs: t -> bool [@@js.get "checkJs"]
    val set_checkJs: t -> bool -> unit [@@js.set "checkJs"]
    val get_declaration: t -> bool [@@js.get "declaration"]
    val set_declaration: t -> bool -> unit [@@js.set "declaration"]
    val get_declarationMap: t -> bool [@@js.get "declarationMap"]
    val set_declarationMap: t -> bool -> unit [@@js.set "declarationMap"]
    val get_emitDeclarationOnly: t -> bool [@@js.get "emitDeclarationOnly"]
    val set_emitDeclarationOnly: t -> bool -> unit [@@js.set "emitDeclarationOnly"]
    val get_declarationDir: t -> string [@@js.get "declarationDir"]
    val set_declarationDir: t -> string -> unit [@@js.set "declarationDir"]
    val get_disableSizeLimit: t -> bool [@@js.get "disableSizeLimit"]
    val set_disableSizeLimit: t -> bool -> unit [@@js.set "disableSizeLimit"]
    val get_disableSourceOfProjectReferenceRedirect: t -> bool [@@js.get "disableSourceOfProjectReferenceRedirect"]
    val set_disableSourceOfProjectReferenceRedirect: t -> bool -> unit [@@js.set "disableSourceOfProjectReferenceRedirect"]
    val get_disableSolutionSearching: t -> bool [@@js.get "disableSolutionSearching"]
    val set_disableSolutionSearching: t -> bool -> unit [@@js.set "disableSolutionSearching"]
    val get_disableReferencedProjectLoad: t -> bool [@@js.get "disableReferencedProjectLoad"]
    val set_disableReferencedProjectLoad: t -> bool -> unit [@@js.set "disableReferencedProjectLoad"]
    val get_downlevelIteration: t -> bool [@@js.get "downlevelIteration"]
    val set_downlevelIteration: t -> bool -> unit [@@js.set "downlevelIteration"]
    val get_emitBOM: t -> bool [@@js.get "emitBOM"]
    val set_emitBOM: t -> bool -> unit [@@js.set "emitBOM"]
    val get_emitDecoratorMetadata: t -> bool [@@js.get "emitDecoratorMetadata"]
    val set_emitDecoratorMetadata: t -> bool -> unit [@@js.set "emitDecoratorMetadata"]
    val get_experimentalDecorators: t -> bool [@@js.get "experimentalDecorators"]
    val set_experimentalDecorators: t -> bool -> unit [@@js.set "experimentalDecorators"]
    val get_forceConsistentCasingInFileNames: t -> bool [@@js.get "forceConsistentCasingInFileNames"]
    val set_forceConsistentCasingInFileNames: t -> bool -> unit [@@js.set "forceConsistentCasingInFileNames"]
    val get_importHelpers: t -> bool [@@js.get "importHelpers"]
    val set_importHelpers: t -> bool -> unit [@@js.set "importHelpers"]
    val get_importsNotUsedAsValues: t -> ts_ImportsNotUsedAsValues [@@js.get "importsNotUsedAsValues"]
    val set_importsNotUsedAsValues: t -> ts_ImportsNotUsedAsValues -> unit [@@js.set "importsNotUsedAsValues"]
    val get_inlineSourceMap: t -> bool [@@js.get "inlineSourceMap"]
    val set_inlineSourceMap: t -> bool -> unit [@@js.set "inlineSourceMap"]
    val get_inlineSources: t -> bool [@@js.get "inlineSources"]
    val set_inlineSources: t -> bool -> unit [@@js.set "inlineSources"]
    val get_isolatedModules: t -> bool [@@js.get "isolatedModules"]
    val set_isolatedModules: t -> bool -> unit [@@js.set "isolatedModules"]
    val get_jsx: t -> ts_JsxEmit [@@js.get "jsx"]
    val set_jsx: t -> ts_JsxEmit -> unit [@@js.set "jsx"]
    val get_keyofStringsOnly: t -> bool [@@js.get "keyofStringsOnly"]
    val set_keyofStringsOnly: t -> bool -> unit [@@js.set "keyofStringsOnly"]
    val get_lib: t -> string list [@@js.get "lib"]
    val set_lib: t -> string list -> unit [@@js.set "lib"]
    val get_locale: t -> string [@@js.get "locale"]
    val set_locale: t -> string -> unit [@@js.set "locale"]
    val get_mapRoot: t -> string [@@js.get "mapRoot"]
    val set_mapRoot: t -> string -> unit [@@js.set "mapRoot"]
    val get_maxNodeModuleJsDepth: t -> float [@@js.get "maxNodeModuleJsDepth"]
    val set_maxNodeModuleJsDepth: t -> float -> unit [@@js.set "maxNodeModuleJsDepth"]
    val get_module: t -> ts_ModuleKind [@@js.get "module"]
    val set_module: t -> ts_ModuleKind -> unit [@@js.set "module"]
    val get_moduleResolution: t -> ts_ModuleResolutionKind [@@js.get "moduleResolution"]
    val set_moduleResolution: t -> ts_ModuleResolutionKind -> unit [@@js.set "moduleResolution"]
    val get_newLine: t -> ts_NewLineKind [@@js.get "newLine"]
    val set_newLine: t -> ts_NewLineKind -> unit [@@js.set "newLine"]
    val get_noEmit: t -> bool [@@js.get "noEmit"]
    val set_noEmit: t -> bool -> unit [@@js.set "noEmit"]
    val get_noEmitHelpers: t -> bool [@@js.get "noEmitHelpers"]
    val set_noEmitHelpers: t -> bool -> unit [@@js.set "noEmitHelpers"]
    val get_noEmitOnError: t -> bool [@@js.get "noEmitOnError"]
    val set_noEmitOnError: t -> bool -> unit [@@js.set "noEmitOnError"]
    val get_noErrorTruncation: t -> bool [@@js.get "noErrorTruncation"]
    val set_noErrorTruncation: t -> bool -> unit [@@js.set "noErrorTruncation"]
    val get_noFallthroughCasesInSwitch: t -> bool [@@js.get "noFallthroughCasesInSwitch"]
    val set_noFallthroughCasesInSwitch: t -> bool -> unit [@@js.set "noFallthroughCasesInSwitch"]
    val get_noImplicitAny: t -> bool [@@js.get "noImplicitAny"]
    val set_noImplicitAny: t -> bool -> unit [@@js.set "noImplicitAny"]
    val get_noImplicitReturns: t -> bool [@@js.get "noImplicitReturns"]
    val set_noImplicitReturns: t -> bool -> unit [@@js.set "noImplicitReturns"]
    val get_noImplicitThis: t -> bool [@@js.get "noImplicitThis"]
    val set_noImplicitThis: t -> bool -> unit [@@js.set "noImplicitThis"]
    val get_noStrictGenericChecks: t -> bool [@@js.get "noStrictGenericChecks"]
    val set_noStrictGenericChecks: t -> bool -> unit [@@js.set "noStrictGenericChecks"]
    val get_noUnusedLocals: t -> bool [@@js.get "noUnusedLocals"]
    val set_noUnusedLocals: t -> bool -> unit [@@js.set "noUnusedLocals"]
    val get_noUnusedParameters: t -> bool [@@js.get "noUnusedParameters"]
    val set_noUnusedParameters: t -> bool -> unit [@@js.set "noUnusedParameters"]
    val get_noImplicitUseStrict: t -> bool [@@js.get "noImplicitUseStrict"]
    val set_noImplicitUseStrict: t -> bool -> unit [@@js.set "noImplicitUseStrict"]
    val get_noPropertyAccessFromIndexSignature: t -> bool [@@js.get "noPropertyAccessFromIndexSignature"]
    val set_noPropertyAccessFromIndexSignature: t -> bool -> unit [@@js.set "noPropertyAccessFromIndexSignature"]
    val get_assumeChangesOnlyAffectDirectDependencies: t -> bool [@@js.get "assumeChangesOnlyAffectDirectDependencies"]
    val set_assumeChangesOnlyAffectDirectDependencies: t -> bool -> unit [@@js.set "assumeChangesOnlyAffectDirectDependencies"]
    val get_noLib: t -> bool [@@js.get "noLib"]
    val set_noLib: t -> bool -> unit [@@js.set "noLib"]
    val get_noResolve: t -> bool [@@js.get "noResolve"]
    val set_noResolve: t -> bool -> unit [@@js.set "noResolve"]
    val get_noUncheckedIndexedAccess: t -> bool [@@js.get "noUncheckedIndexedAccess"]
    val set_noUncheckedIndexedAccess: t -> bool -> unit [@@js.set "noUncheckedIndexedAccess"]
    val get_out: t -> string [@@js.get "out"]
    val set_out: t -> string -> unit [@@js.set "out"]
    val get_outDir: t -> string [@@js.get "outDir"]
    val set_outDir: t -> string -> unit [@@js.set "outDir"]
    val get_outFile: t -> string [@@js.get "outFile"]
    val set_outFile: t -> string -> unit [@@js.set "outFile"]
    val get_paths: t -> string list ts_MapLike [@@js.get "paths"]
    val set_paths: t -> string list ts_MapLike -> unit [@@js.set "paths"]
    val get_preserveConstEnums: t -> bool [@@js.get "preserveConstEnums"]
    val set_preserveConstEnums: t -> bool -> unit [@@js.set "preserveConstEnums"]
    val get_preserveSymlinks: t -> bool [@@js.get "preserveSymlinks"]
    val set_preserveSymlinks: t -> bool -> unit [@@js.set "preserveSymlinks"]
    val get_project: t -> string [@@js.get "project"]
    val set_project: t -> string -> unit [@@js.set "project"]
    val get_reactNamespace: t -> string [@@js.get "reactNamespace"]
    val set_reactNamespace: t -> string -> unit [@@js.set "reactNamespace"]
    val get_jsxFactory: t -> string [@@js.get "jsxFactory"]
    val set_jsxFactory: t -> string -> unit [@@js.set "jsxFactory"]
    val get_jsxFragmentFactory: t -> string [@@js.get "jsxFragmentFactory"]
    val set_jsxFragmentFactory: t -> string -> unit [@@js.set "jsxFragmentFactory"]
    val get_jsxImportSource: t -> string [@@js.get "jsxImportSource"]
    val set_jsxImportSource: t -> string -> unit [@@js.set "jsxImportSource"]
    val get_composite: t -> bool [@@js.get "composite"]
    val set_composite: t -> bool -> unit [@@js.set "composite"]
    val get_incremental: t -> bool [@@js.get "incremental"]
    val set_incremental: t -> bool -> unit [@@js.set "incremental"]
    val get_tsBuildInfoFile: t -> string [@@js.get "tsBuildInfoFile"]
    val set_tsBuildInfoFile: t -> string -> unit [@@js.set "tsBuildInfoFile"]
    val get_removeComments: t -> bool [@@js.get "removeComments"]
    val set_removeComments: t -> bool -> unit [@@js.set "removeComments"]
    val get_rootDir: t -> string [@@js.get "rootDir"]
    val set_rootDir: t -> string -> unit [@@js.set "rootDir"]
    val get_rootDirs: t -> string list [@@js.get "rootDirs"]
    val set_rootDirs: t -> string list -> unit [@@js.set "rootDirs"]
    val get_skipLibCheck: t -> bool [@@js.get "skipLibCheck"]
    val set_skipLibCheck: t -> bool -> unit [@@js.set "skipLibCheck"]
    val get_skipDefaultLibCheck: t -> bool [@@js.get "skipDefaultLibCheck"]
    val set_skipDefaultLibCheck: t -> bool -> unit [@@js.set "skipDefaultLibCheck"]
    val get_sourceMap: t -> bool [@@js.get "sourceMap"]
    val set_sourceMap: t -> bool -> unit [@@js.set "sourceMap"]
    val get_sourceRoot: t -> string [@@js.get "sourceRoot"]
    val set_sourceRoot: t -> string -> unit [@@js.set "sourceRoot"]
    val get_strict: t -> bool [@@js.get "strict"]
    val set_strict: t -> bool -> unit [@@js.set "strict"]
    val get_strictFunctionTypes: t -> bool [@@js.get "strictFunctionTypes"]
    val set_strictFunctionTypes: t -> bool -> unit [@@js.set "strictFunctionTypes"]
    val get_strictBindCallApply: t -> bool [@@js.get "strictBindCallApply"]
    val set_strictBindCallApply: t -> bool -> unit [@@js.set "strictBindCallApply"]
    val get_strictNullChecks: t -> bool [@@js.get "strictNullChecks"]
    val set_strictNullChecks: t -> bool -> unit [@@js.set "strictNullChecks"]
    val get_strictPropertyInitialization: t -> bool [@@js.get "strictPropertyInitialization"]
    val set_strictPropertyInitialization: t -> bool -> unit [@@js.set "strictPropertyInitialization"]
    val get_stripInternal: t -> bool [@@js.get "stripInternal"]
    val set_stripInternal: t -> bool -> unit [@@js.set "stripInternal"]
    val get_suppressExcessPropertyErrors: t -> bool [@@js.get "suppressExcessPropertyErrors"]
    val set_suppressExcessPropertyErrors: t -> bool -> unit [@@js.set "suppressExcessPropertyErrors"]
    val get_suppressImplicitAnyIndexErrors: t -> bool [@@js.get "suppressImplicitAnyIndexErrors"]
    val set_suppressImplicitAnyIndexErrors: t -> bool -> unit [@@js.set "suppressImplicitAnyIndexErrors"]
    val get_target: t -> ts_ScriptTarget [@@js.get "target"]
    val set_target: t -> ts_ScriptTarget -> unit [@@js.set "target"]
    val get_traceResolution: t -> bool [@@js.get "traceResolution"]
    val set_traceResolution: t -> bool -> unit [@@js.set "traceResolution"]
    val get_resolveJsonModule: t -> bool [@@js.get "resolveJsonModule"]
    val set_resolveJsonModule: t -> bool -> unit [@@js.set "resolveJsonModule"]
    val get_types: t -> string list [@@js.get "types"]
    val set_types: t -> string list -> unit [@@js.set "types"]
    (** Paths used to compute primary types search locations *)
    (** Paths used to compute primary types search locations *)
    val get_typeRoots: t -> string list [@@js.get "typeRoots"]
    (** Paths used to compute primary types search locations *)
    val set_typeRoots: t -> string list -> unit [@@js.set "typeRoots"]
    val get_esModuleInterop: t -> bool [@@js.get "esModuleInterop"]
    val set_esModuleInterop: t -> bool -> unit [@@js.set "esModuleInterop"]
    val get_useDefineForClassFields: t -> bool [@@js.get "useDefineForClassFields"]
    val set_useDefineForClassFields: t -> bool -> unit [@@js.set "useDefineForClassFields"]
    val get: t -> string -> (ts_CompilerOptionsValue, ts_TsConfigSourceFile) union2 or_undefined [@@js.index_get]
    val set: t -> string -> (ts_CompilerOptionsValue, ts_TsConfigSourceFile) union2 or_undefined -> unit [@@js.index_set]
  end
  module[@js.scope "WatchOptions"] WatchOptions : sig
    type t = ts_WatchOptions
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_WatchOptions]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_WatchOptions]
    ]
    val get_watchFile: t -> ts_WatchFileKind [@@js.get "watchFile"]
    val set_watchFile: t -> ts_WatchFileKind -> unit [@@js.set "watchFile"]
    val get_watchDirectory: t -> ts_WatchDirectoryKind [@@js.get "watchDirectory"]
    val set_watchDirectory: t -> ts_WatchDirectoryKind -> unit [@@js.set "watchDirectory"]
    val get_fallbackPolling: t -> ts_PollingWatchKind [@@js.get "fallbackPolling"]
    val set_fallbackPolling: t -> ts_PollingWatchKind -> unit [@@js.set "fallbackPolling"]
    val get_synchronousWatchDirectory: t -> bool [@@js.get "synchronousWatchDirectory"]
    val set_synchronousWatchDirectory: t -> bool -> unit [@@js.set "synchronousWatchDirectory"]
    val get_excludeDirectories: t -> string list [@@js.get "excludeDirectories"]
    val set_excludeDirectories: t -> string list -> unit [@@js.set "excludeDirectories"]
    val get_excludeFiles: t -> string list [@@js.get "excludeFiles"]
    val set_excludeFiles: t -> string list -> unit [@@js.set "excludeFiles"]
    val get: t -> string -> ts_CompilerOptionsValue or_undefined [@@js.index_get]
    val set: t -> string -> ts_CompilerOptionsValue or_undefined -> unit [@@js.index_set]
  end
  module[@js.scope "TypeAcquisition"] TypeAcquisition : sig
    type t = ts_TypeAcquisition
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TypeAcquisition]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TypeAcquisition]
    ]
    (**
      @deprecated typingOptions.enableAutoDiscovery
      Use typeAcquisition.enable instead.
    *)
    (**
      @deprecated typingOptions.enableAutoDiscovery
      Use typeAcquisition.enable instead.
    *)
    val get_enableAutoDiscovery: t -> bool [@@js.get "enableAutoDiscovery"]
    (**
      @deprecated typingOptions.enableAutoDiscovery
      Use typeAcquisition.enable instead.
    *)
    val set_enableAutoDiscovery: t -> bool -> unit [@@js.set "enableAutoDiscovery"]
    val get_enable: t -> bool [@@js.get "enable"]
    val set_enable: t -> bool -> unit [@@js.set "enable"]
    val get_include: t -> string list [@@js.get "include"]
    val set_include: t -> string list -> unit [@@js.set "include"]
    val get_exclude: t -> string list [@@js.get "exclude"]
    val set_exclude: t -> string list -> unit [@@js.set "exclude"]
    val get_disableFilenameBasedTypeAcquisition: t -> bool [@@js.get "disableFilenameBasedTypeAcquisition"]
    val set_disableFilenameBasedTypeAcquisition: t -> bool -> unit [@@js.set "disableFilenameBasedTypeAcquisition"]
    val get: t -> string -> ts_CompilerOptionsValue or_undefined [@@js.index_get]
    val set: t -> string -> ts_CompilerOptionsValue or_undefined -> unit [@@js.index_set]
  end
  module ModuleKind : sig
    type t = ts_ModuleKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module JsxEmit : sig
    type t = ts_JsxEmit
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module ImportsNotUsedAsValues : sig
    type t = ts_ImportsNotUsedAsValues
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module NewLineKind : sig
    type t = ts_NewLineKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "LineAndCharacter"] LineAndCharacter : sig
    type t = ts_LineAndCharacter
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LineAndCharacter]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LineAndCharacter]
    ]
    (** 0-based. *)
    (** 0-based. *)
    val get_line: t -> float [@@js.get "line"]
    (** 0-based. *)
    val set_line: t -> float -> unit [@@js.set "line"]
    val get_character: t -> float [@@js.get "character"]
    val set_character: t -> float -> unit [@@js.set "character"]
  end
  module ScriptKind : sig
    type t = ts_ScriptKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module ScriptTarget : sig
    type t = ts_ScriptTarget
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module LanguageVariant : sig
    type t = ts_LanguageVariant
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  (** Either a parsed command line or a parsed tsconfig.json *)
  module[@js.scope "ParsedCommandLine"] ParsedCommandLine : sig
    type t = ts_ParsedCommandLine
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ParsedCommandLine]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ParsedCommandLine]
    ]
    val get_options: t -> ts_CompilerOptions [@@js.get "options"]
    val set_options: t -> ts_CompilerOptions -> unit [@@js.set "options"]
    val get_typeAcquisition: t -> ts_TypeAcquisition [@@js.get "typeAcquisition"]
    val set_typeAcquisition: t -> ts_TypeAcquisition -> unit [@@js.set "typeAcquisition"]
    val get_fileNames: t -> string list [@@js.get "fileNames"]
    val set_fileNames: t -> string list -> unit [@@js.set "fileNames"]
    val get_projectReferences: t -> ts_ProjectReference list [@@js.get "projectReferences"]
    val set_projectReferences: t -> ts_ProjectReference list -> unit [@@js.set "projectReferences"]
    val get_watchOptions: t -> ts_WatchOptions [@@js.get "watchOptions"]
    val set_watchOptions: t -> ts_WatchOptions -> unit [@@js.set "watchOptions"]
    val get_raw: t -> any [@@js.get "raw"]
    val set_raw: t -> any -> unit [@@js.set "raw"]
    val get_errors: t -> ts_Diagnostic list [@@js.get "errors"]
    val set_errors: t -> ts_Diagnostic list -> unit [@@js.set "errors"]
    val get_wildcardDirectories: t -> ts_WatchDirectoryFlags ts_MapLike [@@js.get "wildcardDirectories"]
    val set_wildcardDirectories: t -> ts_WatchDirectoryFlags ts_MapLike -> unit [@@js.set "wildcardDirectories"]
    val get_compileOnSave: t -> bool [@@js.get "compileOnSave"]
    val set_compileOnSave: t -> bool -> unit [@@js.set "compileOnSave"]
  end
  module WatchDirectoryFlags : sig
    type t = ts_WatchDirectoryFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "CreateProgramOptions"] CreateProgramOptions : sig
    type t = ts_CreateProgramOptions
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CreateProgramOptions]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CreateProgramOptions]
    ]
    val get_rootNames: t -> string list [@@js.get "rootNames"]
    val set_rootNames: t -> string list -> unit [@@js.set "rootNames"]
    val get_options: t -> ts_CompilerOptions [@@js.get "options"]
    val set_options: t -> ts_CompilerOptions -> unit [@@js.set "options"]
    val get_projectReferences: t -> ts_ProjectReference list [@@js.get "projectReferences"]
    val set_projectReferences: t -> ts_ProjectReference list -> unit [@@js.set "projectReferences"]
    val get_host: t -> ts_CompilerHost [@@js.get "host"]
    val set_host: t -> ts_CompilerHost -> unit [@@js.set "host"]
    val get_oldProgram: t -> ts_Program [@@js.get "oldProgram"]
    val set_oldProgram: t -> ts_Program -> unit [@@js.set "oldProgram"]
    val get_configFileParsingDiagnostics: t -> ts_Diagnostic list [@@js.get "configFileParsingDiagnostics"]
    val set_configFileParsingDiagnostics: t -> ts_Diagnostic list -> unit [@@js.set "configFileParsingDiagnostics"]
  end
  module[@js.scope "ModuleResolutionHost"] ModuleResolutionHost : sig
    type t = ts_ModuleResolutionHost
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ModuleResolutionHost]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ModuleResolutionHost]
    ]
    val fileExists: t -> fileName:string -> bool [@@js.call "fileExists"]
    val readFile: t -> fileName:string -> string or_undefined [@@js.call "readFile"]
    val trace: t -> s:string -> unit [@@js.call "trace"]
    val directoryExists: t -> directoryName:string -> bool [@@js.call "directoryExists"]
    (**
      Resolve a symbolic link.
      @see "https" ://nodejs.org/api/fs.html#fs_fs_realpathsync_path_options
    *)
    val realpath: t -> path:string -> string [@@js.call "realpath"]
    val getCurrentDirectory: t -> string [@@js.call "getCurrentDirectory"]
    val getDirectories: t -> path:string -> string list [@@js.call "getDirectories"]
  end
  (**
    Represents the result of module resolution.
    Module resolution will pick up tsx/jsx/js files even if '--jsx' and '--allowJs' are turned off.
    The Program will then filter results based on these flags.
    
    Prefer to return a `ResolvedModuleFull` so that the file type does not have to be inferred.
  *)
  module[@js.scope "ResolvedModule"] ResolvedModule : sig
    type t = ts_ResolvedModule
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ResolvedModule]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ResolvedModule]
    ]
    (** Path of the file the module was resolved to. *)
    (** Path of the file the module was resolved to. *)
    val get_resolvedFileName: t -> string [@@js.get "resolvedFileName"]
    (** Path of the file the module was resolved to. *)
    val set_resolvedFileName: t -> string -> unit [@@js.set "resolvedFileName"]
    (** True if `resolvedFileName` comes from `node_modules`. *)
    (** True if `resolvedFileName` comes from `node_modules`. *)
    val get_isExternalLibraryImport: t -> bool [@@js.get "isExternalLibraryImport"]
    (** True if `resolvedFileName` comes from `node_modules`. *)
    val set_isExternalLibraryImport: t -> bool -> unit [@@js.set "isExternalLibraryImport"]
  end
  (**
    ResolvedModule with an explicitly provided `extension` property.
    Prefer this over `ResolvedModule`.
    If changing this, remember to change `moduleResolutionIsEqualTo`.
  *)
  module[@js.scope "ResolvedModuleFull"] ResolvedModuleFull : sig
    type t = ts_ResolvedModuleFull
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ResolvedModule | `Ts_ResolvedModuleFull]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ResolvedModule | `Ts_ResolvedModuleFull]
    ]
    (**
      Extension of resolvedFileName. This must match what's at the end of resolvedFileName.
      This is optional for backwards-compatibility, but will be added if not provided.
    *)
    (**
      Extension of resolvedFileName. This must match what's at the end of resolvedFileName.
      This is optional for backwards-compatibility, but will be added if not provided.
    *)
    val get_extension: t -> ts_Extension [@@js.get "extension"]
    (**
      Extension of resolvedFileName. This must match what's at the end of resolvedFileName.
      This is optional for backwards-compatibility, but will be added if not provided.
    *)
    val set_extension: t -> ts_Extension -> unit [@@js.set "extension"]
    val get_packageId: t -> ts_PackageId [@@js.get "packageId"]
    val set_packageId: t -> ts_PackageId -> unit [@@js.set "packageId"]
    val cast: t -> ts_ResolvedModule [@@js.cast]
  end
  (**
    Unique identifier with a package name and version.
    If changing this, remember to change `packageIdIsEqual`.
  *)
  module[@js.scope "PackageId"] PackageId : sig
    type t = ts_PackageId
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PackageId]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PackageId]
    ]
    (**
      Name of the package.
      Should not include `\@types`.
      If accessing a non-index file, this should include its name e.g. "foo/bar".
    *)
    (**
      Name of the package.
      Should not include `\@types`.
      If accessing a non-index file, this should include its name e.g. "foo/bar".
    *)
    val get_name: t -> string [@@js.get "name"]
    (**
      Name of the package.
      Should not include `\@types`.
      If accessing a non-index file, this should include its name e.g. "foo/bar".
    *)
    val set_name: t -> string -> unit [@@js.set "name"]
    (**
      Name of a submodule within this package.
      May be "".
    *)
    (**
      Name of a submodule within this package.
      May be "".
    *)
    val get_subModuleName: t -> string [@@js.get "subModuleName"]
    (**
      Name of a submodule within this package.
      May be "".
    *)
    val set_subModuleName: t -> string -> unit [@@js.set "subModuleName"]
    (** Version of the package, e.g. "1.2.3" *)
    (** Version of the package, e.g. "1.2.3" *)
    val get_version: t -> string [@@js.get "version"]
    (** Version of the package, e.g. "1.2.3" *)
    val set_version: t -> string -> unit [@@js.set "version"]
  end
  module Extension : sig
    type t = ts_Extension
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "ResolvedModuleWithFailedLookupLocations"] ResolvedModuleWithFailedLookupLocations : sig
    type t = ts_ResolvedModuleWithFailedLookupLocations
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ResolvedModuleWithFailedLookupLocations]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ResolvedModuleWithFailedLookupLocations]
    ]
    val get_resolvedModule: t -> ts_ResolvedModuleFull or_undefined [@@js.get "resolvedModule"]
  end
  module[@js.scope "ResolvedTypeReferenceDirective"] ResolvedTypeReferenceDirective : sig
    type t = ts_ResolvedTypeReferenceDirective
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ResolvedTypeReferenceDirective]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ResolvedTypeReferenceDirective]
    ]
    val get_primary: t -> bool [@@js.get "primary"]
    val set_primary: t -> bool -> unit [@@js.set "primary"]
    val get_resolvedFileName: t -> string or_undefined [@@js.get "resolvedFileName"]
    val set_resolvedFileName: t -> string or_undefined -> unit [@@js.set "resolvedFileName"]
    val get_packageId: t -> ts_PackageId [@@js.get "packageId"]
    val set_packageId: t -> ts_PackageId -> unit [@@js.set "packageId"]
    (** True if `resolvedFileName` comes from `node_modules`. *)
    (** True if `resolvedFileName` comes from `node_modules`. *)
    val get_isExternalLibraryImport: t -> bool [@@js.get "isExternalLibraryImport"]
    (** True if `resolvedFileName` comes from `node_modules`. *)
    val set_isExternalLibraryImport: t -> bool -> unit [@@js.set "isExternalLibraryImport"]
  end
  module[@js.scope "ResolvedTypeReferenceDirectiveWithFailedLookupLocations"] ResolvedTypeReferenceDirectiveWithFailedLookupLocations : sig
    type t = ts_ResolvedTypeReferenceDirectiveWithFailedLookupLocations
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ResolvedTypeReferenceDirectiveWithFailedLookupLocations]
    ]
    val get_resolvedTypeReferenceDirective: t -> ts_ResolvedTypeReferenceDirective or_undefined [@@js.get "resolvedTypeReferenceDirective"]
    val get_failedLookupLocations: t -> string list [@@js.get "failedLookupLocations"]
  end
  module[@js.scope "CompilerHost"] CompilerHost : sig
    type t = ts_CompilerHost
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CompilerHost | `Ts_ModuleResolutionHost]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CompilerHost | `Ts_ModuleResolutionHost]
    ]
    val getSourceFile: t -> fileName:string -> languageVersion:ts_ScriptTarget -> ?onError:(message:string -> unit) -> ?shouldCreateNewSourceFile:bool -> unit -> ts_SourceFile or_undefined [@@js.call "getSourceFile"]
    val getSourceFileByPath: t -> fileName:string -> path:ts_Path -> languageVersion:ts_ScriptTarget -> ?onError:(message:string -> unit) -> ?shouldCreateNewSourceFile:bool -> unit -> ts_SourceFile or_undefined [@@js.call "getSourceFileByPath"]
    val getCancellationToken: t -> ts_CancellationToken [@@js.call "getCancellationToken"]
    val getDefaultLibFileName: t -> options:ts_CompilerOptions -> string [@@js.call "getDefaultLibFileName"]
    val getDefaultLibLocation: t -> string [@@js.call "getDefaultLibLocation"]
    val get_writeFile: t -> ts_WriteFileCallback [@@js.get "writeFile"]
    val set_writeFile: t -> ts_WriteFileCallback -> unit [@@js.set "writeFile"]
    val getCurrentDirectory: t -> string [@@js.call "getCurrentDirectory"]
    val getCanonicalFileName: t -> fileName:string -> string [@@js.call "getCanonicalFileName"]
    val useCaseSensitiveFileNames: t -> bool [@@js.call "useCaseSensitiveFileNames"]
    val getNewLine: t -> string [@@js.call "getNewLine"]
    val readDirectory: t -> rootDir:string -> extensions:string list -> excludes:string list or_undefined -> includes:string list -> ?depth:float -> unit -> string list [@@js.call "readDirectory"]
    val resolveModuleNames: t -> moduleNames:string list -> containingFile:string -> reusedNames:string list or_undefined -> redirectedReference:ts_ResolvedProjectReference or_undefined -> options:ts_CompilerOptions -> ts_ResolvedModule or_undefined list [@@js.call "resolveModuleNames"]
    (** This method is a companion for 'resolveModuleNames' and is used to resolve 'types' references to actual type declaration files *)
    val resolveTypeReferenceDirectives: t -> typeReferenceDirectiveNames:string list -> containingFile:string -> redirectedReference:ts_ResolvedProjectReference or_undefined -> options:ts_CompilerOptions -> ts_ResolvedTypeReferenceDirective or_undefined list [@@js.call "resolveTypeReferenceDirectives"]
    val getEnvironmentVariable: t -> name:string -> string or_undefined [@@js.call "getEnvironmentVariable"]
    val createHash: t -> data:string -> string [@@js.call "createHash"]
    val getParsedCommandLine: t -> fileName:string -> ts_ParsedCommandLine or_undefined [@@js.call "getParsedCommandLine"]
    val cast: t -> ts_ModuleResolutionHost [@@js.cast]
  end
  module[@js.scope "SourceMapRange"] SourceMapRange : sig
    type t = ts_SourceMapRange
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SourceMapRange | `Ts_TextRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SourceMapRange | `Ts_TextRange]
    ]
    val get_source: t -> ts_SourceMapSource [@@js.get "source"]
    val set_source: t -> ts_SourceMapSource -> unit [@@js.set "source"]
    val cast: t -> ts_TextRange [@@js.cast]
  end
  module[@js.scope "SourceMapSource"] SourceMapSource : sig
    type t = ts_SourceMapSource
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SourceMapSource]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SourceMapSource]
    ]
    val getLineAndCharacterOfPosition: t -> pos:float -> ts_LineAndCharacter [@@js.call "getLineAndCharacterOfPosition"]
    val get_fileName: t -> string [@@js.get "fileName"]
    val set_fileName: t -> string -> unit [@@js.set "fileName"]
    val get_text: t -> string [@@js.get "text"]
    val set_text: t -> string -> unit [@@js.set "text"]
    val skipTrivia: t -> pos:float -> float [@@js.call "skipTrivia"]
  end
  module EmitFlags : sig
    type t = ts_EmitFlags
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "EmitHelper"] EmitHelper : sig
    type t = ts_EmitHelper
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EmitHelper]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EmitHelper]
    ]
    val get_name: t -> string [@@js.get "name"]
    val get_scoped: t -> bool [@@js.get "scoped"]
    val get_text: t -> (node:ts_EmitHelperUniqueNameCallback -> string) or_string [@@js.get "text"]
    val get_priority: t -> float [@@js.get "priority"]
    val get_dependencies: t -> t list [@@js.get "dependencies"]
  end
  module[@js.scope "UnscopedEmitHelper"] UnscopedEmitHelper : sig
    type t = ts_UnscopedEmitHelper
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EmitHelper | `Ts_UnscopedEmitHelper]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EmitHelper | `Ts_UnscopedEmitHelper]
    ]
    val get_scoped: t -> ([`L_b_false[@js false]] [@js.enum]) [@@js.get "scoped"]
    val get_text: t -> string [@@js.get "text"]
    val cast: t -> ts_EmitHelper [@@js.cast]
  end
  module[@js.scope "EmitHelperUniqueNameCallback"] EmitHelperUniqueNameCallback : sig
    type t = ts_EmitHelperUniqueNameCallback
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EmitHelperUniqueNameCallback]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EmitHelperUniqueNameCallback]
    ]
    val apply: t -> name:string -> string [@@js.apply]
  end
  module EmitHint : sig
    type t = ts_EmitHint
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module OuterExpressionKinds : sig
    type t = ts_OuterExpressionKinds
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module TypeOfTag : sig
    type t = ts_TypeOfTag
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TypeOfTag]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TypeOfTag]
    ]
  end
  module[@js.scope "NodeFactory"] NodeFactory : sig
    type t = ts_NodeFactory
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_NodeFactory]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_NodeFactory]
    ]
    val createNodeArray: t -> ?elements:'T list -> ?hasTrailingComma:bool -> unit -> 'T ts_NodeArray [@@js.call "createNodeArray"]
    val createNumericLiteral: t -> value:string or_number -> ?numericLiteralFlags:ts_TokenFlags -> unit -> ts_NumericLiteral [@@js.call "createNumericLiteral"]
    val createBigIntLiteral: t -> value:ts_PseudoBigInt or_string -> ts_BigIntLiteral [@@js.call "createBigIntLiteral"]
    val createStringLiteral: t -> text:string -> ?isSingleQuote:bool -> unit -> ts_StringLiteral [@@js.call "createStringLiteral"]
    val createStringLiteralFromNode: t -> sourceNode:ts_PropertyNameLiteral -> ?isSingleQuote:bool -> unit -> ts_StringLiteral [@@js.call "createStringLiteralFromNode"]
    val createRegularExpressionLiteral: t -> text:string -> ts_RegularExpressionLiteral [@@js.call "createRegularExpressionLiteral"]
    val createIdentifier: t -> text:string -> ts_Identifier [@@js.call "createIdentifier"]
    (** Create a unique temporary variable. *)
    val createTempVariable: t -> recordTempVariable:(node:ts_Identifier -> unit) or_undefined -> ts_Identifier [@@js.call "createTempVariable"]
    (** Create a unique temporary variable for use in a loop. *)
    val createLoopVariable: t -> ts_Identifier [@@js.call "createLoopVariable"]
    (** Create a unique name based on the supplied text. *)
    val createUniqueName: t -> text:string -> ?flags:ts_GeneratedIdentifierFlags -> unit -> ts_Identifier [@@js.call "createUniqueName"]
    (** Create a unique name generated for a node. *)
    val getGeneratedNameForNode: t -> node:ts_Node or_undefined -> ts_Identifier [@@js.call "getGeneratedNameForNode"]
    val createPrivateIdentifier: t -> text:string -> ts_PrivateIdentifier [@@js.call "createPrivateIdentifier"]
    val createToken: t -> token:ts_SyntaxKind_SuperKeyword -> ts_SuperExpression [@@js.call "createToken"]
    val createToken': t -> token:ts_SyntaxKind_ThisKeyword -> ts_ThisExpression [@@js.call "createToken"]
    val createToken'': t -> token:ts_SyntaxKind_NullKeyword -> ts_NullLiteral [@@js.call "createToken"]
    val createToken''': t -> token:ts_SyntaxKind_TrueKeyword -> ts_TrueLiteral [@@js.call "createToken"]
    val createToken'''': t -> token:ts_SyntaxKind_FalseKeyword -> ts_FalseLiteral [@@js.call "createToken"]
    val createToken''''': t -> token:'TKind -> 'TKind ts_PunctuationToken [@@js.call "createToken"]
    val createToken'''''': t -> token:'TKind -> 'TKind ts_KeywordTypeNode [@@js.call "createToken"]
    val createToken''''''': t -> token:'TKind -> 'TKind ts_ModifierToken [@@js.call "createToken"]
    val createToken'''''''': t -> token:'TKind -> 'TKind ts_KeywordToken [@@js.call "createToken"]
    val createToken''''''''': t -> token:'TKind -> 'TKind ts_Token [@@js.call "createToken"]
    val createSuper: t -> ts_SuperExpression [@@js.call "createSuper"]
    val createThis: t -> ts_ThisExpression [@@js.call "createThis"]
    val createNull: t -> ts_NullLiteral [@@js.call "createNull"]
    val createTrue: t -> ts_TrueLiteral [@@js.call "createTrue"]
    val createFalse: t -> ts_FalseLiteral [@@js.call "createFalse"]
    val createModifier: t -> kind:'T -> 'T ts_ModifierToken [@@js.call "createModifier"]
    val createModifiersFromModifierFlags: t -> flags:ts_ModifierFlags -> ts_Modifier list [@@js.call "createModifiersFromModifierFlags"]
    val createQualifiedName: t -> left:ts_EntityName -> right:ts_Identifier or_string -> ts_QualifiedName [@@js.call "createQualifiedName"]
    val updateQualifiedName: t -> node:ts_QualifiedName -> left:ts_EntityName -> right:ts_Identifier -> ts_QualifiedName [@@js.call "updateQualifiedName"]
    val createComputedPropertyName: t -> expression:ts_Expression -> ts_ComputedPropertyName [@@js.call "createComputedPropertyName"]
    val updateComputedPropertyName: t -> node:ts_ComputedPropertyName -> expression:ts_Expression -> ts_ComputedPropertyName [@@js.call "updateComputedPropertyName"]
    val createTypeParameterDeclaration: t -> name:ts_Identifier or_string -> ?constraint_:ts_TypeNode -> ?defaultType:ts_TypeNode -> unit -> ts_TypeParameterDeclaration [@@js.call "createTypeParameterDeclaration"]
    val updateTypeParameterDeclaration: t -> node:ts_TypeParameterDeclaration -> name:ts_Identifier -> constraint_:ts_TypeNode or_undefined -> defaultType:ts_TypeNode or_undefined -> ts_TypeParameterDeclaration [@@js.call "updateTypeParameterDeclaration"]
    val createParameterDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> dotDotDotToken:ts_DotDotDotToken or_undefined -> name:ts_BindingName or_string -> ?questionToken:ts_QuestionToken -> ?type_:ts_TypeNode -> ?initializer_:ts_Expression -> unit -> ts_ParameterDeclaration [@@js.call "createParameterDeclaration"]
    val updateParameterDeclaration: t -> node:ts_ParameterDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> dotDotDotToken:ts_DotDotDotToken or_undefined -> name:ts_BindingName or_string -> questionToken:ts_QuestionToken or_undefined -> type_:ts_TypeNode or_undefined -> initializer_:ts_Expression or_undefined -> ts_ParameterDeclaration [@@js.call "updateParameterDeclaration"]
    val createDecorator: t -> expression:ts_Expression -> ts_Decorator [@@js.call "createDecorator"]
    val updateDecorator: t -> node:ts_Decorator -> expression:ts_Expression -> ts_Decorator [@@js.call "updateDecorator"]
    val createPropertySignature: t -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName or_string -> questionToken:ts_QuestionToken or_undefined -> type_:ts_TypeNode or_undefined -> ts_PropertySignature [@@js.call "createPropertySignature"]
    val updatePropertySignature: t -> node:ts_PropertySignature -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName -> questionToken:ts_QuestionToken or_undefined -> type_:ts_TypeNode or_undefined -> ts_PropertySignature [@@js.call "updatePropertySignature"]
    val createPropertyDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName or_string -> questionOrExclamationToken:([`U_n_53 of ts_ExclamationToken  | `U_n_57 of ts_QuestionToken ] [@js.union on_field "kind"]) or_undefined -> type_:ts_TypeNode or_undefined -> initializer_:ts_Expression or_undefined -> ts_PropertyDeclaration [@@js.call "createPropertyDeclaration"]
    val updatePropertyDeclaration: t -> node:ts_PropertyDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName or_string -> questionOrExclamationToken:([`U_n_53 of ts_ExclamationToken  | `U_n_57 of ts_QuestionToken ] [@js.union on_field "kind"]) or_undefined -> type_:ts_TypeNode or_undefined -> initializer_:ts_Expression or_undefined -> ts_PropertyDeclaration [@@js.call "updatePropertyDeclaration"]
    val createMethodSignature: t -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName or_string -> questionToken:ts_QuestionToken or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> ts_MethodSignature [@@js.call "createMethodSignature"]
    val updateMethodSignature: t -> node:ts_MethodSignature -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName -> questionToken:ts_QuestionToken or_undefined -> typeParameters:ts_TypeParameterDeclaration ts_NodeArray or_undefined -> parameters:ts_ParameterDeclaration ts_NodeArray -> type_:ts_TypeNode or_undefined -> ts_MethodSignature [@@js.call "updateMethodSignature"]
    val createMethodDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> asteriskToken:ts_AsteriskToken or_undefined -> name:ts_PropertyName or_string -> questionToken:ts_QuestionToken or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_Block or_undefined -> ts_MethodDeclaration [@@js.call "createMethodDeclaration"]
    val updateMethodDeclaration: t -> node:ts_MethodDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> asteriskToken:ts_AsteriskToken or_undefined -> name:ts_PropertyName -> questionToken:ts_QuestionToken or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_Block or_undefined -> ts_MethodDeclaration [@@js.call "updateMethodDeclaration"]
    val createConstructorDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> parameters:ts_ParameterDeclaration list -> body:ts_Block or_undefined -> ts_ConstructorDeclaration [@@js.call "createConstructorDeclaration"]
    val updateConstructorDeclaration: t -> node:ts_ConstructorDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> parameters:ts_ParameterDeclaration list -> body:ts_Block or_undefined -> ts_ConstructorDeclaration [@@js.call "updateConstructorDeclaration"]
    val createGetAccessorDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName or_string -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_Block or_undefined -> ts_GetAccessorDeclaration [@@js.call "createGetAccessorDeclaration"]
    val updateGetAccessorDeclaration: t -> node:ts_GetAccessorDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_Block or_undefined -> ts_GetAccessorDeclaration [@@js.call "updateGetAccessorDeclaration"]
    val createSetAccessorDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName or_string -> parameters:ts_ParameterDeclaration list -> body:ts_Block or_undefined -> ts_SetAccessorDeclaration [@@js.call "createSetAccessorDeclaration"]
    val updateSetAccessorDeclaration: t -> node:ts_SetAccessorDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName -> parameters:ts_ParameterDeclaration list -> body:ts_Block or_undefined -> ts_SetAccessorDeclaration [@@js.call "updateSetAccessorDeclaration"]
    val createCallSignature: t -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> ts_CallSignatureDeclaration [@@js.call "createCallSignature"]
    val updateCallSignature: t -> node:ts_CallSignatureDeclaration -> typeParameters:ts_TypeParameterDeclaration ts_NodeArray or_undefined -> parameters:ts_ParameterDeclaration ts_NodeArray -> type_:ts_TypeNode or_undefined -> ts_CallSignatureDeclaration [@@js.call "updateCallSignature"]
    val createConstructSignature: t -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> ts_ConstructSignatureDeclaration [@@js.call "createConstructSignature"]
    val updateConstructSignature: t -> node:ts_ConstructSignatureDeclaration -> typeParameters:ts_TypeParameterDeclaration ts_NodeArray or_undefined -> parameters:ts_ParameterDeclaration ts_NodeArray -> type_:ts_TypeNode or_undefined -> ts_ConstructSignatureDeclaration [@@js.call "updateConstructSignature"]
    val createIndexSignature: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode -> ts_IndexSignatureDeclaration [@@js.call "createIndexSignature"]
    val updateIndexSignature: t -> node:ts_IndexSignatureDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode -> ts_IndexSignatureDeclaration [@@js.call "updateIndexSignature"]
    val createTemplateLiteralTypeSpan: t -> type_:ts_TypeNode -> literal:([`U_n_16 of ts_TemplateMiddle  | `U_n_17 of ts_TemplateTail ] [@js.union on_field "kind"]) -> ts_TemplateLiteralTypeSpan [@@js.call "createTemplateLiteralTypeSpan"]
    val updateTemplateLiteralTypeSpan: t -> node:ts_TemplateLiteralTypeSpan -> type_:ts_TypeNode -> literal:([`U_n_16 of ts_TemplateMiddle  | `U_n_17 of ts_TemplateTail ] [@js.union on_field "kind"]) -> ts_TemplateLiteralTypeSpan [@@js.call "updateTemplateLiteralTypeSpan"]
    val createKeywordTypeNode: t -> kind:'TKind -> 'TKind ts_KeywordTypeNode [@@js.call "createKeywordTypeNode"]
    val createTypePredicateNode: t -> assertsModifier:ts_AssertsKeyword or_undefined -> parameterName:([`U_n_78 of ts_Identifier  | `U_n_187 of ts_ThisTypeNode ] [@js.union on_field "kind"]) or_string -> type_:ts_TypeNode or_undefined -> ts_TypePredicateNode [@@js.call "createTypePredicateNode"]
    val updateTypePredicateNode: t -> node:ts_TypePredicateNode -> assertsModifier:ts_AssertsKeyword or_undefined -> parameterName:([`U_n_78 of ts_Identifier  | `U_n_187 of ts_ThisTypeNode ] [@js.union on_field "kind"]) -> type_:ts_TypeNode or_undefined -> ts_TypePredicateNode [@@js.call "updateTypePredicateNode"]
    val createTypeReferenceNode: t -> typeName:ts_EntityName or_string -> ?typeArguments:ts_TypeNode list -> unit -> ts_TypeReferenceNode [@@js.call "createTypeReferenceNode"]
    val updateTypeReferenceNode: t -> node:ts_TypeReferenceNode -> typeName:ts_EntityName -> typeArguments:ts_TypeNode ts_NodeArray or_undefined -> ts_TypeReferenceNode [@@js.call "updateTypeReferenceNode"]
    val createFunctionTypeNode: t -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode -> ts_FunctionTypeNode [@@js.call "createFunctionTypeNode"]
    val updateFunctionTypeNode: t -> node:ts_FunctionTypeNode -> typeParameters:ts_TypeParameterDeclaration ts_NodeArray or_undefined -> parameters:ts_ParameterDeclaration ts_NodeArray -> type_:ts_TypeNode -> ts_FunctionTypeNode [@@js.call "updateFunctionTypeNode"]
    val createConstructorTypeNode: t -> modifiers:ts_Modifier list or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode -> ts_ConstructorTypeNode [@@js.call "createConstructorTypeNode"]
    (** @deprecated  *)
    val createConstructorTypeNode': t -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode -> ts_ConstructorTypeNode [@@js.call "createConstructorTypeNode"]
    val updateConstructorTypeNode: t -> node:ts_ConstructorTypeNode -> modifiers:ts_Modifier list or_undefined -> typeParameters:ts_TypeParameterDeclaration ts_NodeArray or_undefined -> parameters:ts_ParameterDeclaration ts_NodeArray -> type_:ts_TypeNode -> ts_ConstructorTypeNode [@@js.call "updateConstructorTypeNode"]
    (** @deprecated  *)
    val updateConstructorTypeNode': t -> node:ts_ConstructorTypeNode -> typeParameters:ts_TypeParameterDeclaration ts_NodeArray or_undefined -> parameters:ts_ParameterDeclaration ts_NodeArray -> type_:ts_TypeNode -> ts_ConstructorTypeNode [@@js.call "updateConstructorTypeNode"]
    val createTypeQueryNode: t -> exprName:ts_EntityName -> ts_TypeQueryNode [@@js.call "createTypeQueryNode"]
    val updateTypeQueryNode: t -> node:ts_TypeQueryNode -> exprName:ts_EntityName -> ts_TypeQueryNode [@@js.call "updateTypeQueryNode"]
    val createTypeLiteralNode: t -> members:ts_TypeElement list or_undefined -> ts_TypeLiteralNode [@@js.call "createTypeLiteralNode"]
    val updateTypeLiteralNode: t -> node:ts_TypeLiteralNode -> members:ts_TypeElement ts_NodeArray -> ts_TypeLiteralNode [@@js.call "updateTypeLiteralNode"]
    val createArrayTypeNode: t -> elementType:ts_TypeNode -> ts_ArrayTypeNode [@@js.call "createArrayTypeNode"]
    val updateArrayTypeNode: t -> node:ts_ArrayTypeNode -> elementType:ts_TypeNode -> ts_ArrayTypeNode [@@js.call "updateArrayTypeNode"]
    val createTupleTypeNode: t -> elements:([`U_n_0 of ts_TypeNode  | `U_n_1 of ts_TypeNode  | `U_n_2 of ts_TypeNode  | `U_n_3 of ts_TypeNode  | `U_n_4 of ts_TypeNode  | `U_n_5 of ts_TypeNode  | `U_n_6 of ts_TypeNode  | `U_n_7 of ts_TypeNode  | `U_n_8 of ts_TypeNode  | `U_n_9 of ts_TypeNode  | `U_n_10 of ts_TypeNode  | `U_n_11 of ts_TypeNode  | `U_n_12 of ts_TypeNode  | `U_n_13 of ts_TypeNode  | `U_n_14 of ts_TypeNode  | `U_n_15 of ts_TypeNode  | `U_n_16 of ts_TypeNode  | `U_n_17 of ts_TypeNode  | `U_n_18 of ts_TypeNode  | `U_n_19 of ts_TypeNode  | `U_n_20 of ts_TypeNode  | `U_n_21 of ts_TypeNode  | `U_n_22 of ts_TypeNode  | `U_n_23 of ts_TypeNode  | `U_n_24 of ts_TypeNode  | `U_n_25 of ts_TypeNode  | `U_n_26 of ts_TypeNode  | `U_n_27 of ts_TypeNode  | `U_n_28 of ts_TypeNode  | `U_n_29 of ts_TypeNode  | `U_n_30 of ts_TypeNode  | `U_n_31 of ts_TypeNode  | `U_n_32 of ts_TypeNode  | `U_n_33 of ts_TypeNode  | `U_n_34 of ts_TypeNode  | `U_n_35 of ts_TypeNode  | `U_n_36 of ts_TypeNode  | `U_n_37 of ts_TypeNode  | `U_n_38 of ts_TypeNode  | `U_n_39 of ts_TypeNode  | `U_n_40 of ts_TypeNode  | `U_n_41 of ts_TypeNode  | `U_n_42 of ts_TypeNode  | `U_n_43 of ts_TypeNode  | `U_n_44 of ts_TypeNode  | `U_n_45 of ts_TypeNode  | `U_n_46 of ts_TypeNode  | `U_n_47 of ts_TypeNode  | `U_n_48 of ts_TypeNode  | `U_n_49 of ts_TypeNode  | `U_n_50 of ts_TypeNode  | `U_n_51 of ts_TypeNode  | `U_n_52 of ts_TypeNode  | `U_n_53 of ts_TypeNode  | `U_n_54 of ts_TypeNode  | `U_n_55 of ts_TypeNode  | `U_n_56 of ts_TypeNode  | `U_n_57 of ts_TypeNode  | `U_n_58 of ts_TypeNode  | `U_n_59 of ts_TypeNode  | `U_n_60 of ts_TypeNode  | `U_n_61 of ts_TypeNode  | `U_n_62 of ts_TypeNode  | `U_n_63 of ts_TypeNode  | `U_n_64 of ts_TypeNode  | `U_n_65 of ts_TypeNode  | `U_n_66 of ts_TypeNode  | `U_n_67 of ts_TypeNode  | `U_n_68 of ts_TypeNode  | `U_n_69 of ts_TypeNode  | `U_n_70 of ts_TypeNode  | `U_n_71 of ts_TypeNode  | `U_n_72 of ts_TypeNode  | `U_n_73 of ts_TypeNode  | `U_n_74 of ts_TypeNode  | `U_n_75 of ts_TypeNode  | `U_n_76 of ts_TypeNode  | `U_n_77 of ts_TypeNode  | `U_n_78 of ts_TypeNode  | `U_n_79 of ts_TypeNode  | `U_n_80 of ts_TypeNode  | `U_n_81 of ts_TypeNode  | `U_n_82 of ts_TypeNode  | `U_n_83 of ts_TypeNode  | `U_n_84 of ts_TypeNode  | `U_n_85 of ts_TypeNode  | `U_n_86 of ts_TypeNode  | `U_n_87 of ts_TypeNode  | `U_n_88 of ts_TypeNode  | `U_n_89 of ts_TypeNode  | `U_n_90 of ts_TypeNode  | `U_n_91 of ts_TypeNode  | `U_n_92 of ts_TypeNode  | `U_n_93 of ts_TypeNode  | `U_n_94 of ts_TypeNode  | `U_n_95 of ts_TypeNode  | `U_n_96 of ts_TypeNode  | `U_n_97 of ts_TypeNode  | `U_n_98 of ts_TypeNode  | `U_n_99 of ts_TypeNode  | `U_n_100 of ts_TypeNode  | `U_n_101 of ts_TypeNode  | `U_n_102 of ts_TypeNode  | `U_n_103 of ts_TypeNode  | `U_n_104 of ts_TypeNode  | `U_n_105 of ts_TypeNode  | `U_n_106 of ts_TypeNode  | `U_n_107 of ts_TypeNode  | `U_n_108 of ts_TypeNode  | `U_n_109 of ts_TypeNode  | `U_n_110 of ts_TypeNode  | `U_n_111 of ts_TypeNode  | `U_n_112 of ts_TypeNode  | `U_n_113 of ts_TypeNode  | `U_n_114 of ts_TypeNode  | `U_n_115 of ts_TypeNode  | `U_n_116 of ts_TypeNode  | `U_n_117 of ts_TypeNode  | `U_n_118 of ts_TypeNode  | `U_n_119 of ts_TypeNode  | `U_n_120 of ts_TypeNode  | `U_n_121 of ts_TypeNode  | `U_n_122 of ts_TypeNode  | `U_n_123 of ts_TypeNode  | `U_n_124 of ts_TypeNode  | `U_n_125 of ts_TypeNode  | `U_n_126 of ts_TypeNode  | `U_n_127 of ts_TypeNode  | `U_n_128 of ts_TypeNode  | `U_n_129 of ts_TypeNode  | `U_n_130 of ts_TypeNode  | `U_n_131 of ts_TypeNode  | `U_n_132 of ts_TypeNode  | `U_n_133 of ts_TypeNode  | `U_n_134 of ts_TypeNode  | `U_n_135 of ts_TypeNode  | `U_n_136 of ts_TypeNode  | `U_n_137 of ts_TypeNode  | `U_n_138 of ts_TypeNode  | `U_n_139 of ts_TypeNode  | `U_n_140 of ts_TypeNode  | `U_n_141 of ts_TypeNode  | `U_n_142 of ts_TypeNode  | `U_n_143 of ts_TypeNode  | `U_n_144 of ts_TypeNode  | `U_n_145 of ts_TypeNode  | `U_n_146 of ts_TypeNode  | `U_n_147 of ts_TypeNode  | `U_n_148 of ts_TypeNode  | `U_n_149 of ts_TypeNode  | `U_n_150 of ts_TypeNode  | `U_n_151 of ts_TypeNode  | `U_n_152 of ts_TypeNode  | `U_n_153 of ts_TypeNode  | `U_n_154 of ts_TypeNode  | `U_n_155 of ts_TypeNode  | `U_n_156 of ts_TypeNode  | `U_n_157 of ts_TypeNode  | `U_n_158 of ts_TypeNode  | `U_n_159 of ts_TypeNode  | `U_n_160 of ts_TypeNode  | `U_n_161 of ts_TypeNode  | `U_n_162 of ts_TypeNode  | `U_n_163 of ts_TypeNode  | `U_n_164 of ts_TypeNode  | `U_n_165 of ts_TypeNode  | `U_n_166 of ts_TypeNode  | `U_n_167 of ts_TypeNode  | `U_n_168 of ts_TypeNode  | `U_n_169 of ts_TypeNode  | `U_n_170 of ts_TypeNode  | `U_n_171 of ts_TypeNode  | `U_n_172 of ts_TypeNode  | `U_n_173 of ts_TypeNode  | `U_n_174 of ts_TypeNode  | `U_n_175 of ts_TypeNode  | `U_n_176 of ts_TypeNode  | `U_n_177 of ts_TypeNode  | `U_n_178 of ts_TypeNode  | `U_n_179 of ts_TypeNode  | `U_n_180 of ts_TypeNode  | `U_n_181 of ts_TypeNode  | `U_n_182 of ts_TypeNode  | `U_n_183 of ts_TypeNode  | `U_n_184 of ts_TypeNode  | `U_n_185 of ts_TypeNode  | `U_n_186 of ts_TypeNode  | `U_n_187 of ts_TypeNode  | `U_n_188 of ts_TypeNode  | `U_n_189 of ts_TypeNode  | `U_n_190 of ts_TypeNode  | `U_n_191 of ts_TypeNode  | `U_n_192 of (ts_TypeNode, ts_NamedTupleMember) union2  | `U_n_193 of ts_TypeNode  | `U_n_194 of ts_TypeNode  | `U_n_195 of ts_TypeNode  | `U_n_196 of ts_TypeNode  | `U_n_197 of ts_TypeNode  | `U_n_198 of ts_TypeNode  | `U_n_199 of ts_TypeNode  | `U_n_200 of ts_TypeNode  | `U_n_201 of ts_TypeNode  | `U_n_202 of ts_TypeNode  | `U_n_203 of ts_TypeNode  | `U_n_204 of ts_TypeNode  | `U_n_205 of ts_TypeNode  | `U_n_206 of ts_TypeNode  | `U_n_207 of ts_TypeNode  | `U_n_208 of ts_TypeNode  | `U_n_209 of ts_TypeNode  | `U_n_210 of ts_TypeNode  | `U_n_211 of ts_TypeNode  | `U_n_212 of ts_TypeNode  | `U_n_213 of ts_TypeNode  | `U_n_214 of ts_TypeNode  | `U_n_215 of ts_TypeNode  | `U_n_216 of ts_TypeNode  | `U_n_217 of ts_TypeNode  | `U_n_218 of ts_TypeNode  | `U_n_219 of ts_TypeNode  | `U_n_220 of ts_TypeNode  | `U_n_221 of ts_TypeNode  | `U_n_222 of ts_TypeNode  | `U_n_223 of ts_TypeNode  | `U_n_224 of ts_TypeNode  | `U_n_225 of ts_TypeNode  | `U_n_226 of ts_TypeNode  | `U_n_227 of ts_TypeNode  | `U_n_228 of ts_TypeNode  | `U_n_229 of ts_TypeNode  | `U_n_230 of ts_TypeNode  | `U_n_231 of ts_TypeNode  | `U_n_232 of ts_TypeNode  | `U_n_233 of ts_TypeNode  | `U_n_234 of ts_TypeNode  | `U_n_235 of ts_TypeNode  | `U_n_236 of ts_TypeNode  | `U_n_237 of ts_TypeNode  | `U_n_238 of ts_TypeNode  | `U_n_239 of ts_TypeNode  | `U_n_240 of ts_TypeNode  | `U_n_241 of ts_TypeNode  | `U_n_242 of ts_TypeNode  | `U_n_243 of ts_TypeNode  | `U_n_244 of ts_TypeNode  | `U_n_245 of ts_TypeNode  | `U_n_246 of ts_TypeNode  | `U_n_247 of ts_TypeNode  | `U_n_248 of ts_TypeNode  | `U_n_249 of ts_TypeNode  | `U_n_250 of ts_TypeNode  | `U_n_251 of ts_TypeNode  | `U_n_252 of ts_TypeNode  | `U_n_253 of ts_TypeNode  | `U_n_254 of ts_TypeNode  | `U_n_255 of ts_TypeNode  | `U_n_256 of ts_TypeNode  | `U_n_257 of ts_TypeNode  | `U_n_258 of ts_TypeNode  | `U_n_259 of ts_TypeNode  | `U_n_260 of ts_TypeNode  | `U_n_261 of ts_TypeNode  | `U_n_262 of ts_TypeNode  | `U_n_263 of ts_TypeNode  | `U_n_264 of ts_TypeNode  | `U_n_265 of ts_TypeNode  | `U_n_266 of ts_TypeNode  | `U_n_267 of ts_TypeNode  | `U_n_268 of ts_TypeNode  | `U_n_269 of ts_TypeNode  | `U_n_270 of ts_TypeNode  | `U_n_271 of ts_TypeNode  | `U_n_272 of ts_TypeNode  | `U_n_273 of ts_TypeNode  | `U_n_274 of ts_TypeNode  | `U_n_275 of ts_TypeNode  | `U_n_276 of ts_TypeNode  | `U_n_277 of ts_TypeNode  | `U_n_278 of ts_TypeNode  | `U_n_279 of ts_TypeNode  | `U_n_280 of ts_TypeNode  | `U_n_281 of ts_TypeNode  | `U_n_282 of ts_TypeNode  | `U_n_283 of ts_TypeNode  | `U_n_284 of ts_TypeNode  | `U_n_285 of ts_TypeNode  | `U_n_286 of ts_TypeNode  | `U_n_287 of ts_TypeNode  | `U_n_288 of ts_TypeNode  | `U_n_289 of ts_TypeNode  | `U_n_290 of ts_TypeNode  | `U_n_291 of ts_TypeNode  | `U_n_292 of ts_TypeNode  | `U_n_293 of ts_TypeNode  | `U_n_294 of ts_TypeNode  | `U_n_295 of ts_TypeNode  | `U_n_296 of ts_TypeNode  | `U_n_297 of ts_TypeNode  | `U_n_298 of ts_TypeNode  | `U_n_299 of ts_TypeNode  | `U_n_300 of ts_TypeNode  | `U_n_301 of ts_TypeNode  | `U_n_302 of ts_TypeNode  | `U_n_303 of ts_TypeNode  | `U_n_304 of ts_TypeNode  | `U_n_305 of ts_TypeNode  | `U_n_306 of ts_TypeNode  | `U_n_307 of ts_TypeNode  | `U_n_308 of ts_TypeNode  | `U_n_309 of ts_TypeNode  | `U_n_310 of ts_TypeNode  | `U_n_311 of ts_TypeNode  | `U_n_312 of ts_TypeNode  | `U_n_313 of ts_TypeNode  | `U_n_314 of ts_TypeNode  | `U_n_315 of ts_TypeNode  | `U_n_316 of ts_TypeNode  | `U_n_317 of ts_TypeNode  | `U_n_318 of ts_TypeNode  | `U_n_319 of ts_TypeNode  | `U_n_320 of ts_TypeNode  | `U_n_321 of ts_TypeNode  | `U_n_322 of ts_TypeNode  | `U_n_323 of ts_TypeNode  | `U_n_324 of ts_TypeNode  | `U_n_325 of ts_TypeNode  | `U_n_326 of ts_TypeNode  | `U_n_327 of ts_TypeNode  | `U_n_328 of ts_TypeNode  | `U_n_329 of ts_TypeNode  | `U_n_330 of ts_TypeNode  | `U_n_331 of ts_TypeNode  | `U_n_332 of ts_TypeNode  | `U_n_333 of ts_TypeNode  | `U_n_334 of ts_TypeNode  | `U_n_335 of ts_TypeNode  | `U_n_336 of ts_TypeNode  | `U_n_337 of ts_TypeNode  | `U_n_338 of ts_TypeNode  | `U_n_339 of ts_TypeNode  | `U_n_340 of ts_TypeNode  | `U_n_341 of ts_TypeNode ] [@js.union on_field "kind"]) list -> ts_TupleTypeNode [@@js.call "createTupleTypeNode"]
    val updateTupleTypeNode: t -> node:ts_TupleTypeNode -> elements:([`U_n_0 of ts_TypeNode  | `U_n_1 of ts_TypeNode  | `U_n_2 of ts_TypeNode  | `U_n_3 of ts_TypeNode  | `U_n_4 of ts_TypeNode  | `U_n_5 of ts_TypeNode  | `U_n_6 of ts_TypeNode  | `U_n_7 of ts_TypeNode  | `U_n_8 of ts_TypeNode  | `U_n_9 of ts_TypeNode  | `U_n_10 of ts_TypeNode  | `U_n_11 of ts_TypeNode  | `U_n_12 of ts_TypeNode  | `U_n_13 of ts_TypeNode  | `U_n_14 of ts_TypeNode  | `U_n_15 of ts_TypeNode  | `U_n_16 of ts_TypeNode  | `U_n_17 of ts_TypeNode  | `U_n_18 of ts_TypeNode  | `U_n_19 of ts_TypeNode  | `U_n_20 of ts_TypeNode  | `U_n_21 of ts_TypeNode  | `U_n_22 of ts_TypeNode  | `U_n_23 of ts_TypeNode  | `U_n_24 of ts_TypeNode  | `U_n_25 of ts_TypeNode  | `U_n_26 of ts_TypeNode  | `U_n_27 of ts_TypeNode  | `U_n_28 of ts_TypeNode  | `U_n_29 of ts_TypeNode  | `U_n_30 of ts_TypeNode  | `U_n_31 of ts_TypeNode  | `U_n_32 of ts_TypeNode  | `U_n_33 of ts_TypeNode  | `U_n_34 of ts_TypeNode  | `U_n_35 of ts_TypeNode  | `U_n_36 of ts_TypeNode  | `U_n_37 of ts_TypeNode  | `U_n_38 of ts_TypeNode  | `U_n_39 of ts_TypeNode  | `U_n_40 of ts_TypeNode  | `U_n_41 of ts_TypeNode  | `U_n_42 of ts_TypeNode  | `U_n_43 of ts_TypeNode  | `U_n_44 of ts_TypeNode  | `U_n_45 of ts_TypeNode  | `U_n_46 of ts_TypeNode  | `U_n_47 of ts_TypeNode  | `U_n_48 of ts_TypeNode  | `U_n_49 of ts_TypeNode  | `U_n_50 of ts_TypeNode  | `U_n_51 of ts_TypeNode  | `U_n_52 of ts_TypeNode  | `U_n_53 of ts_TypeNode  | `U_n_54 of ts_TypeNode  | `U_n_55 of ts_TypeNode  | `U_n_56 of ts_TypeNode  | `U_n_57 of ts_TypeNode  | `U_n_58 of ts_TypeNode  | `U_n_59 of ts_TypeNode  | `U_n_60 of ts_TypeNode  | `U_n_61 of ts_TypeNode  | `U_n_62 of ts_TypeNode  | `U_n_63 of ts_TypeNode  | `U_n_64 of ts_TypeNode  | `U_n_65 of ts_TypeNode  | `U_n_66 of ts_TypeNode  | `U_n_67 of ts_TypeNode  | `U_n_68 of ts_TypeNode  | `U_n_69 of ts_TypeNode  | `U_n_70 of ts_TypeNode  | `U_n_71 of ts_TypeNode  | `U_n_72 of ts_TypeNode  | `U_n_73 of ts_TypeNode  | `U_n_74 of ts_TypeNode  | `U_n_75 of ts_TypeNode  | `U_n_76 of ts_TypeNode  | `U_n_77 of ts_TypeNode  | `U_n_78 of ts_TypeNode  | `U_n_79 of ts_TypeNode  | `U_n_80 of ts_TypeNode  | `U_n_81 of ts_TypeNode  | `U_n_82 of ts_TypeNode  | `U_n_83 of ts_TypeNode  | `U_n_84 of ts_TypeNode  | `U_n_85 of ts_TypeNode  | `U_n_86 of ts_TypeNode  | `U_n_87 of ts_TypeNode  | `U_n_88 of ts_TypeNode  | `U_n_89 of ts_TypeNode  | `U_n_90 of ts_TypeNode  | `U_n_91 of ts_TypeNode  | `U_n_92 of ts_TypeNode  | `U_n_93 of ts_TypeNode  | `U_n_94 of ts_TypeNode  | `U_n_95 of ts_TypeNode  | `U_n_96 of ts_TypeNode  | `U_n_97 of ts_TypeNode  | `U_n_98 of ts_TypeNode  | `U_n_99 of ts_TypeNode  | `U_n_100 of ts_TypeNode  | `U_n_101 of ts_TypeNode  | `U_n_102 of ts_TypeNode  | `U_n_103 of ts_TypeNode  | `U_n_104 of ts_TypeNode  | `U_n_105 of ts_TypeNode  | `U_n_106 of ts_TypeNode  | `U_n_107 of ts_TypeNode  | `U_n_108 of ts_TypeNode  | `U_n_109 of ts_TypeNode  | `U_n_110 of ts_TypeNode  | `U_n_111 of ts_TypeNode  | `U_n_112 of ts_TypeNode  | `U_n_113 of ts_TypeNode  | `U_n_114 of ts_TypeNode  | `U_n_115 of ts_TypeNode  | `U_n_116 of ts_TypeNode  | `U_n_117 of ts_TypeNode  | `U_n_118 of ts_TypeNode  | `U_n_119 of ts_TypeNode  | `U_n_120 of ts_TypeNode  | `U_n_121 of ts_TypeNode  | `U_n_122 of ts_TypeNode  | `U_n_123 of ts_TypeNode  | `U_n_124 of ts_TypeNode  | `U_n_125 of ts_TypeNode  | `U_n_126 of ts_TypeNode  | `U_n_127 of ts_TypeNode  | `U_n_128 of ts_TypeNode  | `U_n_129 of ts_TypeNode  | `U_n_130 of ts_TypeNode  | `U_n_131 of ts_TypeNode  | `U_n_132 of ts_TypeNode  | `U_n_133 of ts_TypeNode  | `U_n_134 of ts_TypeNode  | `U_n_135 of ts_TypeNode  | `U_n_136 of ts_TypeNode  | `U_n_137 of ts_TypeNode  | `U_n_138 of ts_TypeNode  | `U_n_139 of ts_TypeNode  | `U_n_140 of ts_TypeNode  | `U_n_141 of ts_TypeNode  | `U_n_142 of ts_TypeNode  | `U_n_143 of ts_TypeNode  | `U_n_144 of ts_TypeNode  | `U_n_145 of ts_TypeNode  | `U_n_146 of ts_TypeNode  | `U_n_147 of ts_TypeNode  | `U_n_148 of ts_TypeNode  | `U_n_149 of ts_TypeNode  | `U_n_150 of ts_TypeNode  | `U_n_151 of ts_TypeNode  | `U_n_152 of ts_TypeNode  | `U_n_153 of ts_TypeNode  | `U_n_154 of ts_TypeNode  | `U_n_155 of ts_TypeNode  | `U_n_156 of ts_TypeNode  | `U_n_157 of ts_TypeNode  | `U_n_158 of ts_TypeNode  | `U_n_159 of ts_TypeNode  | `U_n_160 of ts_TypeNode  | `U_n_161 of ts_TypeNode  | `U_n_162 of ts_TypeNode  | `U_n_163 of ts_TypeNode  | `U_n_164 of ts_TypeNode  | `U_n_165 of ts_TypeNode  | `U_n_166 of ts_TypeNode  | `U_n_167 of ts_TypeNode  | `U_n_168 of ts_TypeNode  | `U_n_169 of ts_TypeNode  | `U_n_170 of ts_TypeNode  | `U_n_171 of ts_TypeNode  | `U_n_172 of ts_TypeNode  | `U_n_173 of ts_TypeNode  | `U_n_174 of ts_TypeNode  | `U_n_175 of ts_TypeNode  | `U_n_176 of ts_TypeNode  | `U_n_177 of ts_TypeNode  | `U_n_178 of ts_TypeNode  | `U_n_179 of ts_TypeNode  | `U_n_180 of ts_TypeNode  | `U_n_181 of ts_TypeNode  | `U_n_182 of ts_TypeNode  | `U_n_183 of ts_TypeNode  | `U_n_184 of ts_TypeNode  | `U_n_185 of ts_TypeNode  | `U_n_186 of ts_TypeNode  | `U_n_187 of ts_TypeNode  | `U_n_188 of ts_TypeNode  | `U_n_189 of ts_TypeNode  | `U_n_190 of ts_TypeNode  | `U_n_191 of ts_TypeNode  | `U_n_192 of (ts_TypeNode, ts_NamedTupleMember) union2  | `U_n_193 of ts_TypeNode  | `U_n_194 of ts_TypeNode  | `U_n_195 of ts_TypeNode  | `U_n_196 of ts_TypeNode  | `U_n_197 of ts_TypeNode  | `U_n_198 of ts_TypeNode  | `U_n_199 of ts_TypeNode  | `U_n_200 of ts_TypeNode  | `U_n_201 of ts_TypeNode  | `U_n_202 of ts_TypeNode  | `U_n_203 of ts_TypeNode  | `U_n_204 of ts_TypeNode  | `U_n_205 of ts_TypeNode  | `U_n_206 of ts_TypeNode  | `U_n_207 of ts_TypeNode  | `U_n_208 of ts_TypeNode  | `U_n_209 of ts_TypeNode  | `U_n_210 of ts_TypeNode  | `U_n_211 of ts_TypeNode  | `U_n_212 of ts_TypeNode  | `U_n_213 of ts_TypeNode  | `U_n_214 of ts_TypeNode  | `U_n_215 of ts_TypeNode  | `U_n_216 of ts_TypeNode  | `U_n_217 of ts_TypeNode  | `U_n_218 of ts_TypeNode  | `U_n_219 of ts_TypeNode  | `U_n_220 of ts_TypeNode  | `U_n_221 of ts_TypeNode  | `U_n_222 of ts_TypeNode  | `U_n_223 of ts_TypeNode  | `U_n_224 of ts_TypeNode  | `U_n_225 of ts_TypeNode  | `U_n_226 of ts_TypeNode  | `U_n_227 of ts_TypeNode  | `U_n_228 of ts_TypeNode  | `U_n_229 of ts_TypeNode  | `U_n_230 of ts_TypeNode  | `U_n_231 of ts_TypeNode  | `U_n_232 of ts_TypeNode  | `U_n_233 of ts_TypeNode  | `U_n_234 of ts_TypeNode  | `U_n_235 of ts_TypeNode  | `U_n_236 of ts_TypeNode  | `U_n_237 of ts_TypeNode  | `U_n_238 of ts_TypeNode  | `U_n_239 of ts_TypeNode  | `U_n_240 of ts_TypeNode  | `U_n_241 of ts_TypeNode  | `U_n_242 of ts_TypeNode  | `U_n_243 of ts_TypeNode  | `U_n_244 of ts_TypeNode  | `U_n_245 of ts_TypeNode  | `U_n_246 of ts_TypeNode  | `U_n_247 of ts_TypeNode  | `U_n_248 of ts_TypeNode  | `U_n_249 of ts_TypeNode  | `U_n_250 of ts_TypeNode  | `U_n_251 of ts_TypeNode  | `U_n_252 of ts_TypeNode  | `U_n_253 of ts_TypeNode  | `U_n_254 of ts_TypeNode  | `U_n_255 of ts_TypeNode  | `U_n_256 of ts_TypeNode  | `U_n_257 of ts_TypeNode  | `U_n_258 of ts_TypeNode  | `U_n_259 of ts_TypeNode  | `U_n_260 of ts_TypeNode  | `U_n_261 of ts_TypeNode  | `U_n_262 of ts_TypeNode  | `U_n_263 of ts_TypeNode  | `U_n_264 of ts_TypeNode  | `U_n_265 of ts_TypeNode  | `U_n_266 of ts_TypeNode  | `U_n_267 of ts_TypeNode  | `U_n_268 of ts_TypeNode  | `U_n_269 of ts_TypeNode  | `U_n_270 of ts_TypeNode  | `U_n_271 of ts_TypeNode  | `U_n_272 of ts_TypeNode  | `U_n_273 of ts_TypeNode  | `U_n_274 of ts_TypeNode  | `U_n_275 of ts_TypeNode  | `U_n_276 of ts_TypeNode  | `U_n_277 of ts_TypeNode  | `U_n_278 of ts_TypeNode  | `U_n_279 of ts_TypeNode  | `U_n_280 of ts_TypeNode  | `U_n_281 of ts_TypeNode  | `U_n_282 of ts_TypeNode  | `U_n_283 of ts_TypeNode  | `U_n_284 of ts_TypeNode  | `U_n_285 of ts_TypeNode  | `U_n_286 of ts_TypeNode  | `U_n_287 of ts_TypeNode  | `U_n_288 of ts_TypeNode  | `U_n_289 of ts_TypeNode  | `U_n_290 of ts_TypeNode  | `U_n_291 of ts_TypeNode  | `U_n_292 of ts_TypeNode  | `U_n_293 of ts_TypeNode  | `U_n_294 of ts_TypeNode  | `U_n_295 of ts_TypeNode  | `U_n_296 of ts_TypeNode  | `U_n_297 of ts_TypeNode  | `U_n_298 of ts_TypeNode  | `U_n_299 of ts_TypeNode  | `U_n_300 of ts_TypeNode  | `U_n_301 of ts_TypeNode  | `U_n_302 of ts_TypeNode  | `U_n_303 of ts_TypeNode  | `U_n_304 of ts_TypeNode  | `U_n_305 of ts_TypeNode  | `U_n_306 of ts_TypeNode  | `U_n_307 of ts_TypeNode  | `U_n_308 of ts_TypeNode  | `U_n_309 of ts_TypeNode  | `U_n_310 of ts_TypeNode  | `U_n_311 of ts_TypeNode  | `U_n_312 of ts_TypeNode  | `U_n_313 of ts_TypeNode  | `U_n_314 of ts_TypeNode  | `U_n_315 of ts_TypeNode  | `U_n_316 of ts_TypeNode  | `U_n_317 of ts_TypeNode  | `U_n_318 of ts_TypeNode  | `U_n_319 of ts_TypeNode  | `U_n_320 of ts_TypeNode  | `U_n_321 of ts_TypeNode  | `U_n_322 of ts_TypeNode  | `U_n_323 of ts_TypeNode  | `U_n_324 of ts_TypeNode  | `U_n_325 of ts_TypeNode  | `U_n_326 of ts_TypeNode  | `U_n_327 of ts_TypeNode  | `U_n_328 of ts_TypeNode  | `U_n_329 of ts_TypeNode  | `U_n_330 of ts_TypeNode  | `U_n_331 of ts_TypeNode  | `U_n_332 of ts_TypeNode  | `U_n_333 of ts_TypeNode  | `U_n_334 of ts_TypeNode  | `U_n_335 of ts_TypeNode  | `U_n_336 of ts_TypeNode  | `U_n_337 of ts_TypeNode  | `U_n_338 of ts_TypeNode  | `U_n_339 of ts_TypeNode  | `U_n_340 of ts_TypeNode  | `U_n_341 of ts_TypeNode ] [@js.union on_field "kind"]) list -> ts_TupleTypeNode [@@js.call "updateTupleTypeNode"]
    val createNamedTupleMember: t -> dotDotDotToken:ts_DotDotDotToken or_undefined -> name:ts_Identifier -> questionToken:ts_QuestionToken or_undefined -> type_:ts_TypeNode -> ts_NamedTupleMember [@@js.call "createNamedTupleMember"]
    val updateNamedTupleMember: t -> node:ts_NamedTupleMember -> dotDotDotToken:ts_DotDotDotToken or_undefined -> name:ts_Identifier -> questionToken:ts_QuestionToken or_undefined -> type_:ts_TypeNode -> ts_NamedTupleMember [@@js.call "updateNamedTupleMember"]
    val createOptionalTypeNode: t -> type_:ts_TypeNode -> ts_OptionalTypeNode [@@js.call "createOptionalTypeNode"]
    val updateOptionalTypeNode: t -> node:ts_OptionalTypeNode -> type_:ts_TypeNode -> ts_OptionalTypeNode [@@js.call "updateOptionalTypeNode"]
    val createRestTypeNode: t -> type_:ts_TypeNode -> ts_RestTypeNode [@@js.call "createRestTypeNode"]
    val updateRestTypeNode: t -> node:ts_RestTypeNode -> type_:ts_TypeNode -> ts_RestTypeNode [@@js.call "updateRestTypeNode"]
    val createUnionTypeNode: t -> types:ts_TypeNode list -> ts_UnionTypeNode [@@js.call "createUnionTypeNode"]
    val updateUnionTypeNode: t -> node:ts_UnionTypeNode -> types:ts_TypeNode ts_NodeArray -> ts_UnionTypeNode [@@js.call "updateUnionTypeNode"]
    val createIntersectionTypeNode: t -> types:ts_TypeNode list -> ts_IntersectionTypeNode [@@js.call "createIntersectionTypeNode"]
    val updateIntersectionTypeNode: t -> node:ts_IntersectionTypeNode -> types:ts_TypeNode ts_NodeArray -> ts_IntersectionTypeNode [@@js.call "updateIntersectionTypeNode"]
    val createConditionalTypeNode: t -> checkType:ts_TypeNode -> extendsType:ts_TypeNode -> trueType:ts_TypeNode -> falseType:ts_TypeNode -> ts_ConditionalTypeNode [@@js.call "createConditionalTypeNode"]
    val updateConditionalTypeNode: t -> node:ts_ConditionalTypeNode -> checkType:ts_TypeNode -> extendsType:ts_TypeNode -> trueType:ts_TypeNode -> falseType:ts_TypeNode -> ts_ConditionalTypeNode [@@js.call "updateConditionalTypeNode"]
    val createInferTypeNode: t -> typeParameter:ts_TypeParameterDeclaration -> ts_InferTypeNode [@@js.call "createInferTypeNode"]
    val updateInferTypeNode: t -> node:ts_InferTypeNode -> typeParameter:ts_TypeParameterDeclaration -> ts_InferTypeNode [@@js.call "updateInferTypeNode"]
    val createImportTypeNode: t -> argument:ts_TypeNode -> ?qualifier:ts_EntityName -> ?typeArguments:ts_TypeNode list -> ?isTypeOf:bool -> unit -> ts_ImportTypeNode [@@js.call "createImportTypeNode"]
    val updateImportTypeNode: t -> node:ts_ImportTypeNode -> argument:ts_TypeNode -> qualifier:ts_EntityName or_undefined -> typeArguments:ts_TypeNode list or_undefined -> ?isTypeOf:bool -> unit -> ts_ImportTypeNode [@@js.call "updateImportTypeNode"]
    val createParenthesizedType: t -> type_:ts_TypeNode -> ts_ParenthesizedTypeNode [@@js.call "createParenthesizedType"]
    val updateParenthesizedType: t -> node:ts_ParenthesizedTypeNode -> type_:ts_TypeNode -> ts_ParenthesizedTypeNode [@@js.call "updateParenthesizedType"]
    val createThisTypeNode: t -> ts_ThisTypeNode [@@js.call "createThisTypeNode"]
    val createTypeOperatorNode: t -> operator:((ts_SyntaxKind_KeyOfKeyword, ts_SyntaxKind_ReadonlyKeyword, ts_SyntaxKind_UniqueKeyword) union3, ([`KeyOfKeyword | `ReadonlyKeyword | `UniqueKeyword] [@js.enum])) or_enum -> type_:ts_TypeNode -> ts_TypeOperatorNode [@@js.call "createTypeOperatorNode"]
    val updateTypeOperatorNode: t -> node:ts_TypeOperatorNode -> type_:ts_TypeNode -> ts_TypeOperatorNode [@@js.call "updateTypeOperatorNode"]
    val createIndexedAccessTypeNode: t -> objectType:ts_TypeNode -> indexType:ts_TypeNode -> ts_IndexedAccessTypeNode [@@js.call "createIndexedAccessTypeNode"]
    val updateIndexedAccessTypeNode: t -> node:ts_IndexedAccessTypeNode -> objectType:ts_TypeNode -> indexType:ts_TypeNode -> ts_IndexedAccessTypeNode [@@js.call "updateIndexedAccessTypeNode"]
    val createMappedTypeNode: t -> readonlyToken:([`U_n_39 of ts_PlusToken  | `U_n_40 of ts_MinusToken  | `U_n_142 of ts_ReadonlyKeyword ] [@js.union on_field "kind"]) or_undefined -> typeParameter:ts_TypeParameterDeclaration -> nameType:ts_TypeNode or_undefined -> questionToken:([`U_n_39 of ts_PlusToken  | `U_n_40 of ts_MinusToken  | `U_n_57 of ts_QuestionToken ] [@js.union on_field "kind"]) or_undefined -> type_:ts_TypeNode or_undefined -> ts_MappedTypeNode [@@js.call "createMappedTypeNode"]
    val updateMappedTypeNode: t -> node:ts_MappedTypeNode -> readonlyToken:([`U_n_39 of ts_PlusToken  | `U_n_40 of ts_MinusToken  | `U_n_142 of ts_ReadonlyKeyword ] [@js.union on_field "kind"]) or_undefined -> typeParameter:ts_TypeParameterDeclaration -> nameType:ts_TypeNode or_undefined -> questionToken:([`U_n_39 of ts_PlusToken  | `U_n_40 of ts_MinusToken  | `U_n_57 of ts_QuestionToken ] [@js.union on_field "kind"]) or_undefined -> type_:ts_TypeNode or_undefined -> ts_MappedTypeNode [@@js.call "updateMappedTypeNode"]
    val createLiteralTypeNode: t -> literal:([`U_n_0 of ts_LiteralExpression  | `U_n_1 of ts_LiteralExpression  | `U_n_2 of ts_LiteralExpression  | `U_n_3 of ts_LiteralExpression  | `U_n_4 of ts_LiteralExpression  | `U_n_5 of ts_LiteralExpression  | `U_n_6 of ts_LiteralExpression  | `U_n_7 of ts_LiteralExpression  | `U_n_8 of ts_LiteralExpression  | `U_n_9 of ts_LiteralExpression  | `U_n_10 of ts_LiteralExpression  | `U_n_11 of ts_LiteralExpression  | `U_n_12 of ts_LiteralExpression  | `U_n_13 of ts_LiteralExpression  | `U_n_14 of ts_LiteralExpression  | `U_n_15 of ts_LiteralExpression  | `U_n_16 of ts_LiteralExpression  | `U_n_17 of ts_LiteralExpression  | `U_n_18 of ts_LiteralExpression  | `U_n_19 of ts_LiteralExpression  | `U_n_20 of ts_LiteralExpression  | `U_n_21 of ts_LiteralExpression  | `U_n_22 of ts_LiteralExpression  | `U_n_23 of ts_LiteralExpression  | `U_n_24 of ts_LiteralExpression  | `U_n_25 of ts_LiteralExpression  | `U_n_26 of ts_LiteralExpression  | `U_n_27 of ts_LiteralExpression  | `U_n_28 of ts_LiteralExpression  | `U_n_29 of ts_LiteralExpression  | `U_n_30 of ts_LiteralExpression  | `U_n_31 of ts_LiteralExpression  | `U_n_32 of ts_LiteralExpression  | `U_n_33 of ts_LiteralExpression  | `U_n_34 of ts_LiteralExpression  | `U_n_35 of ts_LiteralExpression  | `U_n_36 of ts_LiteralExpression  | `U_n_37 of ts_LiteralExpression  | `U_n_38 of ts_LiteralExpression  | `U_n_39 of ts_LiteralExpression  | `U_n_40 of ts_LiteralExpression  | `U_n_41 of ts_LiteralExpression  | `U_n_42 of ts_LiteralExpression  | `U_n_43 of ts_LiteralExpression  | `U_n_44 of ts_LiteralExpression  | `U_n_45 of ts_LiteralExpression  | `U_n_46 of ts_LiteralExpression  | `U_n_47 of ts_LiteralExpression  | `U_n_48 of ts_LiteralExpression  | `U_n_49 of ts_LiteralExpression  | `U_n_50 of ts_LiteralExpression  | `U_n_51 of ts_LiteralExpression  | `U_n_52 of ts_LiteralExpression  | `U_n_53 of ts_LiteralExpression  | `U_n_54 of ts_LiteralExpression  | `U_n_55 of ts_LiteralExpression  | `U_n_56 of ts_LiteralExpression  | `U_n_57 of ts_LiteralExpression  | `U_n_58 of ts_LiteralExpression  | `U_n_59 of ts_LiteralExpression  | `U_n_60 of ts_LiteralExpression  | `U_n_61 of ts_LiteralExpression  | `U_n_62 of ts_LiteralExpression  | `U_n_63 of ts_LiteralExpression  | `U_n_64 of ts_LiteralExpression  | `U_n_65 of ts_LiteralExpression  | `U_n_66 of ts_LiteralExpression  | `U_n_67 of ts_LiteralExpression  | `U_n_68 of ts_LiteralExpression  | `U_n_69 of ts_LiteralExpression  | `U_n_70 of ts_LiteralExpression  | `U_n_71 of ts_LiteralExpression  | `U_n_72 of ts_LiteralExpression  | `U_n_73 of ts_LiteralExpression  | `U_n_74 of ts_LiteralExpression  | `U_n_75 of ts_LiteralExpression  | `U_n_76 of ts_LiteralExpression  | `U_n_77 of ts_LiteralExpression  | `U_n_78 of ts_LiteralExpression  | `U_n_79 of ts_LiteralExpression  | `U_n_80 of ts_LiteralExpression  | `U_n_81 of ts_LiteralExpression  | `U_n_82 of ts_LiteralExpression  | `U_n_83 of ts_LiteralExpression  | `U_n_84 of ts_LiteralExpression  | `U_n_85 of ts_LiteralExpression  | `U_n_86 of ts_LiteralExpression  | `U_n_87 of ts_LiteralExpression  | `U_n_88 of ts_LiteralExpression  | `U_n_89 of ts_LiteralExpression  | `U_n_90 of ts_LiteralExpression  | `U_n_91 of ts_LiteralExpression  | `U_n_92 of ts_LiteralExpression  | `U_n_93 of ts_LiteralExpression  | `U_n_94 of (ts_BooleanLiteral, ts_LiteralExpression) union2  | `U_n_95 of ts_LiteralExpression  | `U_n_96 of ts_LiteralExpression  | `U_n_97 of ts_LiteralExpression  | `U_n_98 of ts_LiteralExpression  | `U_n_99 of ts_LiteralExpression  | `U_n_100 of ts_LiteralExpression  | `U_n_101 of ts_LiteralExpression  | `U_n_102 of ts_LiteralExpression  | `U_n_103 of (ts_NullLiteral, ts_LiteralExpression) union2  | `U_n_104 of ts_LiteralExpression  | `U_n_105 of ts_LiteralExpression  | `U_n_106 of ts_LiteralExpression  | `U_n_107 of ts_LiteralExpression  | `U_n_108 of ts_LiteralExpression  | `U_n_109 of (ts_BooleanLiteral, ts_LiteralExpression) union2  | `U_n_110 of ts_LiteralExpression  | `U_n_111 of ts_LiteralExpression  | `U_n_112 of ts_LiteralExpression  | `U_n_113 of ts_LiteralExpression  | `U_n_114 of ts_LiteralExpression  | `U_n_115 of ts_LiteralExpression  | `U_n_116 of ts_LiteralExpression  | `U_n_117 of ts_LiteralExpression  | `U_n_118 of ts_LiteralExpression  | `U_n_119 of ts_LiteralExpression  | `U_n_120 of ts_LiteralExpression  | `U_n_121 of ts_LiteralExpression  | `U_n_122 of ts_LiteralExpression  | `U_n_123 of ts_LiteralExpression  | `U_n_124 of ts_LiteralExpression  | `U_n_125 of ts_LiteralExpression  | `U_n_126 of ts_LiteralExpression  | `U_n_127 of ts_LiteralExpression  | `U_n_128 of ts_LiteralExpression  | `U_n_129 of ts_LiteralExpression  | `U_n_130 of ts_LiteralExpression  | `U_n_131 of ts_LiteralExpression  | `U_n_132 of ts_LiteralExpression  | `U_n_133 of ts_LiteralExpression  | `U_n_134 of ts_LiteralExpression  | `U_n_135 of ts_LiteralExpression  | `U_n_136 of ts_LiteralExpression  | `U_n_137 of ts_LiteralExpression  | `U_n_138 of ts_LiteralExpression  | `U_n_139 of ts_LiteralExpression  | `U_n_140 of ts_LiteralExpression  | `U_n_141 of ts_LiteralExpression  | `U_n_142 of ts_LiteralExpression  | `U_n_143 of ts_LiteralExpression  | `U_n_144 of ts_LiteralExpression  | `U_n_145 of ts_LiteralExpression  | `U_n_146 of ts_LiteralExpression  | `U_n_147 of ts_LiteralExpression  | `U_n_148 of ts_LiteralExpression  | `U_n_149 of ts_LiteralExpression  | `U_n_150 of ts_LiteralExpression  | `U_n_151 of ts_LiteralExpression  | `U_n_152 of ts_LiteralExpression  | `U_n_153 of ts_LiteralExpression  | `U_n_154 of ts_LiteralExpression  | `U_n_155 of ts_LiteralExpression  | `U_n_156 of ts_LiteralExpression  | `U_n_157 of ts_LiteralExpression  | `U_n_158 of ts_LiteralExpression  | `U_n_159 of ts_LiteralExpression  | `U_n_160 of ts_LiteralExpression  | `U_n_161 of ts_LiteralExpression  | `U_n_162 of ts_LiteralExpression  | `U_n_163 of ts_LiteralExpression  | `U_n_164 of ts_LiteralExpression  | `U_n_165 of ts_LiteralExpression  | `U_n_166 of ts_LiteralExpression  | `U_n_167 of ts_LiteralExpression  | `U_n_168 of ts_LiteralExpression  | `U_n_169 of ts_LiteralExpression  | `U_n_170 of ts_LiteralExpression  | `U_n_171 of ts_LiteralExpression  | `U_n_172 of ts_LiteralExpression  | `U_n_173 of ts_LiteralExpression  | `U_n_174 of ts_LiteralExpression  | `U_n_175 of ts_LiteralExpression  | `U_n_176 of ts_LiteralExpression  | `U_n_177 of ts_LiteralExpression  | `U_n_178 of ts_LiteralExpression  | `U_n_179 of ts_LiteralExpression  | `U_n_180 of ts_LiteralExpression  | `U_n_181 of ts_LiteralExpression  | `U_n_182 of ts_LiteralExpression  | `U_n_183 of ts_LiteralExpression  | `U_n_184 of ts_LiteralExpression  | `U_n_185 of ts_LiteralExpression  | `U_n_186 of ts_LiteralExpression  | `U_n_187 of ts_LiteralExpression  | `U_n_188 of ts_LiteralExpression  | `U_n_189 of ts_LiteralExpression  | `U_n_190 of ts_LiteralExpression  | `U_n_191 of ts_LiteralExpression  | `U_n_192 of ts_LiteralExpression  | `U_n_193 of ts_LiteralExpression  | `U_n_194 of ts_LiteralExpression  | `U_n_195 of ts_LiteralExpression  | `U_n_196 of ts_LiteralExpression  | `U_n_197 of ts_LiteralExpression  | `U_n_198 of ts_LiteralExpression  | `U_n_199 of ts_LiteralExpression  | `U_n_200 of ts_LiteralExpression  | `U_n_201 of ts_LiteralExpression  | `U_n_202 of ts_LiteralExpression  | `U_n_203 of ts_LiteralExpression  | `U_n_204 of ts_LiteralExpression  | `U_n_205 of ts_LiteralExpression  | `U_n_206 of ts_LiteralExpression  | `U_n_207 of ts_LiteralExpression  | `U_n_208 of ts_LiteralExpression  | `U_n_209 of ts_LiteralExpression  | `U_n_210 of ts_LiteralExpression  | `U_n_211 of ts_LiteralExpression  | `U_n_212 of ts_LiteralExpression  | `U_n_213 of ts_LiteralExpression  | `U_n_214 of (ts_LiteralExpression, ts_PrefixUnaryExpression) union2  | `U_n_215 of ts_LiteralExpression  | `U_n_216 of ts_LiteralExpression  | `U_n_217 of ts_LiteralExpression  | `U_n_218 of ts_LiteralExpression  | `U_n_219 of ts_LiteralExpression  | `U_n_220 of ts_LiteralExpression  | `U_n_221 of ts_LiteralExpression  | `U_n_222 of ts_LiteralExpression  | `U_n_223 of ts_LiteralExpression  | `U_n_224 of ts_LiteralExpression  | `U_n_225 of ts_LiteralExpression  | `U_n_226 of ts_LiteralExpression  | `U_n_227 of ts_LiteralExpression  | `U_n_228 of ts_LiteralExpression  | `U_n_229 of ts_LiteralExpression  | `U_n_230 of ts_LiteralExpression  | `U_n_231 of ts_LiteralExpression  | `U_n_232 of ts_LiteralExpression  | `U_n_233 of ts_LiteralExpression  | `U_n_234 of ts_LiteralExpression  | `U_n_235 of ts_LiteralExpression  | `U_n_236 of ts_LiteralExpression  | `U_n_237 of ts_LiteralExpression  | `U_n_238 of ts_LiteralExpression  | `U_n_239 of ts_LiteralExpression  | `U_n_240 of ts_LiteralExpression  | `U_n_241 of ts_LiteralExpression  | `U_n_242 of ts_LiteralExpression  | `U_n_243 of ts_LiteralExpression  | `U_n_244 of ts_LiteralExpression  | `U_n_245 of ts_LiteralExpression  | `U_n_246 of ts_LiteralExpression  | `U_n_247 of ts_LiteralExpression  | `U_n_248 of ts_LiteralExpression  | `U_n_249 of ts_LiteralExpression  | `U_n_250 of ts_LiteralExpression  | `U_n_251 of ts_LiteralExpression  | `U_n_252 of ts_LiteralExpression  | `U_n_253 of ts_LiteralExpression  | `U_n_254 of ts_LiteralExpression  | `U_n_255 of ts_LiteralExpression  | `U_n_256 of ts_LiteralExpression  | `U_n_257 of ts_LiteralExpression  | `U_n_258 of ts_LiteralExpression  | `U_n_259 of ts_LiteralExpression  | `U_n_260 of ts_LiteralExpression  | `U_n_261 of ts_LiteralExpression  | `U_n_262 of ts_LiteralExpression  | `U_n_263 of ts_LiteralExpression  | `U_n_264 of ts_LiteralExpression  | `U_n_265 of ts_LiteralExpression  | `U_n_266 of ts_LiteralExpression  | `U_n_267 of ts_LiteralExpression  | `U_n_268 of ts_LiteralExpression  | `U_n_269 of ts_LiteralExpression  | `U_n_270 of ts_LiteralExpression  | `U_n_271 of ts_LiteralExpression  | `U_n_272 of ts_LiteralExpression  | `U_n_273 of ts_LiteralExpression  | `U_n_274 of ts_LiteralExpression  | `U_n_275 of ts_LiteralExpression  | `U_n_276 of ts_LiteralExpression  | `U_n_277 of ts_LiteralExpression  | `U_n_278 of ts_LiteralExpression  | `U_n_279 of ts_LiteralExpression  | `U_n_280 of ts_LiteralExpression  | `U_n_281 of ts_LiteralExpression  | `U_n_282 of ts_LiteralExpression  | `U_n_283 of ts_LiteralExpression  | `U_n_284 of ts_LiteralExpression  | `U_n_285 of ts_LiteralExpression  | `U_n_286 of ts_LiteralExpression  | `U_n_287 of ts_LiteralExpression  | `U_n_288 of ts_LiteralExpression  | `U_n_289 of ts_LiteralExpression  | `U_n_290 of ts_LiteralExpression  | `U_n_291 of ts_LiteralExpression  | `U_n_292 of ts_LiteralExpression  | `U_n_293 of ts_LiteralExpression  | `U_n_294 of ts_LiteralExpression  | `U_n_295 of ts_LiteralExpression  | `U_n_296 of ts_LiteralExpression  | `U_n_297 of ts_LiteralExpression  | `U_n_298 of ts_LiteralExpression  | `U_n_299 of ts_LiteralExpression  | `U_n_300 of ts_LiteralExpression  | `U_n_301 of ts_LiteralExpression  | `U_n_302 of ts_LiteralExpression  | `U_n_303 of ts_LiteralExpression  | `U_n_304 of ts_LiteralExpression  | `U_n_305 of ts_LiteralExpression  | `U_n_306 of ts_LiteralExpression  | `U_n_307 of ts_LiteralExpression  | `U_n_308 of ts_LiteralExpression  | `U_n_309 of ts_LiteralExpression  | `U_n_310 of ts_LiteralExpression  | `U_n_311 of ts_LiteralExpression  | `U_n_312 of ts_LiteralExpression  | `U_n_313 of ts_LiteralExpression  | `U_n_314 of ts_LiteralExpression  | `U_n_315 of ts_LiteralExpression  | `U_n_316 of ts_LiteralExpression  | `U_n_317 of ts_LiteralExpression  | `U_n_318 of ts_LiteralExpression  | `U_n_319 of ts_LiteralExpression  | `U_n_320 of ts_LiteralExpression  | `U_n_321 of ts_LiteralExpression  | `U_n_322 of ts_LiteralExpression  | `U_n_323 of ts_LiteralExpression  | `U_n_324 of ts_LiteralExpression  | `U_n_325 of ts_LiteralExpression  | `U_n_326 of ts_LiteralExpression  | `U_n_327 of ts_LiteralExpression  | `U_n_328 of ts_LiteralExpression  | `U_n_329 of ts_LiteralExpression  | `U_n_330 of ts_LiteralExpression  | `U_n_331 of ts_LiteralExpression  | `U_n_332 of ts_LiteralExpression  | `U_n_333 of ts_LiteralExpression  | `U_n_334 of ts_LiteralExpression  | `U_n_335 of ts_LiteralExpression  | `U_n_336 of ts_LiteralExpression  | `U_n_337 of ts_LiteralExpression  | `U_n_338 of ts_LiteralExpression  | `U_n_339 of ts_LiteralExpression  | `U_n_340 of ts_LiteralExpression  | `U_n_341 of ts_LiteralExpression ] [@js.union on_field "kind"]) -> ts_LiteralTypeNode [@@js.call "createLiteralTypeNode"]
    val updateLiteralTypeNode: t -> node:ts_LiteralTypeNode -> literal:([`U_n_0 of ts_LiteralExpression  | `U_n_1 of ts_LiteralExpression  | `U_n_2 of ts_LiteralExpression  | `U_n_3 of ts_LiteralExpression  | `U_n_4 of ts_LiteralExpression  | `U_n_5 of ts_LiteralExpression  | `U_n_6 of ts_LiteralExpression  | `U_n_7 of ts_LiteralExpression  | `U_n_8 of ts_LiteralExpression  | `U_n_9 of ts_LiteralExpression  | `U_n_10 of ts_LiteralExpression  | `U_n_11 of ts_LiteralExpression  | `U_n_12 of ts_LiteralExpression  | `U_n_13 of ts_LiteralExpression  | `U_n_14 of ts_LiteralExpression  | `U_n_15 of ts_LiteralExpression  | `U_n_16 of ts_LiteralExpression  | `U_n_17 of ts_LiteralExpression  | `U_n_18 of ts_LiteralExpression  | `U_n_19 of ts_LiteralExpression  | `U_n_20 of ts_LiteralExpression  | `U_n_21 of ts_LiteralExpression  | `U_n_22 of ts_LiteralExpression  | `U_n_23 of ts_LiteralExpression  | `U_n_24 of ts_LiteralExpression  | `U_n_25 of ts_LiteralExpression  | `U_n_26 of ts_LiteralExpression  | `U_n_27 of ts_LiteralExpression  | `U_n_28 of ts_LiteralExpression  | `U_n_29 of ts_LiteralExpression  | `U_n_30 of ts_LiteralExpression  | `U_n_31 of ts_LiteralExpression  | `U_n_32 of ts_LiteralExpression  | `U_n_33 of ts_LiteralExpression  | `U_n_34 of ts_LiteralExpression  | `U_n_35 of ts_LiteralExpression  | `U_n_36 of ts_LiteralExpression  | `U_n_37 of ts_LiteralExpression  | `U_n_38 of ts_LiteralExpression  | `U_n_39 of ts_LiteralExpression  | `U_n_40 of ts_LiteralExpression  | `U_n_41 of ts_LiteralExpression  | `U_n_42 of ts_LiteralExpression  | `U_n_43 of ts_LiteralExpression  | `U_n_44 of ts_LiteralExpression  | `U_n_45 of ts_LiteralExpression  | `U_n_46 of ts_LiteralExpression  | `U_n_47 of ts_LiteralExpression  | `U_n_48 of ts_LiteralExpression  | `U_n_49 of ts_LiteralExpression  | `U_n_50 of ts_LiteralExpression  | `U_n_51 of ts_LiteralExpression  | `U_n_52 of ts_LiteralExpression  | `U_n_53 of ts_LiteralExpression  | `U_n_54 of ts_LiteralExpression  | `U_n_55 of ts_LiteralExpression  | `U_n_56 of ts_LiteralExpression  | `U_n_57 of ts_LiteralExpression  | `U_n_58 of ts_LiteralExpression  | `U_n_59 of ts_LiteralExpression  | `U_n_60 of ts_LiteralExpression  | `U_n_61 of ts_LiteralExpression  | `U_n_62 of ts_LiteralExpression  | `U_n_63 of ts_LiteralExpression  | `U_n_64 of ts_LiteralExpression  | `U_n_65 of ts_LiteralExpression  | `U_n_66 of ts_LiteralExpression  | `U_n_67 of ts_LiteralExpression  | `U_n_68 of ts_LiteralExpression  | `U_n_69 of ts_LiteralExpression  | `U_n_70 of ts_LiteralExpression  | `U_n_71 of ts_LiteralExpression  | `U_n_72 of ts_LiteralExpression  | `U_n_73 of ts_LiteralExpression  | `U_n_74 of ts_LiteralExpression  | `U_n_75 of ts_LiteralExpression  | `U_n_76 of ts_LiteralExpression  | `U_n_77 of ts_LiteralExpression  | `U_n_78 of ts_LiteralExpression  | `U_n_79 of ts_LiteralExpression  | `U_n_80 of ts_LiteralExpression  | `U_n_81 of ts_LiteralExpression  | `U_n_82 of ts_LiteralExpression  | `U_n_83 of ts_LiteralExpression  | `U_n_84 of ts_LiteralExpression  | `U_n_85 of ts_LiteralExpression  | `U_n_86 of ts_LiteralExpression  | `U_n_87 of ts_LiteralExpression  | `U_n_88 of ts_LiteralExpression  | `U_n_89 of ts_LiteralExpression  | `U_n_90 of ts_LiteralExpression  | `U_n_91 of ts_LiteralExpression  | `U_n_92 of ts_LiteralExpression  | `U_n_93 of ts_LiteralExpression  | `U_n_94 of (ts_BooleanLiteral, ts_LiteralExpression) union2  | `U_n_95 of ts_LiteralExpression  | `U_n_96 of ts_LiteralExpression  | `U_n_97 of ts_LiteralExpression  | `U_n_98 of ts_LiteralExpression  | `U_n_99 of ts_LiteralExpression  | `U_n_100 of ts_LiteralExpression  | `U_n_101 of ts_LiteralExpression  | `U_n_102 of ts_LiteralExpression  | `U_n_103 of (ts_NullLiteral, ts_LiteralExpression) union2  | `U_n_104 of ts_LiteralExpression  | `U_n_105 of ts_LiteralExpression  | `U_n_106 of ts_LiteralExpression  | `U_n_107 of ts_LiteralExpression  | `U_n_108 of ts_LiteralExpression  | `U_n_109 of (ts_BooleanLiteral, ts_LiteralExpression) union2  | `U_n_110 of ts_LiteralExpression  | `U_n_111 of ts_LiteralExpression  | `U_n_112 of ts_LiteralExpression  | `U_n_113 of ts_LiteralExpression  | `U_n_114 of ts_LiteralExpression  | `U_n_115 of ts_LiteralExpression  | `U_n_116 of ts_LiteralExpression  | `U_n_117 of ts_LiteralExpression  | `U_n_118 of ts_LiteralExpression  | `U_n_119 of ts_LiteralExpression  | `U_n_120 of ts_LiteralExpression  | `U_n_121 of ts_LiteralExpression  | `U_n_122 of ts_LiteralExpression  | `U_n_123 of ts_LiteralExpression  | `U_n_124 of ts_LiteralExpression  | `U_n_125 of ts_LiteralExpression  | `U_n_126 of ts_LiteralExpression  | `U_n_127 of ts_LiteralExpression  | `U_n_128 of ts_LiteralExpression  | `U_n_129 of ts_LiteralExpression  | `U_n_130 of ts_LiteralExpression  | `U_n_131 of ts_LiteralExpression  | `U_n_132 of ts_LiteralExpression  | `U_n_133 of ts_LiteralExpression  | `U_n_134 of ts_LiteralExpression  | `U_n_135 of ts_LiteralExpression  | `U_n_136 of ts_LiteralExpression  | `U_n_137 of ts_LiteralExpression  | `U_n_138 of ts_LiteralExpression  | `U_n_139 of ts_LiteralExpression  | `U_n_140 of ts_LiteralExpression  | `U_n_141 of ts_LiteralExpression  | `U_n_142 of ts_LiteralExpression  | `U_n_143 of ts_LiteralExpression  | `U_n_144 of ts_LiteralExpression  | `U_n_145 of ts_LiteralExpression  | `U_n_146 of ts_LiteralExpression  | `U_n_147 of ts_LiteralExpression  | `U_n_148 of ts_LiteralExpression  | `U_n_149 of ts_LiteralExpression  | `U_n_150 of ts_LiteralExpression  | `U_n_151 of ts_LiteralExpression  | `U_n_152 of ts_LiteralExpression  | `U_n_153 of ts_LiteralExpression  | `U_n_154 of ts_LiteralExpression  | `U_n_155 of ts_LiteralExpression  | `U_n_156 of ts_LiteralExpression  | `U_n_157 of ts_LiteralExpression  | `U_n_158 of ts_LiteralExpression  | `U_n_159 of ts_LiteralExpression  | `U_n_160 of ts_LiteralExpression  | `U_n_161 of ts_LiteralExpression  | `U_n_162 of ts_LiteralExpression  | `U_n_163 of ts_LiteralExpression  | `U_n_164 of ts_LiteralExpression  | `U_n_165 of ts_LiteralExpression  | `U_n_166 of ts_LiteralExpression  | `U_n_167 of ts_LiteralExpression  | `U_n_168 of ts_LiteralExpression  | `U_n_169 of ts_LiteralExpression  | `U_n_170 of ts_LiteralExpression  | `U_n_171 of ts_LiteralExpression  | `U_n_172 of ts_LiteralExpression  | `U_n_173 of ts_LiteralExpression  | `U_n_174 of ts_LiteralExpression  | `U_n_175 of ts_LiteralExpression  | `U_n_176 of ts_LiteralExpression  | `U_n_177 of ts_LiteralExpression  | `U_n_178 of ts_LiteralExpression  | `U_n_179 of ts_LiteralExpression  | `U_n_180 of ts_LiteralExpression  | `U_n_181 of ts_LiteralExpression  | `U_n_182 of ts_LiteralExpression  | `U_n_183 of ts_LiteralExpression  | `U_n_184 of ts_LiteralExpression  | `U_n_185 of ts_LiteralExpression  | `U_n_186 of ts_LiteralExpression  | `U_n_187 of ts_LiteralExpression  | `U_n_188 of ts_LiteralExpression  | `U_n_189 of ts_LiteralExpression  | `U_n_190 of ts_LiteralExpression  | `U_n_191 of ts_LiteralExpression  | `U_n_192 of ts_LiteralExpression  | `U_n_193 of ts_LiteralExpression  | `U_n_194 of ts_LiteralExpression  | `U_n_195 of ts_LiteralExpression  | `U_n_196 of ts_LiteralExpression  | `U_n_197 of ts_LiteralExpression  | `U_n_198 of ts_LiteralExpression  | `U_n_199 of ts_LiteralExpression  | `U_n_200 of ts_LiteralExpression  | `U_n_201 of ts_LiteralExpression  | `U_n_202 of ts_LiteralExpression  | `U_n_203 of ts_LiteralExpression  | `U_n_204 of ts_LiteralExpression  | `U_n_205 of ts_LiteralExpression  | `U_n_206 of ts_LiteralExpression  | `U_n_207 of ts_LiteralExpression  | `U_n_208 of ts_LiteralExpression  | `U_n_209 of ts_LiteralExpression  | `U_n_210 of ts_LiteralExpression  | `U_n_211 of ts_LiteralExpression  | `U_n_212 of ts_LiteralExpression  | `U_n_213 of ts_LiteralExpression  | `U_n_214 of (ts_LiteralExpression, ts_PrefixUnaryExpression) union2  | `U_n_215 of ts_LiteralExpression  | `U_n_216 of ts_LiteralExpression  | `U_n_217 of ts_LiteralExpression  | `U_n_218 of ts_LiteralExpression  | `U_n_219 of ts_LiteralExpression  | `U_n_220 of ts_LiteralExpression  | `U_n_221 of ts_LiteralExpression  | `U_n_222 of ts_LiteralExpression  | `U_n_223 of ts_LiteralExpression  | `U_n_224 of ts_LiteralExpression  | `U_n_225 of ts_LiteralExpression  | `U_n_226 of ts_LiteralExpression  | `U_n_227 of ts_LiteralExpression  | `U_n_228 of ts_LiteralExpression  | `U_n_229 of ts_LiteralExpression  | `U_n_230 of ts_LiteralExpression  | `U_n_231 of ts_LiteralExpression  | `U_n_232 of ts_LiteralExpression  | `U_n_233 of ts_LiteralExpression  | `U_n_234 of ts_LiteralExpression  | `U_n_235 of ts_LiteralExpression  | `U_n_236 of ts_LiteralExpression  | `U_n_237 of ts_LiteralExpression  | `U_n_238 of ts_LiteralExpression  | `U_n_239 of ts_LiteralExpression  | `U_n_240 of ts_LiteralExpression  | `U_n_241 of ts_LiteralExpression  | `U_n_242 of ts_LiteralExpression  | `U_n_243 of ts_LiteralExpression  | `U_n_244 of ts_LiteralExpression  | `U_n_245 of ts_LiteralExpression  | `U_n_246 of ts_LiteralExpression  | `U_n_247 of ts_LiteralExpression  | `U_n_248 of ts_LiteralExpression  | `U_n_249 of ts_LiteralExpression  | `U_n_250 of ts_LiteralExpression  | `U_n_251 of ts_LiteralExpression  | `U_n_252 of ts_LiteralExpression  | `U_n_253 of ts_LiteralExpression  | `U_n_254 of ts_LiteralExpression  | `U_n_255 of ts_LiteralExpression  | `U_n_256 of ts_LiteralExpression  | `U_n_257 of ts_LiteralExpression  | `U_n_258 of ts_LiteralExpression  | `U_n_259 of ts_LiteralExpression  | `U_n_260 of ts_LiteralExpression  | `U_n_261 of ts_LiteralExpression  | `U_n_262 of ts_LiteralExpression  | `U_n_263 of ts_LiteralExpression  | `U_n_264 of ts_LiteralExpression  | `U_n_265 of ts_LiteralExpression  | `U_n_266 of ts_LiteralExpression  | `U_n_267 of ts_LiteralExpression  | `U_n_268 of ts_LiteralExpression  | `U_n_269 of ts_LiteralExpression  | `U_n_270 of ts_LiteralExpression  | `U_n_271 of ts_LiteralExpression  | `U_n_272 of ts_LiteralExpression  | `U_n_273 of ts_LiteralExpression  | `U_n_274 of ts_LiteralExpression  | `U_n_275 of ts_LiteralExpression  | `U_n_276 of ts_LiteralExpression  | `U_n_277 of ts_LiteralExpression  | `U_n_278 of ts_LiteralExpression  | `U_n_279 of ts_LiteralExpression  | `U_n_280 of ts_LiteralExpression  | `U_n_281 of ts_LiteralExpression  | `U_n_282 of ts_LiteralExpression  | `U_n_283 of ts_LiteralExpression  | `U_n_284 of ts_LiteralExpression  | `U_n_285 of ts_LiteralExpression  | `U_n_286 of ts_LiteralExpression  | `U_n_287 of ts_LiteralExpression  | `U_n_288 of ts_LiteralExpression  | `U_n_289 of ts_LiteralExpression  | `U_n_290 of ts_LiteralExpression  | `U_n_291 of ts_LiteralExpression  | `U_n_292 of ts_LiteralExpression  | `U_n_293 of ts_LiteralExpression  | `U_n_294 of ts_LiteralExpression  | `U_n_295 of ts_LiteralExpression  | `U_n_296 of ts_LiteralExpression  | `U_n_297 of ts_LiteralExpression  | `U_n_298 of ts_LiteralExpression  | `U_n_299 of ts_LiteralExpression  | `U_n_300 of ts_LiteralExpression  | `U_n_301 of ts_LiteralExpression  | `U_n_302 of ts_LiteralExpression  | `U_n_303 of ts_LiteralExpression  | `U_n_304 of ts_LiteralExpression  | `U_n_305 of ts_LiteralExpression  | `U_n_306 of ts_LiteralExpression  | `U_n_307 of ts_LiteralExpression  | `U_n_308 of ts_LiteralExpression  | `U_n_309 of ts_LiteralExpression  | `U_n_310 of ts_LiteralExpression  | `U_n_311 of ts_LiteralExpression  | `U_n_312 of ts_LiteralExpression  | `U_n_313 of ts_LiteralExpression  | `U_n_314 of ts_LiteralExpression  | `U_n_315 of ts_LiteralExpression  | `U_n_316 of ts_LiteralExpression  | `U_n_317 of ts_LiteralExpression  | `U_n_318 of ts_LiteralExpression  | `U_n_319 of ts_LiteralExpression  | `U_n_320 of ts_LiteralExpression  | `U_n_321 of ts_LiteralExpression  | `U_n_322 of ts_LiteralExpression  | `U_n_323 of ts_LiteralExpression  | `U_n_324 of ts_LiteralExpression  | `U_n_325 of ts_LiteralExpression  | `U_n_326 of ts_LiteralExpression  | `U_n_327 of ts_LiteralExpression  | `U_n_328 of ts_LiteralExpression  | `U_n_329 of ts_LiteralExpression  | `U_n_330 of ts_LiteralExpression  | `U_n_331 of ts_LiteralExpression  | `U_n_332 of ts_LiteralExpression  | `U_n_333 of ts_LiteralExpression  | `U_n_334 of ts_LiteralExpression  | `U_n_335 of ts_LiteralExpression  | `U_n_336 of ts_LiteralExpression  | `U_n_337 of ts_LiteralExpression  | `U_n_338 of ts_LiteralExpression  | `U_n_339 of ts_LiteralExpression  | `U_n_340 of ts_LiteralExpression  | `U_n_341 of ts_LiteralExpression ] [@js.union on_field "kind"]) -> ts_LiteralTypeNode [@@js.call "updateLiteralTypeNode"]
    val createTemplateLiteralType: t -> head:ts_TemplateHead -> templateSpans:ts_TemplateLiteralTypeSpan list -> ts_TemplateLiteralTypeNode [@@js.call "createTemplateLiteralType"]
    val updateTemplateLiteralType: t -> node:ts_TemplateLiteralTypeNode -> head:ts_TemplateHead -> templateSpans:ts_TemplateLiteralTypeSpan list -> ts_TemplateLiteralTypeNode [@@js.call "updateTemplateLiteralType"]
    val createObjectBindingPattern: t -> elements:ts_BindingElement list -> ts_ObjectBindingPattern [@@js.call "createObjectBindingPattern"]
    val updateObjectBindingPattern: t -> node:ts_ObjectBindingPattern -> elements:ts_BindingElement list -> ts_ObjectBindingPattern [@@js.call "updateObjectBindingPattern"]
    val createArrayBindingPattern: t -> elements:ts_ArrayBindingElement list -> ts_ArrayBindingPattern [@@js.call "createArrayBindingPattern"]
    val updateArrayBindingPattern: t -> node:ts_ArrayBindingPattern -> elements:ts_ArrayBindingElement list -> ts_ArrayBindingPattern [@@js.call "updateArrayBindingPattern"]
    val createBindingElement: t -> dotDotDotToken:ts_DotDotDotToken or_undefined -> propertyName:ts_PropertyName or_string or_undefined -> name:ts_BindingName or_string -> ?initializer_:ts_Expression -> unit -> ts_BindingElement [@@js.call "createBindingElement"]
    val updateBindingElement: t -> node:ts_BindingElement -> dotDotDotToken:ts_DotDotDotToken or_undefined -> propertyName:ts_PropertyName or_undefined -> name:ts_BindingName -> initializer_:ts_Expression or_undefined -> ts_BindingElement [@@js.call "updateBindingElement"]
    val createArrayLiteralExpression: t -> ?elements:ts_Expression list -> ?multiLine:bool -> unit -> ts_ArrayLiteralExpression [@@js.call "createArrayLiteralExpression"]
    val updateArrayLiteralExpression: t -> node:ts_ArrayLiteralExpression -> elements:ts_Expression list -> ts_ArrayLiteralExpression [@@js.call "updateArrayLiteralExpression"]
    val createObjectLiteralExpression: t -> ?properties:ts_ObjectLiteralElementLike list -> ?multiLine:bool -> unit -> ts_ObjectLiteralExpression [@@js.call "createObjectLiteralExpression"]
    val updateObjectLiteralExpression: t -> node:ts_ObjectLiteralExpression -> properties:ts_ObjectLiteralElementLike list -> ts_ObjectLiteralExpression [@@js.call "updateObjectLiteralExpression"]
    val createPropertyAccessExpression: t -> expression:ts_Expression -> name:([`U_n_78 of ts_Identifier  | `U_n_79 of ts_PrivateIdentifier ] [@js.union on_field "kind"]) or_string -> ts_PropertyAccessExpression [@@js.call "createPropertyAccessExpression"]
    val updatePropertyAccessExpression: t -> node:ts_PropertyAccessExpression -> expression:ts_Expression -> name:([`U_n_78 of ts_Identifier  | `U_n_79 of ts_PrivateIdentifier ] [@js.union on_field "kind"]) -> ts_PropertyAccessExpression [@@js.call "updatePropertyAccessExpression"]
    val createPropertyAccessChain: t -> expression:ts_Expression -> questionDotToken:ts_QuestionDotToken or_undefined -> name:([`U_n_78 of ts_Identifier  | `U_n_79 of ts_PrivateIdentifier ] [@js.union on_field "kind"]) or_string -> ts_PropertyAccessChain [@@js.call "createPropertyAccessChain"]
    val updatePropertyAccessChain: t -> node:ts_PropertyAccessChain -> expression:ts_Expression -> questionDotToken:ts_QuestionDotToken or_undefined -> name:([`U_n_78 of ts_Identifier  | `U_n_79 of ts_PrivateIdentifier ] [@js.union on_field "kind"]) -> ts_PropertyAccessChain [@@js.call "updatePropertyAccessChain"]
    val createElementAccessExpression: t -> expression:ts_Expression -> index:ts_Expression or_number -> ts_ElementAccessExpression [@@js.call "createElementAccessExpression"]
    val updateElementAccessExpression: t -> node:ts_ElementAccessExpression -> expression:ts_Expression -> argumentExpression:ts_Expression -> ts_ElementAccessExpression [@@js.call "updateElementAccessExpression"]
    val createElementAccessChain: t -> expression:ts_Expression -> questionDotToken:ts_QuestionDotToken or_undefined -> index:ts_Expression or_number -> ts_ElementAccessChain [@@js.call "createElementAccessChain"]
    val updateElementAccessChain: t -> node:ts_ElementAccessChain -> expression:ts_Expression -> questionDotToken:ts_QuestionDotToken or_undefined -> argumentExpression:ts_Expression -> ts_ElementAccessChain [@@js.call "updateElementAccessChain"]
    val createCallExpression: t -> expression:ts_Expression -> typeArguments:ts_TypeNode list or_undefined -> argumentsArray:ts_Expression list or_undefined -> ts_CallExpression [@@js.call "createCallExpression"]
    val updateCallExpression: t -> node:ts_CallExpression -> expression:ts_Expression -> typeArguments:ts_TypeNode list or_undefined -> argumentsArray:ts_Expression list -> ts_CallExpression [@@js.call "updateCallExpression"]
    val createCallChain: t -> expression:ts_Expression -> questionDotToken:ts_QuestionDotToken or_undefined -> typeArguments:ts_TypeNode list or_undefined -> argumentsArray:ts_Expression list or_undefined -> ts_CallChain [@@js.call "createCallChain"]
    val updateCallChain: t -> node:ts_CallChain -> expression:ts_Expression -> questionDotToken:ts_QuestionDotToken or_undefined -> typeArguments:ts_TypeNode list or_undefined -> argumentsArray:ts_Expression list -> ts_CallChain [@@js.call "updateCallChain"]
    val createNewExpression: t -> expression:ts_Expression -> typeArguments:ts_TypeNode list or_undefined -> argumentsArray:ts_Expression list or_undefined -> ts_NewExpression [@@js.call "createNewExpression"]
    val updateNewExpression: t -> node:ts_NewExpression -> expression:ts_Expression -> typeArguments:ts_TypeNode list or_undefined -> argumentsArray:ts_Expression list or_undefined -> ts_NewExpression [@@js.call "updateNewExpression"]
    val createTaggedTemplateExpression: t -> tag:ts_Expression -> typeArguments:ts_TypeNode list or_undefined -> template:ts_TemplateLiteral -> ts_TaggedTemplateExpression [@@js.call "createTaggedTemplateExpression"]
    val updateTaggedTemplateExpression: t -> node:ts_TaggedTemplateExpression -> tag:ts_Expression -> typeArguments:ts_TypeNode list or_undefined -> template:ts_TemplateLiteral -> ts_TaggedTemplateExpression [@@js.call "updateTaggedTemplateExpression"]
    val createTypeAssertion: t -> type_:ts_TypeNode -> expression:ts_Expression -> ts_TypeAssertion [@@js.call "createTypeAssertion"]
    val updateTypeAssertion: t -> node:ts_TypeAssertion -> type_:ts_TypeNode -> expression:ts_Expression -> ts_TypeAssertion [@@js.call "updateTypeAssertion"]
    val createParenthesizedExpression: t -> expression:ts_Expression -> ts_ParenthesizedExpression [@@js.call "createParenthesizedExpression"]
    val updateParenthesizedExpression: t -> node:ts_ParenthesizedExpression -> expression:ts_Expression -> ts_ParenthesizedExpression [@@js.call "updateParenthesizedExpression"]
    val createFunctionExpression: t -> modifiers:ts_Modifier list or_undefined -> asteriskToken:ts_AsteriskToken or_undefined -> name:ts_Identifier or_string or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list or_undefined -> type_:ts_TypeNode or_undefined -> body:ts_Block -> ts_FunctionExpression [@@js.call "createFunctionExpression"]
    val updateFunctionExpression: t -> node:ts_FunctionExpression -> modifiers:ts_Modifier list or_undefined -> asteriskToken:ts_AsteriskToken or_undefined -> name:ts_Identifier or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_Block -> ts_FunctionExpression [@@js.call "updateFunctionExpression"]
    val createArrowFunction: t -> modifiers:ts_Modifier list or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> equalsGreaterThanToken:ts_EqualsGreaterThanToken or_undefined -> body:ts_ConciseBody -> ts_ArrowFunction [@@js.call "createArrowFunction"]
    val updateArrowFunction: t -> node:ts_ArrowFunction -> modifiers:ts_Modifier list or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> equalsGreaterThanToken:ts_EqualsGreaterThanToken -> body:ts_ConciseBody -> ts_ArrowFunction [@@js.call "updateArrowFunction"]
    val createDeleteExpression: t -> expression:ts_Expression -> ts_DeleteExpression [@@js.call "createDeleteExpression"]
    val updateDeleteExpression: t -> node:ts_DeleteExpression -> expression:ts_Expression -> ts_DeleteExpression [@@js.call "updateDeleteExpression"]
    val createTypeOfExpression: t -> expression:ts_Expression -> ts_TypeOfExpression [@@js.call "createTypeOfExpression"]
    val updateTypeOfExpression: t -> node:ts_TypeOfExpression -> expression:ts_Expression -> ts_TypeOfExpression [@@js.call "updateTypeOfExpression"]
    val createVoidExpression: t -> expression:ts_Expression -> ts_VoidExpression [@@js.call "createVoidExpression"]
    val updateVoidExpression: t -> node:ts_VoidExpression -> expression:ts_Expression -> ts_VoidExpression [@@js.call "updateVoidExpression"]
    val createAwaitExpression: t -> expression:ts_Expression -> ts_AwaitExpression [@@js.call "createAwaitExpression"]
    val updateAwaitExpression: t -> node:ts_AwaitExpression -> expression:ts_Expression -> ts_AwaitExpression [@@js.call "updateAwaitExpression"]
    val createPrefixUnaryExpression: t -> operator:ts_PrefixUnaryOperator -> operand:ts_Expression -> ts_PrefixUnaryExpression [@@js.call "createPrefixUnaryExpression"]
    val updatePrefixUnaryExpression: t -> node:ts_PrefixUnaryExpression -> operand:ts_Expression -> ts_PrefixUnaryExpression [@@js.call "updatePrefixUnaryExpression"]
    val createPostfixUnaryExpression: t -> operand:ts_Expression -> operator:ts_PostfixUnaryOperator -> ts_PostfixUnaryExpression [@@js.call "createPostfixUnaryExpression"]
    val updatePostfixUnaryExpression: t -> node:ts_PostfixUnaryExpression -> operand:ts_Expression -> ts_PostfixUnaryExpression [@@js.call "updatePostfixUnaryExpression"]
    val createBinaryExpression: t -> left:ts_Expression -> operator:((((((((((((((((((((((((((((((((((((((((((((((((((((((((ts_SyntaxKind_PercentEqualsToken, ts_SyntaxKind_PercentToken, ts_SyntaxKind_PlusEqualsToken, ts_SyntaxKind_PlusToken, ts_SyntaxKind_QuestionQuestionEqualsToken, ts_SyntaxKind_QuestionQuestionToken, ts_SyntaxKind_SlashEqualsToken, ts_SyntaxKind_SlashToken) union8, ts_SyntaxKind_MinusToken) or_, ts_SyntaxKind_MinusEqualsToken) or_, ts_SyntaxKind_LessThanToken) or_, ts_SyntaxKind_LessThanLessThanToken) or_, ts_SyntaxKind_LessThanLessThanEqualsToken) or_, ts_SyntaxKind_LessThanEqualsToken) or_, ts_SyntaxKind_InstanceOfKeyword) or_, ts_SyntaxKind_InKeyword) or_, ts_SyntaxKind_GreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsEqualsToken) or_, ts_SyntaxKind_EqualsToken) or_, ts_SyntaxKind_EqualsEqualsToken) or_, ts_SyntaxKind_EqualsEqualsEqualsToken) or_, ts_SyntaxKind_CommaToken) or_, ts_SyntaxKind_CaretToken) or_, ts_SyntaxKind_CaretEqualsToken) or_, ts_SyntaxKind_BarToken) or_, ts_SyntaxKind_BarEqualsToken) or_, ts_SyntaxKind_BarBarToken) or_, ts_SyntaxKind_BarBarEqualsToken) or_, ts_SyntaxKind_AsteriskToken) or_, ts_SyntaxKind_AsteriskEqualsToken) or_, ts_SyntaxKind_AsteriskAsteriskToken) or_, ts_SyntaxKind_AsteriskAsteriskEqualsToken) or_, ts_SyntaxKind_AmpersandToken) or_, ts_SyntaxKind_AmpersandEqualsToken) or_, ts_SyntaxKind_AmpersandAmpersandToken) or_, ts_SyntaxKind_AmpersandAmpersandEqualsToken) or_, ts_ShiftOperatorOrHigher) or_, ts_ShiftOperator) or_, ts_RelationalOperatorOrHigher) or_, ts_RelationalOperator) or_, ts_MultiplicativeOperatorOrHigher) or_, ts_MultiplicativeOperator) or_, ts_LogicalOperatorOrHigher) or_, ts_LogicalOperator) or_, ts_ExponentiationOperator) or_, ts_EqualityOperatorOrHigher) or_, ts_EqualityOperator) or_, ts_CompoundAssignmentOperator) or_, ts_BitwiseOperatorOrHigher) or_, ts_BitwiseOperator) or_, ts_BinaryOperatorToken) or_, ts_BinaryOperator) or_, ts_AssignmentOperatorOrHigher) or_, ts_AssignmentOperator) or_, ts_AdditiveOperatorOrHigher) or_, ts_AdditiveOperator) or_, ([`AmpersandAmpersandEqualsToken | `AmpersandAmpersandToken | `AmpersandEqualsToken | `AmpersandToken | `AsteriskAsteriskEqualsToken | `AsteriskAsteriskToken | `AsteriskEqualsToken | `AsteriskToken | `BarBarEqualsToken | `BarBarToken | `BarEqualsToken | `BarToken | `CaretEqualsToken | `CaretToken | `CommaToken | `EqualsEqualsEqualsToken | `EqualsEqualsToken | `EqualsToken | `ExclamationEqualsEqualsToken | `ExclamationEqualsToken | `GreaterThanEqualsToken | `GreaterThanGreaterThanEqualsToken | `GreaterThanGreaterThanGreaterThanEqualsToken | `GreaterThanGreaterThanGreaterThanToken | `GreaterThanGreaterThanToken | `GreaterThanToken | `InKeyword | `InstanceOfKeyword | `LessThanEqualsToken | `LessThanLessThanEqualsToken | `LessThanLessThanToken | `LessThanToken | `MinusEqualsToken | `MinusToken | `PercentEqualsToken | `PercentToken | `PlusEqualsToken | `PlusToken | `QuestionQuestionEqualsToken | `QuestionQuestionToken | `SlashEqualsToken | `SlashToken] [@js.enum])) or_enum -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createBinaryExpression"]
    val updateBinaryExpression: t -> node:ts_BinaryExpression -> left:ts_Expression -> operator:((((((((((((((((((((((((((((((((((((((((((((((((((((((((ts_SyntaxKind_PercentEqualsToken, ts_SyntaxKind_PercentToken, ts_SyntaxKind_PlusEqualsToken, ts_SyntaxKind_PlusToken, ts_SyntaxKind_QuestionQuestionEqualsToken, ts_SyntaxKind_QuestionQuestionToken, ts_SyntaxKind_SlashEqualsToken, ts_SyntaxKind_SlashToken) union8, ts_SyntaxKind_MinusToken) or_, ts_SyntaxKind_MinusEqualsToken) or_, ts_SyntaxKind_LessThanToken) or_, ts_SyntaxKind_LessThanLessThanToken) or_, ts_SyntaxKind_LessThanLessThanEqualsToken) or_, ts_SyntaxKind_LessThanEqualsToken) or_, ts_SyntaxKind_InstanceOfKeyword) or_, ts_SyntaxKind_InKeyword) or_, ts_SyntaxKind_GreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsEqualsToken) or_, ts_SyntaxKind_EqualsToken) or_, ts_SyntaxKind_EqualsEqualsToken) or_, ts_SyntaxKind_EqualsEqualsEqualsToken) or_, ts_SyntaxKind_CommaToken) or_, ts_SyntaxKind_CaretToken) or_, ts_SyntaxKind_CaretEqualsToken) or_, ts_SyntaxKind_BarToken) or_, ts_SyntaxKind_BarEqualsToken) or_, ts_SyntaxKind_BarBarToken) or_, ts_SyntaxKind_BarBarEqualsToken) or_, ts_SyntaxKind_AsteriskToken) or_, ts_SyntaxKind_AsteriskEqualsToken) or_, ts_SyntaxKind_AsteriskAsteriskToken) or_, ts_SyntaxKind_AsteriskAsteriskEqualsToken) or_, ts_SyntaxKind_AmpersandToken) or_, ts_SyntaxKind_AmpersandEqualsToken) or_, ts_SyntaxKind_AmpersandAmpersandToken) or_, ts_SyntaxKind_AmpersandAmpersandEqualsToken) or_, ts_ShiftOperatorOrHigher) or_, ts_ShiftOperator) or_, ts_RelationalOperatorOrHigher) or_, ts_RelationalOperator) or_, ts_MultiplicativeOperatorOrHigher) or_, ts_MultiplicativeOperator) or_, ts_LogicalOperatorOrHigher) or_, ts_LogicalOperator) or_, ts_ExponentiationOperator) or_, ts_EqualityOperatorOrHigher) or_, ts_EqualityOperator) or_, ts_CompoundAssignmentOperator) or_, ts_BitwiseOperatorOrHigher) or_, ts_BitwiseOperator) or_, ts_BinaryOperatorToken) or_, ts_BinaryOperator) or_, ts_AssignmentOperatorOrHigher) or_, ts_AssignmentOperator) or_, ts_AdditiveOperatorOrHigher) or_, ts_AdditiveOperator) or_, ([`AmpersandAmpersandEqualsToken | `AmpersandAmpersandToken | `AmpersandEqualsToken | `AmpersandToken | `AsteriskAsteriskEqualsToken | `AsteriskAsteriskToken | `AsteriskEqualsToken | `AsteriskToken | `BarBarEqualsToken | `BarBarToken | `BarEqualsToken | `BarToken | `CaretEqualsToken | `CaretToken | `CommaToken | `EqualsEqualsEqualsToken | `EqualsEqualsToken | `EqualsToken | `ExclamationEqualsEqualsToken | `ExclamationEqualsToken | `GreaterThanEqualsToken | `GreaterThanGreaterThanEqualsToken | `GreaterThanGreaterThanGreaterThanEqualsToken | `GreaterThanGreaterThanGreaterThanToken | `GreaterThanGreaterThanToken | `GreaterThanToken | `InKeyword | `InstanceOfKeyword | `LessThanEqualsToken | `LessThanLessThanEqualsToken | `LessThanLessThanToken | `LessThanToken | `MinusEqualsToken | `MinusToken | `PercentEqualsToken | `PercentToken | `PlusEqualsToken | `PlusToken | `QuestionQuestionEqualsToken | `QuestionQuestionToken | `SlashEqualsToken | `SlashToken] [@js.enum])) or_enum -> right:ts_Expression -> ts_BinaryExpression [@@js.call "updateBinaryExpression"]
    val createConditionalExpression: t -> condition:ts_Expression -> questionToken:ts_QuestionToken or_undefined -> whenTrue:ts_Expression -> colonToken:ts_ColonToken or_undefined -> whenFalse:ts_Expression -> ts_ConditionalExpression [@@js.call "createConditionalExpression"]
    val updateConditionalExpression: t -> node:ts_ConditionalExpression -> condition:ts_Expression -> questionToken:ts_QuestionToken -> whenTrue:ts_Expression -> colonToken:ts_ColonToken -> whenFalse:ts_Expression -> ts_ConditionalExpression [@@js.call "updateConditionalExpression"]
    val createTemplateExpression: t -> head:ts_TemplateHead -> templateSpans:ts_TemplateSpan list -> ts_TemplateExpression [@@js.call "createTemplateExpression"]
    val updateTemplateExpression: t -> node:ts_TemplateExpression -> head:ts_TemplateHead -> templateSpans:ts_TemplateSpan list -> ts_TemplateExpression [@@js.call "updateTemplateExpression"]
    val createTemplateHead: t -> text:string -> ?rawText:string -> ?templateFlags:ts_TokenFlags -> unit -> ts_TemplateHead [@@js.call "createTemplateHead"]
    val createTemplateHead': t -> text:string or_undefined -> rawText:string -> ?templateFlags:ts_TokenFlags -> unit -> ts_TemplateHead [@@js.call "createTemplateHead"]
    val createTemplateMiddle: t -> text:string -> ?rawText:string -> ?templateFlags:ts_TokenFlags -> unit -> ts_TemplateMiddle [@@js.call "createTemplateMiddle"]
    val createTemplateMiddle': t -> text:string or_undefined -> rawText:string -> ?templateFlags:ts_TokenFlags -> unit -> ts_TemplateMiddle [@@js.call "createTemplateMiddle"]
    val createTemplateTail: t -> text:string -> ?rawText:string -> ?templateFlags:ts_TokenFlags -> unit -> ts_TemplateTail [@@js.call "createTemplateTail"]
    val createTemplateTail': t -> text:string or_undefined -> rawText:string -> ?templateFlags:ts_TokenFlags -> unit -> ts_TemplateTail [@@js.call "createTemplateTail"]
    val createNoSubstitutionTemplateLiteral: t -> text:string -> ?rawText:string -> unit -> ts_NoSubstitutionTemplateLiteral [@@js.call "createNoSubstitutionTemplateLiteral"]
    val createNoSubstitutionTemplateLiteral': t -> text:string or_undefined -> rawText:string -> ts_NoSubstitutionTemplateLiteral [@@js.call "createNoSubstitutionTemplateLiteral"]
    val createYieldExpression: t -> asteriskToken:ts_AsteriskToken -> expression:ts_Expression -> ts_YieldExpression [@@js.call "createYieldExpression"]
    val createYieldExpression': t -> asteriskToken:never or_undefined -> expression:ts_Expression or_undefined -> ts_YieldExpression [@@js.call "createYieldExpression"]
    val updateYieldExpression: t -> node:ts_YieldExpression -> asteriskToken:ts_AsteriskToken or_undefined -> expression:ts_Expression or_undefined -> ts_YieldExpression [@@js.call "updateYieldExpression"]
    val createSpreadElement: t -> expression:ts_Expression -> ts_SpreadElement [@@js.call "createSpreadElement"]
    val updateSpreadElement: t -> node:ts_SpreadElement -> expression:ts_Expression -> ts_SpreadElement [@@js.call "updateSpreadElement"]
    val createClassExpression: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier or_string or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> heritageClauses:ts_HeritageClause list or_undefined -> members:ts_ClassElement list -> ts_ClassExpression [@@js.call "createClassExpression"]
    val updateClassExpression: t -> node:ts_ClassExpression -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> heritageClauses:ts_HeritageClause list or_undefined -> members:ts_ClassElement list -> ts_ClassExpression [@@js.call "updateClassExpression"]
    val createOmittedExpression: t -> ts_OmittedExpression [@@js.call "createOmittedExpression"]
    val createExpressionWithTypeArguments: t -> expression:ts_Expression -> typeArguments:ts_TypeNode list or_undefined -> ts_ExpressionWithTypeArguments [@@js.call "createExpressionWithTypeArguments"]
    val updateExpressionWithTypeArguments: t -> node:ts_ExpressionWithTypeArguments -> expression:ts_Expression -> typeArguments:ts_TypeNode list or_undefined -> ts_ExpressionWithTypeArguments [@@js.call "updateExpressionWithTypeArguments"]
    val createAsExpression: t -> expression:ts_Expression -> type_:ts_TypeNode -> ts_AsExpression [@@js.call "createAsExpression"]
    val updateAsExpression: t -> node:ts_AsExpression -> expression:ts_Expression -> type_:ts_TypeNode -> ts_AsExpression [@@js.call "updateAsExpression"]
    val createNonNullExpression: t -> expression:ts_Expression -> ts_NonNullExpression [@@js.call "createNonNullExpression"]
    val updateNonNullExpression: t -> node:ts_NonNullExpression -> expression:ts_Expression -> ts_NonNullExpression [@@js.call "updateNonNullExpression"]
    val createNonNullChain: t -> expression:ts_Expression -> ts_NonNullChain [@@js.call "createNonNullChain"]
    val updateNonNullChain: t -> node:ts_NonNullChain -> expression:ts_Expression -> ts_NonNullChain [@@js.call "updateNonNullChain"]
    val createMetaProperty: t -> keywordToken:((ts_SyntaxKind_ImportKeyword, ts_SyntaxKind_NewKeyword) union2, ([`ImportKeyword | `NewKeyword] [@js.enum])) or_enum -> name:ts_Identifier -> ts_MetaProperty [@@js.call "createMetaProperty"]
    val updateMetaProperty: t -> node:ts_MetaProperty -> name:ts_Identifier -> ts_MetaProperty [@@js.call "updateMetaProperty"]
    val createTemplateSpan: t -> expression:ts_Expression -> literal:([`U_n_16 of ts_TemplateMiddle  | `U_n_17 of ts_TemplateTail ] [@js.union on_field "kind"]) -> ts_TemplateSpan [@@js.call "createTemplateSpan"]
    val updateTemplateSpan: t -> node:ts_TemplateSpan -> expression:ts_Expression -> literal:([`U_n_16 of ts_TemplateMiddle  | `U_n_17 of ts_TemplateTail ] [@js.union on_field "kind"]) -> ts_TemplateSpan [@@js.call "updateTemplateSpan"]
    val createSemicolonClassElement: t -> ts_SemicolonClassElement [@@js.call "createSemicolonClassElement"]
    val createBlock: t -> statements:ts_Statement list -> ?multiLine:bool -> unit -> ts_Block [@@js.call "createBlock"]
    val updateBlock: t -> node:ts_Block -> statements:ts_Statement list -> ts_Block [@@js.call "updateBlock"]
    val createVariableStatement: t -> modifiers:ts_Modifier list or_undefined -> declarationList:(ts_VariableDeclarationList, ts_VariableDeclaration list) union2 -> ts_VariableStatement [@@js.call "createVariableStatement"]
    val updateVariableStatement: t -> node:ts_VariableStatement -> modifiers:ts_Modifier list or_undefined -> declarationList:ts_VariableDeclarationList -> ts_VariableStatement [@@js.call "updateVariableStatement"]
    val createEmptyStatement: t -> ts_EmptyStatement [@@js.call "createEmptyStatement"]
    val createExpressionStatement: t -> expression:ts_Expression -> ts_ExpressionStatement [@@js.call "createExpressionStatement"]
    val updateExpressionStatement: t -> node:ts_ExpressionStatement -> expression:ts_Expression -> ts_ExpressionStatement [@@js.call "updateExpressionStatement"]
    val createIfStatement: t -> expression:ts_Expression -> thenStatement:ts_Statement -> ?elseStatement:ts_Statement -> unit -> ts_IfStatement [@@js.call "createIfStatement"]
    val updateIfStatement: t -> node:ts_IfStatement -> expression:ts_Expression -> thenStatement:ts_Statement -> elseStatement:ts_Statement or_undefined -> ts_IfStatement [@@js.call "updateIfStatement"]
    val createDoStatement: t -> statement:ts_Statement -> expression:ts_Expression -> ts_DoStatement [@@js.call "createDoStatement"]
    val updateDoStatement: t -> node:ts_DoStatement -> statement:ts_Statement -> expression:ts_Expression -> ts_DoStatement [@@js.call "updateDoStatement"]
    val createWhileStatement: t -> expression:ts_Expression -> statement:ts_Statement -> ts_WhileStatement [@@js.call "createWhileStatement"]
    val updateWhileStatement: t -> node:ts_WhileStatement -> expression:ts_Expression -> statement:ts_Statement -> ts_WhileStatement [@@js.call "updateWhileStatement"]
    val createForStatement: t -> initializer_:ts_ForInitializer or_undefined -> condition:ts_Expression or_undefined -> incrementor:ts_Expression or_undefined -> statement:ts_Statement -> ts_ForStatement [@@js.call "createForStatement"]
    val updateForStatement: t -> node:ts_ForStatement -> initializer_:ts_ForInitializer or_undefined -> condition:ts_Expression or_undefined -> incrementor:ts_Expression or_undefined -> statement:ts_Statement -> ts_ForStatement [@@js.call "updateForStatement"]
    val createForInStatement: t -> initializer_:ts_ForInitializer -> expression:ts_Expression -> statement:ts_Statement -> ts_ForInStatement [@@js.call "createForInStatement"]
    val updateForInStatement: t -> node:ts_ForInStatement -> initializer_:ts_ForInitializer -> expression:ts_Expression -> statement:ts_Statement -> ts_ForInStatement [@@js.call "updateForInStatement"]
    val createForOfStatement: t -> awaitModifier:ts_AwaitKeyword or_undefined -> initializer_:ts_ForInitializer -> expression:ts_Expression -> statement:ts_Statement -> ts_ForOfStatement [@@js.call "createForOfStatement"]
    val updateForOfStatement: t -> node:ts_ForOfStatement -> awaitModifier:ts_AwaitKeyword or_undefined -> initializer_:ts_ForInitializer -> expression:ts_Expression -> statement:ts_Statement -> ts_ForOfStatement [@@js.call "updateForOfStatement"]
    val createContinueStatement: t -> ?label:ts_Identifier or_string -> unit -> ts_ContinueStatement [@@js.call "createContinueStatement"]
    val updateContinueStatement: t -> node:ts_ContinueStatement -> label:ts_Identifier or_undefined -> ts_ContinueStatement [@@js.call "updateContinueStatement"]
    val createBreakStatement: t -> ?label:ts_Identifier or_string -> unit -> ts_BreakStatement [@@js.call "createBreakStatement"]
    val updateBreakStatement: t -> node:ts_BreakStatement -> label:ts_Identifier or_undefined -> ts_BreakStatement [@@js.call "updateBreakStatement"]
    val createReturnStatement: t -> ?expression:ts_Expression -> unit -> ts_ReturnStatement [@@js.call "createReturnStatement"]
    val updateReturnStatement: t -> node:ts_ReturnStatement -> expression:ts_Expression or_undefined -> ts_ReturnStatement [@@js.call "updateReturnStatement"]
    val createWithStatement: t -> expression:ts_Expression -> statement:ts_Statement -> ts_WithStatement [@@js.call "createWithStatement"]
    val updateWithStatement: t -> node:ts_WithStatement -> expression:ts_Expression -> statement:ts_Statement -> ts_WithStatement [@@js.call "updateWithStatement"]
    val createSwitchStatement: t -> expression:ts_Expression -> caseBlock:ts_CaseBlock -> ts_SwitchStatement [@@js.call "createSwitchStatement"]
    val updateSwitchStatement: t -> node:ts_SwitchStatement -> expression:ts_Expression -> caseBlock:ts_CaseBlock -> ts_SwitchStatement [@@js.call "updateSwitchStatement"]
    val createLabeledStatement: t -> label:ts_Identifier or_string -> statement:ts_Statement -> ts_LabeledStatement [@@js.call "createLabeledStatement"]
    val updateLabeledStatement: t -> node:ts_LabeledStatement -> label:ts_Identifier -> statement:ts_Statement -> ts_LabeledStatement [@@js.call "updateLabeledStatement"]
    val createThrowStatement: t -> expression:ts_Expression -> ts_ThrowStatement [@@js.call "createThrowStatement"]
    val updateThrowStatement: t -> node:ts_ThrowStatement -> expression:ts_Expression -> ts_ThrowStatement [@@js.call "updateThrowStatement"]
    val createTryStatement: t -> tryBlock:ts_Block -> catchClause:ts_CatchClause or_undefined -> finallyBlock:ts_Block or_undefined -> ts_TryStatement [@@js.call "createTryStatement"]
    val updateTryStatement: t -> node:ts_TryStatement -> tryBlock:ts_Block -> catchClause:ts_CatchClause or_undefined -> finallyBlock:ts_Block or_undefined -> ts_TryStatement [@@js.call "updateTryStatement"]
    val createDebuggerStatement: t -> ts_DebuggerStatement [@@js.call "createDebuggerStatement"]
    val createVariableDeclaration: t -> name:ts_BindingName or_string -> ?exclamationToken:ts_ExclamationToken -> ?type_:ts_TypeNode -> ?initializer_:ts_Expression -> unit -> ts_VariableDeclaration [@@js.call "createVariableDeclaration"]
    val updateVariableDeclaration: t -> node:ts_VariableDeclaration -> name:ts_BindingName -> exclamationToken:ts_ExclamationToken or_undefined -> type_:ts_TypeNode or_undefined -> initializer_:ts_Expression or_undefined -> ts_VariableDeclaration [@@js.call "updateVariableDeclaration"]
    val createVariableDeclarationList: t -> declarations:ts_VariableDeclaration list -> ?flags:ts_NodeFlags -> unit -> ts_VariableDeclarationList [@@js.call "createVariableDeclarationList"]
    val updateVariableDeclarationList: t -> node:ts_VariableDeclarationList -> declarations:ts_VariableDeclaration list -> ts_VariableDeclarationList [@@js.call "updateVariableDeclarationList"]
    val createFunctionDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> asteriskToken:ts_AsteriskToken or_undefined -> name:ts_Identifier or_string or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_Block or_undefined -> ts_FunctionDeclaration [@@js.call "createFunctionDeclaration"]
    val updateFunctionDeclaration: t -> node:ts_FunctionDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> asteriskToken:ts_AsteriskToken or_undefined -> name:ts_Identifier or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_Block or_undefined -> ts_FunctionDeclaration [@@js.call "updateFunctionDeclaration"]
    val createClassDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier or_string or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> heritageClauses:ts_HeritageClause list or_undefined -> members:ts_ClassElement list -> ts_ClassDeclaration [@@js.call "createClassDeclaration"]
    val updateClassDeclaration: t -> node:ts_ClassDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> heritageClauses:ts_HeritageClause list or_undefined -> members:ts_ClassElement list -> ts_ClassDeclaration [@@js.call "updateClassDeclaration"]
    val createInterfaceDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier or_string -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> heritageClauses:ts_HeritageClause list or_undefined -> members:ts_TypeElement list -> ts_InterfaceDeclaration [@@js.call "createInterfaceDeclaration"]
    val updateInterfaceDeclaration: t -> node:ts_InterfaceDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> heritageClauses:ts_HeritageClause list or_undefined -> members:ts_TypeElement list -> ts_InterfaceDeclaration [@@js.call "updateInterfaceDeclaration"]
    val createTypeAliasDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier or_string -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> type_:ts_TypeNode -> ts_TypeAliasDeclaration [@@js.call "createTypeAliasDeclaration"]
    val updateTypeAliasDeclaration: t -> node:ts_TypeAliasDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> type_:ts_TypeNode -> ts_TypeAliasDeclaration [@@js.call "updateTypeAliasDeclaration"]
    val createEnumDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier or_string -> members:ts_EnumMember list -> ts_EnumDeclaration [@@js.call "createEnumDeclaration"]
    val updateEnumDeclaration: t -> node:ts_EnumDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier -> members:ts_EnumMember list -> ts_EnumDeclaration [@@js.call "updateEnumDeclaration"]
    val createModuleDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_ModuleName -> body:ts_ModuleBody or_undefined -> ?flags:ts_NodeFlags -> unit -> ts_ModuleDeclaration [@@js.call "createModuleDeclaration"]
    val updateModuleDeclaration: t -> node:ts_ModuleDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_ModuleName -> body:ts_ModuleBody or_undefined -> ts_ModuleDeclaration [@@js.call "updateModuleDeclaration"]
    val createModuleBlock: t -> statements:ts_Statement list -> ts_ModuleBlock [@@js.call "createModuleBlock"]
    val updateModuleBlock: t -> node:ts_ModuleBlock -> statements:ts_Statement list -> ts_ModuleBlock [@@js.call "updateModuleBlock"]
    val createCaseBlock: t -> clauses:ts_CaseOrDefaultClause list -> ts_CaseBlock [@@js.call "createCaseBlock"]
    val updateCaseBlock: t -> node:ts_CaseBlock -> clauses:ts_CaseOrDefaultClause list -> ts_CaseBlock [@@js.call "updateCaseBlock"]
    val createNamespaceExportDeclaration: t -> name:ts_Identifier or_string -> ts_NamespaceExportDeclaration [@@js.call "createNamespaceExportDeclaration"]
    val updateNamespaceExportDeclaration: t -> node:ts_NamespaceExportDeclaration -> name:ts_Identifier -> ts_NamespaceExportDeclaration [@@js.call "updateNamespaceExportDeclaration"]
    val createImportEqualsDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> isTypeOnly:bool -> name:ts_Identifier or_string -> moduleReference:ts_ModuleReference -> ts_ImportEqualsDeclaration [@@js.call "createImportEqualsDeclaration"]
    val updateImportEqualsDeclaration: t -> node:ts_ImportEqualsDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> isTypeOnly:bool -> name:ts_Identifier -> moduleReference:ts_ModuleReference -> ts_ImportEqualsDeclaration [@@js.call "updateImportEqualsDeclaration"]
    val createImportDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> importClause:ts_ImportClause or_undefined -> moduleSpecifier:ts_Expression -> ts_ImportDeclaration [@@js.call "createImportDeclaration"]
    val updateImportDeclaration: t -> node:ts_ImportDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> importClause:ts_ImportClause or_undefined -> moduleSpecifier:ts_Expression -> ts_ImportDeclaration [@@js.call "updateImportDeclaration"]
    val createImportClause: t -> isTypeOnly:bool -> name:ts_Identifier or_undefined -> namedBindings:ts_NamedImportBindings or_undefined -> ts_ImportClause [@@js.call "createImportClause"]
    val updateImportClause: t -> node:ts_ImportClause -> isTypeOnly:bool -> name:ts_Identifier or_undefined -> namedBindings:ts_NamedImportBindings or_undefined -> ts_ImportClause [@@js.call "updateImportClause"]
    val createNamespaceImport: t -> name:ts_Identifier -> ts_NamespaceImport [@@js.call "createNamespaceImport"]
    val updateNamespaceImport: t -> node:ts_NamespaceImport -> name:ts_Identifier -> ts_NamespaceImport [@@js.call "updateNamespaceImport"]
    val createNamespaceExport: t -> name:ts_Identifier -> ts_NamespaceExport [@@js.call "createNamespaceExport"]
    val updateNamespaceExport: t -> node:ts_NamespaceExport -> name:ts_Identifier -> ts_NamespaceExport [@@js.call "updateNamespaceExport"]
    val createNamedImports: t -> elements:ts_ImportSpecifier list -> ts_NamedImports [@@js.call "createNamedImports"]
    val updateNamedImports: t -> node:ts_NamedImports -> elements:ts_ImportSpecifier list -> ts_NamedImports [@@js.call "updateNamedImports"]
    val createImportSpecifier: t -> propertyName:ts_Identifier or_undefined -> name:ts_Identifier -> ts_ImportSpecifier [@@js.call "createImportSpecifier"]
    val updateImportSpecifier: t -> node:ts_ImportSpecifier -> propertyName:ts_Identifier or_undefined -> name:ts_Identifier -> ts_ImportSpecifier [@@js.call "updateImportSpecifier"]
    val createExportAssignment: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> isExportEquals:bool or_undefined -> expression:ts_Expression -> ts_ExportAssignment [@@js.call "createExportAssignment"]
    val updateExportAssignment: t -> node:ts_ExportAssignment -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> expression:ts_Expression -> ts_ExportAssignment [@@js.call "updateExportAssignment"]
    val createExportDeclaration: t -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> isTypeOnly:bool -> exportClause:ts_NamedExportBindings or_undefined -> ?moduleSpecifier:ts_Expression -> unit -> ts_ExportDeclaration [@@js.call "createExportDeclaration"]
    val updateExportDeclaration: t -> node:ts_ExportDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> isTypeOnly:bool -> exportClause:ts_NamedExportBindings or_undefined -> moduleSpecifier:ts_Expression or_undefined -> ts_ExportDeclaration [@@js.call "updateExportDeclaration"]
    val createNamedExports: t -> elements:ts_ExportSpecifier list -> ts_NamedExports [@@js.call "createNamedExports"]
    val updateNamedExports: t -> node:ts_NamedExports -> elements:ts_ExportSpecifier list -> ts_NamedExports [@@js.call "updateNamedExports"]
    val createExportSpecifier: t -> propertyName:ts_Identifier or_string or_undefined -> name:ts_Identifier or_string -> ts_ExportSpecifier [@@js.call "createExportSpecifier"]
    val updateExportSpecifier: t -> node:ts_ExportSpecifier -> propertyName:ts_Identifier or_undefined -> name:ts_Identifier -> ts_ExportSpecifier [@@js.call "updateExportSpecifier"]
    val createExternalModuleReference: t -> expression:ts_Expression -> ts_ExternalModuleReference [@@js.call "createExternalModuleReference"]
    val updateExternalModuleReference: t -> node:ts_ExternalModuleReference -> expression:ts_Expression -> ts_ExternalModuleReference [@@js.call "updateExternalModuleReference"]
    val createJSDocAllType: t -> ts_JSDocAllType [@@js.call "createJSDocAllType"]
    val createJSDocUnknownType: t -> ts_JSDocUnknownType [@@js.call "createJSDocUnknownType"]
    val createJSDocNonNullableType: t -> type_:ts_TypeNode -> ts_JSDocNonNullableType [@@js.call "createJSDocNonNullableType"]
    val updateJSDocNonNullableType: t -> node:ts_JSDocNonNullableType -> type_:ts_TypeNode -> ts_JSDocNonNullableType [@@js.call "updateJSDocNonNullableType"]
    val createJSDocNullableType: t -> type_:ts_TypeNode -> ts_JSDocNullableType [@@js.call "createJSDocNullableType"]
    val updateJSDocNullableType: t -> node:ts_JSDocNullableType -> type_:ts_TypeNode -> ts_JSDocNullableType [@@js.call "updateJSDocNullableType"]
    val createJSDocOptionalType: t -> type_:ts_TypeNode -> ts_JSDocOptionalType [@@js.call "createJSDocOptionalType"]
    val updateJSDocOptionalType: t -> node:ts_JSDocOptionalType -> type_:ts_TypeNode -> ts_JSDocOptionalType [@@js.call "updateJSDocOptionalType"]
    val createJSDocFunctionType: t -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> ts_JSDocFunctionType [@@js.call "createJSDocFunctionType"]
    val updateJSDocFunctionType: t -> node:ts_JSDocFunctionType -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> ts_JSDocFunctionType [@@js.call "updateJSDocFunctionType"]
    val createJSDocVariadicType: t -> type_:ts_TypeNode -> ts_JSDocVariadicType [@@js.call "createJSDocVariadicType"]
    val updateJSDocVariadicType: t -> node:ts_JSDocVariadicType -> type_:ts_TypeNode -> ts_JSDocVariadicType [@@js.call "updateJSDocVariadicType"]
    val createJSDocNamepathType: t -> type_:ts_TypeNode -> ts_JSDocNamepathType [@@js.call "createJSDocNamepathType"]
    val updateJSDocNamepathType: t -> node:ts_JSDocNamepathType -> type_:ts_TypeNode -> ts_JSDocNamepathType [@@js.call "updateJSDocNamepathType"]
    val createJSDocTypeExpression: t -> type_:ts_TypeNode -> ts_JSDocTypeExpression [@@js.call "createJSDocTypeExpression"]
    val updateJSDocTypeExpression: t -> node:ts_JSDocTypeExpression -> type_:ts_TypeNode -> ts_JSDocTypeExpression [@@js.call "updateJSDocTypeExpression"]
    val createJSDocNameReference: t -> name:ts_EntityName -> ts_JSDocNameReference [@@js.call "createJSDocNameReference"]
    val updateJSDocNameReference: t -> node:ts_JSDocNameReference -> name:ts_EntityName -> ts_JSDocNameReference [@@js.call "updateJSDocNameReference"]
    val createJSDocTypeLiteral: t -> ?jsDocPropertyTags:ts_JSDocPropertyLikeTag list -> ?isArrayType:bool -> unit -> ts_JSDocTypeLiteral [@@js.call "createJSDocTypeLiteral"]
    val updateJSDocTypeLiteral: t -> node:ts_JSDocTypeLiteral -> jsDocPropertyTags:ts_JSDocPropertyLikeTag list or_undefined -> isArrayType:bool or_undefined -> ts_JSDocTypeLiteral [@@js.call "updateJSDocTypeLiteral"]
    val createJSDocSignature: t -> typeParameters:ts_JSDocTemplateTag list or_undefined -> parameters:ts_JSDocParameterTag list -> ?type_:ts_JSDocReturnTag -> unit -> ts_JSDocSignature [@@js.call "createJSDocSignature"]
    val updateJSDocSignature: t -> node:ts_JSDocSignature -> typeParameters:ts_JSDocTemplateTag list or_undefined -> parameters:ts_JSDocParameterTag list -> type_:ts_JSDocReturnTag or_undefined -> ts_JSDocSignature [@@js.call "updateJSDocSignature"]
    val createJSDocTemplateTag: t -> tagName:ts_Identifier or_undefined -> constraint_:ts_JSDocTypeExpression or_undefined -> typeParameters:ts_TypeParameterDeclaration list -> ?comment:string -> unit -> ts_JSDocTemplateTag [@@js.call "createJSDocTemplateTag"]
    val updateJSDocTemplateTag: t -> node:ts_JSDocTemplateTag -> tagName:ts_Identifier or_undefined -> constraint_:ts_JSDocTypeExpression or_undefined -> typeParameters:ts_TypeParameterDeclaration list -> comment:string or_undefined -> ts_JSDocTemplateTag [@@js.call "updateJSDocTemplateTag"]
    val createJSDocTypedefTag: t -> tagName:ts_Identifier or_undefined -> ?typeExpression:([`U_n_301 of ts_JSDocTypeExpression  | `U_n_312 of ts_JSDocTypeLiteral ] [@js.union on_field "kind"]) -> ?fullName:([`U_n_78 of ts_Identifier  | `U_n_256 of ts_JSDocNamespaceDeclaration ] [@js.union on_field "kind"]) -> ?comment:string -> unit -> ts_JSDocTypedefTag [@@js.call "createJSDocTypedefTag"]
    val updateJSDocTypedefTag: t -> node:ts_JSDocTypedefTag -> tagName:ts_Identifier or_undefined -> typeExpression:([`U_n_301 of ts_JSDocTypeExpression  | `U_n_312 of ts_JSDocTypeLiteral ] [@js.union on_field "kind"]) or_undefined -> fullName:([`U_n_78 of ts_Identifier  | `U_n_256 of ts_JSDocNamespaceDeclaration ] [@js.union on_field "kind"]) or_undefined -> comment:string or_undefined -> ts_JSDocTypedefTag [@@js.call "updateJSDocTypedefTag"]
    val createJSDocParameterTag: t -> tagName:ts_Identifier or_undefined -> name:ts_EntityName -> isBracketed:bool -> ?typeExpression:ts_JSDocTypeExpression -> ?isNameFirst:bool -> ?comment:string -> unit -> ts_JSDocParameterTag [@@js.call "createJSDocParameterTag"]
    val updateJSDocParameterTag: t -> node:ts_JSDocParameterTag -> tagName:ts_Identifier or_undefined -> name:ts_EntityName -> isBracketed:bool -> typeExpression:ts_JSDocTypeExpression or_undefined -> isNameFirst:bool -> comment:string or_undefined -> ts_JSDocParameterTag [@@js.call "updateJSDocParameterTag"]
    val createJSDocPropertyTag: t -> tagName:ts_Identifier or_undefined -> name:ts_EntityName -> isBracketed:bool -> ?typeExpression:ts_JSDocTypeExpression -> ?isNameFirst:bool -> ?comment:string -> unit -> ts_JSDocPropertyTag [@@js.call "createJSDocPropertyTag"]
    val updateJSDocPropertyTag: t -> node:ts_JSDocPropertyTag -> tagName:ts_Identifier or_undefined -> name:ts_EntityName -> isBracketed:bool -> typeExpression:ts_JSDocTypeExpression or_undefined -> isNameFirst:bool -> comment:string or_undefined -> ts_JSDocPropertyTag [@@js.call "updateJSDocPropertyTag"]
    val createJSDocTypeTag: t -> tagName:ts_Identifier or_undefined -> typeExpression:ts_JSDocTypeExpression -> ?comment:string -> unit -> ts_JSDocTypeTag [@@js.call "createJSDocTypeTag"]
    val updateJSDocTypeTag: t -> node:ts_JSDocTypeTag -> tagName:ts_Identifier or_undefined -> typeExpression:ts_JSDocTypeExpression -> comment:string or_undefined -> ts_JSDocTypeTag [@@js.call "updateJSDocTypeTag"]
    val createJSDocSeeTag: t -> tagName:ts_Identifier or_undefined -> nameExpression:ts_JSDocNameReference or_undefined -> ?comment:string -> unit -> ts_JSDocSeeTag [@@js.call "createJSDocSeeTag"]
    val updateJSDocSeeTag: t -> node:ts_JSDocSeeTag -> tagName:ts_Identifier or_undefined -> nameExpression:ts_JSDocNameReference or_undefined -> ?comment:string -> unit -> ts_JSDocSeeTag [@@js.call "updateJSDocSeeTag"]
    val createJSDocReturnTag: t -> tagName:ts_Identifier or_undefined -> ?typeExpression:ts_JSDocTypeExpression -> ?comment:string -> unit -> ts_JSDocReturnTag [@@js.call "createJSDocReturnTag"]
    val updateJSDocReturnTag: t -> node:ts_JSDocReturnTag -> tagName:ts_Identifier or_undefined -> typeExpression:ts_JSDocTypeExpression or_undefined -> comment:string or_undefined -> ts_JSDocReturnTag [@@js.call "updateJSDocReturnTag"]
    val createJSDocThisTag: t -> tagName:ts_Identifier or_undefined -> typeExpression:ts_JSDocTypeExpression -> ?comment:string -> unit -> ts_JSDocThisTag [@@js.call "createJSDocThisTag"]
    val updateJSDocThisTag: t -> node:ts_JSDocThisTag -> tagName:ts_Identifier or_undefined -> typeExpression:ts_JSDocTypeExpression or_undefined -> comment:string or_undefined -> ts_JSDocThisTag [@@js.call "updateJSDocThisTag"]
    val createJSDocEnumTag: t -> tagName:ts_Identifier or_undefined -> typeExpression:ts_JSDocTypeExpression -> ?comment:string -> unit -> ts_JSDocEnumTag [@@js.call "createJSDocEnumTag"]
    val updateJSDocEnumTag: t -> node:ts_JSDocEnumTag -> tagName:ts_Identifier or_undefined -> typeExpression:ts_JSDocTypeExpression -> comment:string or_undefined -> ts_JSDocEnumTag [@@js.call "updateJSDocEnumTag"]
    val createJSDocCallbackTag: t -> tagName:ts_Identifier or_undefined -> typeExpression:ts_JSDocSignature -> ?fullName:([`U_n_78 of ts_Identifier  | `U_n_256 of ts_JSDocNamespaceDeclaration ] [@js.union on_field "kind"]) -> ?comment:string -> unit -> ts_JSDocCallbackTag [@@js.call "createJSDocCallbackTag"]
    val updateJSDocCallbackTag: t -> node:ts_JSDocCallbackTag -> tagName:ts_Identifier or_undefined -> typeExpression:ts_JSDocSignature -> fullName:([`U_n_78 of ts_Identifier  | `U_n_256 of ts_JSDocNamespaceDeclaration ] [@js.union on_field "kind"]) or_undefined -> comment:string or_undefined -> ts_JSDocCallbackTag [@@js.call "updateJSDocCallbackTag"]
    val createJSDocAugmentsTag: t -> tagName:ts_Identifier or_undefined -> className:(ts_ExpressionWithTypeArguments, anonymous_interface_7) intersection2 -> ?comment:string -> unit -> ts_JSDocAugmentsTag [@@js.call "createJSDocAugmentsTag"]
    val updateJSDocAugmentsTag: t -> node:ts_JSDocAugmentsTag -> tagName:ts_Identifier or_undefined -> className:(ts_ExpressionWithTypeArguments, anonymous_interface_7) intersection2 -> comment:string or_undefined -> ts_JSDocAugmentsTag [@@js.call "updateJSDocAugmentsTag"]
    val createJSDocImplementsTag: t -> tagName:ts_Identifier or_undefined -> className:(ts_ExpressionWithTypeArguments, anonymous_interface_7) intersection2 -> ?comment:string -> unit -> ts_JSDocImplementsTag [@@js.call "createJSDocImplementsTag"]
    val updateJSDocImplementsTag: t -> node:ts_JSDocImplementsTag -> tagName:ts_Identifier or_undefined -> className:(ts_ExpressionWithTypeArguments, anonymous_interface_7) intersection2 -> comment:string or_undefined -> ts_JSDocImplementsTag [@@js.call "updateJSDocImplementsTag"]
    val createJSDocAuthorTag: t -> tagName:ts_Identifier or_undefined -> ?comment:string -> unit -> ts_JSDocAuthorTag [@@js.call "createJSDocAuthorTag"]
    val updateJSDocAuthorTag: t -> node:ts_JSDocAuthorTag -> tagName:ts_Identifier or_undefined -> comment:string or_undefined -> ts_JSDocAuthorTag [@@js.call "updateJSDocAuthorTag"]
    val createJSDocClassTag: t -> tagName:ts_Identifier or_undefined -> ?comment:string -> unit -> ts_JSDocClassTag [@@js.call "createJSDocClassTag"]
    val updateJSDocClassTag: t -> node:ts_JSDocClassTag -> tagName:ts_Identifier or_undefined -> comment:string or_undefined -> ts_JSDocClassTag [@@js.call "updateJSDocClassTag"]
    val createJSDocPublicTag: t -> tagName:ts_Identifier or_undefined -> ?comment:string -> unit -> ts_JSDocPublicTag [@@js.call "createJSDocPublicTag"]
    val updateJSDocPublicTag: t -> node:ts_JSDocPublicTag -> tagName:ts_Identifier or_undefined -> comment:string or_undefined -> ts_JSDocPublicTag [@@js.call "updateJSDocPublicTag"]
    val createJSDocPrivateTag: t -> tagName:ts_Identifier or_undefined -> ?comment:string -> unit -> ts_JSDocPrivateTag [@@js.call "createJSDocPrivateTag"]
    val updateJSDocPrivateTag: t -> node:ts_JSDocPrivateTag -> tagName:ts_Identifier or_undefined -> comment:string or_undefined -> ts_JSDocPrivateTag [@@js.call "updateJSDocPrivateTag"]
    val createJSDocProtectedTag: t -> tagName:ts_Identifier or_undefined -> ?comment:string -> unit -> ts_JSDocProtectedTag [@@js.call "createJSDocProtectedTag"]
    val updateJSDocProtectedTag: t -> node:ts_JSDocProtectedTag -> tagName:ts_Identifier or_undefined -> comment:string or_undefined -> ts_JSDocProtectedTag [@@js.call "updateJSDocProtectedTag"]
    val createJSDocReadonlyTag: t -> tagName:ts_Identifier or_undefined -> ?comment:string -> unit -> ts_JSDocReadonlyTag [@@js.call "createJSDocReadonlyTag"]
    val updateJSDocReadonlyTag: t -> node:ts_JSDocReadonlyTag -> tagName:ts_Identifier or_undefined -> comment:string or_undefined -> ts_JSDocReadonlyTag [@@js.call "updateJSDocReadonlyTag"]
    val createJSDocUnknownTag: t -> tagName:ts_Identifier -> ?comment:string -> unit -> ts_JSDocUnknownTag [@@js.call "createJSDocUnknownTag"]
    val updateJSDocUnknownTag: t -> node:ts_JSDocUnknownTag -> tagName:ts_Identifier -> comment:string or_undefined -> ts_JSDocUnknownTag [@@js.call "updateJSDocUnknownTag"]
    val createJSDocDeprecatedTag: t -> tagName:ts_Identifier -> ?comment:string -> unit -> ts_JSDocDeprecatedTag [@@js.call "createJSDocDeprecatedTag"]
    val updateJSDocDeprecatedTag: t -> node:ts_JSDocDeprecatedTag -> tagName:ts_Identifier -> ?comment:string -> unit -> ts_JSDocDeprecatedTag [@@js.call "updateJSDocDeprecatedTag"]
    val createJSDocComment: t -> ?comment:string or_undefined -> ?tags:ts_JSDocTag list or_undefined -> unit -> ts_JSDoc [@@js.call "createJSDocComment"]
    val updateJSDocComment: t -> node:ts_JSDoc -> comment:string or_undefined -> tags:ts_JSDocTag list or_undefined -> ts_JSDoc [@@js.call "updateJSDocComment"]
    val createJsxElement: t -> openingElement:ts_JsxOpeningElement -> children:ts_JsxChild list -> closingElement:ts_JsxClosingElement -> ts_JsxElement [@@js.call "createJsxElement"]
    val updateJsxElement: t -> node:ts_JsxElement -> openingElement:ts_JsxOpeningElement -> children:ts_JsxChild list -> closingElement:ts_JsxClosingElement -> ts_JsxElement [@@js.call "updateJsxElement"]
    val createJsxSelfClosingElement: t -> tagName:ts_JsxTagNameExpression -> typeArguments:ts_TypeNode list or_undefined -> attributes:ts_JsxAttributes -> ts_JsxSelfClosingElement [@@js.call "createJsxSelfClosingElement"]
    val updateJsxSelfClosingElement: t -> node:ts_JsxSelfClosingElement -> tagName:ts_JsxTagNameExpression -> typeArguments:ts_TypeNode list or_undefined -> attributes:ts_JsxAttributes -> ts_JsxSelfClosingElement [@@js.call "updateJsxSelfClosingElement"]
    val createJsxOpeningElement: t -> tagName:ts_JsxTagNameExpression -> typeArguments:ts_TypeNode list or_undefined -> attributes:ts_JsxAttributes -> ts_JsxOpeningElement [@@js.call "createJsxOpeningElement"]
    val updateJsxOpeningElement: t -> node:ts_JsxOpeningElement -> tagName:ts_JsxTagNameExpression -> typeArguments:ts_TypeNode list or_undefined -> attributes:ts_JsxAttributes -> ts_JsxOpeningElement [@@js.call "updateJsxOpeningElement"]
    val createJsxClosingElement: t -> tagName:ts_JsxTagNameExpression -> ts_JsxClosingElement [@@js.call "createJsxClosingElement"]
    val updateJsxClosingElement: t -> node:ts_JsxClosingElement -> tagName:ts_JsxTagNameExpression -> ts_JsxClosingElement [@@js.call "updateJsxClosingElement"]
    val createJsxFragment: t -> openingFragment:ts_JsxOpeningFragment -> children:ts_JsxChild list -> closingFragment:ts_JsxClosingFragment -> ts_JsxFragment [@@js.call "createJsxFragment"]
    val createJsxText: t -> text:string -> ?containsOnlyTriviaWhiteSpaces:bool -> unit -> ts_JsxText [@@js.call "createJsxText"]
    val updateJsxText: t -> node:ts_JsxText -> text:string -> ?containsOnlyTriviaWhiteSpaces:bool -> unit -> ts_JsxText [@@js.call "updateJsxText"]
    val createJsxOpeningFragment: t -> ts_JsxOpeningFragment [@@js.call "createJsxOpeningFragment"]
    val createJsxJsxClosingFragment: t -> ts_JsxClosingFragment [@@js.call "createJsxJsxClosingFragment"]
    val updateJsxFragment: t -> node:ts_JsxFragment -> openingFragment:ts_JsxOpeningFragment -> children:ts_JsxChild list -> closingFragment:ts_JsxClosingFragment -> ts_JsxFragment [@@js.call "updateJsxFragment"]
    val createJsxAttribute: t -> name:ts_Identifier -> initializer_:([`U_n_10 of ts_StringLiteral  | `U_n_283 of ts_JsxExpression ] [@js.union on_field "kind"]) or_undefined -> ts_JsxAttribute [@@js.call "createJsxAttribute"]
    val updateJsxAttribute: t -> node:ts_JsxAttribute -> name:ts_Identifier -> initializer_:([`U_n_10 of ts_StringLiteral  | `U_n_283 of ts_JsxExpression ] [@js.union on_field "kind"]) or_undefined -> ts_JsxAttribute [@@js.call "updateJsxAttribute"]
    val createJsxAttributes: t -> properties:ts_JsxAttributeLike list -> ts_JsxAttributes [@@js.call "createJsxAttributes"]
    val updateJsxAttributes: t -> node:ts_JsxAttributes -> properties:ts_JsxAttributeLike list -> ts_JsxAttributes [@@js.call "updateJsxAttributes"]
    val createJsxSpreadAttribute: t -> expression:ts_Expression -> ts_JsxSpreadAttribute [@@js.call "createJsxSpreadAttribute"]
    val updateJsxSpreadAttribute: t -> node:ts_JsxSpreadAttribute -> expression:ts_Expression -> ts_JsxSpreadAttribute [@@js.call "updateJsxSpreadAttribute"]
    val createJsxExpression: t -> dotDotDotToken:ts_DotDotDotToken or_undefined -> expression:ts_Expression or_undefined -> ts_JsxExpression [@@js.call "createJsxExpression"]
    val updateJsxExpression: t -> node:ts_JsxExpression -> expression:ts_Expression or_undefined -> ts_JsxExpression [@@js.call "updateJsxExpression"]
    val createCaseClause: t -> expression:ts_Expression -> statements:ts_Statement list -> ts_CaseClause [@@js.call "createCaseClause"]
    val updateCaseClause: t -> node:ts_CaseClause -> expression:ts_Expression -> statements:ts_Statement list -> ts_CaseClause [@@js.call "updateCaseClause"]
    val createDefaultClause: t -> statements:ts_Statement list -> ts_DefaultClause [@@js.call "createDefaultClause"]
    val updateDefaultClause: t -> node:ts_DefaultClause -> statements:ts_Statement list -> ts_DefaultClause [@@js.call "updateDefaultClause"]
    val createHeritageClause: t -> token:((ts_SyntaxKind_ExtendsKeyword, ts_SyntaxKind_ImplementsKeyword) union2, ([`ExtendsKeyword | `ImplementsKeyword] [@js.enum])) or_enum -> types:ts_ExpressionWithTypeArguments list -> ts_HeritageClause [@@js.call "createHeritageClause"]
    val updateHeritageClause: t -> node:ts_HeritageClause -> types:ts_ExpressionWithTypeArguments list -> ts_HeritageClause [@@js.call "updateHeritageClause"]
    val createCatchClause: t -> variableDeclaration:ts_VariableDeclaration or_string or_undefined -> block:ts_Block -> ts_CatchClause [@@js.call "createCatchClause"]
    val updateCatchClause: t -> node:ts_CatchClause -> variableDeclaration:ts_VariableDeclaration or_undefined -> block:ts_Block -> ts_CatchClause [@@js.call "updateCatchClause"]
    val createPropertyAssignment: t -> name:ts_PropertyName or_string -> initializer_:ts_Expression -> ts_PropertyAssignment [@@js.call "createPropertyAssignment"]
    val updatePropertyAssignment: t -> node:ts_PropertyAssignment -> name:ts_PropertyName -> initializer_:ts_Expression -> ts_PropertyAssignment [@@js.call "updatePropertyAssignment"]
    val createShorthandPropertyAssignment: t -> name:ts_Identifier or_string -> ?objectAssignmentInitializer:ts_Expression -> unit -> ts_ShorthandPropertyAssignment [@@js.call "createShorthandPropertyAssignment"]
    val updateShorthandPropertyAssignment: t -> node:ts_ShorthandPropertyAssignment -> name:ts_Identifier -> objectAssignmentInitializer:ts_Expression or_undefined -> ts_ShorthandPropertyAssignment [@@js.call "updateShorthandPropertyAssignment"]
    val createSpreadAssignment: t -> expression:ts_Expression -> ts_SpreadAssignment [@@js.call "createSpreadAssignment"]
    val updateSpreadAssignment: t -> node:ts_SpreadAssignment -> expression:ts_Expression -> ts_SpreadAssignment [@@js.call "updateSpreadAssignment"]
    val createEnumMember: t -> name:ts_PropertyName or_string -> ?initializer_:ts_Expression -> unit -> ts_EnumMember [@@js.call "createEnumMember"]
    val updateEnumMember: t -> node:ts_EnumMember -> name:ts_PropertyName -> initializer_:ts_Expression or_undefined -> ts_EnumMember [@@js.call "updateEnumMember"]
    val createSourceFile: t -> statements:ts_Statement list -> endOfFileToken:ts_EndOfFileToken -> flags:ts_NodeFlags -> ts_SourceFile [@@js.call "createSourceFile"]
    val updateSourceFile: t -> node:ts_SourceFile -> statements:ts_Statement list -> ?isDeclarationFile:bool -> ?referencedFiles:ts_FileReference list -> ?typeReferences:ts_FileReference list -> ?hasNoDefaultLib:bool -> ?libReferences:ts_FileReference list -> unit -> ts_SourceFile [@@js.call "updateSourceFile"]
    val createNotEmittedStatement: t -> original:ts_Node -> ts_NotEmittedStatement [@@js.call "createNotEmittedStatement"]
    val createPartiallyEmittedExpression: t -> expression:ts_Expression -> ?original:ts_Node -> unit -> ts_PartiallyEmittedExpression [@@js.call "createPartiallyEmittedExpression"]
    val updatePartiallyEmittedExpression: t -> node:ts_PartiallyEmittedExpression -> expression:ts_Expression -> ts_PartiallyEmittedExpression [@@js.call "updatePartiallyEmittedExpression"]
    val createCommaListExpression: t -> elements:ts_Expression list -> ts_CommaListExpression [@@js.call "createCommaListExpression"]
    val updateCommaListExpression: t -> node:ts_CommaListExpression -> elements:ts_Expression list -> ts_CommaListExpression [@@js.call "updateCommaListExpression"]
    val createBundle: t -> sourceFiles:ts_SourceFile list -> ?prepends:([`U_n_299 of ts_UnparsedSource  | `U_n_300 of ts_InputFiles ] [@js.union on_field "kind"]) list -> unit -> ts_Bundle [@@js.call "createBundle"]
    val updateBundle: t -> node:ts_Bundle -> sourceFiles:ts_SourceFile list -> ?prepends:([`U_n_299 of ts_UnparsedSource  | `U_n_300 of ts_InputFiles ] [@js.union on_field "kind"]) list -> unit -> ts_Bundle [@@js.call "updateBundle"]
    val createComma: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createComma"]
    val createAssignment: t -> left:([`U_n_199 of ts_ArrayLiteralExpression  | `U_n_200 of ts_ObjectLiteralExpression ] [@js.union on_field "kind"]) -> right:ts_Expression -> ts_DestructuringAssignment [@@js.call "createAssignment"]
    val createAssignment': t -> left:ts_Expression -> right:ts_Expression -> ts_EqualsToken ts_AssignmentExpression [@@js.call "createAssignment"]
    val createLogicalOr: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createLogicalOr"]
    val createLogicalAnd: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createLogicalAnd"]
    val createBitwiseOr: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createBitwiseOr"]
    val createBitwiseXor: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createBitwiseXor"]
    val createBitwiseAnd: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createBitwiseAnd"]
    val createStrictEquality: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createStrictEquality"]
    val createStrictInequality: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createStrictInequality"]
    val createEquality: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createEquality"]
    val createInequality: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createInequality"]
    val createLessThan: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createLessThan"]
    val createLessThanEquals: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createLessThanEquals"]
    val createGreaterThan: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createGreaterThan"]
    val createGreaterThanEquals: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createGreaterThanEquals"]
    val createLeftShift: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createLeftShift"]
    val createRightShift: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createRightShift"]
    val createUnsignedRightShift: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createUnsignedRightShift"]
    val createAdd: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createAdd"]
    val createSubtract: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createSubtract"]
    val createMultiply: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createMultiply"]
    val createDivide: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createDivide"]
    val createModulo: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createModulo"]
    val createExponent: t -> left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.call "createExponent"]
    val createPrefixPlus: t -> operand:ts_Expression -> ts_PrefixUnaryExpression [@@js.call "createPrefixPlus"]
    val createPrefixMinus: t -> operand:ts_Expression -> ts_PrefixUnaryExpression [@@js.call "createPrefixMinus"]
    val createPrefixIncrement: t -> operand:ts_Expression -> ts_PrefixUnaryExpression [@@js.call "createPrefixIncrement"]
    val createPrefixDecrement: t -> operand:ts_Expression -> ts_PrefixUnaryExpression [@@js.call "createPrefixDecrement"]
    val createBitwiseNot: t -> operand:ts_Expression -> ts_PrefixUnaryExpression [@@js.call "createBitwiseNot"]
    val createLogicalNot: t -> operand:ts_Expression -> ts_PrefixUnaryExpression [@@js.call "createLogicalNot"]
    val createPostfixIncrement: t -> operand:ts_Expression -> ts_PostfixUnaryExpression [@@js.call "createPostfixIncrement"]
    val createPostfixDecrement: t -> operand:ts_Expression -> ts_PostfixUnaryExpression [@@js.call "createPostfixDecrement"]
    val createImmediatelyInvokedFunctionExpression: t -> statements:ts_Statement list -> ts_CallExpression [@@js.call "createImmediatelyInvokedFunctionExpression"]
    val createImmediatelyInvokedFunctionExpression': t -> statements:ts_Statement list -> param:ts_ParameterDeclaration -> paramValue:ts_Expression -> ts_CallExpression [@@js.call "createImmediatelyInvokedFunctionExpression"]
    val createImmediatelyInvokedArrowFunction: t -> statements:ts_Statement list -> ts_CallExpression [@@js.call "createImmediatelyInvokedArrowFunction"]
    val createImmediatelyInvokedArrowFunction': t -> statements:ts_Statement list -> param:ts_ParameterDeclaration -> paramValue:ts_Expression -> ts_CallExpression [@@js.call "createImmediatelyInvokedArrowFunction"]
    val createVoidZero: t -> ts_VoidExpression [@@js.call "createVoidZero"]
    val createExportDefault: t -> expression:ts_Expression -> ts_ExportAssignment [@@js.call "createExportDefault"]
    val createExternalModuleExport: t -> exportName:ts_Identifier -> ts_ExportDeclaration [@@js.call "createExternalModuleExport"]
    val restoreOuterExpressions: t -> outerExpression:ts_Expression or_undefined -> innerExpression:ts_Expression -> ?kinds:ts_OuterExpressionKinds -> unit -> ts_Expression [@@js.call "restoreOuterExpressions"]
  end
  module[@js.scope "CoreTransformationContext"] CoreTransformationContext : sig
    type t = ts_CoreTransformationContext
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CoreTransformationContext]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CoreTransformationContext]
    ]
    val get_factory: t -> ts_NodeFactory [@@js.get "factory"]
    (** Gets the compiler options supplied to the transformer. *)
    val getCompilerOptions: t -> ts_CompilerOptions [@@js.call "getCompilerOptions"]
    (** Starts a new lexical environment. *)
    val startLexicalEnvironment: t -> unit [@@js.call "startLexicalEnvironment"]
    (** Suspends the current lexical environment, usually after visiting a parameter list. *)
    val suspendLexicalEnvironment: t -> unit [@@js.call "suspendLexicalEnvironment"]
    (** Resumes a suspended lexical environment, usually before visiting a function body. *)
    val resumeLexicalEnvironment: t -> unit [@@js.call "resumeLexicalEnvironment"]
    (** Ends a lexical environment, returning any declarations. *)
    val endLexicalEnvironment: t -> ts_Statement list or_undefined [@@js.call "endLexicalEnvironment"]
    (** Hoists a function declaration to the containing scope. *)
    val hoistFunctionDeclaration: t -> node:ts_FunctionDeclaration -> unit [@@js.call "hoistFunctionDeclaration"]
    (** Hoists a variable declaration to the containing scope. *)
    val hoistVariableDeclaration: t -> node:ts_Identifier -> unit [@@js.call "hoistVariableDeclaration"]
  end
  module[@js.scope "TransformationContext"] TransformationContext : sig
    type t = ts_TransformationContext
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CoreTransformationContext | `Ts_TransformationContext]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CoreTransformationContext | `Ts_TransformationContext]
    ]
    (** Records a request for a non-scoped emit helper in the current context. *)
    val requestEmitHelper: t -> helper:ts_EmitHelper -> unit [@@js.call "requestEmitHelper"]
    (** Gets and resets the requested non-scoped emit helpers. *)
    val readEmitHelpers: t -> ts_EmitHelper list or_undefined [@@js.call "readEmitHelpers"]
    (** Enables expression substitutions in the pretty printer for the provided SyntaxKind. *)
    val enableSubstitution: t -> kind:ts_SyntaxKind -> unit [@@js.call "enableSubstitution"]
    (** Determines whether expression substitutions are enabled for the provided node. *)
    val isSubstitutionEnabled: t -> node:ts_Node -> bool [@@js.call "isSubstitutionEnabled"]
    (**
      Hook used by transformers to substitute expressions just before they
      are emitted by the pretty printer.
      
      NOTE: Transformation hooks should only be modified during `Transformer` initialization,
      before returning the `NodeTransformer` callback.
    *)
    val onSubstituteNode: t -> hint:ts_EmitHint -> node:ts_Node -> ts_Node [@@js.call "onSubstituteNode"]
    (**
      Enables before/after emit notifications in the pretty printer for the provided
      SyntaxKind.
    *)
    val enableEmitNotification: t -> kind:ts_SyntaxKind -> unit [@@js.call "enableEmitNotification"]
    (**
      Determines whether before/after emit notifications should be raised in the pretty
      printer when it emits a node.
    *)
    val isEmitNotificationEnabled: t -> node:ts_Node -> bool [@@js.call "isEmitNotificationEnabled"]
    (**
      Hook used to allow transformers to capture state before or after
      the printer emits a node.
      
      NOTE: Transformation hooks should only be modified during `Transformer` initialization,
      before returning the `NodeTransformer` callback.
    *)
    val onEmitNode: t -> hint:ts_EmitHint -> node:ts_Node -> emitCallback:(hint:ts_EmitHint -> node:ts_Node -> unit) -> unit [@@js.call "onEmitNode"]
    val cast: t -> ts_CoreTransformationContext [@@js.cast]
  end
  module[@js.scope "TransformationResult"] TransformationResult : sig
    type 'T t = 'T ts_TransformationResult
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_TransformationResult of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_TransformationResult of 'T]
    ]
    (** Gets the transformed source files. *)
    (** Gets the transformed source files. *)
    val get_transformed: 'T t -> 'T list [@@js.get "transformed"]
    (** Gets the transformed source files. *)
    val set_transformed: 'T t -> 'T list -> unit [@@js.set "transformed"]
    (** Gets diagnostics for the transformation. *)
    (** Gets diagnostics for the transformation. *)
    val get_diagnostics: 'T t -> ts_DiagnosticWithLocation list [@@js.get "diagnostics"]
    (** Gets diagnostics for the transformation. *)
    val set_diagnostics: 'T t -> ts_DiagnosticWithLocation list -> unit [@@js.set "diagnostics"]
    (**
      Gets a substitute for a node, if one is available; otherwise, returns the original node.
      @param hint A hint as to the intended usage of the node.
      @param node The node to substitute.
    *)
    val substituteNode: 'T t -> hint:ts_EmitHint -> node:ts_Node -> ts_Node [@@js.call "substituteNode"]
    (**
      Emits a node with possible notification.
      @param hint A hint as to the intended usage of the node.
      @param node The node to emit.
      @param emitCallback A callback used to emit the node.
    *)
    val emitNodeWithNotification: 'T t -> hint:ts_EmitHint -> node:ts_Node -> emitCallback:(hint:ts_EmitHint -> node:ts_Node -> unit) -> unit [@@js.call "emitNodeWithNotification"]
    (**
      Indicates if a given node needs an emit notification
      @param node The node to emit.
    *)
    val isEmitNotificationEnabled: 'T t -> node:ts_Node -> bool [@@js.call "isEmitNotificationEnabled"]
    (** Clean up EmitNode entries on any parse-tree nodes. *)
    val dispose: 'T t -> unit [@@js.call "dispose"]
  end
  (**
    A function that is used to initialize and return a `Transformer` callback, which in turn
    will be used to transform one or more nodes.
  *)
  module[@js.scope "TransformerFactory"] TransformerFactory : sig
    type 'T t = 'T ts_TransformerFactory
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_TransformerFactory of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_TransformerFactory of 'T]
    ]
    val apply: 'T t -> context:ts_TransformationContext -> 'T ts_Transformer [@@js.apply]
  end
  (** A function that transforms a node. *)
  module[@js.scope "Transformer"] Transformer : sig
    type 'T t = 'T ts_Transformer
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_Transformer of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_Transformer of 'T]
    ]
    val apply: 'T t -> node:'T -> 'T [@@js.apply]
  end
  (** A function that accepts and possibly transforms a node. *)
  module[@js.scope "Visitor"] Visitor : sig
    type t = ts_Visitor
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Visitor]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Visitor]
    ]
    val apply: t -> node:ts_Node -> ts_Node ts_VisitResult [@@js.apply]
  end
  module[@js.scope "NodeVisitor"] NodeVisitor : sig
    type t = ts_NodeVisitor
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_NodeVisitor]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_NodeVisitor]
    ]
    val apply: t -> nodes:'T -> visitor:ts_Visitor or_undefined -> ?test:(node:ts_Node -> bool) -> ?lift:(node:ts_Node list -> 'T) -> unit -> 'T [@@js.apply]
    val apply': t -> nodes:'T or_undefined -> visitor:ts_Visitor or_undefined -> ?test:(node:ts_Node -> bool) -> ?lift:(node:ts_Node list -> 'T) -> unit -> 'T or_undefined [@@js.apply]
  end
  module[@js.scope "NodesVisitor"] NodesVisitor : sig
    type t = ts_NodesVisitor
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_NodesVisitor]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_NodesVisitor]
    ]
    val apply: t -> nodes:'T ts_NodeArray -> visitor:ts_Visitor or_undefined -> ?test:(node:ts_Node -> bool) -> ?start:float -> ?count:float -> unit -> 'T ts_NodeArray [@@js.apply]
    val apply': t -> nodes:'T ts_NodeArray or_undefined -> visitor:ts_Visitor or_undefined -> ?test:(node:ts_Node -> bool) -> ?start:float -> ?count:float -> unit -> 'T ts_NodeArray or_undefined [@@js.apply]
  end
  module VisitResult : sig
    type 'T t = 'T ts_VisitResult
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_VisitResult of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_VisitResult of 'T]
    ]
  end
  module[@js.scope "Printer"] Printer : sig
    type t = ts_Printer
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Printer]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Printer]
    ]
    (**
      Print a node and its subtree as-is, without any emit transformations.
      @param hint A value indicating the purpose of a node. This is primarily used to
      distinguish between an `Identifier` used in an expression position, versus an
      `Identifier` used as an `IdentifierName` as part of a declaration. For most nodes you
      should just pass `Unspecified`.
      @param node The node to print. The node and its subtree are printed as-is, without any
      emit transformations.
      @param sourceFile A source file that provides context for the node. The source text of
      the file is used to emit the original source content for literals and identifiers, while
      the identifiers of the source file are used when generating unique names to avoid
      collisions.
    *)
    val printNode: t -> hint:ts_EmitHint -> node:ts_Node -> sourceFile:ts_SourceFile -> string [@@js.call "printNode"]
    (** Prints a list of nodes using the given format flags *)
    val printList: t -> format:ts_ListFormat -> list:'T ts_NodeArray -> sourceFile:ts_SourceFile -> string [@@js.call "printList"]
    (** Prints a source file as-is, without any emit transformations. *)
    val printFile: t -> sourceFile:ts_SourceFile -> string [@@js.call "printFile"]
    (** Prints a bundle of source files as-is, without any emit transformations. *)
    val printBundle: t -> bundle:ts_Bundle -> string [@@js.call "printBundle"]
  end
  module[@js.scope "PrintHandlers"] PrintHandlers : sig
    type t = ts_PrintHandlers
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PrintHandlers]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PrintHandlers]
    ]
    (**
      A hook used by the Printer when generating unique names to avoid collisions with
      globally defined names that exist outside of the current source file.
    *)
    val hasGlobalName: t -> name:string -> bool [@@js.call "hasGlobalName"]
    (**
      A hook used by the Printer to provide notifications prior to emitting a node. A
      compatible implementation **must** invoke `emitCallback` with the provided `hint` and
      `node` values.
      @param hint A hint indicating the intended purpose of the node.
      @param node The node to emit.
      @param emitCallback A callback that, when invoked, will emit the node.
      example:
      [```ts
      var printer = createPrinter(printerOptions, \{
        onEmitNode(hint, node, emitCallback) \{
          // set up or track state prior to emitting the node...
          emitCallback(hint, node);
          // restore state after emitting the node...
        \}
      \});
      ```]
    *)
    val onEmitNode: t -> hint:ts_EmitHint -> node:ts_Node or_undefined -> emitCallback:(hint:ts_EmitHint -> node:ts_Node or_undefined -> unit) -> unit [@@js.call "onEmitNode"]
    (**
      A hook used to check if an emit notification is required for a node.
      @param node The node to emit.
    *)
    val isEmitNotificationEnabled: t -> node:ts_Node or_undefined -> bool [@@js.call "isEmitNotificationEnabled"]
    (**
      A hook used by the Printer to perform just-in-time substitution of a node. This is
      primarily used by node transformations that need to substitute one node for another,
      such as replacing `myExportedVar` with `exports.myExportedVar`.
      @param hint A hint indicating the intended purpose of the node.
      @param node The node to emit.
      example:
      [```ts
      var printer = createPrinter(printerOptions, \{
        substituteNode(hint, node) \{
          // perform substitution if necessary...
          return node;
        \}
      \});
      ```]
    *)
    val substituteNode: t -> hint:ts_EmitHint -> node:ts_Node -> ts_Node [@@js.call "substituteNode"]
  end
  module[@js.scope "PrinterOptions"] PrinterOptions : sig
    type t = ts_PrinterOptions
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PrinterOptions]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PrinterOptions]
    ]
    val get_removeComments: t -> bool [@@js.get "removeComments"]
    val set_removeComments: t -> bool -> unit [@@js.set "removeComments"]
    val get_newLine: t -> ts_NewLineKind [@@js.get "newLine"]
    val set_newLine: t -> ts_NewLineKind -> unit [@@js.set "newLine"]
    val get_omitTrailingSemicolon: t -> bool [@@js.get "omitTrailingSemicolon"]
    val set_omitTrailingSemicolon: t -> bool -> unit [@@js.set "omitTrailingSemicolon"]
    val get_noEmitHelpers: t -> bool [@@js.get "noEmitHelpers"]
    val set_noEmitHelpers: t -> bool -> unit [@@js.set "noEmitHelpers"]
  end
  module[@js.scope "GetEffectiveTypeRootsHost"] GetEffectiveTypeRootsHost : sig
    type t = ts_GetEffectiveTypeRootsHost
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_GetEffectiveTypeRootsHost]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_GetEffectiveTypeRootsHost]
    ]
    val directoryExists: t -> directoryName:string -> bool [@@js.call "directoryExists"]
    val getCurrentDirectory: t -> string [@@js.call "getCurrentDirectory"]
  end
  module[@js.scope "TextSpan"] TextSpan : sig
    type t = ts_TextSpan
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TextSpan]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TextSpan]
    ]
    val get_start: t -> float [@@js.get "start"]
    val set_start: t -> float -> unit [@@js.set "start"]
    val get_length: t -> float [@@js.get "length"]
    val set_length: t -> float -> unit [@@js.set "length"]
  end
  module[@js.scope "TextChangeRange"] TextChangeRange : sig
    type t = ts_TextChangeRange
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TextChangeRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TextChangeRange]
    ]
    val get_span: t -> ts_TextSpan [@@js.get "span"]
    val set_span: t -> ts_TextSpan -> unit [@@js.set "span"]
    val get_newLength: t -> float [@@js.get "newLength"]
    val set_newLength: t -> float -> unit [@@js.set "newLength"]
  end
  module[@js.scope "SyntaxList"] SyntaxList : sig
    type t = ts_SyntaxList
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_SyntaxList]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Node | `Ts_ReadonlyTextRange | `Ts_SyntaxList]
    ]
    val get_kind: t -> ts_SyntaxKind_SyntaxList [@@js.get "kind"]
    val set_kind: t -> ts_SyntaxKind_SyntaxList -> unit [@@js.set "kind"]
    val get__children: t -> ts_Node list [@@js.get "_children"]
    val set__children: t -> ts_Node list -> unit [@@js.set "_children"]
    val cast: t -> ts_Node [@@js.cast]
  end
  module ListFormat : sig
    type t = ts_ListFormat
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "UserPreferences"] UserPreferences : sig
    type t = ts_UserPreferences
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_UserPreferences]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_UserPreferences]
    ]
    val get_disableSuggestions: t -> bool [@@js.get "disableSuggestions"]
    val get_quotePreference: t -> ([`L_s42_auto[@js "auto"] | `L_s63_double[@js "double"] | `L_s134_single[@js "single"]] [@js.enum]) [@@js.get "quotePreference"]
    val get_includeCompletionsForModuleExports: t -> bool [@@js.get "includeCompletionsForModuleExports"]
    val get_includeAutomaticOptionalChainCompletions: t -> bool [@@js.get "includeAutomaticOptionalChainCompletions"]
    val get_includeCompletionsWithInsertText: t -> bool [@@js.get "includeCompletionsWithInsertText"]
    val get_importModuleSpecifierPreference: t -> ([`L_s106_non_relative[@js "non-relative"] | `L_s120_project_relative[@js "project-relative"] | `L_s128_relative[@js "relative"] | `L_s133_shortest[@js "shortest"]] [@js.enum]) [@@js.get "importModuleSpecifierPreference"]
    (** Determines whether we import `foo/index.ts` as "foo", "foo/index", or "foo/index.js" *)
    val get_importModuleSpecifierEnding: t -> ([`L_s42_auto[@js "auto"] | `L_s83_index[@js "index"] | `L_s89_js[@js "js"] | `L_s103_minimal[@js "minimal"]] [@js.enum]) [@@js.get "importModuleSpecifierEnding"]
    val get_allowTextChangesInNewFiles: t -> bool [@@js.get "allowTextChangesInNewFiles"]
    val get_providePrefixAndSuffixTextForRename: t -> bool [@@js.get "providePrefixAndSuffixTextForRename"]
    val get_includePackageJsonAutoImports: t -> ([`L_s42_auto[@js "auto"] | `L_s110_off[@js "off"] | `L_s111_on[@js "on"]] [@js.enum]) [@@js.get "includePackageJsonAutoImports"]
    val get_provideRefactorNotApplicableReason: t -> bool [@@js.get "provideRefactorNotApplicableReason"]
  end
  (** Represents a bigint literal value without requiring bigint support *)
  module[@js.scope "PseudoBigInt"] PseudoBigInt : sig
    type t = ts_PseudoBigInt
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PseudoBigInt]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PseudoBigInt]
    ]
    val get_negative: t -> bool [@@js.get "negative"]
    val set_negative: t -> bool -> unit [@@js.set "negative"]
    val get_base10Value: t -> string [@@js.get "base10Value"]
    val set_base10Value: t -> string -> unit [@@js.set "base10Value"]
  end
  (* ES6Export [] *)
  module FileWatcherEventKind : sig
    type t = ts_FileWatcherEventKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "FileWatcherCallback"] FileWatcherCallback : sig
    type t = ts_FileWatcherCallback
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FileWatcherCallback]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FileWatcherCallback]
    ]
    val apply: t -> fileName:string -> eventKind:ts_FileWatcherEventKind -> unit [@@js.apply]
  end
  module[@js.scope "DirectoryWatcherCallback"] DirectoryWatcherCallback : sig
    type t = ts_DirectoryWatcherCallback
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DirectoryWatcherCallback]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DirectoryWatcherCallback]
    ]
    val apply: t -> fileName:string -> unit [@@js.apply]
  end
  module[@js.scope "System"] System : sig
    type t = ts_System
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_System]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_System]
    ]
    val get_args: t -> string list [@@js.get "args"]
    val set_args: t -> string list -> unit [@@js.set "args"]
    val get_newLine: t -> string [@@js.get "newLine"]
    val set_newLine: t -> string -> unit [@@js.set "newLine"]
    val get_useCaseSensitiveFileNames: t -> bool [@@js.get "useCaseSensitiveFileNames"]
    val set_useCaseSensitiveFileNames: t -> bool -> unit [@@js.set "useCaseSensitiveFileNames"]
    val write: t -> s:string -> unit [@@js.call "write"]
    val writeOutputIsTTY: t -> bool [@@js.call "writeOutputIsTTY"]
    val readFile: t -> path:string -> ?encoding:string -> unit -> string or_undefined [@@js.call "readFile"]
    val getFileSize: t -> path:string -> float [@@js.call "getFileSize"]
    val writeFile: t -> path:string -> data:string -> ?writeByteOrderMark:bool -> unit -> unit [@@js.call "writeFile"]
    (**
      pollingInterval: - this parameter is used in polling-based watchers and ignored in watchers that
      use native OS file watching
    *)
    val watchFile: t -> path:string -> callback:ts_FileWatcherCallback -> ?pollingInterval:float -> ?options:ts_WatchOptions -> unit -> ts_FileWatcher [@@js.call "watchFile"]
    val watchDirectory: t -> path:string -> callback:ts_DirectoryWatcherCallback -> ?recursive:bool -> ?options:ts_WatchOptions -> unit -> ts_FileWatcher [@@js.call "watchDirectory"]
    val resolvePath: t -> path:string -> string [@@js.call "resolvePath"]
    val fileExists: t -> path:string -> bool [@@js.call "fileExists"]
    val directoryExists: t -> path:string -> bool [@@js.call "directoryExists"]
    val createDirectory: t -> path:string -> unit [@@js.call "createDirectory"]
    val getExecutingFilePath: t -> string [@@js.call "getExecutingFilePath"]
    val getCurrentDirectory: t -> string [@@js.call "getCurrentDirectory"]
    val getDirectories: t -> path:string -> string list [@@js.call "getDirectories"]
    val readDirectory: t -> path:string -> ?extensions:string list -> ?exclude:string list -> ?include_:string list -> ?depth:float -> unit -> string list [@@js.call "readDirectory"]
    val getModifiedTime: t -> path:string -> Date.t_0 or_undefined [@@js.call "getModifiedTime"]
    val setModifiedTime: t -> path:string -> time:Date.t_0 -> unit [@@js.call "setModifiedTime"]
    val deleteFile: t -> path:string -> unit [@@js.call "deleteFile"]
    (** A good implementation is node.js' `crypto.createHash`. (https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm) *)
    val createHash: t -> data:string -> string [@@js.call "createHash"]
    (** This must be cryptographically secure. Only implement this method using `crypto.createHash("sha256")`. *)
    val createSHA256Hash: t -> data:string -> string [@@js.call "createSHA256Hash"]
    val getMemoryUsage: t -> float [@@js.call "getMemoryUsage"]
    val exit: t -> ?exitCode:float -> unit -> unit [@@js.call "exit"]
    val realpath: t -> path:string -> string [@@js.call "realpath"]
    val setTimeout: t -> callback:(args:(any list [@js.variadic]) -> unit) -> ms:float -> args:(any list [@js.variadic]) -> any [@@js.call "setTimeout"]
    val clearTimeout: t -> timeoutId:any -> unit [@@js.call "clearTimeout"]
    val clearScreen: t -> unit [@@js.call "clearScreen"]
    val base64decode: t -> input:string -> string [@@js.call "base64decode"]
    val base64encode: t -> input:string -> string [@@js.call "base64encode"]
  end
  module[@js.scope "FileWatcher"] FileWatcher : sig
    type t = ts_FileWatcher
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FileWatcher]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FileWatcher]
    ]
    val close: t -> unit [@@js.call "close"]
  end
  val getNodeMajorVersion: unit -> float or_undefined [@@js.global "getNodeMajorVersion"]
  val sys: ts_System [@@js.global "sys"]
  (* ES6Export [] *)
  module[@js.scope "ErrorCallback"] ErrorCallback : sig
    type t = ts_ErrorCallback
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ErrorCallback]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ErrorCallback]
    ]
    val apply: t -> message:ts_DiagnosticMessage -> length:float -> unit [@@js.apply]
  end
  module[@js.scope "Scanner"] Scanner : sig
    type t = ts_Scanner
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Scanner]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Scanner]
    ]
    val getStartPos: t -> float [@@js.call "getStartPos"]
    val getToken: t -> ts_SyntaxKind [@@js.call "getToken"]
    val getTextPos: t -> float [@@js.call "getTextPos"]
    val getTokenPos: t -> float [@@js.call "getTokenPos"]
    val getTokenText: t -> string [@@js.call "getTokenText"]
    val getTokenValue: t -> string [@@js.call "getTokenValue"]
    val hasUnicodeEscape: t -> bool [@@js.call "hasUnicodeEscape"]
    val hasExtendedUnicodeEscape: t -> bool [@@js.call "hasExtendedUnicodeEscape"]
    val hasPrecedingLineBreak: t -> bool [@@js.call "hasPrecedingLineBreak"]
    val isIdentifier: t -> bool [@@js.call "isIdentifier"]
    val isReservedWord: t -> bool [@@js.call "isReservedWord"]
    val isUnterminated: t -> bool [@@js.call "isUnterminated"]
    val reScanGreaterToken: t -> ts_SyntaxKind [@@js.call "reScanGreaterToken"]
    val reScanSlashToken: t -> ts_SyntaxKind [@@js.call "reScanSlashToken"]
    val reScanAsteriskEqualsToken: t -> ts_SyntaxKind [@@js.call "reScanAsteriskEqualsToken"]
    val reScanTemplateToken: t -> isTaggedTemplate:bool -> ts_SyntaxKind [@@js.call "reScanTemplateToken"]
    val reScanTemplateHeadOrNoSubstitutionTemplate: t -> ts_SyntaxKind [@@js.call "reScanTemplateHeadOrNoSubstitutionTemplate"]
    val scanJsxIdentifier: t -> ts_SyntaxKind [@@js.call "scanJsxIdentifier"]
    val scanJsxAttributeValue: t -> ts_SyntaxKind [@@js.call "scanJsxAttributeValue"]
    val reScanJsxAttributeValue: t -> ts_SyntaxKind [@@js.call "reScanJsxAttributeValue"]
    val reScanJsxToken: t -> ts_JsxTokenSyntaxKind [@@js.call "reScanJsxToken"]
    val reScanLessThanToken: t -> ts_SyntaxKind [@@js.call "reScanLessThanToken"]
    val reScanQuestionToken: t -> ts_SyntaxKind [@@js.call "reScanQuestionToken"]
    val reScanInvalidIdentifier: t -> ts_SyntaxKind [@@js.call "reScanInvalidIdentifier"]
    val scanJsxToken: t -> ts_JsxTokenSyntaxKind [@@js.call "scanJsxToken"]
    val scanJsDocToken: t -> ts_JSDocSyntaxKind [@@js.call "scanJsDocToken"]
    val scan: t -> ts_SyntaxKind [@@js.call "scan"]
    val getText: t -> string [@@js.call "getText"]
    val setText: t -> text:string or_undefined -> ?start:float -> ?length:float -> unit -> unit [@@js.call "setText"]
    val setOnError: t -> onError:ts_ErrorCallback or_undefined -> unit [@@js.call "setOnError"]
    val setScriptTarget: t -> scriptTarget:ts_ScriptTarget -> unit [@@js.call "setScriptTarget"]
    val setLanguageVariant: t -> variant:ts_LanguageVariant -> unit [@@js.call "setLanguageVariant"]
    val setTextPos: t -> textPos:float -> unit [@@js.call "setTextPos"]
    val lookAhead: t -> callback:(unit -> 'T) -> 'T [@@js.call "lookAhead"]
    val scanRange: t -> start:float -> length:float -> callback:(unit -> 'T) -> 'T [@@js.call "scanRange"]
    val tryScan: t -> callback:(unit -> 'T) -> 'T [@@js.call "tryScan"]
  end
  val tokenToString: t:ts_SyntaxKind -> string or_undefined [@@js.global "tokenToString"]
  val getPositionOfLineAndCharacter: sourceFile:ts_SourceFileLike -> line:float -> character:float -> float [@@js.global "getPositionOfLineAndCharacter"]
  val getLineAndCharacterOfPosition: sourceFile:ts_SourceFileLike -> position:float -> ts_LineAndCharacter [@@js.global "getLineAndCharacterOfPosition"]
  val isWhiteSpaceLike: ch:float -> bool [@@js.global "isWhiteSpaceLike"]
  (** Does not include line breaks. For that, see isWhiteSpaceLike. *)
  val isWhiteSpaceSingleLine: ch:float -> bool [@@js.global "isWhiteSpaceSingleLine"]
  val isLineBreak: ch:float -> bool [@@js.global "isLineBreak"]
  val couldStartTrivia: text:string -> pos:float -> bool [@@js.global "couldStartTrivia"]
  val forEachLeadingCommentRange: text:string -> pos:float -> cb:(pos:float -> end_:float -> kind:ts_CommentKind -> hasTrailingNewLine:bool -> 'U) -> 'U or_undefined [@@js.global "forEachLeadingCommentRange"]
  val forEachLeadingCommentRange: text:string -> pos:float -> cb:(pos:float -> end_:float -> kind:ts_CommentKind -> hasTrailingNewLine:bool -> state:'T -> 'U) -> state:'T -> 'U or_undefined [@@js.global "forEachLeadingCommentRange"]
  val forEachTrailingCommentRange: text:string -> pos:float -> cb:(pos:float -> end_:float -> kind:ts_CommentKind -> hasTrailingNewLine:bool -> 'U) -> 'U or_undefined [@@js.global "forEachTrailingCommentRange"]
  val forEachTrailingCommentRange: text:string -> pos:float -> cb:(pos:float -> end_:float -> kind:ts_CommentKind -> hasTrailingNewLine:bool -> state:'T -> 'U) -> state:'T -> 'U or_undefined [@@js.global "forEachTrailingCommentRange"]
  val reduceEachLeadingCommentRange: text:string -> pos:float -> cb:(pos:float -> end_:float -> kind:ts_CommentKind -> hasTrailingNewLine:bool -> state:'T -> memo:'U -> 'U) -> state:'T -> initial:'U -> 'U or_undefined [@@js.global "reduceEachLeadingCommentRange"]
  val reduceEachTrailingCommentRange: text:string -> pos:float -> cb:(pos:float -> end_:float -> kind:ts_CommentKind -> hasTrailingNewLine:bool -> state:'T -> memo:'U -> 'U) -> state:'T -> initial:'U -> 'U or_undefined [@@js.global "reduceEachTrailingCommentRange"]
  val getLeadingCommentRanges: text:string -> pos:float -> ts_CommentRange list or_undefined [@@js.global "getLeadingCommentRanges"]
  val getTrailingCommentRanges: text:string -> pos:float -> ts_CommentRange list or_undefined [@@js.global "getTrailingCommentRanges"]
  (** Optionally, get the shebang *)
  val getShebang: text:string -> string or_undefined [@@js.global "getShebang"]
  val isIdentifierStart: ch:float -> languageVersion:ts_ScriptTarget or_undefined -> bool [@@js.global "isIdentifierStart"]
  val isIdentifierPart: ch:float -> languageVersion:ts_ScriptTarget or_undefined -> ?identifierVariant:ts_LanguageVariant -> unit -> bool [@@js.global "isIdentifierPart"]
  val createScanner: languageVersion:ts_ScriptTarget -> skipTrivia:bool -> ?languageVariant:ts_LanguageVariant -> ?textInitial:string -> ?onError:ts_ErrorCallback -> ?start:float -> ?length:float -> unit -> ts_Scanner [@@js.global "createScanner"]
  val isExternalModuleNameRelative: moduleName:string -> bool [@@js.global "isExternalModuleNameRelative"]
  val sortAndDeduplicateDiagnostics: diagnostics:'T list -> 'T ts_SortedReadonlyArray [@@js.global "sortAndDeduplicateDiagnostics"]
  val getDefaultLibFileName: options:ts_CompilerOptions -> string [@@js.global "getDefaultLibFileName"]
  val textSpanEnd: span:ts_TextSpan -> float [@@js.global "textSpanEnd"]
  val textSpanIsEmpty: span:ts_TextSpan -> bool [@@js.global "textSpanIsEmpty"]
  val textSpanContainsPosition: span:ts_TextSpan -> position:float -> bool [@@js.global "textSpanContainsPosition"]
  val textSpanContainsTextSpan: span:ts_TextSpan -> other:ts_TextSpan -> bool [@@js.global "textSpanContainsTextSpan"]
  val textSpanOverlapsWith: span:ts_TextSpan -> other:ts_TextSpan -> bool [@@js.global "textSpanOverlapsWith"]
  val textSpanOverlap: span1:ts_TextSpan -> span2:ts_TextSpan -> ts_TextSpan or_undefined [@@js.global "textSpanOverlap"]
  val textSpanIntersectsWithTextSpan: span:ts_TextSpan -> other:ts_TextSpan -> bool [@@js.global "textSpanIntersectsWithTextSpan"]
  val textSpanIntersectsWith: span:ts_TextSpan -> start:float -> length:float -> bool [@@js.global "textSpanIntersectsWith"]
  val decodedTextSpanIntersectsWith: start1:float -> length1:float -> start2:float -> length2:float -> bool [@@js.global "decodedTextSpanIntersectsWith"]
  val textSpanIntersectsWithPosition: span:ts_TextSpan -> position:float -> bool [@@js.global "textSpanIntersectsWithPosition"]
  val textSpanIntersection: span1:ts_TextSpan -> span2:ts_TextSpan -> ts_TextSpan or_undefined [@@js.global "textSpanIntersection"]
  val createTextSpan: start:float -> length:float -> ts_TextSpan [@@js.global "createTextSpan"]
  val createTextSpanFromBounds: start:float -> end_:float -> ts_TextSpan [@@js.global "createTextSpanFromBounds"]
  val textChangeRangeNewSpan: range:ts_TextChangeRange -> ts_TextSpan [@@js.global "textChangeRangeNewSpan"]
  val textChangeRangeIsUnchanged: range:ts_TextChangeRange -> bool [@@js.global "textChangeRangeIsUnchanged"]
  val createTextChangeRange: span:ts_TextSpan -> newLength:float -> ts_TextChangeRange [@@js.global "createTextChangeRange"]
  val unchangedTextChangeRange: ts_TextChangeRange [@@js.global "unchangedTextChangeRange"]
  (**
    Called to merge all the changes that occurred across several versions of a script snapshot
    into a single change.  i.e. if a user keeps making successive edits to a script we will
    have a text change from V1 to V2, V2 to V3, ..., Vn.
    
    This function will then merge those changes into a single change range valid between V1 and
    Vn.
  *)
  val collapseTextChangeRangesAcrossMultipleVersions: changes:ts_TextChangeRange list -> ts_TextChangeRange [@@js.global "collapseTextChangeRangesAcrossMultipleVersions"]
  val getTypeParameterOwner: d:ts_Declaration -> ts_Declaration or_undefined [@@js.global "getTypeParameterOwner"]
  module ParameterPropertyDeclaration : sig
    type t = ts_ParameterPropertyDeclaration
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ParameterPropertyDeclaration]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ParameterPropertyDeclaration]
    ]
  end
  val isParameterPropertyDeclaration: node:ts_Node -> parent:ts_Node -> bool [@@js.global "isParameterPropertyDeclaration"]
  val isEmptyBindingPattern: node:ts_BindingName -> bool [@@js.global "isEmptyBindingPattern"]
  val isEmptyBindingElement: node:ts_BindingElement -> bool [@@js.global "isEmptyBindingElement"]
  val walkUpBindingElementsAndPatterns: binding:ts_BindingElement -> ([`U_n_160 of ts_ParameterDeclaration [@js 160] | `U_n_249 of ts_VariableDeclaration [@js 249]] [@js.union on_field "kind"]) [@@js.global "walkUpBindingElementsAndPatterns"]
  val getCombinedModifierFlags: node:ts_Declaration -> ts_ModifierFlags [@@js.global "getCombinedModifierFlags"]
  val getCombinedNodeFlags: node:ts_Node -> ts_NodeFlags [@@js.global "getCombinedNodeFlags"]
  (**
    Checks to see if the locale is in the appropriate format,
    and if it is, attempts to set the appropriate language.
  *)
  val validateLocaleAndSetLanguage: locale:string -> sys:anonymous_interface_16 -> ?errors:ts_Diagnostic ts_Push -> unit -> unit [@@js.global "validateLocaleAndSetLanguage"]
  val getOriginalNode: node:ts_Node -> ts_Node [@@js.global "getOriginalNode"]
  val getOriginalNode: node:ts_Node -> nodeTest:(node:ts_Node -> bool) -> 'T [@@js.global "getOriginalNode"]
  val getOriginalNode: node:ts_Node or_undefined -> ts_Node or_undefined [@@js.global "getOriginalNode"]
  val getOriginalNode: node:ts_Node or_undefined -> nodeTest:(node:ts_Node or_undefined -> bool) -> 'T or_undefined [@@js.global "getOriginalNode"]
  (**
    Iterates through the parent chain of a node and performs the callback on each parent until the callback
    returns a truthy value, then returns that value.
    If no such value is found, it applies the callback until the parent pointer is undefined or the callback returns "quit"
    At that point findAncestor returns undefined.
  *)
  val findAncestor: node:ts_Node or_undefined -> callback:(element:ts_Node -> bool) -> 'T or_undefined [@@js.global "findAncestor"]
  (**
    Iterates through the parent chain of a node and performs the callback on each parent until the callback
    returns a truthy value, then returns that value.
    If no such value is found, it applies the callback until the parent pointer is undefined or the callback returns "quit"
    At that point findAncestor returns undefined.
  *)
  val findAncestor: node:ts_Node or_undefined -> callback:(element:ts_Node -> ([`L_s125_quit] [@js.enum]) or_boolean) -> ts_Node or_undefined [@@js.global "findAncestor"]
  (**
    Gets a value indicating whether a node originated in the parse tree.
    @param node The node to test.
  *)
  val isParseTreeNode: node:ts_Node -> bool [@@js.global "isParseTreeNode"]
  (**
    Gets the original parse tree node for a node.
    @param node The original node.
    @return The original parse tree node if found; otherwise, undefined.
  *)
  val getParseTreeNode: node:ts_Node or_undefined -> ts_Node or_undefined [@@js.global "getParseTreeNode"]
  (**
    Gets the original parse tree node for a node.
    @param node The original node.
    @param nodeTest A callback used to ensure the correct type of parse tree node is returned.
    @return The original parse tree node if found; otherwise, undefined.
  *)
  val getParseTreeNode: node:'T or_undefined -> ?nodeTest:(node:ts_Node -> bool) -> unit -> 'T or_undefined [@@js.global "getParseTreeNode"]
  (** Add an extra underscore to identifiers that start with two underscores to avoid issues with magic names like '__proto__' *)
  val escapeLeadingUnderscores: identifier:string -> ts___String [@@js.global "escapeLeadingUnderscores"]
  (**
    Remove extra underscore from escaped identifier text content.
    @param identifier The escaped identifier text.
    @return The unescaped identifier text.
  *)
  val unescapeLeadingUnderscores: identifier:ts___String -> string [@@js.global "unescapeLeadingUnderscores"]
  val idText: identifierOrPrivateName:([`U_n_78 of ts_Identifier  | `U_n_79 of ts_PrivateIdentifier ] [@js.union on_field "kind"]) -> string [@@js.global "idText"]
  val symbolName: symbol:ts_Symbol -> string [@@js.global "symbolName"]
  val getNameOfJSDocTypedef: declaration:ts_JSDocTypedefTag -> ([`U_n_78 of ts_Identifier [@js 78] | `U_n_79 of ts_PrivateIdentifier [@js 79]] [@js.union on_field "kind"]) or_undefined [@@js.global "getNameOfJSDocTypedef"]
  val getNameOfDeclaration: declaration:([`U_n_0 of (ts_Declaration, ts_Expression) union2  | `U_n_1 of (ts_Declaration, ts_Expression) union2  | `U_n_2 of (ts_Declaration, ts_Expression) union2  | `U_n_3 of (ts_Declaration, ts_Expression) union2  | `U_n_4 of (ts_Declaration, ts_Expression) union2  | `U_n_8 of (ts_Declaration, ts_Expression) union2  | `U_n_16 of (ts_Declaration, ts_Expression) union2  | `U_n_32 of (ts_Declaration, ts_Expression) union2  | `U_n_64 of (ts_Declaration, ts_Expression) union2  | `U_n_128 of (ts_Declaration, ts_Expression) union2  | `U_n_256 of (ts_Declaration, ts_Expression) union2  | `U_n_512 of (ts_Declaration, ts_Expression) union2  | `U_n_768 of (ts_Declaration, ts_Expression) union2  | `U_n_1024 of (ts_Declaration, ts_Expression) union2  | `U_n_2048 of (ts_Declaration, ts_Expression) union2  | `U_n_2816 of (ts_Declaration, ts_Expression) union2  | `U_n_4096 of (ts_Declaration, ts_Expression) union2  | `U_n_8192 of (ts_Declaration, ts_Expression) union2  | `U_n_16384 of (ts_Declaration, ts_Expression) union2  | `U_n_32768 of (ts_Declaration, ts_Expression) union2  | `U_n_40960 of (ts_Declaration, ts_Expression) union2  | `U_n_65536 of (ts_Declaration, ts_Expression) union2  | `U_n_131072 of (ts_Declaration, ts_Expression) union2  | `U_n_262144 of (ts_Declaration, ts_Expression) union2  | `U_n_524288 of (ts_Declaration, ts_Expression) union2  | `U_n_4194304 of (ts_Declaration, ts_Expression) union2  | `U_n_25358336 of (ts_Declaration, ts_Expression) union2  | `U_n_33554432 of (ts_Declaration, ts_Expression) union2 ] [@js.union on_field "flags"]) -> ts_DeclarationName or_undefined [@@js.global "getNameOfDeclaration"]
  (**
    Gets the JSDoc parameter tags for the node if present.
    remarks: Returns any JSDoc param tag whose name matches the provided
    parameter, whether a param tag on a containing function
    expression, or a param tag on a variable declaration whose
    initializer is the containing function. The tags closest to the
    node are returned first, so in the previous example, the param
    tag on the containing function expression would be first.
    
    For binding patterns, parameter tags are matched by position.
  *)
  val getJSDocParameterTags: param:ts_ParameterDeclaration -> ts_JSDocParameterTag list [@@js.global "getJSDocParameterTags"]
  (**
    Gets the JSDoc type parameter tags for the node if present.
    remarks: Returns any JSDoc template tag whose names match the provided
    parameter, whether a template tag on a containing function
    expression, or a template tag on a variable declaration whose
    initializer is the containing function. The tags closest to the
    node are returned first, so in the previous example, the template
    tag on the containing function expression would be first.
  *)
  val getJSDocTypeParameterTags: param:ts_TypeParameterDeclaration -> ts_JSDocTemplateTag list [@@js.global "getJSDocTypeParameterTags"]
  (**
    Return true if the node has JSDoc parameter tags.
    remarks: Includes parameter tags that are not directly on the node,
    for example on a variable declaration whose initializer is a function expression.
  *)
  val hasJSDocParameterTags: node:([`U_n_164 of ts_SignatureDeclaration  | `U_n_165 of (ts_FunctionLikeDeclaration, ts_SignatureDeclaration) union2  | `U_n_166 of (ts_FunctionLikeDeclaration, ts_SignatureDeclaration) union2  | `U_n_167 of (ts_FunctionLikeDeclaration, ts_SignatureDeclaration) union2  | `U_n_168 of (ts_FunctionLikeDeclaration, ts_SignatureDeclaration) union2  | `U_n_169 of ts_SignatureDeclaration  | `U_n_170 of ts_SignatureDeclaration  | `U_n_171 of ts_SignatureDeclaration  | `U_n_174 of ts_SignatureDeclaration  | `U_n_175 of ts_SignatureDeclaration  | `U_n_208 of (ts_FunctionLikeDeclaration, ts_SignatureDeclaration) union2  | `U_n_209 of (ts_FunctionLikeDeclaration, ts_SignatureDeclaration) union2  | `U_n_251 of (ts_FunctionLikeDeclaration, ts_SignatureDeclaration) union2  | `U_n_308 of ts_SignatureDeclaration ] [@js.union on_field "kind"]) -> bool [@@js.global "hasJSDocParameterTags"]
  (** Gets the JSDoc augments tag for the node if present *)
  val getJSDocAugmentsTag: node:ts_Node -> ts_JSDocAugmentsTag or_undefined [@@js.global "getJSDocAugmentsTag"]
  (** Gets the JSDoc implements tags for the node if present *)
  val getJSDocImplementsTags: node:ts_Node -> ts_JSDocImplementsTag list [@@js.global "getJSDocImplementsTags"]
  (** Gets the JSDoc class tag for the node if present *)
  val getJSDocClassTag: node:ts_Node -> ts_JSDocClassTag or_undefined [@@js.global "getJSDocClassTag"]
  (** Gets the JSDoc public tag for the node if present *)
  val getJSDocPublicTag: node:ts_Node -> ts_JSDocPublicTag or_undefined [@@js.global "getJSDocPublicTag"]
  (** Gets the JSDoc private tag for the node if present *)
  val getJSDocPrivateTag: node:ts_Node -> ts_JSDocPrivateTag or_undefined [@@js.global "getJSDocPrivateTag"]
  (** Gets the JSDoc protected tag for the node if present *)
  val getJSDocProtectedTag: node:ts_Node -> ts_JSDocProtectedTag or_undefined [@@js.global "getJSDocProtectedTag"]
  (** Gets the JSDoc protected tag for the node if present *)
  val getJSDocReadonlyTag: node:ts_Node -> ts_JSDocReadonlyTag or_undefined [@@js.global "getJSDocReadonlyTag"]
  (** Gets the JSDoc deprecated tag for the node if present *)
  val getJSDocDeprecatedTag: node:ts_Node -> ts_JSDocDeprecatedTag or_undefined [@@js.global "getJSDocDeprecatedTag"]
  (** Gets the JSDoc enum tag for the node if present *)
  val getJSDocEnumTag: node:ts_Node -> ts_JSDocEnumTag or_undefined [@@js.global "getJSDocEnumTag"]
  (** Gets the JSDoc this tag for the node if present *)
  val getJSDocThisTag: node:ts_Node -> ts_JSDocThisTag or_undefined [@@js.global "getJSDocThisTag"]
  (** Gets the JSDoc return tag for the node if present *)
  val getJSDocReturnTag: node:ts_Node -> ts_JSDocReturnTag or_undefined [@@js.global "getJSDocReturnTag"]
  (** Gets the JSDoc template tag for the node if present *)
  val getJSDocTemplateTag: node:ts_Node -> ts_JSDocTemplateTag or_undefined [@@js.global "getJSDocTemplateTag"]
  (** Gets the JSDoc type tag for the node if present and valid *)
  val getJSDocTypeTag: node:ts_Node -> ts_JSDocTypeTag or_undefined [@@js.global "getJSDocTypeTag"]
  (**
    Gets the type node for the node if provided via JSDoc.
    remarks: The search includes any JSDoc param tag that relates
    to the provided parameter, for example a type tag on the
    parameter itself, or a param tag on a containing function
    expression, or a param tag on a variable declaration whose
    initializer is the containing function. The tags closest to the
    node are examined first, so in the previous example, the type
    tag directly on the node would be returned.
  *)
  val getJSDocType: node:ts_Node -> ts_TypeNode or_undefined [@@js.global "getJSDocType"]
  (**
    Gets the return type node for the node if provided via JSDoc return tag or type tag.
    remarks: `getJSDocReturnTag` just gets the whole JSDoc tag. This function
    gets the type from inside the braces, after the fat arrow, etc.
  *)
  val getJSDocReturnType: node:ts_Node -> ts_TypeNode or_undefined [@@js.global "getJSDocReturnType"]
  (** Get all JSDoc tags related to a node, including those on parent nodes. *)
  val getJSDocTags: node:ts_Node -> ts_JSDocTag list [@@js.global "getJSDocTags"]
  (** Gets all JSDoc tags that match a specified predicate *)
  val getAllJSDocTags: node:ts_Node -> predicate:(tag:ts_JSDocTag -> bool) -> 'T list [@@js.global "getAllJSDocTags"]
  (** Gets all JSDoc tags of a specified kind *)
  val getAllJSDocTagsOfKind: node:ts_Node -> kind:ts_SyntaxKind -> ts_JSDocTag list [@@js.global "getAllJSDocTagsOfKind"]
  (**
    Gets the effective type parameters. If the node was parsed in a
    JavaScript file, gets the type parameters from the `\@template` tag from JSDoc.
  *)
  val getEffectiveTypeParameterDeclarations: node:ts_DeclarationWithTypeParameters -> ts_TypeParameterDeclaration list [@@js.global "getEffectiveTypeParameterDeclarations"]
  val getEffectiveConstraintOfTypeParameter: node:ts_TypeParameterDeclaration -> ts_TypeNode or_undefined [@@js.global "getEffectiveConstraintOfTypeParameter"]
  val isIdentifierOrPrivateIdentifier: node:ts_Node -> bool [@@js.global "isIdentifierOrPrivateIdentifier"]
  val isPropertyAccessChain: node:ts_Node -> bool [@@js.global "isPropertyAccessChain"]
  val isElementAccessChain: node:ts_Node -> bool [@@js.global "isElementAccessChain"]
  val isCallChain: node:ts_Node -> bool [@@js.global "isCallChain"]
  val isOptionalChain: node:ts_Node -> bool [@@js.global "isOptionalChain"]
  val isNullishCoalesce: node:ts_Node -> bool [@@js.global "isNullishCoalesce"]
  val isConstTypeReference: node:ts_Node -> bool [@@js.global "isConstTypeReference"]
  val skipPartiallyEmittedExpressions: node:ts_Expression -> ts_Expression [@@js.global "skipPartiallyEmittedExpressions"]
  val skipPartiallyEmittedExpressions: node:ts_Node -> ts_Node [@@js.global "skipPartiallyEmittedExpressions"]
  val isNonNullChain: node:ts_Node -> bool [@@js.global "isNonNullChain"]
  val isBreakOrContinueStatement: node:ts_Node -> bool [@@js.global "isBreakOrContinueStatement"]
  val isNamedExportBindings: node:ts_Node -> bool [@@js.global "isNamedExportBindings"]
  val isUnparsedTextLike: node:ts_Node -> bool [@@js.global "isUnparsedTextLike"]
  val isUnparsedNode: node:ts_Node -> bool [@@js.global "isUnparsedNode"]
  val isJSDocPropertyLikeTag: node:ts_Node -> bool [@@js.global "isJSDocPropertyLikeTag"]
  (**
    True if node is of some token syntax kind.
    For example, this is true for an IfKeyword but not for an IfStatement.
    Literals are considered tokens, except TemplateLiteral, but does include TemplateHead/Middle/Tail.
  *)
  val isToken: n:ts_Node -> bool [@@js.global "isToken"]
  val isLiteralExpression: node:ts_Node -> bool [@@js.global "isLiteralExpression"]
  val isTemplateLiteralToken: node:ts_Node -> bool [@@js.global "isTemplateLiteralToken"]
  val isTemplateMiddleOrTemplateTail: node:ts_Node -> bool [@@js.global "isTemplateMiddleOrTemplateTail"]
  val isImportOrExportSpecifier: node:ts_Node -> bool [@@js.global "isImportOrExportSpecifier"]
  val isTypeOnlyImportOrExportDeclaration: node:ts_Node -> bool [@@js.global "isTypeOnlyImportOrExportDeclaration"]
  val isStringTextContainingNode: node:ts_Node -> bool [@@js.global "isStringTextContainingNode"]
  val isModifier: node:ts_Node -> bool [@@js.global "isModifier"]
  val isEntityName: node:ts_Node -> bool [@@js.global "isEntityName"]
  val isPropertyName: node:ts_Node -> bool [@@js.global "isPropertyName"]
  val isBindingName: node:ts_Node -> bool [@@js.global "isBindingName"]
  val isFunctionLike: node:ts_Node -> bool [@@js.global "isFunctionLike"]
  val isClassElement: node:ts_Node -> bool [@@js.global "isClassElement"]
  val isClassLike: node:ts_Node -> bool [@@js.global "isClassLike"]
  val isAccessor: node:ts_Node -> bool [@@js.global "isAccessor"]
  val isTypeElement: node:ts_Node -> bool [@@js.global "isTypeElement"]
  val isClassOrTypeElement: node:ts_Node -> bool [@@js.global "isClassOrTypeElement"]
  val isObjectLiteralElementLike: node:ts_Node -> bool [@@js.global "isObjectLiteralElementLike"]
  (**
    Node test that determines whether a node is a valid type node.
    This differs from the `isPartOfTypeNode` function which determines whether a node is *part*
    of a TypeNode.
  *)
  val isTypeNode: node:ts_Node -> bool [@@js.global "isTypeNode"]
  val isFunctionOrConstructorTypeNode: node:ts_Node -> bool [@@js.global "isFunctionOrConstructorTypeNode"]
  val isPropertyAccessOrQualifiedName: node:ts_Node -> bool [@@js.global "isPropertyAccessOrQualifiedName"]
  val isCallLikeExpression: node:ts_Node -> bool [@@js.global "isCallLikeExpression"]
  val isCallOrNewExpression: node:ts_Node -> bool [@@js.global "isCallOrNewExpression"]
  val isTemplateLiteral: node:ts_Node -> bool [@@js.global "isTemplateLiteral"]
  val isAssertionExpression: node:ts_Node -> bool [@@js.global "isAssertionExpression"]
  val isIterationStatement: node:ts_Node -> lookInLabeledStatements:([`L_b_false] [@js.enum]) -> bool [@@js.global "isIterationStatement"]
  val isIterationStatement: node:ts_Node -> lookInLabeledStatements:bool -> bool [@@js.global "isIterationStatement"]
  val isJsxOpeningLikeElement: node:ts_Node -> bool [@@js.global "isJsxOpeningLikeElement"]
  val isCaseOrDefaultClause: node:ts_Node -> bool [@@js.global "isCaseOrDefaultClause"]
  (** True if node is of a kind that may contain comment text. *)
  val isJSDocCommentContainingNode: node:ts_Node -> bool [@@js.global "isJSDocCommentContainingNode"]
  val isSetAccessor: node:ts_Node -> bool [@@js.global "isSetAccessor"]
  val isGetAccessor: node:ts_Node -> bool [@@js.global "isGetAccessor"]
  (** True if has initializer node attached to it. *)
  val hasOnlyExpressionInitializer: node:ts_Node -> bool [@@js.global "hasOnlyExpressionInitializer"]
  val isObjectLiteralElement: node:ts_Node -> bool [@@js.global "isObjectLiteralElement"]
  val isStringLiteralLike: node:ts_Node -> bool [@@js.global "isStringLiteralLike"]
  val factory: ts_NodeFactory [@@js.global "factory"]
  val createUnparsedSourceFile: text:string -> ts_UnparsedSource [@@js.global "createUnparsedSourceFile"]
  val createUnparsedSourceFile: inputFile:ts_InputFiles -> type_:([`L_s64_dts | `L_s89_js] [@js.enum]) -> ?stripInternal:bool -> unit -> ts_UnparsedSource [@@js.global "createUnparsedSourceFile"]
  val createUnparsedSourceFile: text:string -> mapPath:string or_undefined -> map:string or_undefined -> ts_UnparsedSource [@@js.global "createUnparsedSourceFile"]
  val createInputFiles: javascriptText:string -> declarationText:string -> ts_InputFiles [@@js.global "createInputFiles"]
  val createInputFiles: readFileText:(path:string -> string or_undefined) -> javascriptPath:string -> javascriptMapPath:string or_undefined -> declarationPath:string -> declarationMapPath:string or_undefined -> buildInfoPath:string or_undefined -> ts_InputFiles [@@js.global "createInputFiles"]
  val createInputFiles: javascriptText:string -> declarationText:string -> javascriptMapPath:string or_undefined -> javascriptMapText:string or_undefined -> declarationMapPath:string or_undefined -> declarationMapText:string or_undefined -> ts_InputFiles [@@js.global "createInputFiles"]
  (** Create an external source map source file reference *)
  val createSourceMapSource: fileName:string -> text:string -> ?skipTrivia:(pos:float -> float) -> unit -> ts_SourceMapSource [@@js.global "createSourceMapSource"]
  val setOriginalNode: node:'T -> original:ts_Node or_undefined -> 'T [@@js.global "setOriginalNode"]
  (**
    Clears any `EmitNode` entries from parse-tree nodes.
    @param sourceFile A source file.
  *)
  val disposeEmitNodes: sourceFile:ts_SourceFile or_undefined -> unit [@@js.global "disposeEmitNodes"]
  (** Sets flags that control emit behavior of a node. *)
  val setEmitFlags: node:'T -> emitFlags:ts_EmitFlags -> 'T [@@js.global "setEmitFlags"]
  (** Gets a custom text range to use when emitting source maps. *)
  val getSourceMapRange: node:ts_Node -> ts_SourceMapRange [@@js.global "getSourceMapRange"]
  (** Sets a custom text range to use when emitting source maps. *)
  val setSourceMapRange: node:'T -> range:ts_SourceMapRange or_undefined -> 'T [@@js.global "setSourceMapRange"]
  (** Gets the TextRange to use for source maps for a token of a node. *)
  val getTokenSourceMapRange: node:ts_Node -> token:ts_SyntaxKind -> ts_SourceMapRange or_undefined [@@js.global "getTokenSourceMapRange"]
  (** Sets the TextRange to use for source maps for a token of a node. *)
  val setTokenSourceMapRange: node:'T -> token:ts_SyntaxKind -> range:ts_SourceMapRange or_undefined -> 'T [@@js.global "setTokenSourceMapRange"]
  (** Gets a custom text range to use when emitting comments. *)
  val getCommentRange: node:ts_Node -> ts_TextRange [@@js.global "getCommentRange"]
  (** Sets a custom text range to use when emitting comments. *)
  val setCommentRange: node:'T -> range:ts_TextRange -> 'T [@@js.global "setCommentRange"]
  val getSyntheticLeadingComments: node:ts_Node -> ts_SynthesizedComment list or_undefined [@@js.global "getSyntheticLeadingComments"]
  val setSyntheticLeadingComments: node:'T -> comments:ts_SynthesizedComment list or_undefined -> 'T [@@js.global "setSyntheticLeadingComments"]
  val addSyntheticLeadingComment: node:'T -> kind:((ts_SyntaxKind_MultiLineCommentTrivia, ts_SyntaxKind_SingleLineCommentTrivia) union2, ([`MultiLineCommentTrivia | `SingleLineCommentTrivia] [@js.enum])) or_enum -> text:string -> ?hasTrailingNewLine:bool -> unit -> 'T [@@js.global "addSyntheticLeadingComment"]
  val getSyntheticTrailingComments: node:ts_Node -> ts_SynthesizedComment list or_undefined [@@js.global "getSyntheticTrailingComments"]
  val setSyntheticTrailingComments: node:'T -> comments:ts_SynthesizedComment list or_undefined -> 'T [@@js.global "setSyntheticTrailingComments"]
  val addSyntheticTrailingComment: node:'T -> kind:((ts_SyntaxKind_MultiLineCommentTrivia, ts_SyntaxKind_SingleLineCommentTrivia) union2, ([`MultiLineCommentTrivia | `SingleLineCommentTrivia] [@js.enum])) or_enum -> text:string -> ?hasTrailingNewLine:bool -> unit -> 'T [@@js.global "addSyntheticTrailingComment"]
  val moveSyntheticComments: node:'T -> original:ts_Node -> 'T [@@js.global "moveSyntheticComments"]
  (** Gets the constant value to emit for an expression representing an enum. *)
  val getConstantValue: node:ts_AccessExpression -> string or_number or_undefined [@@js.global "getConstantValue"]
  (** Sets the constant value to emit for an expression. *)
  val setConstantValue: node:ts_AccessExpression -> value:string or_number -> ts_AccessExpression [@@js.global "setConstantValue"]
  (** Adds an EmitHelper to a node. *)
  val addEmitHelper: node:'T -> helper:ts_EmitHelper -> 'T [@@js.global "addEmitHelper"]
  (** Add EmitHelpers to a node. *)
  val addEmitHelpers: node:'T -> helpers:ts_EmitHelper list or_undefined -> 'T [@@js.global "addEmitHelpers"]
  (** Removes an EmitHelper from a node. *)
  val removeEmitHelper: node:ts_Node -> helper:ts_EmitHelper -> bool [@@js.global "removeEmitHelper"]
  (** Gets the EmitHelpers of a node. *)
  val getEmitHelpers: node:ts_Node -> ts_EmitHelper list or_undefined [@@js.global "getEmitHelpers"]
  (** Moves matching emit helpers from a source node to a target node. *)
  val moveEmitHelpers: source:ts_Node -> target:ts_Node -> predicate:(helper:ts_EmitHelper -> bool) -> unit [@@js.global "moveEmitHelpers"]
  val isNumericLiteral: node:ts_Node -> bool [@@js.global "isNumericLiteral"]
  val isBigIntLiteral: node:ts_Node -> bool [@@js.global "isBigIntLiteral"]
  val isStringLiteral: node:ts_Node -> bool [@@js.global "isStringLiteral"]
  val isJsxText: node:ts_Node -> bool [@@js.global "isJsxText"]
  val isRegularExpressionLiteral: node:ts_Node -> bool [@@js.global "isRegularExpressionLiteral"]
  val isNoSubstitutionTemplateLiteral: node:ts_Node -> bool [@@js.global "isNoSubstitutionTemplateLiteral"]
  val isTemplateHead: node:ts_Node -> bool [@@js.global "isTemplateHead"]
  val isTemplateMiddle: node:ts_Node -> bool [@@js.global "isTemplateMiddle"]
  val isTemplateTail: node:ts_Node -> bool [@@js.global "isTemplateTail"]
  val isIdentifier: node:ts_Node -> bool [@@js.global "isIdentifier"]
  val isQualifiedName: node:ts_Node -> bool [@@js.global "isQualifiedName"]
  val isComputedPropertyName: node:ts_Node -> bool [@@js.global "isComputedPropertyName"]
  val isPrivateIdentifier: node:ts_Node -> bool [@@js.global "isPrivateIdentifier"]
  val isTypeParameterDeclaration: node:ts_Node -> bool [@@js.global "isTypeParameterDeclaration"]
  val isParameter: node:ts_Node -> bool [@@js.global "isParameter"]
  val isDecorator: node:ts_Node -> bool [@@js.global "isDecorator"]
  val isPropertySignature: node:ts_Node -> bool [@@js.global "isPropertySignature"]
  val isPropertyDeclaration: node:ts_Node -> bool [@@js.global "isPropertyDeclaration"]
  val isMethodSignature: node:ts_Node -> bool [@@js.global "isMethodSignature"]
  val isMethodDeclaration: node:ts_Node -> bool [@@js.global "isMethodDeclaration"]
  val isConstructorDeclaration: node:ts_Node -> bool [@@js.global "isConstructorDeclaration"]
  val isGetAccessorDeclaration: node:ts_Node -> bool [@@js.global "isGetAccessorDeclaration"]
  val isSetAccessorDeclaration: node:ts_Node -> bool [@@js.global "isSetAccessorDeclaration"]
  val isCallSignatureDeclaration: node:ts_Node -> bool [@@js.global "isCallSignatureDeclaration"]
  val isConstructSignatureDeclaration: node:ts_Node -> bool [@@js.global "isConstructSignatureDeclaration"]
  val isIndexSignatureDeclaration: node:ts_Node -> bool [@@js.global "isIndexSignatureDeclaration"]
  val isTypePredicateNode: node:ts_Node -> bool [@@js.global "isTypePredicateNode"]
  val isTypeReferenceNode: node:ts_Node -> bool [@@js.global "isTypeReferenceNode"]
  val isFunctionTypeNode: node:ts_Node -> bool [@@js.global "isFunctionTypeNode"]
  val isConstructorTypeNode: node:ts_Node -> bool [@@js.global "isConstructorTypeNode"]
  val isTypeQueryNode: node:ts_Node -> bool [@@js.global "isTypeQueryNode"]
  val isTypeLiteralNode: node:ts_Node -> bool [@@js.global "isTypeLiteralNode"]
  val isArrayTypeNode: node:ts_Node -> bool [@@js.global "isArrayTypeNode"]
  val isTupleTypeNode: node:ts_Node -> bool [@@js.global "isTupleTypeNode"]
  val isNamedTupleMember: node:ts_Node -> bool [@@js.global "isNamedTupleMember"]
  val isOptionalTypeNode: node:ts_Node -> bool [@@js.global "isOptionalTypeNode"]
  val isRestTypeNode: node:ts_Node -> bool [@@js.global "isRestTypeNode"]
  val isUnionTypeNode: node:ts_Node -> bool [@@js.global "isUnionTypeNode"]
  val isIntersectionTypeNode: node:ts_Node -> bool [@@js.global "isIntersectionTypeNode"]
  val isConditionalTypeNode: node:ts_Node -> bool [@@js.global "isConditionalTypeNode"]
  val isInferTypeNode: node:ts_Node -> bool [@@js.global "isInferTypeNode"]
  val isParenthesizedTypeNode: node:ts_Node -> bool [@@js.global "isParenthesizedTypeNode"]
  val isThisTypeNode: node:ts_Node -> bool [@@js.global "isThisTypeNode"]
  val isTypeOperatorNode: node:ts_Node -> bool [@@js.global "isTypeOperatorNode"]
  val isIndexedAccessTypeNode: node:ts_Node -> bool [@@js.global "isIndexedAccessTypeNode"]
  val isMappedTypeNode: node:ts_Node -> bool [@@js.global "isMappedTypeNode"]
  val isLiteralTypeNode: node:ts_Node -> bool [@@js.global "isLiteralTypeNode"]
  val isImportTypeNode: node:ts_Node -> bool [@@js.global "isImportTypeNode"]
  val isTemplateLiteralTypeSpan: node:ts_Node -> bool [@@js.global "isTemplateLiteralTypeSpan"]
  val isTemplateLiteralTypeNode: node:ts_Node -> bool [@@js.global "isTemplateLiteralTypeNode"]
  val isObjectBindingPattern: node:ts_Node -> bool [@@js.global "isObjectBindingPattern"]
  val isArrayBindingPattern: node:ts_Node -> bool [@@js.global "isArrayBindingPattern"]
  val isBindingElement: node:ts_Node -> bool [@@js.global "isBindingElement"]
  val isArrayLiteralExpression: node:ts_Node -> bool [@@js.global "isArrayLiteralExpression"]
  val isObjectLiteralExpression: node:ts_Node -> bool [@@js.global "isObjectLiteralExpression"]
  val isPropertyAccessExpression: node:ts_Node -> bool [@@js.global "isPropertyAccessExpression"]
  val isElementAccessExpression: node:ts_Node -> bool [@@js.global "isElementAccessExpression"]
  val isCallExpression: node:ts_Node -> bool [@@js.global "isCallExpression"]
  val isNewExpression: node:ts_Node -> bool [@@js.global "isNewExpression"]
  val isTaggedTemplateExpression: node:ts_Node -> bool [@@js.global "isTaggedTemplateExpression"]
  val isTypeAssertionExpression: node:ts_Node -> bool [@@js.global "isTypeAssertionExpression"]
  val isParenthesizedExpression: node:ts_Node -> bool [@@js.global "isParenthesizedExpression"]
  val isFunctionExpression: node:ts_Node -> bool [@@js.global "isFunctionExpression"]
  val isArrowFunction: node:ts_Node -> bool [@@js.global "isArrowFunction"]
  val isDeleteExpression: node:ts_Node -> bool [@@js.global "isDeleteExpression"]
  val isTypeOfExpression: node:ts_Node -> bool [@@js.global "isTypeOfExpression"]
  val isVoidExpression: node:ts_Node -> bool [@@js.global "isVoidExpression"]
  val isAwaitExpression: node:ts_Node -> bool [@@js.global "isAwaitExpression"]
  val isPrefixUnaryExpression: node:ts_Node -> bool [@@js.global "isPrefixUnaryExpression"]
  val isPostfixUnaryExpression: node:ts_Node -> bool [@@js.global "isPostfixUnaryExpression"]
  val isBinaryExpression: node:ts_Node -> bool [@@js.global "isBinaryExpression"]
  val isConditionalExpression: node:ts_Node -> bool [@@js.global "isConditionalExpression"]
  val isTemplateExpression: node:ts_Node -> bool [@@js.global "isTemplateExpression"]
  val isYieldExpression: node:ts_Node -> bool [@@js.global "isYieldExpression"]
  val isSpreadElement: node:ts_Node -> bool [@@js.global "isSpreadElement"]
  val isClassExpression: node:ts_Node -> bool [@@js.global "isClassExpression"]
  val isOmittedExpression: node:ts_Node -> bool [@@js.global "isOmittedExpression"]
  val isExpressionWithTypeArguments: node:ts_Node -> bool [@@js.global "isExpressionWithTypeArguments"]
  val isAsExpression: node:ts_Node -> bool [@@js.global "isAsExpression"]
  val isNonNullExpression: node:ts_Node -> bool [@@js.global "isNonNullExpression"]
  val isMetaProperty: node:ts_Node -> bool [@@js.global "isMetaProperty"]
  val isSyntheticExpression: node:ts_Node -> bool [@@js.global "isSyntheticExpression"]
  val isPartiallyEmittedExpression: node:ts_Node -> bool [@@js.global "isPartiallyEmittedExpression"]
  val isCommaListExpression: node:ts_Node -> bool [@@js.global "isCommaListExpression"]
  val isTemplateSpan: node:ts_Node -> bool [@@js.global "isTemplateSpan"]
  val isSemicolonClassElement: node:ts_Node -> bool [@@js.global "isSemicolonClassElement"]
  val isBlock: node:ts_Node -> bool [@@js.global "isBlock"]
  val isVariableStatement: node:ts_Node -> bool [@@js.global "isVariableStatement"]
  val isEmptyStatement: node:ts_Node -> bool [@@js.global "isEmptyStatement"]
  val isExpressionStatement: node:ts_Node -> bool [@@js.global "isExpressionStatement"]
  val isIfStatement: node:ts_Node -> bool [@@js.global "isIfStatement"]
  val isDoStatement: node:ts_Node -> bool [@@js.global "isDoStatement"]
  val isWhileStatement: node:ts_Node -> bool [@@js.global "isWhileStatement"]
  val isForStatement: node:ts_Node -> bool [@@js.global "isForStatement"]
  val isForInStatement: node:ts_Node -> bool [@@js.global "isForInStatement"]
  val isForOfStatement: node:ts_Node -> bool [@@js.global "isForOfStatement"]
  val isContinueStatement: node:ts_Node -> bool [@@js.global "isContinueStatement"]
  val isBreakStatement: node:ts_Node -> bool [@@js.global "isBreakStatement"]
  val isReturnStatement: node:ts_Node -> bool [@@js.global "isReturnStatement"]
  val isWithStatement: node:ts_Node -> bool [@@js.global "isWithStatement"]
  val isSwitchStatement: node:ts_Node -> bool [@@js.global "isSwitchStatement"]
  val isLabeledStatement: node:ts_Node -> bool [@@js.global "isLabeledStatement"]
  val isThrowStatement: node:ts_Node -> bool [@@js.global "isThrowStatement"]
  val isTryStatement: node:ts_Node -> bool [@@js.global "isTryStatement"]
  val isDebuggerStatement: node:ts_Node -> bool [@@js.global "isDebuggerStatement"]
  val isVariableDeclaration: node:ts_Node -> bool [@@js.global "isVariableDeclaration"]
  val isVariableDeclarationList: node:ts_Node -> bool [@@js.global "isVariableDeclarationList"]
  val isFunctionDeclaration: node:ts_Node -> bool [@@js.global "isFunctionDeclaration"]
  val isClassDeclaration: node:ts_Node -> bool [@@js.global "isClassDeclaration"]
  val isInterfaceDeclaration: node:ts_Node -> bool [@@js.global "isInterfaceDeclaration"]
  val isTypeAliasDeclaration: node:ts_Node -> bool [@@js.global "isTypeAliasDeclaration"]
  val isEnumDeclaration: node:ts_Node -> bool [@@js.global "isEnumDeclaration"]
  val isModuleDeclaration: node:ts_Node -> bool [@@js.global "isModuleDeclaration"]
  val isModuleBlock: node:ts_Node -> bool [@@js.global "isModuleBlock"]
  val isCaseBlock: node:ts_Node -> bool [@@js.global "isCaseBlock"]
  val isNamespaceExportDeclaration: node:ts_Node -> bool [@@js.global "isNamespaceExportDeclaration"]
  val isImportEqualsDeclaration: node:ts_Node -> bool [@@js.global "isImportEqualsDeclaration"]
  val isImportDeclaration: node:ts_Node -> bool [@@js.global "isImportDeclaration"]
  val isImportClause: node:ts_Node -> bool [@@js.global "isImportClause"]
  val isNamespaceImport: node:ts_Node -> bool [@@js.global "isNamespaceImport"]
  val isNamespaceExport: node:ts_Node -> bool [@@js.global "isNamespaceExport"]
  val isNamedImports: node:ts_Node -> bool [@@js.global "isNamedImports"]
  val isImportSpecifier: node:ts_Node -> bool [@@js.global "isImportSpecifier"]
  val isExportAssignment: node:ts_Node -> bool [@@js.global "isExportAssignment"]
  val isExportDeclaration: node:ts_Node -> bool [@@js.global "isExportDeclaration"]
  val isNamedExports: node:ts_Node -> bool [@@js.global "isNamedExports"]
  val isExportSpecifier: node:ts_Node -> bool [@@js.global "isExportSpecifier"]
  val isMissingDeclaration: node:ts_Node -> bool [@@js.global "isMissingDeclaration"]
  val isNotEmittedStatement: node:ts_Node -> bool [@@js.global "isNotEmittedStatement"]
  val isExternalModuleReference: node:ts_Node -> bool [@@js.global "isExternalModuleReference"]
  val isJsxElement: node:ts_Node -> bool [@@js.global "isJsxElement"]
  val isJsxSelfClosingElement: node:ts_Node -> bool [@@js.global "isJsxSelfClosingElement"]
  val isJsxOpeningElement: node:ts_Node -> bool [@@js.global "isJsxOpeningElement"]
  val isJsxClosingElement: node:ts_Node -> bool [@@js.global "isJsxClosingElement"]
  val isJsxFragment: node:ts_Node -> bool [@@js.global "isJsxFragment"]
  val isJsxOpeningFragment: node:ts_Node -> bool [@@js.global "isJsxOpeningFragment"]
  val isJsxClosingFragment: node:ts_Node -> bool [@@js.global "isJsxClosingFragment"]
  val isJsxAttribute: node:ts_Node -> bool [@@js.global "isJsxAttribute"]
  val isJsxAttributes: node:ts_Node -> bool [@@js.global "isJsxAttributes"]
  val isJsxSpreadAttribute: node:ts_Node -> bool [@@js.global "isJsxSpreadAttribute"]
  val isJsxExpression: node:ts_Node -> bool [@@js.global "isJsxExpression"]
  val isCaseClause: node:ts_Node -> bool [@@js.global "isCaseClause"]
  val isDefaultClause: node:ts_Node -> bool [@@js.global "isDefaultClause"]
  val isHeritageClause: node:ts_Node -> bool [@@js.global "isHeritageClause"]
  val isCatchClause: node:ts_Node -> bool [@@js.global "isCatchClause"]
  val isPropertyAssignment: node:ts_Node -> bool [@@js.global "isPropertyAssignment"]
  val isShorthandPropertyAssignment: node:ts_Node -> bool [@@js.global "isShorthandPropertyAssignment"]
  val isSpreadAssignment: node:ts_Node -> bool [@@js.global "isSpreadAssignment"]
  val isEnumMember: node:ts_Node -> bool [@@js.global "isEnumMember"]
  val isUnparsedPrepend: node:ts_Node -> bool [@@js.global "isUnparsedPrepend"]
  val isSourceFile: node:ts_Node -> bool [@@js.global "isSourceFile"]
  val isBundle: node:ts_Node -> bool [@@js.global "isBundle"]
  val isUnparsedSource: node:ts_Node -> bool [@@js.global "isUnparsedSource"]
  val isJSDocTypeExpression: node:ts_Node -> bool [@@js.global "isJSDocTypeExpression"]
  val isJSDocNameReference: node:ts_Node -> bool [@@js.global "isJSDocNameReference"]
  val isJSDocAllType: node:ts_Node -> bool [@@js.global "isJSDocAllType"]
  val isJSDocUnknownType: node:ts_Node -> bool [@@js.global "isJSDocUnknownType"]
  val isJSDocNullableType: node:ts_Node -> bool [@@js.global "isJSDocNullableType"]
  val isJSDocNonNullableType: node:ts_Node -> bool [@@js.global "isJSDocNonNullableType"]
  val isJSDocOptionalType: node:ts_Node -> bool [@@js.global "isJSDocOptionalType"]
  val isJSDocFunctionType: node:ts_Node -> bool [@@js.global "isJSDocFunctionType"]
  val isJSDocVariadicType: node:ts_Node -> bool [@@js.global "isJSDocVariadicType"]
  val isJSDocNamepathType: node:ts_Node -> bool [@@js.global "isJSDocNamepathType"]
  val isJSDoc: node:ts_Node -> bool [@@js.global "isJSDoc"]
  val isJSDocTypeLiteral: node:ts_Node -> bool [@@js.global "isJSDocTypeLiteral"]
  val isJSDocSignature: node:ts_Node -> bool [@@js.global "isJSDocSignature"]
  val isJSDocAugmentsTag: node:ts_Node -> bool [@@js.global "isJSDocAugmentsTag"]
  val isJSDocAuthorTag: node:ts_Node -> bool [@@js.global "isJSDocAuthorTag"]
  val isJSDocClassTag: node:ts_Node -> bool [@@js.global "isJSDocClassTag"]
  val isJSDocCallbackTag: node:ts_Node -> bool [@@js.global "isJSDocCallbackTag"]
  val isJSDocPublicTag: node:ts_Node -> bool [@@js.global "isJSDocPublicTag"]
  val isJSDocPrivateTag: node:ts_Node -> bool [@@js.global "isJSDocPrivateTag"]
  val isJSDocProtectedTag: node:ts_Node -> bool [@@js.global "isJSDocProtectedTag"]
  val isJSDocReadonlyTag: node:ts_Node -> bool [@@js.global "isJSDocReadonlyTag"]
  val isJSDocDeprecatedTag: node:ts_Node -> bool [@@js.global "isJSDocDeprecatedTag"]
  val isJSDocSeeTag: node:ts_Node -> bool [@@js.global "isJSDocSeeTag"]
  val isJSDocEnumTag: node:ts_Node -> bool [@@js.global "isJSDocEnumTag"]
  val isJSDocParameterTag: node:ts_Node -> bool [@@js.global "isJSDocParameterTag"]
  val isJSDocReturnTag: node:ts_Node -> bool [@@js.global "isJSDocReturnTag"]
  val isJSDocThisTag: node:ts_Node -> bool [@@js.global "isJSDocThisTag"]
  val isJSDocTypeTag: node:ts_Node -> bool [@@js.global "isJSDocTypeTag"]
  val isJSDocTemplateTag: node:ts_Node -> bool [@@js.global "isJSDocTemplateTag"]
  val isJSDocTypedefTag: node:ts_Node -> bool [@@js.global "isJSDocTypedefTag"]
  val isJSDocUnknownTag: node:ts_Node -> bool [@@js.global "isJSDocUnknownTag"]
  val isJSDocPropertyTag: node:ts_Node -> bool [@@js.global "isJSDocPropertyTag"]
  val isJSDocImplementsTag: node:ts_Node -> bool [@@js.global "isJSDocImplementsTag"]
  val setTextRange: range:'T -> location:ts_TextRange or_undefined -> 'T [@@js.global "setTextRange"]
  (**
    Invokes a callback for each child of the given node. The 'cbNode' callback is invoked for all child nodes
    stored in properties. If a 'cbNodes' callback is specified, it is invoked for embedded arrays; otherwise,
    embedded arrays are flattened and the 'cbNode' callback is invoked for each element. If a callback returns
    a truthy value, iteration stops and that value is returned. Otherwise, undefined is returned.
    @param node a given node to visit its children
    @param cbNode a callback to be invoked for all child nodes
    @param cbNodes a callback to be invoked for embedded array
    remarks: `forEachChild` must visit the children of a node in the order
    that they appear in the source code. The language service depends on this property to locate nodes by position.
  *)
  val forEachChild: node:ts_Node -> cbNode:(node:ts_Node -> 'T or_undefined) -> ?cbNodes:(nodes:ts_Node ts_NodeArray -> 'T or_undefined) -> unit -> 'T or_undefined [@@js.global "forEachChild"]
  val createSourceFile: fileName:string -> sourceText:string -> languageVersion:ts_ScriptTarget -> ?setParentNodes:bool -> ?scriptKind:ts_ScriptKind -> unit -> ts_SourceFile [@@js.global "createSourceFile"]
  val parseIsolatedEntityName: text:string -> languageVersion:ts_ScriptTarget -> ts_EntityName or_undefined [@@js.global "parseIsolatedEntityName"]
  (**
    Parse json text into SyntaxTree and return node and parse errors if any
    @param fileName 
    @param sourceText 
  *)
  val parseJsonText: fileName:string -> sourceText:string -> ts_JsonSourceFile [@@js.global "parseJsonText"]
  val isExternalModule: file:ts_SourceFile -> bool [@@js.global "isExternalModule"]
  val updateSourceFile: sourceFile:ts_SourceFile -> newText:string -> textChangeRange:ts_TextChangeRange -> ?aggressiveChecks:bool -> unit -> ts_SourceFile [@@js.global "updateSourceFile"]
  (* ES6Export [] *)
  val parseCommandLine: commandLine:string list -> ?readFile:(path:string -> string or_undefined) -> unit -> ts_ParsedCommandLine [@@js.global "parseCommandLine"]
  module[@js.scope "DiagnosticReporter"] DiagnosticReporter : sig
    type t = ts_DiagnosticReporter
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DiagnosticReporter]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DiagnosticReporter]
    ]
    val apply: t -> diagnostic:ts_Diagnostic -> unit [@@js.apply]
  end
  (** Reports config file diagnostics *)
  module[@js.scope "ConfigFileDiagnosticsReporter"] ConfigFileDiagnosticsReporter : sig
    type t = ts_ConfigFileDiagnosticsReporter
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ConfigFileDiagnosticsReporter]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ConfigFileDiagnosticsReporter]
    ]
    (** Reports unrecoverable error when parsing config file *)
    (** Reports unrecoverable error when parsing config file *)
    val get_onUnRecoverableConfigFileDiagnostic: t -> ts_DiagnosticReporter [@@js.get "onUnRecoverableConfigFileDiagnostic"]
    (** Reports unrecoverable error when parsing config file *)
    val set_onUnRecoverableConfigFileDiagnostic: t -> ts_DiagnosticReporter -> unit [@@js.set "onUnRecoverableConfigFileDiagnostic"]
  end
  (** Interface extending ParseConfigHost to support ParseConfigFile that reads config file and reports errors *)
  module[@js.scope "ParseConfigFileHost"] ParseConfigFileHost : sig
    type t = ts_ParseConfigFileHost
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ConfigFileDiagnosticsReporter | `Ts_ParseConfigFileHost | `Ts_ParseConfigHost]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ConfigFileDiagnosticsReporter | `Ts_ParseConfigFileHost | `Ts_ParseConfigHost]
    ]
    val getCurrentDirectory: t -> string [@@js.call "getCurrentDirectory"]
    val cast: t -> ts_ParseConfigHost [@@js.cast]
    val cast': t -> ts_ConfigFileDiagnosticsReporter [@@js.cast]
  end
  (** Reads the config file, reports errors if any and exits if the config file cannot be found *)
  val getParsedCommandLineOfConfigFile: configFileName:string -> optionsToExtend:ts_CompilerOptions -> host:ts_ParseConfigFileHost -> ?extendedConfigCache:ts_ExtendedConfigCacheEntry ts_Map -> ?watchOptionsToExtend:ts_WatchOptions -> ?extraFileExtensions:ts_FileExtensionInfo list -> unit -> ts_ParsedCommandLine or_undefined [@@js.global "getParsedCommandLineOfConfigFile"]
  (**
    Read tsconfig.json file
    @param fileName The path to the config file
  *)
  val readConfigFile: fileName:string -> readFile:(path:string -> string or_undefined) -> anonymous_interface_6 [@@js.global "readConfigFile"]
  (**
    Parse the text of the tsconfig.json file
    @param fileName The path to the config file
    @param jsonText The text of the config file
  *)
  val parseConfigFileTextToJson: fileName:string -> jsonText:string -> anonymous_interface_6 [@@js.global "parseConfigFileTextToJson"]
  (**
    Read tsconfig.json file
    @param fileName The path to the config file
  *)
  val readJsonConfigFile: fileName:string -> readFile:(path:string -> string or_undefined) -> ts_TsConfigSourceFile [@@js.global "readJsonConfigFile"]
  (** Convert the json syntax tree into the json value *)
  val convertToObject: sourceFile:ts_JsonSourceFile -> errors:ts_Diagnostic ts_Push -> any [@@js.global "convertToObject"]
  (**
    Parse the contents of a config file (tsconfig.json).
    @param json The contents of the config file to parse
    @param host Instance of ParseConfigHost used to enumerate files in folder.
    @param basePath A root directory to resolve relative path entries in the config
    file to. e.g. outDir
  *)
  val parseJsonConfigFileContent: json:any -> host:ts_ParseConfigHost -> basePath:string -> ?existingOptions:ts_CompilerOptions -> ?configFileName:string -> ?resolutionStack:ts_Path list -> ?extraFileExtensions:ts_FileExtensionInfo list -> ?extendedConfigCache:ts_ExtendedConfigCacheEntry ts_Map -> ?existingWatchOptions:ts_WatchOptions -> unit -> ts_ParsedCommandLine [@@js.global "parseJsonConfigFileContent"]
  (**
    Parse the contents of a config file (tsconfig.json).
    @param jsonNode The contents of the config file to parse
    @param host Instance of ParseConfigHost used to enumerate files in folder.
    @param basePath A root directory to resolve relative path entries in the config
    file to. e.g. outDir
  *)
  val parseJsonSourceFileConfigFileContent: sourceFile:ts_TsConfigSourceFile -> host:ts_ParseConfigHost -> basePath:string -> ?existingOptions:ts_CompilerOptions -> ?configFileName:string -> ?resolutionStack:ts_Path list -> ?extraFileExtensions:ts_FileExtensionInfo list -> ?extendedConfigCache:ts_ExtendedConfigCacheEntry ts_Map -> ?existingWatchOptions:ts_WatchOptions -> unit -> ts_ParsedCommandLine [@@js.global "parseJsonSourceFileConfigFileContent"]
  module[@js.scope "ParsedTsconfig"] ParsedTsconfig : sig
    type t = ts_ParsedTsconfig
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ParsedTsconfig]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ParsedTsconfig]
    ]
    val get_raw: t -> any [@@js.get "raw"]
    val set_raw: t -> any -> unit [@@js.set "raw"]
    val get_options: t -> ts_CompilerOptions [@@js.get "options"]
    val set_options: t -> ts_CompilerOptions -> unit [@@js.set "options"]
    val get_watchOptions: t -> ts_WatchOptions [@@js.get "watchOptions"]
    val set_watchOptions: t -> ts_WatchOptions -> unit [@@js.set "watchOptions"]
    val get_typeAcquisition: t -> ts_TypeAcquisition [@@js.get "typeAcquisition"]
    val set_typeAcquisition: t -> ts_TypeAcquisition -> unit [@@js.set "typeAcquisition"]
    (** Note that the case of the config path has not yet been normalized, as no files have been imported into the project yet *)
    (** Note that the case of the config path has not yet been normalized, as no files have been imported into the project yet *)
    val get_extendedConfigPath: t -> string [@@js.get "extendedConfigPath"]
    (** Note that the case of the config path has not yet been normalized, as no files have been imported into the project yet *)
    val set_extendedConfigPath: t -> string -> unit [@@js.set "extendedConfigPath"]
  end
  module[@js.scope "ExtendedConfigCacheEntry"] ExtendedConfigCacheEntry : sig
    type t = ts_ExtendedConfigCacheEntry
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ExtendedConfigCacheEntry]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ExtendedConfigCacheEntry]
    ]
    val get_extendedResult: t -> ts_TsConfigSourceFile [@@js.get "extendedResult"]
    val set_extendedResult: t -> ts_TsConfigSourceFile -> unit [@@js.set "extendedResult"]
    val get_extendedConfig: t -> ts_ParsedTsconfig or_undefined [@@js.get "extendedConfig"]
    val set_extendedConfig: t -> ts_ParsedTsconfig or_undefined -> unit [@@js.set "extendedConfig"]
  end
  val convertCompilerOptionsFromJson: jsonOptions:any -> basePath:string -> ?configFileName:string -> unit -> anonymous_interface_9 [@@js.global "convertCompilerOptionsFromJson"]
  val convertTypeAcquisitionFromJson: jsonOptions:any -> basePath:string -> ?configFileName:string -> unit -> anonymous_interface_10 [@@js.global "convertTypeAcquisitionFromJson"]
  (* ES6Export [] *)
  val getEffectiveTypeRoots: options:ts_CompilerOptions -> host:ts_GetEffectiveTypeRootsHost -> string list or_undefined [@@js.global "getEffectiveTypeRoots"]
  (**
    @param containingFile - file that contains type reference directive, can be undefined if containing file is unknown.
    This is possible in case if resolution is performed for directives specified via 'types' parameter. In this case initial path for secondary lookups
    is assumed to be the same as root directory of the project.
  *)
  val resolveTypeReferenceDirective: typeReferenceDirectiveName:string -> containingFile:string or_undefined -> options:ts_CompilerOptions -> host:ts_ModuleResolutionHost -> ?redirectedReference:ts_ResolvedProjectReference -> unit -> ts_ResolvedTypeReferenceDirectiveWithFailedLookupLocations [@@js.global "resolveTypeReferenceDirective"]
  (**
    Given a set of options, returns the set of type directive names
      that should be included for this program automatically.
    This list could either come from the config file,
      or from enumerating the types root + initial secondary types lookup location.
    More type directives might appear in the program later as a result of loading actual source files;
      this list is only the set of defaults that are implicitly included.
  *)
  val getAutomaticTypeDirectiveNames: options:ts_CompilerOptions -> host:ts_ModuleResolutionHost -> string list [@@js.global "getAutomaticTypeDirectiveNames"]
  (**
    Cached module resolutions per containing directory.
    This assumes that any module id will have the same resolution for sibling files located in the same folder.
  *)
  module[@js.scope "ModuleResolutionCache"] ModuleResolutionCache : sig
    type t = ts_ModuleResolutionCache
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ModuleResolutionCache | `Ts_NonRelativeModuleNameResolutionCache]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ModuleResolutionCache | `Ts_NonRelativeModuleNameResolutionCache]
    ]
    val getOrCreateCacheForDirectory: t -> directoryName:string -> ?redirectedReference:ts_ResolvedProjectReference -> unit -> ts_ResolvedModuleWithFailedLookupLocations ts_Map [@@js.call "getOrCreateCacheForDirectory"]
    val cast: t -> ts_NonRelativeModuleNameResolutionCache [@@js.cast]
  end
  (**
    Stored map from non-relative module name to a table: directory -> result of module lookup in this directory
    We support only non-relative module names because resolution of relative module names is usually more deterministic and thus less expensive.
  *)
  module[@js.scope "NonRelativeModuleNameResolutionCache"] NonRelativeModuleNameResolutionCache : sig
    type t = ts_NonRelativeModuleNameResolutionCache
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_NonRelativeModuleNameResolutionCache]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_NonRelativeModuleNameResolutionCache]
    ]
    val getOrCreateCacheForModuleName: t -> nonRelativeModuleName:string -> ?redirectedReference:ts_ResolvedProjectReference -> unit -> ts_PerModuleNameCache [@@js.call "getOrCreateCacheForModuleName"]
  end
  module[@js.scope "PerModuleNameCache"] PerModuleNameCache : sig
    type t = ts_PerModuleNameCache
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PerModuleNameCache]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PerModuleNameCache]
    ]
    val get_: t -> directory:string -> ts_ResolvedModuleWithFailedLookupLocations or_undefined [@@js.call "get"]
    val set_: t -> directory:string -> result:ts_ResolvedModuleWithFailedLookupLocations -> unit [@@js.call "set"]
  end
  val createModuleResolutionCache: currentDirectory:string -> getCanonicalFileName:(s:string -> string) -> ?options:ts_CompilerOptions -> unit -> ts_ModuleResolutionCache [@@js.global "createModuleResolutionCache"]
  val resolveModuleNameFromCache: moduleName:string -> containingFile:string -> cache:ts_ModuleResolutionCache -> ts_ResolvedModuleWithFailedLookupLocations or_undefined [@@js.global "resolveModuleNameFromCache"]
  val resolveModuleName: moduleName:string -> containingFile:string -> compilerOptions:ts_CompilerOptions -> host:ts_ModuleResolutionHost -> ?cache:ts_ModuleResolutionCache -> ?redirectedReference:ts_ResolvedProjectReference -> unit -> ts_ResolvedModuleWithFailedLookupLocations [@@js.global "resolveModuleName"]
  val nodeModuleNameResolver: moduleName:string -> containingFile:string -> compilerOptions:ts_CompilerOptions -> host:ts_ModuleResolutionHost -> ?cache:ts_ModuleResolutionCache -> ?redirectedReference:ts_ResolvedProjectReference -> unit -> ts_ResolvedModuleWithFailedLookupLocations [@@js.global "nodeModuleNameResolver"]
  val classicNameResolver: moduleName:string -> containingFile:string -> compilerOptions:ts_CompilerOptions -> host:ts_ModuleResolutionHost -> ?cache:ts_NonRelativeModuleNameResolutionCache -> ?redirectedReference:ts_ResolvedProjectReference -> unit -> ts_ResolvedModuleWithFailedLookupLocations [@@js.global "classicNameResolver"]
  (**
    Visits a Node using the supplied visitor, possibly returning a new Node in its place.
    @param node The Node to visit.
    @param visitor The callback used to visit the Node.
    @param test A callback to execute to verify the Node is valid.
    @param lift An optional callback to execute to lift a NodeArray into a valid Node.
  *)
  val visitNode: node:'T -> visitor:ts_Visitor or_undefined -> ?test:(node:ts_Node -> bool) -> ?lift:(node:ts_Node list -> 'T) -> unit -> 'T [@@js.global "visitNode"]
  (**
    Visits a Node using the supplied visitor, possibly returning a new Node in its place.
    @param node The Node to visit.
    @param visitor The callback used to visit the Node.
    @param test A callback to execute to verify the Node is valid.
    @param lift An optional callback to execute to lift a NodeArray into a valid Node.
  *)
  val visitNode: node:'T or_undefined -> visitor:ts_Visitor or_undefined -> ?test:(node:ts_Node -> bool) -> ?lift:(node:ts_Node list -> 'T) -> unit -> 'T or_undefined [@@js.global "visitNode"]
  (**
    Visits a NodeArray using the supplied visitor, possibly returning a new NodeArray in its place.
    @param nodes The NodeArray to visit.
    @param visitor The callback used to visit a Node.
    @param test A node test to execute for each node.
    @param start An optional value indicating the starting offset at which to start visiting.
    @param count An optional value indicating the maximum number of nodes to visit.
  *)
  val visitNodes: nodes:'T ts_NodeArray -> visitor:ts_Visitor or_undefined -> ?test:(node:ts_Node -> bool) -> ?start:float -> ?count:float -> unit -> 'T ts_NodeArray [@@js.global "visitNodes"]
  (**
    Visits a NodeArray using the supplied visitor, possibly returning a new NodeArray in its place.
    @param nodes The NodeArray to visit.
    @param visitor The callback used to visit a Node.
    @param test A node test to execute for each node.
    @param start An optional value indicating the starting offset at which to start visiting.
    @param count An optional value indicating the maximum number of nodes to visit.
  *)
  val visitNodes: nodes:'T ts_NodeArray or_undefined -> visitor:ts_Visitor or_undefined -> ?test:(node:ts_Node -> bool) -> ?start:float -> ?count:float -> unit -> 'T ts_NodeArray or_undefined [@@js.global "visitNodes"]
  (**
    Starts a new lexical environment and visits a statement list, ending the lexical environment
    and merging hoisted declarations upon completion.
  *)
  val visitLexicalEnvironment: statements:ts_Statement ts_NodeArray -> visitor:ts_Visitor -> context:ts_TransformationContext -> ?start:float -> ?ensureUseStrict:bool -> ?nodesVisitor:ts_NodesVisitor -> unit -> ts_Statement ts_NodeArray [@@js.global "visitLexicalEnvironment"]
  (**
    Starts a new lexical environment and visits a parameter list, suspending the lexical
    environment upon completion.
  *)
  val visitParameterList: nodes:ts_ParameterDeclaration ts_NodeArray -> visitor:ts_Visitor -> context:ts_TransformationContext -> ?nodesVisitor:ts_NodesVisitor -> unit -> ts_ParameterDeclaration ts_NodeArray [@@js.global "visitParameterList"]
  (**
    Starts a new lexical environment and visits a parameter list, suspending the lexical
    environment upon completion.
  *)
  val visitParameterList: nodes:ts_ParameterDeclaration ts_NodeArray or_undefined -> visitor:ts_Visitor -> context:ts_TransformationContext -> ?nodesVisitor:ts_NodesVisitor -> unit -> ts_ParameterDeclaration ts_NodeArray or_undefined [@@js.global "visitParameterList"]
  (**
    Resumes a suspended lexical environment and visits a function body, ending the lexical
    environment and merging hoisted declarations upon completion.
  *)
  val visitFunctionBody: node:ts_FunctionBody -> visitor:ts_Visitor -> context:ts_TransformationContext -> ts_FunctionBody [@@js.global "visitFunctionBody"]
  (**
    Resumes a suspended lexical environment and visits a function body, ending the lexical
    environment and merging hoisted declarations upon completion.
  *)
  val visitFunctionBody: node:ts_FunctionBody or_undefined -> visitor:ts_Visitor -> context:ts_TransformationContext -> ts_FunctionBody or_undefined [@@js.global "visitFunctionBody"]
  (**
    Resumes a suspended lexical environment and visits a concise body, ending the lexical
    environment and merging hoisted declarations upon completion.
  *)
  val visitFunctionBody: node:ts_ConciseBody -> visitor:ts_Visitor -> context:ts_TransformationContext -> ts_ConciseBody [@@js.global "visitFunctionBody"]
  (**
    Visits each child of a Node using the supplied visitor, possibly returning a new Node of the same kind in its place.
    @param node The Node whose children will be visited.
    @param visitor The callback used to visit each child.
    @param context A lexical environment context for the visitor.
  *)
  val visitEachChild: node:'T -> visitor:ts_Visitor -> context:ts_TransformationContext -> 'T [@@js.global "visitEachChild"]
  (**
    Visits each child of a Node using the supplied visitor, possibly returning a new Node of the same kind in its place.
    @param node The Node whose children will be visited.
    @param visitor The callback used to visit each child.
    @param context A lexical environment context for the visitor.
  *)
  val visitEachChild: node:'T or_undefined -> visitor:ts_Visitor -> context:ts_TransformationContext -> ?nodesVisitor:anonymous_interface_24 -> ?tokenVisitor:ts_Visitor -> unit -> 'T or_undefined [@@js.global "visitEachChild"]
  val getTsBuildInfoEmitOutputFilePath: options:ts_CompilerOptions -> string or_undefined [@@js.global "getTsBuildInfoEmitOutputFilePath"]
  val getOutputFileNames: commandLine:ts_ParsedCommandLine -> inputFileName:string -> ignoreCase:bool -> string list [@@js.global "getOutputFileNames"]
  val createPrinter: ?printerOptions:ts_PrinterOptions -> ?handlers:ts_PrintHandlers -> unit -> ts_Printer [@@js.global "createPrinter"]
  val findConfigFile: searchPath:string -> fileExists:(fileName:string -> bool) -> ?configName:string -> unit -> string or_undefined [@@js.global "findConfigFile"]
  val resolveTripleslashReference: moduleName:string -> containingFile:string -> string [@@js.global "resolveTripleslashReference"]
  val createCompilerHost: options:ts_CompilerOptions -> ?setParentNodes:bool -> unit -> ts_CompilerHost [@@js.global "createCompilerHost"]
  val getPreEmitDiagnostics: program:ts_Program -> ?sourceFile:ts_SourceFile -> ?cancellationToken:ts_CancellationToken -> unit -> ts_Diagnostic list [@@js.global "getPreEmitDiagnostics"]
  module[@js.scope "FormatDiagnosticsHost"] FormatDiagnosticsHost : sig
    type t = ts_FormatDiagnosticsHost
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FormatDiagnosticsHost]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FormatDiagnosticsHost]
    ]
    val getCurrentDirectory: t -> string [@@js.call "getCurrentDirectory"]
    val getCanonicalFileName: t -> fileName:string -> string [@@js.call "getCanonicalFileName"]
    val getNewLine: t -> string [@@js.call "getNewLine"]
  end
  val formatDiagnostics: diagnostics:ts_Diagnostic list -> host:ts_FormatDiagnosticsHost -> string [@@js.global "formatDiagnostics"]
  val formatDiagnostic: diagnostic:ts_Diagnostic -> host:ts_FormatDiagnosticsHost -> string [@@js.global "formatDiagnostic"]
  val formatDiagnosticsWithColorAndContext: diagnostics:ts_Diagnostic list -> host:ts_FormatDiagnosticsHost -> string [@@js.global "formatDiagnosticsWithColorAndContext"]
  val flattenDiagnosticMessageText: diag:ts_DiagnosticMessageChain or_string or_undefined -> newLine:string -> ?indent:float -> unit -> string [@@js.global "flattenDiagnosticMessageText"]
  val getConfigFileParsingDiagnostics: configFileParseResult:ts_ParsedCommandLine -> ts_Diagnostic list [@@js.global "getConfigFileParsingDiagnostics"]
  (**
    Create a new 'Program' instance. A Program is an immutable collection of 'SourceFile's and a 'CompilerOptions'
    that represent a compilation unit.
    
    Creating a program proceeds from a set of root files, expanding the set of inputs by following imports and
    triple-slash-reference-path directives transitively. '\@types' and triple-slash-reference-types are also pulled in.
    @param createProgramOptions - The options for creating a program.
    @return A 'Program' object.
  *)
  val createProgram: createProgramOptions:ts_CreateProgramOptions -> ts_Program [@@js.global "createProgram"]
  (**
    Create a new 'Program' instance. A Program is an immutable collection of 'SourceFile's and a 'CompilerOptions'
    that represent a compilation unit.
    
    Creating a program proceeds from a set of root files, expanding the set of inputs by following imports and
    triple-slash-reference-path directives transitively. '\@types' and triple-slash-reference-types are also pulled in.
    @param rootNames - A set of root files.
    @param options - The compiler options which should be used.
    @param host - The host interacts with the underlying file system.
    @param oldProgram - Reuses an old program structure.
    @param configFileParsingDiagnostics - error during config file parsing
    @return A 'Program' object.
  *)
  val createProgram: rootNames:string list -> options:ts_CompilerOptions -> ?host:ts_CompilerHost -> ?oldProgram:ts_Program -> ?configFileParsingDiagnostics:ts_Diagnostic list -> unit -> ts_Program [@@js.global "createProgram"]
  (** @deprecated  *)
  module[@js.scope "ResolveProjectReferencePathHost"] ResolveProjectReferencePathHost : sig
    type t = ts_ResolveProjectReferencePathHost
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ResolveProjectReferencePathHost]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ResolveProjectReferencePathHost]
    ]
    val fileExists: t -> fileName:string -> bool [@@js.call "fileExists"]
  end
  (**
    Returns the target config filename of a project reference.
    Note: The file might not exist.
  *)
  val resolveProjectReferencePath: ref:ts_ProjectReference -> ts_ResolvedConfigFileName [@@js.global "resolveProjectReferencePath"]
  (** @deprecated  *)
  val resolveProjectReferencePath: host:ts_ResolveProjectReferencePathHost -> ref:ts_ProjectReference -> ts_ResolvedConfigFileName [@@js.global "resolveProjectReferencePath"]
  (* ES6Export [] *)
  module[@js.scope "EmitOutput"] EmitOutput : sig
    type t = ts_EmitOutput
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EmitOutput]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EmitOutput]
    ]
    val get_outputFiles: t -> ts_OutputFile list [@@js.get "outputFiles"]
    val set_outputFiles: t -> ts_OutputFile list -> unit [@@js.set "outputFiles"]
    val get_emitSkipped: t -> bool [@@js.get "emitSkipped"]
    val set_emitSkipped: t -> bool -> unit [@@js.set "emitSkipped"]
  end
  module[@js.scope "OutputFile"] OutputFile : sig
    type t = ts_OutputFile
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_OutputFile]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_OutputFile]
    ]
    val get_name: t -> string [@@js.get "name"]
    val set_name: t -> string -> unit [@@js.set "name"]
    val get_writeByteOrderMark: t -> bool [@@js.get "writeByteOrderMark"]
    val set_writeByteOrderMark: t -> bool -> unit [@@js.set "writeByteOrderMark"]
    val get_text: t -> string [@@js.get "text"]
    val set_text: t -> string -> unit [@@js.set "text"]
  end
  module AffectedFileResult : sig
    type 'T t = 'T ts_AffectedFileResult
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_AffectedFileResult of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_AffectedFileResult of 'T]
    ]
  end
  module[@js.scope "BuilderProgramHost"] BuilderProgramHost : sig
    type t = ts_BuilderProgramHost
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BuilderProgramHost]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BuilderProgramHost]
    ]
    (** return true if file names are treated with case sensitivity *)
    val useCaseSensitiveFileNames: t -> bool [@@js.call "useCaseSensitiveFileNames"]
    (** If provided this would be used this hash instead of actual file shape text for detecting changes *)
    val createHash: t -> data:string -> string [@@js.call "createHash"]
    (**
      When emit or emitNextAffectedFile are called without writeFile,
      this callback if present would be used to write files
    *)
    (**
      When emit or emitNextAffectedFile are called without writeFile,
      this callback if present would be used to write files
    *)
    val get_writeFile: t -> ts_WriteFileCallback [@@js.get "writeFile"]
    (**
      When emit or emitNextAffectedFile are called without writeFile,
      this callback if present would be used to write files
    *)
    val set_writeFile: t -> ts_WriteFileCallback -> unit [@@js.set "writeFile"]
  end
  (** Builder to manage the program state changes *)
  module[@js.scope "BuilderProgram"] BuilderProgram : sig
    type t = ts_BuilderProgram
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BuilderProgram]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BuilderProgram]
    ]
    (** Returns current program *)
    val getProgram: t -> ts_Program [@@js.call "getProgram"]
    (** Get compiler options of the program *)
    val getCompilerOptions: t -> ts_CompilerOptions [@@js.call "getCompilerOptions"]
    (** Get the source file in the program with file name *)
    val getSourceFile: t -> fileName:string -> ts_SourceFile or_undefined [@@js.call "getSourceFile"]
    (** Get a list of files in the program *)
    val getSourceFiles: t -> ts_SourceFile list [@@js.call "getSourceFiles"]
    (** Get the diagnostics for compiler options *)
    val getOptionsDiagnostics: t -> ?cancellationToken:ts_CancellationToken -> unit -> ts_Diagnostic list [@@js.call "getOptionsDiagnostics"]
    (** Get the diagnostics that dont belong to any file *)
    val getGlobalDiagnostics: t -> ?cancellationToken:ts_CancellationToken -> unit -> ts_Diagnostic list [@@js.call "getGlobalDiagnostics"]
    (** Get the diagnostics from config file parsing *)
    val getConfigFileParsingDiagnostics: t -> ts_Diagnostic list [@@js.call "getConfigFileParsingDiagnostics"]
    (** Get the syntax diagnostics, for all source files if source file is not supplied *)
    val getSyntacticDiagnostics: t -> ?sourceFile:ts_SourceFile -> ?cancellationToken:ts_CancellationToken -> unit -> ts_Diagnostic list [@@js.call "getSyntacticDiagnostics"]
    (** Get the declaration diagnostics, for all source files if source file is not supplied *)
    val getDeclarationDiagnostics: t -> ?sourceFile:ts_SourceFile -> ?cancellationToken:ts_CancellationToken -> unit -> ts_DiagnosticWithLocation list [@@js.call "getDeclarationDiagnostics"]
    (** Get all the dependencies of the file *)
    val getAllDependencies: t -> sourceFile:ts_SourceFile -> string list [@@js.call "getAllDependencies"]
    (**
      Gets the semantic diagnostics from the program corresponding to this state of file (if provided) or whole program
      The semantic diagnostics are cached and managed here
      Note that it is assumed that when asked about semantic diagnostics through this API,
      the file has been taken out of affected files so it is safe to use cache or get from program and cache the diagnostics
      In case of SemanticDiagnosticsBuilderProgram if the source file is not provided,
      it will iterate through all the affected files, to ensure that cache stays valid and yet provide a way to get all semantic diagnostics
    *)
    val getSemanticDiagnostics: t -> ?sourceFile:ts_SourceFile -> ?cancellationToken:ts_CancellationToken -> unit -> ts_Diagnostic list [@@js.call "getSemanticDiagnostics"]
    (**
      Emits the JavaScript and declaration files.
      When targetSource file is specified, emits the files corresponding to that source file,
      otherwise for the whole program.
      In case of EmitAndSemanticDiagnosticsBuilderProgram, when targetSourceFile is specified,
      it is assumed that that file is handled from affected file list. If targetSourceFile is not specified,
      it will only emit all the affected files instead of whole program
      
      The first of writeFile if provided, writeFile of BuilderProgramHost if provided, writeFile of compiler host
      in that order would be used to write the files
    *)
    val emit: t -> ?targetSourceFile:ts_SourceFile -> ?writeFile:ts_WriteFileCallback -> ?cancellationToken:ts_CancellationToken -> ?emitOnlyDtsFiles:bool -> ?customTransformers:ts_CustomTransformers -> unit -> ts_EmitResult [@@js.call "emit"]
    (** Get the current directory of the program *)
    val getCurrentDirectory: t -> string [@@js.call "getCurrentDirectory"]
  end
  (** The builder that caches the semantic diagnostics for the program and handles the changed files and affected files *)
  module[@js.scope "SemanticDiagnosticsBuilderProgram"] SemanticDiagnosticsBuilderProgram : sig
    type t = ts_SemanticDiagnosticsBuilderProgram
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BuilderProgram | `Ts_SemanticDiagnosticsBuilderProgram]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BuilderProgram | `Ts_SemanticDiagnosticsBuilderProgram]
    ]
    (**
      Gets the semantic diagnostics from the program for the next affected file and caches it
      Returns undefined if the iteration is complete
    *)
    val getSemanticDiagnosticsOfNextAffectedFile: t -> ?cancellationToken:ts_CancellationToken -> ?ignoreSourceFile:(sourceFile:ts_SourceFile -> bool) -> unit -> ts_Diagnostic list ts_AffectedFileResult [@@js.call "getSemanticDiagnosticsOfNextAffectedFile"]
    val cast: t -> ts_BuilderProgram [@@js.cast]
  end
  (**
    The builder that can handle the changes in program and iterate through changed file to emit the files
    The semantic diagnostics are cached per file and managed by clearing for the changed/affected files
  *)
  module[@js.scope "EmitAndSemanticDiagnosticsBuilderProgram"] EmitAndSemanticDiagnosticsBuilderProgram : sig
    type t = ts_EmitAndSemanticDiagnosticsBuilderProgram
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BuilderProgram | `Ts_EmitAndSemanticDiagnosticsBuilderProgram | `Ts_SemanticDiagnosticsBuilderProgram]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BuilderProgram | `Ts_EmitAndSemanticDiagnosticsBuilderProgram | `Ts_SemanticDiagnosticsBuilderProgram]
    ]
    (**
      Emits the next affected file's emit result (EmitResult and sourceFiles emitted) or returns undefined if iteration is complete
      The first of writeFile if provided, writeFile of BuilderProgramHost if provided, writeFile of compiler host
      in that order would be used to write the files
    *)
    val emitNextAffectedFile: t -> ?writeFile:ts_WriteFileCallback -> ?cancellationToken:ts_CancellationToken -> ?emitOnlyDtsFiles:bool -> ?customTransformers:ts_CustomTransformers -> unit -> ts_EmitResult ts_AffectedFileResult [@@js.call "emitNextAffectedFile"]
    val cast: t -> ts_SemanticDiagnosticsBuilderProgram [@@js.cast]
  end
  (** Create the builder to manage semantic diagnostics and cache them *)
  val createSemanticDiagnosticsBuilderProgram: newProgram:ts_Program -> host:ts_BuilderProgramHost -> ?oldProgram:ts_SemanticDiagnosticsBuilderProgram -> ?configFileParsingDiagnostics:ts_Diagnostic list -> unit -> ts_SemanticDiagnosticsBuilderProgram [@@js.global "createSemanticDiagnosticsBuilderProgram"]
  (** Create the builder to manage semantic diagnostics and cache them *)
  val createSemanticDiagnosticsBuilderProgram: rootNames:string list or_undefined -> options:ts_CompilerOptions or_undefined -> ?host:ts_CompilerHost -> ?oldProgram:ts_SemanticDiagnosticsBuilderProgram -> ?configFileParsingDiagnostics:ts_Diagnostic list -> ?projectReferences:ts_ProjectReference list -> unit -> ts_SemanticDiagnosticsBuilderProgram [@@js.global "createSemanticDiagnosticsBuilderProgram"]
  (**
    Create the builder that can handle the changes in program and iterate through changed files
    to emit the those files and manage semantic diagnostics cache as well
  *)
  val createEmitAndSemanticDiagnosticsBuilderProgram: newProgram:ts_Program -> host:ts_BuilderProgramHost -> ?oldProgram:ts_EmitAndSemanticDiagnosticsBuilderProgram -> ?configFileParsingDiagnostics:ts_Diagnostic list -> unit -> ts_EmitAndSemanticDiagnosticsBuilderProgram [@@js.global "createEmitAndSemanticDiagnosticsBuilderProgram"]
  (**
    Create the builder that can handle the changes in program and iterate through changed files
    to emit the those files and manage semantic diagnostics cache as well
  *)
  val createEmitAndSemanticDiagnosticsBuilderProgram: rootNames:string list or_undefined -> options:ts_CompilerOptions or_undefined -> ?host:ts_CompilerHost -> ?oldProgram:ts_EmitAndSemanticDiagnosticsBuilderProgram -> ?configFileParsingDiagnostics:ts_Diagnostic list -> ?projectReferences:ts_ProjectReference list -> unit -> ts_EmitAndSemanticDiagnosticsBuilderProgram [@@js.global "createEmitAndSemanticDiagnosticsBuilderProgram"]
  (** Creates a builder thats just abstraction over program and can be used with watch *)
  val createAbstractBuilder: newProgram:ts_Program -> host:ts_BuilderProgramHost -> ?oldProgram:ts_BuilderProgram -> ?configFileParsingDiagnostics:ts_Diagnostic list -> unit -> ts_BuilderProgram [@@js.global "createAbstractBuilder"]
  (** Creates a builder thats just abstraction over program and can be used with watch *)
  val createAbstractBuilder: rootNames:string list or_undefined -> options:ts_CompilerOptions or_undefined -> ?host:ts_CompilerHost -> ?oldProgram:ts_BuilderProgram -> ?configFileParsingDiagnostics:ts_Diagnostic list -> ?projectReferences:ts_ProjectReference list -> unit -> ts_BuilderProgram [@@js.global "createAbstractBuilder"]
  module[@js.scope "ReadBuildProgramHost"] ReadBuildProgramHost : sig
    type t = ts_ReadBuildProgramHost
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ReadBuildProgramHost]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ReadBuildProgramHost]
    ]
    val useCaseSensitiveFileNames: t -> bool [@@js.call "useCaseSensitiveFileNames"]
    val getCurrentDirectory: t -> string [@@js.call "getCurrentDirectory"]
    val readFile: t -> fileName:string -> string or_undefined [@@js.call "readFile"]
  end
  val readBuilderProgram: compilerOptions:ts_CompilerOptions -> host:ts_ReadBuildProgramHost -> ts_EmitAndSemanticDiagnosticsBuilderProgram or_undefined [@@js.global "readBuilderProgram"]
  val createIncrementalCompilerHost: options:ts_CompilerOptions -> ?system:ts_System -> unit -> ts_CompilerHost [@@js.global "createIncrementalCompilerHost"]
  module[@js.scope "IncrementalProgramOptions"] IncrementalProgramOptions : sig
    type 'T t = 'T ts_IncrementalProgramOptions
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_IncrementalProgramOptions of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_IncrementalProgramOptions of 'T]
    ]
    val get_rootNames: 'T t -> string list [@@js.get "rootNames"]
    val set_rootNames: 'T t -> string list -> unit [@@js.set "rootNames"]
    val get_options: 'T t -> ts_CompilerOptions [@@js.get "options"]
    val set_options: 'T t -> ts_CompilerOptions -> unit [@@js.set "options"]
    val get_configFileParsingDiagnostics: 'T t -> ts_Diagnostic list [@@js.get "configFileParsingDiagnostics"]
    val set_configFileParsingDiagnostics: 'T t -> ts_Diagnostic list -> unit [@@js.set "configFileParsingDiagnostics"]
    val get_projectReferences: 'T t -> ts_ProjectReference list [@@js.get "projectReferences"]
    val set_projectReferences: 'T t -> ts_ProjectReference list -> unit [@@js.set "projectReferences"]
    val get_host: 'T t -> ts_CompilerHost [@@js.get "host"]
    val set_host: 'T t -> ts_CompilerHost -> unit [@@js.set "host"]
    val get_createProgram: 'T t -> 'T ts_CreateProgram [@@js.get "createProgram"]
    val set_createProgram: 'T t -> 'T ts_CreateProgram -> unit [@@js.set "createProgram"]
  end
  val createIncrementalProgram: 'T ts_IncrementalProgramOptions -> 'T [@@js.global "createIncrementalProgram"]
  module[@js.scope "WatchStatusReporter"] WatchStatusReporter : sig
    type t = ts_WatchStatusReporter
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_WatchStatusReporter]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_WatchStatusReporter]
    ]
    val apply: t -> diagnostic:ts_Diagnostic -> newLine:string -> options:ts_CompilerOptions -> ?errorCount:float -> unit -> unit [@@js.apply]
  end
  (** Create the program with rootNames and options, if they are undefined, oldProgram and new configFile diagnostics create new program *)
  module[@js.scope "CreateProgram"] CreateProgram : sig
    type 'T t = 'T ts_CreateProgram
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_CreateProgram of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_CreateProgram of 'T]
    ]
    val apply: 'T t -> rootNames:string list or_undefined -> options:ts_CompilerOptions or_undefined -> ?host:ts_CompilerHost -> ?oldProgram:'T -> ?configFileParsingDiagnostics:ts_Diagnostic list -> ?projectReferences:ts_ProjectReference list or_undefined -> unit -> 'T [@@js.apply]
  end
  (** Host that has watch functionality used in --watch mode *)
  module[@js.scope "WatchHost"] WatchHost : sig
    type t = ts_WatchHost
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_WatchHost]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_WatchHost]
    ]
    (** If provided, called with Diagnostic message that informs about change in watch status *)
    val onWatchStatusChange: t -> diagnostic:ts_Diagnostic -> newLine:string -> options:ts_CompilerOptions -> ?errorCount:float -> unit -> unit [@@js.call "onWatchStatusChange"]
    (** Used to watch changes in source files, missing files needed to update the program or config file *)
    val watchFile: t -> path:string -> callback:ts_FileWatcherCallback -> ?pollingInterval:float -> ?options:ts_CompilerOptions -> unit -> ts_FileWatcher [@@js.call "watchFile"]
    (** Used to watch resolved module's failed lookup locations, config file specs, type roots where auto type reference directives are added *)
    val watchDirectory: t -> path:string -> callback:ts_DirectoryWatcherCallback -> ?recursive:bool -> ?options:ts_CompilerOptions -> unit -> ts_FileWatcher [@@js.call "watchDirectory"]
    (** If provided, will be used to set delayed compilation, so that multiple changes in short span are compiled together *)
    val setTimeout: t -> callback:(args:(any list [@js.variadic]) -> unit) -> ms:float -> args:(any list [@js.variadic]) -> any [@@js.call "setTimeout"]
    (** If provided, will be used to reset existing delayed compilation *)
    val clearTimeout: t -> timeoutId:any -> unit [@@js.call "clearTimeout"]
  end
  module[@js.scope "ProgramHost"] ProgramHost : sig
    type 'T t = 'T ts_ProgramHost
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_ProgramHost of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_ProgramHost of 'T]
    ]
    (** Used to create the program when need for program creation or recreation detected *)
    (** Used to create the program when need for program creation or recreation detected *)
    val get_createProgram: 'T t -> 'T ts_CreateProgram [@@js.get "createProgram"]
    (** Used to create the program when need for program creation or recreation detected *)
    val set_createProgram: 'T t -> 'T ts_CreateProgram -> unit [@@js.set "createProgram"]
    val useCaseSensitiveFileNames: 'T t -> bool [@@js.call "useCaseSensitiveFileNames"]
    val getNewLine: 'T t -> string [@@js.call "getNewLine"]
    val getCurrentDirectory: 'T t -> string [@@js.call "getCurrentDirectory"]
    val getDefaultLibFileName: 'T t -> options:ts_CompilerOptions -> string [@@js.call "getDefaultLibFileName"]
    val getDefaultLibLocation: 'T t -> string [@@js.call "getDefaultLibLocation"]
    val createHash: 'T t -> data:string -> string [@@js.call "createHash"]
    (**
      Use to check file presence for source files and
      if resolveModuleNames is not provided (complier is in charge of module resolution) then module files as well
    *)
    val fileExists: 'T t -> path:string -> bool [@@js.call "fileExists"]
    (**
      Use to read file text for source files and
      if resolveModuleNames is not provided (complier is in charge of module resolution) then module files as well
    *)
    val readFile: 'T t -> path:string -> ?encoding:string -> unit -> string or_undefined [@@js.call "readFile"]
    (** If provided, used for module resolution as well as to handle directory structure *)
    val directoryExists: 'T t -> path:string -> bool [@@js.call "directoryExists"]
    (** If provided, used in resolutions as well as handling directory structure *)
    val getDirectories: 'T t -> path:string -> string list [@@js.call "getDirectories"]
    (** If provided, used to cache and handle directory structure modifications *)
    val readDirectory: 'T t -> path:string -> ?extensions:string list -> ?exclude:string list -> ?include_:string list -> ?depth:float -> unit -> string list [@@js.call "readDirectory"]
    (** Symbol links resolution *)
    val realpath: 'T t -> path:string -> string [@@js.call "realpath"]
    (** If provided would be used to write log about compilation *)
    val trace: 'T t -> s:string -> unit [@@js.call "trace"]
    (** If provided is used to get the environment variable *)
    val getEnvironmentVariable: 'T t -> name:string -> string or_undefined [@@js.call "getEnvironmentVariable"]
    (** If provided, used to resolve the module names, otherwise typescript's default module resolution *)
    val resolveModuleNames: 'T t -> moduleNames:string list -> containingFile:string -> reusedNames:string list or_undefined -> redirectedReference:ts_ResolvedProjectReference or_undefined -> options:ts_CompilerOptions -> ts_ResolvedModule or_undefined list [@@js.call "resolveModuleNames"]
    (** If provided, used to resolve type reference directives, otherwise typescript's default resolution *)
    val resolveTypeReferenceDirectives: 'T t -> typeReferenceDirectiveNames:string list -> containingFile:string -> redirectedReference:ts_ResolvedProjectReference or_undefined -> options:ts_CompilerOptions -> ts_ResolvedTypeReferenceDirective or_undefined list [@@js.call "resolveTypeReferenceDirectives"]
  end
  module[@js.scope "WatchCompilerHost"] WatchCompilerHost : sig
    type 'T t = 'T ts_WatchCompilerHost
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_ProgramHost of 'T | `Ts_WatchCompilerHost of 'T | `Ts_WatchHost]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_ProgramHost of 'T | `Ts_WatchCompilerHost of 'T | `Ts_WatchHost]
    ]
    (** Instead of using output d.ts file from project reference, use its source file *)
    val useSourceOfProjectReferenceRedirect: 'T t -> bool [@@js.call "useSourceOfProjectReferenceRedirect"]
    (** If provided, callback to invoke after every new program creation *)
    val afterProgramCreate: 'T t -> program:'T -> unit [@@js.call "afterProgramCreate"]
    val cast: 'T t -> 'T ts_ProgramHost [@@js.cast]
    val cast': 'T t -> ts_WatchHost [@@js.cast]
  end
  (** Host to create watch with root files and options *)
  module[@js.scope "WatchCompilerHostOfFilesAndCompilerOptions"] WatchCompilerHostOfFilesAndCompilerOptions : sig
    type 'T t = 'T ts_WatchCompilerHostOfFilesAndCompilerOptions
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_ProgramHost of 'T | `Ts_WatchCompilerHost of 'T | `Ts_WatchCompilerHostOfFilesAndCompilerOptions of 'T | `Ts_WatchHost]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_ProgramHost of 'T | `Ts_WatchCompilerHost of 'T | `Ts_WatchCompilerHostOfFilesAndCompilerOptions of 'T | `Ts_WatchHost]
    ]
    (** root files to use to generate program *)
    (** root files to use to generate program *)
    val get_rootFiles: 'T t -> string list [@@js.get "rootFiles"]
    (** root files to use to generate program *)
    val set_rootFiles: 'T t -> string list -> unit [@@js.set "rootFiles"]
    (** Compiler options *)
    (** Compiler options *)
    val get_options: 'T t -> ts_CompilerOptions [@@js.get "options"]
    (** Compiler options *)
    val set_options: 'T t -> ts_CompilerOptions -> unit [@@js.set "options"]
    val get_watchOptions: 'T t -> ts_WatchOptions [@@js.get "watchOptions"]
    val set_watchOptions: 'T t -> ts_WatchOptions -> unit [@@js.set "watchOptions"]
    (** Project References *)
    (** Project References *)
    val get_projectReferences: 'T t -> ts_ProjectReference list [@@js.get "projectReferences"]
    (** Project References *)
    val set_projectReferences: 'T t -> ts_ProjectReference list -> unit [@@js.set "projectReferences"]
    val cast: 'T t -> 'T ts_WatchCompilerHost [@@js.cast]
  end
  (** Host to create watch with config file *)
  module[@js.scope "WatchCompilerHostOfConfigFile"] WatchCompilerHostOfConfigFile : sig
    type 'T t = 'T ts_WatchCompilerHostOfConfigFile
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_ConfigFileDiagnosticsReporter | `Ts_ProgramHost of 'T | `Ts_WatchCompilerHost of 'T | `Ts_WatchCompilerHostOfConfigFile of 'T | `Ts_WatchHost]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_ConfigFileDiagnosticsReporter | `Ts_ProgramHost of 'T | `Ts_WatchCompilerHost of 'T | `Ts_WatchCompilerHostOfConfigFile of 'T | `Ts_WatchHost]
    ]
    (** Name of the config file to compile *)
    (** Name of the config file to compile *)
    val get_configFileName: 'T t -> string [@@js.get "configFileName"]
    (** Name of the config file to compile *)
    val set_configFileName: 'T t -> string -> unit [@@js.set "configFileName"]
    (** Options to extend *)
    (** Options to extend *)
    val get_optionsToExtend: 'T t -> ts_CompilerOptions [@@js.get "optionsToExtend"]
    (** Options to extend *)
    val set_optionsToExtend: 'T t -> ts_CompilerOptions -> unit [@@js.set "optionsToExtend"]
    val get_watchOptionsToExtend: 'T t -> ts_WatchOptions [@@js.get "watchOptionsToExtend"]
    val set_watchOptionsToExtend: 'T t -> ts_WatchOptions -> unit [@@js.set "watchOptionsToExtend"]
    val get_extraFileExtensions: 'T t -> ts_FileExtensionInfo list [@@js.get "extraFileExtensions"]
    val set_extraFileExtensions: 'T t -> ts_FileExtensionInfo list -> unit [@@js.set "extraFileExtensions"]
    (**
      Used to generate source file names from the config file and its include, exclude, files rules
      and also to cache the directory stucture
    *)
    val readDirectory: 'T t -> path:string -> ?extensions:string list -> ?exclude:string list -> ?include_:string list -> ?depth:float -> unit -> string list [@@js.call "readDirectory"]
    val cast: 'T t -> 'T ts_WatchCompilerHost [@@js.cast]
    val cast': 'T t -> ts_ConfigFileDiagnosticsReporter [@@js.cast]
  end
  module[@js.scope "Watch"] Watch : sig
    type 'T t = 'T ts_Watch
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_Watch of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_Watch of 'T]
    ]
    (** Synchronize with host and get updated program *)
    val getProgram: 'T t -> 'T [@@js.call "getProgram"]
    (** Closes the watch *)
    val close: 'T t -> unit [@@js.call "close"]
  end
  (** Creates the watch what generates program using the config file *)
  module[@js.scope "WatchOfConfigFile"] WatchOfConfigFile : sig
    type 'T t = 'T ts_WatchOfConfigFile
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_Watch of 'T | `Ts_WatchOfConfigFile of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_Watch of 'T | `Ts_WatchOfConfigFile of 'T]
    ]
    val cast: 'T t -> 'T ts_Watch [@@js.cast]
  end
  (** Creates the watch that generates program using the root files and compiler options *)
  module[@js.scope "WatchOfFilesAndCompilerOptions"] WatchOfFilesAndCompilerOptions : sig
    type 'T t = 'T ts_WatchOfFilesAndCompilerOptions
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_Watch of 'T | `Ts_WatchOfFilesAndCompilerOptions of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_Watch of 'T | `Ts_WatchOfFilesAndCompilerOptions of 'T]
    ]
    (** Updates the root files in the program, only if this is not config file compilation *)
    val updateRootFileNames: 'T t -> fileNames:string list -> unit [@@js.call "updateRootFileNames"]
    val cast: 'T t -> 'T ts_Watch [@@js.cast]
  end
  (** Create the watch compiler host for either configFile or fileNames and its options *)
  val createWatchCompilerHost: configFileName:string -> optionsToExtend:ts_CompilerOptions or_undefined -> system:ts_System -> ?createProgram:'T ts_CreateProgram -> ?reportDiagnostic:ts_DiagnosticReporter -> ?reportWatchStatus:ts_WatchStatusReporter -> ?watchOptionsToExtend:ts_WatchOptions -> ?extraFileExtensions:ts_FileExtensionInfo list -> unit -> 'T ts_WatchCompilerHostOfConfigFile [@@js.global "createWatchCompilerHost"]
  (** Create the watch compiler host for either configFile or fileNames and its options *)
  val createWatchCompilerHost: rootFiles:string list -> options:ts_CompilerOptions -> system:ts_System -> ?createProgram:'T ts_CreateProgram -> ?reportDiagnostic:ts_DiagnosticReporter -> ?reportWatchStatus:ts_WatchStatusReporter -> ?projectReferences:ts_ProjectReference list -> ?watchOptions:ts_WatchOptions -> unit -> 'T ts_WatchCompilerHostOfFilesAndCompilerOptions [@@js.global "createWatchCompilerHost"]
  (** Creates the watch from the host for root files and compiler options *)
  val createWatchProgram: host:'T ts_WatchCompilerHostOfFilesAndCompilerOptions -> 'T ts_WatchOfFilesAndCompilerOptions [@@js.global "createWatchProgram"]
  (** Creates the watch from the host for config file *)
  val createWatchProgram: host:'T ts_WatchCompilerHostOfConfigFile -> 'T ts_WatchOfConfigFile [@@js.global "createWatchProgram"]
  module[@js.scope "BuildOptions"] BuildOptions : sig
    type t = ts_BuildOptions
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_BuildOptions]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_BuildOptions]
    ]
    val get_dry: t -> bool [@@js.get "dry"]
    val set_dry: t -> bool -> unit [@@js.set "dry"]
    val get_force: t -> bool [@@js.get "force"]
    val set_force: t -> bool -> unit [@@js.set "force"]
    val get_verbose: t -> bool [@@js.get "verbose"]
    val set_verbose: t -> bool -> unit [@@js.set "verbose"]
    val get_incremental: t -> bool [@@js.get "incremental"]
    val set_incremental: t -> bool -> unit [@@js.set "incremental"]
    val get_assumeChangesOnlyAffectDirectDependencies: t -> bool [@@js.get "assumeChangesOnlyAffectDirectDependencies"]
    val set_assumeChangesOnlyAffectDirectDependencies: t -> bool -> unit [@@js.set "assumeChangesOnlyAffectDirectDependencies"]
    val get_traceResolution: t -> bool [@@js.get "traceResolution"]
    val set_traceResolution: t -> bool -> unit [@@js.set "traceResolution"]
    val get: t -> string -> ts_CompilerOptionsValue or_undefined [@@js.index_get]
    val set: t -> string -> ts_CompilerOptionsValue or_undefined -> unit [@@js.index_set]
  end
  module[@js.scope "ReportEmitErrorSummary"] ReportEmitErrorSummary : sig
    type t = ts_ReportEmitErrorSummary
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ReportEmitErrorSummary]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ReportEmitErrorSummary]
    ]
    val apply: t -> errorCount:float -> unit [@@js.apply]
  end
  module[@js.scope "SolutionBuilderHostBase"] SolutionBuilderHostBase : sig
    type 'T t = 'T ts_SolutionBuilderHostBase
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_ProgramHost of 'T | `Ts_SolutionBuilderHostBase of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_ProgramHost of 'T | `Ts_SolutionBuilderHostBase of 'T]
    ]
    val createDirectory: 'T t -> path:string -> unit [@@js.call "createDirectory"]
    (**
      Should provide create directory and writeFile if done of invalidatedProjects is not invoked with
      writeFileCallback
    *)
    val writeFile: 'T t -> path:string -> data:string -> ?writeByteOrderMark:bool -> unit -> unit [@@js.call "writeFile"]
    val getModifiedTime: 'T t -> fileName:string -> Date.t_0 or_undefined [@@js.call "getModifiedTime"]
    val setModifiedTime: 'T t -> fileName:string -> date:Date.t_0 -> unit [@@js.call "setModifiedTime"]
    val deleteFile: 'T t -> fileName:string -> unit [@@js.call "deleteFile"]
    val getParsedCommandLine: 'T t -> fileName:string -> ts_ParsedCommandLine or_undefined [@@js.call "getParsedCommandLine"]
    val get_reportDiagnostic: 'T t -> ts_DiagnosticReporter [@@js.get "reportDiagnostic"]
    val set_reportDiagnostic: 'T t -> ts_DiagnosticReporter -> unit [@@js.set "reportDiagnostic"]
    val get_reportSolutionBuilderStatus: 'T t -> ts_DiagnosticReporter [@@js.get "reportSolutionBuilderStatus"]
    val set_reportSolutionBuilderStatus: 'T t -> ts_DiagnosticReporter -> unit [@@js.set "reportSolutionBuilderStatus"]
    val afterProgramEmitAndDiagnostics: 'T t -> program:'T -> unit [@@js.call "afterProgramEmitAndDiagnostics"]
    val cast: 'T t -> 'T ts_ProgramHost [@@js.cast]
  end
  module[@js.scope "SolutionBuilderHost"] SolutionBuilderHost : sig
    type 'T t = 'T ts_SolutionBuilderHost
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_ProgramHost of 'T | `Ts_SolutionBuilderHost of 'T | `Ts_SolutionBuilderHostBase of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_ProgramHost of 'T | `Ts_SolutionBuilderHost of 'T | `Ts_SolutionBuilderHostBase of 'T]
    ]
    val get_reportErrorSummary: 'T t -> ts_ReportEmitErrorSummary [@@js.get "reportErrorSummary"]
    val set_reportErrorSummary: 'T t -> ts_ReportEmitErrorSummary -> unit [@@js.set "reportErrorSummary"]
    val cast: 'T t -> 'T ts_SolutionBuilderHostBase [@@js.cast]
  end
  module[@js.scope "SolutionBuilderWithWatchHost"] SolutionBuilderWithWatchHost : sig
    type 'T t = 'T ts_SolutionBuilderWithWatchHost
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_ProgramHost of 'T | `Ts_SolutionBuilderHostBase of 'T | `Ts_SolutionBuilderWithWatchHost of 'T | `Ts_WatchHost]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_ProgramHost of 'T | `Ts_SolutionBuilderHostBase of 'T | `Ts_SolutionBuilderWithWatchHost of 'T | `Ts_WatchHost]
    ]
    val cast: 'T t -> 'T ts_SolutionBuilderHostBase [@@js.cast]
    val cast': 'T t -> ts_WatchHost [@@js.cast]
  end
  module[@js.scope "SolutionBuilder"] SolutionBuilder : sig
    type 'T t = 'T ts_SolutionBuilder
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_SolutionBuilder of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_SolutionBuilder of 'T]
    ]
    val build: 'T t -> ?project:string -> ?cancellationToken:ts_CancellationToken -> unit -> ts_ExitStatus [@@js.call "build"]
    val clean: 'T t -> ?project:string -> unit -> ts_ExitStatus [@@js.call "clean"]
    val buildReferences: 'T t -> project:string -> ?cancellationToken:ts_CancellationToken -> unit -> ts_ExitStatus [@@js.call "buildReferences"]
    val cleanReferences: 'T t -> ?project:string -> unit -> ts_ExitStatus [@@js.call "cleanReferences"]
    val getNextInvalidatedProject: 'T t -> ?cancellationToken:ts_CancellationToken -> unit -> 'T ts_InvalidatedProject or_undefined [@@js.call "getNextInvalidatedProject"]
  end
  (** Create a function that reports watch status by writing to the system and handles the formating of the diagnostic *)
  val createBuilderStatusReporter: system:ts_System -> ?pretty:bool -> unit -> ts_DiagnosticReporter [@@js.global "createBuilderStatusReporter"]
  val createSolutionBuilderHost: ?system:ts_System -> ?createProgram:'T ts_CreateProgram -> ?reportDiagnostic:ts_DiagnosticReporter -> ?reportSolutionBuilderStatus:ts_DiagnosticReporter -> ?reportErrorSummary:ts_ReportEmitErrorSummary -> unit -> 'T ts_SolutionBuilderHost [@@js.global "createSolutionBuilderHost"]
  val createSolutionBuilderWithWatchHost: ?system:ts_System -> ?createProgram:'T ts_CreateProgram -> ?reportDiagnostic:ts_DiagnosticReporter -> ?reportSolutionBuilderStatus:ts_DiagnosticReporter -> ?reportWatchStatus:ts_WatchStatusReporter -> unit -> 'T ts_SolutionBuilderWithWatchHost [@@js.global "createSolutionBuilderWithWatchHost"]
  val createSolutionBuilder: host:'T ts_SolutionBuilderHost -> rootNames:string list -> defaultOptions:ts_BuildOptions -> 'T ts_SolutionBuilder [@@js.global "createSolutionBuilder"]
  val createSolutionBuilderWithWatch: host:'T ts_SolutionBuilderWithWatchHost -> rootNames:string list -> defaultOptions:ts_BuildOptions -> ?baseWatchOptions:ts_WatchOptions -> unit -> 'T ts_SolutionBuilder [@@js.global "createSolutionBuilderWithWatch"]
  module InvalidatedProjectKind : sig
    type t = ts_InvalidatedProjectKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "InvalidatedProjectBase"] InvalidatedProjectBase : sig
    type t = ts_InvalidatedProjectBase
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_InvalidatedProjectBase]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_InvalidatedProjectBase]
    ]
    val get_kind: t -> ts_InvalidatedProjectKind [@@js.get "kind"]
    val get_project: t -> ts_ResolvedConfigFileName [@@js.get "project"]
    (** To dispose this project and ensure that all the necessary actions are taken and state is updated accordingly *)
    val done_: t -> ?cancellationToken:ts_CancellationToken -> ?writeFile:ts_WriteFileCallback -> ?customTransformers:ts_CustomTransformers -> unit -> ts_ExitStatus [@@js.call "done"]
    val getCompilerOptions: t -> ts_CompilerOptions [@@js.call "getCompilerOptions"]
    val getCurrentDirectory: t -> string [@@js.call "getCurrentDirectory"]
  end
  module[@js.scope "UpdateOutputFileStampsProject"] UpdateOutputFileStampsProject : sig
    type t = ts_UpdateOutputFileStampsProject
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_InvalidatedProjectBase | `Ts_UpdateOutputFileStampsProject]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_InvalidatedProjectBase | `Ts_UpdateOutputFileStampsProject]
    ]
    val get_kind: t -> ts_InvalidatedProjectKind_UpdateOutputFileStamps [@@js.get "kind"]
    val updateOutputFileStatmps: t -> unit [@@js.call "updateOutputFileStatmps"]
    val cast: t -> ts_InvalidatedProjectBase [@@js.cast]
  end
  module[@js.scope "BuildInvalidedProject"] BuildInvalidedProject : sig
    type 'T t = 'T ts_BuildInvalidedProject
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_BuildInvalidedProject of 'T | `Ts_InvalidatedProjectBase]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_BuildInvalidedProject of 'T | `Ts_InvalidatedProjectBase]
    ]
    val get_kind: 'T t -> ts_InvalidatedProjectKind_Build [@@js.get "kind"]
    val getBuilderProgram: 'T t -> 'T or_undefined [@@js.call "getBuilderProgram"]
    val getProgram: 'T t -> ts_Program or_undefined [@@js.call "getProgram"]
    val getSourceFile: 'T t -> fileName:string -> ts_SourceFile or_undefined [@@js.call "getSourceFile"]
    val getSourceFiles: 'T t -> ts_SourceFile list [@@js.call "getSourceFiles"]
    val getOptionsDiagnostics: 'T t -> ?cancellationToken:ts_CancellationToken -> unit -> ts_Diagnostic list [@@js.call "getOptionsDiagnostics"]
    val getGlobalDiagnostics: 'T t -> ?cancellationToken:ts_CancellationToken -> unit -> ts_Diagnostic list [@@js.call "getGlobalDiagnostics"]
    val getConfigFileParsingDiagnostics: 'T t -> ts_Diagnostic list [@@js.call "getConfigFileParsingDiagnostics"]
    val getSyntacticDiagnostics: 'T t -> ?sourceFile:ts_SourceFile -> ?cancellationToken:ts_CancellationToken -> unit -> ts_Diagnostic list [@@js.call "getSyntacticDiagnostics"]
    val getAllDependencies: 'T t -> sourceFile:ts_SourceFile -> string list [@@js.call "getAllDependencies"]
    val getSemanticDiagnostics: 'T t -> ?sourceFile:ts_SourceFile -> ?cancellationToken:ts_CancellationToken -> unit -> ts_Diagnostic list [@@js.call "getSemanticDiagnostics"]
    val getSemanticDiagnosticsOfNextAffectedFile: 'T t -> ?cancellationToken:ts_CancellationToken -> ?ignoreSourceFile:(sourceFile:ts_SourceFile -> bool) -> unit -> ts_Diagnostic list ts_AffectedFileResult [@@js.call "getSemanticDiagnosticsOfNextAffectedFile"]
    val emit: 'T t -> ?targetSourceFile:ts_SourceFile -> ?writeFile:ts_WriteFileCallback -> ?cancellationToken:ts_CancellationToken -> ?emitOnlyDtsFiles:bool -> ?customTransformers:ts_CustomTransformers -> unit -> ts_EmitResult or_undefined [@@js.call "emit"]
    val cast: 'T t -> ts_InvalidatedProjectBase [@@js.cast]
  end
  module[@js.scope "UpdateBundleProject"] UpdateBundleProject : sig
    type 'T t = 'T ts_UpdateBundleProject
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_InvalidatedProjectBase | `Ts_UpdateBundleProject of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_InvalidatedProjectBase | `Ts_UpdateBundleProject of 'T]
    ]
    val get_kind: 'T t -> ts_InvalidatedProjectKind_UpdateBundle [@@js.get "kind"]
    val emit: 'T t -> ?writeFile:ts_WriteFileCallback -> ?customTransformers:ts_CustomTransformers -> unit -> (ts_EmitResult, 'T ts_BuildInvalidedProject) union2 or_undefined [@@js.call "emit"]
    val cast: 'T t -> ts_InvalidatedProjectBase [@@js.cast]
  end
  module InvalidatedProject : sig
    type 'T t = 'T ts_InvalidatedProject
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_InvalidatedProject of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_InvalidatedProject of 'T]
    ]
  end
  module[@js.scope "server"] Server : sig
    module ActionSet : sig
      type t = ts_server_ActionSet
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_ActionSet]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_ActionSet]
      ]
    end
    module ActionInvalidate : sig
      type t = ts_server_ActionInvalidate
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_ActionInvalidate]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_ActionInvalidate]
      ]
    end
    module ActionPackageInstalled : sig
      type t = ts_server_ActionPackageInstalled
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_ActionPackageInstalled]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_ActionPackageInstalled]
      ]
    end
    module EventTypesRegistry : sig
      type t = ts_server_EventTypesRegistry
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_EventTypesRegistry]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_EventTypesRegistry]
      ]
    end
    module EventBeginInstallTypes : sig
      type t = ts_server_EventBeginInstallTypes
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_EventBeginInstallTypes]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_EventBeginInstallTypes]
      ]
    end
    module EventEndInstallTypes : sig
      type t = ts_server_EventEndInstallTypes
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_EventEndInstallTypes]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_EventEndInstallTypes]
      ]
    end
    module EventInitializationFailed : sig
      type t = ts_server_EventInitializationFailed
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_EventInitializationFailed]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_EventInitializationFailed]
      ]
    end
    module[@js.scope "TypingInstallerResponse"] TypingInstallerResponse : sig
      type t = ts_server_TypingInstallerResponse
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_TypingInstallerResponse]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_TypingInstallerResponse]
      ]
      val get_kind: t -> ((ts_server_ActionInvalidate, ts_server_ActionPackageInstalled, ts_server_ActionSet, ts_server_EventBeginInstallTypes, ts_server_EventEndInstallTypes, ts_server_EventInitializationFailed, ts_server_EventTypesRegistry) union7, ([`L_s38_action__invalidate[@js "action::invalidate"] | `L_s39_action__packageInstalled[@js "action::packageInstalled"] | `L_s40_action__set[@js "action::set"] | `L_s68_event__beginInstallTypes[@js "event::beginInstallTypes"] | `L_s69_event__endInstallTypes[@js "event::endInstallTypes"] | `L_s70_event__initializationFailed[@js "event::initializationFailed"] | `L_s71_event__typesRegistry[@js "event::typesRegistry"]] [@js.enum])) or_enum [@@js.get "kind"]
    end
    module[@js.scope "TypingInstallerRequestWithProjectName"] TypingInstallerRequestWithProjectName : sig
      type t = ts_server_TypingInstallerRequestWithProjectName
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_TypingInstallerRequestWithProjectName]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_TypingInstallerRequestWithProjectName]
      ]
      val get_projectName: t -> string [@@js.get "projectName"]
    end
    module[@js.scope "DiscoverTypings"] DiscoverTypings : sig
      type t = ts_server_DiscoverTypings
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_DiscoverTypings | `Ts_server_TypingInstallerRequestWithProjectName]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_DiscoverTypings | `Ts_server_TypingInstallerRequestWithProjectName]
      ]
      val get_fileNames: t -> string list [@@js.get "fileNames"]
      val get_projectRootPath: t -> ts_Path [@@js.get "projectRootPath"]
      val get_compilerOptions: t -> ts_CompilerOptions [@@js.get "compilerOptions"]
      val get_watchOptions: t -> ts_WatchOptions [@@js.get "watchOptions"]
      val get_typeAcquisition: t -> ts_TypeAcquisition [@@js.get "typeAcquisition"]
      val get_unresolvedImports: t -> string ts_SortedReadonlyArray [@@js.get "unresolvedImports"]
      val get_cachePath: t -> string [@@js.get "cachePath"]
      val get_kind: t -> ([`L_s61_discover[@js "discover"]] [@js.enum]) [@@js.get "kind"]
      val cast: t -> ts_server_TypingInstallerRequestWithProjectName [@@js.cast]
    end
    module[@js.scope "CloseProject"] CloseProject : sig
      type t = ts_server_CloseProject
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_CloseProject | `Ts_server_TypingInstallerRequestWithProjectName]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_CloseProject | `Ts_server_TypingInstallerRequestWithProjectName]
      ]
      val get_kind: t -> ([`L_s50_closeProject[@js "closeProject"]] [@js.enum]) [@@js.get "kind"]
      val cast: t -> ts_server_TypingInstallerRequestWithProjectName [@@js.cast]
    end
    module[@js.scope "TypesRegistryRequest"] TypesRegistryRequest : sig
      type t = ts_server_TypesRegistryRequest
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_TypesRegistryRequest]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_TypesRegistryRequest]
      ]
      val get_kind: t -> ([`L_s145_typesRegistry[@js "typesRegistry"]] [@js.enum]) [@@js.get "kind"]
    end
    module[@js.scope "InstallPackageRequest"] InstallPackageRequest : sig
      type t = ts_server_InstallPackageRequest
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_InstallPackageRequest | `Ts_server_TypingInstallerRequestWithProjectName]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_InstallPackageRequest | `Ts_server_TypingInstallerRequestWithProjectName]
      ]
      val get_kind: t -> ([`L_s85_installPackage[@js "installPackage"]] [@js.enum]) [@@js.get "kind"]
      val get_fileName: t -> ts_Path [@@js.get "fileName"]
      val get_packageName: t -> string [@@js.get "packageName"]
      val get_projectRootPath: t -> ts_Path [@@js.get "projectRootPath"]
      val cast: t -> ts_server_TypingInstallerRequestWithProjectName [@@js.cast]
    end
    module[@js.scope "PackageInstalledResponse"] PackageInstalledResponse : sig
      type t = ts_server_PackageInstalledResponse
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_PackageInstalledResponse | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_PackageInstalledResponse | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse]
      ]
      val get_kind: t -> ts_server_ActionPackageInstalled [@@js.get "kind"]
      val get_success: t -> bool [@@js.get "success"]
      val get_message: t -> string [@@js.get "message"]
      val cast: t -> ts_server_ProjectResponse [@@js.cast]
    end
    module[@js.scope "InitializationFailedResponse"] InitializationFailedResponse : sig
      type t = ts_server_InitializationFailedResponse
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_InitializationFailedResponse | `Ts_server_TypingInstallerResponse]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_InitializationFailedResponse | `Ts_server_TypingInstallerResponse]
      ]
      val get_kind: t -> ts_server_EventInitializationFailed [@@js.get "kind"]
      val get_message: t -> string [@@js.get "message"]
      val get_stack: t -> string [@@js.get "stack"]
      val cast: t -> ts_server_TypingInstallerResponse [@@js.cast]
    end
    module[@js.scope "ProjectResponse"] ProjectResponse : sig
      type t = ts_server_ProjectResponse
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse]
      ]
      val get_projectName: t -> string [@@js.get "projectName"]
      val cast: t -> ts_server_TypingInstallerResponse [@@js.cast]
    end
    module[@js.scope "InvalidateCachedTypings"] InvalidateCachedTypings : sig
      type t = ts_server_InvalidateCachedTypings
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_InvalidateCachedTypings | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_InvalidateCachedTypings | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse]
      ]
      val get_kind: t -> ts_server_ActionInvalidate [@@js.get "kind"]
      val cast: t -> ts_server_ProjectResponse [@@js.cast]
    end
    module[@js.scope "InstallTypes"] InstallTypes : sig
      type t = ts_server_InstallTypes
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_InstallTypes | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_InstallTypes | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse]
      ]
      val get_kind: t -> ((ts_server_EventBeginInstallTypes, ts_server_EventEndInstallTypes) union2, ([`L_s68_event__beginInstallTypes[@js "event::beginInstallTypes"] | `L_s69_event__endInstallTypes[@js "event::endInstallTypes"]] [@js.enum])) or_enum [@@js.get "kind"]
      val get_eventId: t -> float [@@js.get "eventId"]
      val get_typingsInstallerVersion: t -> string [@@js.get "typingsInstallerVersion"]
      val get_packagesToInstall: t -> string list [@@js.get "packagesToInstall"]
      val cast: t -> ts_server_ProjectResponse [@@js.cast]
    end
    module[@js.scope "BeginInstallTypes"] BeginInstallTypes : sig
      type t = ts_server_BeginInstallTypes
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_BeginInstallTypes | `Ts_server_InstallTypes | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_BeginInstallTypes | `Ts_server_InstallTypes | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse]
      ]
      val get_kind: t -> ts_server_EventBeginInstallTypes [@@js.get "kind"]
      val cast: t -> ts_server_InstallTypes [@@js.cast]
    end
    module[@js.scope "EndInstallTypes"] EndInstallTypes : sig
      type t = ts_server_EndInstallTypes
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_EndInstallTypes | `Ts_server_InstallTypes | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_EndInstallTypes | `Ts_server_InstallTypes | `Ts_server_ProjectResponse | `Ts_server_TypingInstallerResponse]
      ]
      val get_kind: t -> ts_server_EventEndInstallTypes [@@js.get "kind"]
      val get_installSuccess: t -> bool [@@js.get "installSuccess"]
      val cast: t -> ts_server_InstallTypes [@@js.cast]
    end
    module[@js.scope "SetTypings"] SetTypings : sig
      type t = ts_server_SetTypings
      val t_to_js: t -> Ojs.t
      val t_of_js: Ojs.t -> t
      type t_0 = t
      val t_0_to_js: t_0 -> Ojs.t
      val t_0_of_js: Ojs.t -> t_0
      [@@@js.stop]
      type tags = [`Ts_server_ProjectResponse | `Ts_server_SetTypings | `Ts_server_TypingInstallerResponse]
      [@@@js.start]
      [@@@js.implem 
        type tags = [`Ts_server_ProjectResponse | `Ts_server_SetTypings | `Ts_server_TypingInstallerResponse]
      ]
      val get_typeAcquisition: t -> ts_TypeAcquisition [@@js.get "typeAcquisition"]
      val get_compilerOptions: t -> ts_CompilerOptions [@@js.get "compilerOptions"]
      val get_typings: t -> string list [@@js.get "typings"]
      val get_unresolvedImports: t -> string ts_SortedReadonlyArray [@@js.get "unresolvedImports"]
      val get_kind: t -> ts_server_ActionSet [@@js.get "kind"]
      val cast: t -> ts_server_ProjectResponse [@@js.cast]
    end
  end
  module[@js.scope "SourceFileLike"] SourceFileLike : sig
    type t = ts_SourceFileLike
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SourceFileLike]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SourceFileLike]
    ]
    val getLineAndCharacterOfPosition: t -> pos:float -> ts_LineAndCharacter [@@js.call "getLineAndCharacterOfPosition"]
  end
  (**
    Represents an immutable snapshot of a script at a specified time.Once acquired, the
    snapshot is observably immutable. i.e. the same calls with the same parameters will return
    the same values.
  *)
  module[@js.scope "IScriptSnapshot"] IScriptSnapshot : sig
    type t = ts_IScriptSnapshot
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_IScriptSnapshot]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_IScriptSnapshot]
    ]
    (** Gets a portion of the script snapshot specified by \[start, end). *)
    val getText: t -> start:float -> end_:float -> string [@@js.call "getText"]
    (** Gets the length of this script snapshot. *)
    val getLength: t -> float [@@js.call "getLength"]
    (**
      Gets the TextChangeRange that describe how the text changed between this text and
      an older version.  This information is used by the incremental parser to determine
      what sections of the script need to be re-parsed.  'undefined' can be returned if the
      change range cannot be determined.  However, in that case, incremental parsing will
      not happen and the entire document will be re - parsed.
    *)
    val getChangeRange: t -> oldSnapshot:t -> ts_TextChangeRange or_undefined [@@js.call "getChangeRange"]
    (** Releases all resources held by this script snapshot *)
    val dispose: t -> unit [@@js.call "dispose"]
  end
  module[@js.scope "ScriptSnapshot"] ScriptSnapshot : sig
    val fromString: text:string -> ts_IScriptSnapshot [@@js.global "fromString"]
  end
  module[@js.scope "PreProcessedFileInfo"] PreProcessedFileInfo : sig
    type t = ts_PreProcessedFileInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PreProcessedFileInfo]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PreProcessedFileInfo]
    ]
    val get_referencedFiles: t -> ts_FileReference list [@@js.get "referencedFiles"]
    val set_referencedFiles: t -> ts_FileReference list -> unit [@@js.set "referencedFiles"]
    val get_typeReferenceDirectives: t -> ts_FileReference list [@@js.get "typeReferenceDirectives"]
    val set_typeReferenceDirectives: t -> ts_FileReference list -> unit [@@js.set "typeReferenceDirectives"]
    val get_libReferenceDirectives: t -> ts_FileReference list [@@js.get "libReferenceDirectives"]
    val set_libReferenceDirectives: t -> ts_FileReference list -> unit [@@js.set "libReferenceDirectives"]
    val get_importedFiles: t -> ts_FileReference list [@@js.get "importedFiles"]
    val set_importedFiles: t -> ts_FileReference list -> unit [@@js.set "importedFiles"]
    val get_ambientExternalModules: t -> string list [@@js.get "ambientExternalModules"]
    val set_ambientExternalModules: t -> string list -> unit [@@js.set "ambientExternalModules"]
    val get_isLibFile: t -> bool [@@js.get "isLibFile"]
    val set_isLibFile: t -> bool -> unit [@@js.set "isLibFile"]
  end
  module[@js.scope "HostCancellationToken"] HostCancellationToken : sig
    type t = ts_HostCancellationToken
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_HostCancellationToken]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_HostCancellationToken]
    ]
    val isCancellationRequested: t -> bool [@@js.call "isCancellationRequested"]
  end
  module[@js.scope "InstallPackageOptions"] InstallPackageOptions : sig
    type t = ts_InstallPackageOptions
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_InstallPackageOptions]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_InstallPackageOptions]
    ]
    val get_fileName: t -> ts_Path [@@js.get "fileName"]
    val set_fileName: t -> ts_Path -> unit [@@js.set "fileName"]
    val get_packageName: t -> string [@@js.get "packageName"]
    val set_packageName: t -> string -> unit [@@js.set "packageName"]
  end
  module[@js.scope "PerformanceEvent"] PerformanceEvent : sig
    type t = ts_PerformanceEvent
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_PerformanceEvent]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_PerformanceEvent]
    ]
    val get_kind: t -> ([`L_s19_CreatePackageJsonAutoImportProvider[@js "CreatePackageJsonAutoImportProvider"] | `L_s21_UpdateGraph[@js "UpdateGraph"]] [@js.enum]) [@@js.get "kind"]
    val set_kind: t -> ([`L_s19_CreatePackageJsonAutoImportProvider | `L_s21_UpdateGraph] [@js.enum]) -> unit [@@js.set "kind"]
    val get_durationMs: t -> float [@@js.get "durationMs"]
    val set_durationMs: t -> float -> unit [@@js.set "durationMs"]
  end
  module LanguageServiceMode : sig
    type t = ts_LanguageServiceMode
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "LanguageServiceHost"] LanguageServiceHost : sig
    type t = ts_LanguageServiceHost
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_GetEffectiveTypeRootsHost | `Ts_LanguageServiceHost]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_GetEffectiveTypeRootsHost | `Ts_LanguageServiceHost]
    ]
    val getCompilationSettings: t -> ts_CompilerOptions [@@js.call "getCompilationSettings"]
    val getNewLine: t -> string [@@js.call "getNewLine"]
    val getProjectVersion: t -> string [@@js.call "getProjectVersion"]
    val getScriptFileNames: t -> string list [@@js.call "getScriptFileNames"]
    val getScriptKind: t -> fileName:string -> ts_ScriptKind [@@js.call "getScriptKind"]
    val getScriptVersion: t -> fileName:string -> string [@@js.call "getScriptVersion"]
    val getScriptSnapshot: t -> fileName:string -> ts_IScriptSnapshot or_undefined [@@js.call "getScriptSnapshot"]
    val getProjectReferences: t -> ts_ProjectReference list or_undefined [@@js.call "getProjectReferences"]
    val getLocalizedDiagnosticMessages: t -> any [@@js.call "getLocalizedDiagnosticMessages"]
    val getCancellationToken: t -> ts_HostCancellationToken [@@js.call "getCancellationToken"]
    val getCurrentDirectory: t -> string [@@js.call "getCurrentDirectory"]
    val getDefaultLibFileName: t -> options:ts_CompilerOptions -> string [@@js.call "getDefaultLibFileName"]
    val log: t -> s:string -> unit [@@js.call "log"]
    val trace: t -> s:string -> unit [@@js.call "trace"]
    val error: t -> s:string -> unit [@@js.call "error"]
    val useCaseSensitiveFileNames: t -> bool [@@js.call "useCaseSensitiveFileNames"]
    val readDirectory: t -> path:string -> ?extensions:string list -> ?exclude:string list -> ?include_:string list -> ?depth:float -> unit -> string list [@@js.call "readDirectory"]
    val readFile: t -> path:string -> ?encoding:string -> unit -> string or_undefined [@@js.call "readFile"]
    val realpath: t -> path:string -> string [@@js.call "realpath"]
    val fileExists: t -> path:string -> bool [@@js.call "fileExists"]
    val getTypeRootsVersion: t -> float [@@js.call "getTypeRootsVersion"]
    val resolveModuleNames: t -> moduleNames:string list -> containingFile:string -> reusedNames:string list or_undefined -> redirectedReference:ts_ResolvedProjectReference or_undefined -> options:ts_CompilerOptions -> ts_ResolvedModule or_undefined list [@@js.call "resolveModuleNames"]
    val getResolvedModuleWithFailedLookupLocationsFromCache: t -> modulename:string -> containingFile:string -> ts_ResolvedModuleWithFailedLookupLocations or_undefined [@@js.call "getResolvedModuleWithFailedLookupLocationsFromCache"]
    val resolveTypeReferenceDirectives: t -> typeDirectiveNames:string list -> containingFile:string -> redirectedReference:ts_ResolvedProjectReference or_undefined -> options:ts_CompilerOptions -> ts_ResolvedTypeReferenceDirective or_undefined list [@@js.call "resolveTypeReferenceDirectives"]
    val getDirectories: t -> directoryName:string -> string list [@@js.call "getDirectories"]
    (** Gets a set of custom transformers to use during emit. *)
    val getCustomTransformers: t -> ts_CustomTransformers or_undefined [@@js.call "getCustomTransformers"]
    val isKnownTypesPackageName: t -> name:string -> bool [@@js.call "isKnownTypesPackageName"]
    val installPackage: t -> options:ts_InstallPackageOptions -> ts_ApplyCodeActionCommandResult Promise.t_1 [@@js.call "installPackage"]
    val writeFile: t -> fileName:string -> content:string -> unit [@@js.call "writeFile"]
    val cast: t -> ts_GetEffectiveTypeRootsHost [@@js.cast]
  end
  module WithMetadata : sig
    type 'T t = 'T ts_WithMetadata
    val t_to_js: ('T -> Ojs.t) -> 'T t -> Ojs.t
    val t_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t
    type 'T t_1 = 'T t
    val t_1_to_js: ('T -> Ojs.t) -> 'T t_1 -> Ojs.t
    val t_1_of_js: (Ojs.t -> 'T) -> Ojs.t -> 'T t_1
    [@@@js.stop]
    type 'T tags = [`Ts_WithMetadata of 'T]
    [@@@js.start]
    [@@@js.implem 
      type 'T tags = [`Ts_WithMetadata of 'T]
    ]
  end
  module SemanticClassificationFormat : sig
    type t = ts_SemanticClassificationFormat
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "LanguageService"] LanguageService : sig
    type t = ts_LanguageService
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_LanguageService]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_LanguageService]
    ]
    (** This is used as a part of restarting the language service. *)
    val cleanupSemanticCache: t -> unit [@@js.call "cleanupSemanticCache"]
    (**
      Gets errors indicating invalid syntax in a file.
      
      In English, "this cdeo have, erorrs" is syntactically invalid because it has typos,
      grammatical errors, and misplaced punctuation. Likewise, examples of syntax
      errors in TypeScript are missing parentheses in an `if` statement, mismatched
      curly braces, and using a reserved keyword as a variable name.
      
      These diagnostics are inexpensive to compute and don't require knowledge of
      other files. Note that a non-empty result increases the likelihood of false positives
      from `getSemanticDiagnostics`.
      
      While these represent the majority of syntax-related diagnostics, there are some
      that require the type system, which will be present in `getSemanticDiagnostics`.
      @param fileName A path to the file you want syntactic diagnostics for
    *)
    val getSyntacticDiagnostics: t -> fileName:string -> ts_DiagnosticWithLocation list [@@js.call "getSyntacticDiagnostics"]
    (**
      Gets warnings or errors indicating type system issues in a given file.
      Requesting semantic diagnostics may start up the type system and
      run deferred work, so the first call may take longer than subsequent calls.
      
      Unlike the other get*Diagnostics functions, these diagnostics can potentially not
      include a reference to a source file. Specifically, the first time this is called,
      it will return global diagnostics with no associated location.
      
      To contrast the differences between semantic and syntactic diagnostics, consider the
      sentence: "The sun is green." is syntactically correct; those are real English words with
      correct sentence structure. However, it is semantically invalid, because it is not true.
      @param fileName A path to the file you want semantic diagnostics for
    *)
    val getSemanticDiagnostics: t -> fileName:string -> ts_Diagnostic list [@@js.call "getSemanticDiagnostics"]
    (**
      Gets suggestion diagnostics for a specific file. These diagnostics tend to
      proactively suggest refactors, as opposed to diagnostics that indicate
      potentially incorrect runtime behavior.
      @param fileName A path to the file you want semantic diagnostics for
    *)
    val getSuggestionDiagnostics: t -> fileName:string -> ts_DiagnosticWithLocation list [@@js.call "getSuggestionDiagnostics"]
    (** Gets global diagnostics related to the program configuration and compiler options. *)
    val getCompilerOptionsDiagnostics: t -> ts_Diagnostic list [@@js.call "getCompilerOptionsDiagnostics"]
    (** @deprecated Use getEncodedSyntacticClassifications instead. *)
    val getSyntacticClassifications: t -> fileName:string -> span:ts_TextSpan -> ts_ClassifiedSpan list [@@js.call "getSyntacticClassifications"]
    val getSyntacticClassifications': t -> fileName:string -> span:ts_TextSpan -> format:ts_SemanticClassificationFormat -> (ts_ClassifiedSpan, ts_ClassifiedSpan2020) union2 list [@@js.call "getSyntacticClassifications"]
    (** @deprecated Use getEncodedSemanticClassifications instead. *)
    val getSemanticClassifications: t -> fileName:string -> span:ts_TextSpan -> ts_ClassifiedSpan list [@@js.call "getSemanticClassifications"]
    val getSemanticClassifications': t -> fileName:string -> span:ts_TextSpan -> format:ts_SemanticClassificationFormat -> (ts_ClassifiedSpan, ts_ClassifiedSpan2020) union2 list [@@js.call "getSemanticClassifications"]
    (** Encoded as triples of \[start, length, ClassificationType\]. *)
    val getEncodedSyntacticClassifications: t -> fileName:string -> span:ts_TextSpan -> ts_Classifications [@@js.call "getEncodedSyntacticClassifications"]
    (**
      Gets semantic highlights information for a particular file. Has two formats, an older
      version used by VS and a format used by VS Code.
      @param fileName The path to the file
      @param position A text span to return results within
      @param format Which format to use, defaults to "original"
      @return a number array encoded as triples of \[start, length, ClassificationType, ...\].
    *)
    val getEncodedSemanticClassifications: t -> fileName:string -> span:ts_TextSpan -> ?format:ts_SemanticClassificationFormat -> unit -> ts_Classifications [@@js.call "getEncodedSemanticClassifications"]
    (**
      Gets completion entries at a particular position in a file.
      @param fileName The path to the file
      @param position A zero-based index of the character where you want the entries
      @param options An object describing how the request was triggered and what kinds
      of code actions can be returned with the completions.
    *)
    val getCompletionsAtPosition: t -> fileName:string -> position:float -> options:ts_GetCompletionsAtPositionOptions or_undefined -> ts_CompletionInfo ts_WithMetadata or_undefined [@@js.call "getCompletionsAtPosition"]
    (**
      Gets the extended details for a completion entry retrieved from `getCompletionsAtPosition`.
      @param fileName The path to the file
      @param position A zero based index of the character where you want the entries
      @param entryName The name from an existing completion which came from `getCompletionsAtPosition`
      @param formatOptions How should code samples in the completions be formatted, can be undefined for backwards compatibility
      @param source Source code for the current file, can be undefined for backwards compatibility
      @param preferences User settings, can be undefined for backwards compatibility
    *)
    val getCompletionEntryDetails: t -> fileName:string -> position:float -> entryName:string -> formatOptions:(([`U_n_0 of ts_FormatCodeOptions  | `U_n_1 of ts_FormatCodeOptions  | `U_n_2 of ts_FormatCodeOptions ] [@js.union on_field "IndentStyle"]), ([`U_n_0 of ts_FormatCodeSettings  | `U_n_1 of ts_FormatCodeSettings  | `U_n_2 of ts_FormatCodeSettings ] [@js.union on_field "indentStyle"])) union2 or_undefined -> source:string or_undefined -> preferences:ts_UserPreferences or_undefined -> ts_CompletionEntryDetails or_undefined [@@js.call "getCompletionEntryDetails"]
    val getCompletionEntrySymbol: t -> fileName:string -> position:float -> name:string -> source:string or_undefined -> ts_Symbol or_undefined [@@js.call "getCompletionEntrySymbol"]
    (**
      Gets semantic information about the identifier at a particular position in a
      file. Quick info is what you typically see when you hover in an editor.
      @param fileName The path to the file
      @param position A zero-based index of the character where you want the quick info
    *)
    val getQuickInfoAtPosition: t -> fileName:string -> position:float -> ts_QuickInfo or_undefined [@@js.call "getQuickInfoAtPosition"]
    val getNameOrDottedNameSpan: t -> fileName:string -> startPos:float -> endPos:float -> ts_TextSpan or_undefined [@@js.call "getNameOrDottedNameSpan"]
    val getBreakpointStatementAtPosition: t -> fileName:string -> position:float -> ts_TextSpan or_undefined [@@js.call "getBreakpointStatementAtPosition"]
    val getSignatureHelpItems: t -> fileName:string -> position:float -> options:ts_SignatureHelpItemsOptions or_undefined -> ts_SignatureHelpItems or_undefined [@@js.call "getSignatureHelpItems"]
    val getRenameInfo: t -> fileName:string -> position:float -> ?options:ts_RenameInfoOptions -> unit -> ts_RenameInfo [@@js.call "getRenameInfo"]
    val findRenameLocations: t -> fileName:string -> position:float -> findInStrings:bool -> findInComments:bool -> ?providePrefixAndSuffixTextForRename:bool -> unit -> ts_RenameLocation list or_undefined [@@js.call "findRenameLocations"]
    val getSmartSelectionRange: t -> fileName:string -> position:float -> ts_SelectionRange [@@js.call "getSmartSelectionRange"]
    val getDefinitionAtPosition: t -> fileName:string -> position:float -> ts_DefinitionInfo list or_undefined [@@js.call "getDefinitionAtPosition"]
    val getDefinitionAndBoundSpan: t -> fileName:string -> position:float -> ts_DefinitionInfoAndBoundSpan or_undefined [@@js.call "getDefinitionAndBoundSpan"]
    val getTypeDefinitionAtPosition: t -> fileName:string -> position:float -> ts_DefinitionInfo list or_undefined [@@js.call "getTypeDefinitionAtPosition"]
    val getImplementationAtPosition: t -> fileName:string -> position:float -> ts_ImplementationLocation list or_undefined [@@js.call "getImplementationAtPosition"]
    val getReferencesAtPosition: t -> fileName:string -> position:float -> ts_ReferenceEntry list or_undefined [@@js.call "getReferencesAtPosition"]
    val findReferences: t -> fileName:string -> position:float -> ts_ReferencedSymbol list or_undefined [@@js.call "findReferences"]
    val getDocumentHighlights: t -> fileName:string -> position:float -> filesToSearch:string list -> ts_DocumentHighlights list or_undefined [@@js.call "getDocumentHighlights"]
    val getFileReferences: t -> fileName:string -> ts_ReferenceEntry list [@@js.call "getFileReferences"]
    (** @deprecated  *)
    val getOccurrencesAtPosition: t -> fileName:string -> position:float -> ts_ReferenceEntry list or_undefined [@@js.call "getOccurrencesAtPosition"]
    val getNavigateToItems: t -> searchValue:string -> ?maxResultCount:float -> ?fileName:string -> ?excludeDtsFiles:bool -> unit -> ts_NavigateToItem list [@@js.call "getNavigateToItems"]
    val getNavigationBarItems: t -> fileName:string -> ts_NavigationBarItem list [@@js.call "getNavigationBarItems"]
    val getNavigationTree: t -> fileName:string -> ts_NavigationTree [@@js.call "getNavigationTree"]
    val prepareCallHierarchy: t -> fileName:string -> position:float -> (ts_CallHierarchyItem, ts_CallHierarchyItem) or_array or_undefined [@@js.call "prepareCallHierarchy"]
    val provideCallHierarchyIncomingCalls: t -> fileName:string -> position:float -> ts_CallHierarchyIncomingCall list [@@js.call "provideCallHierarchyIncomingCalls"]
    val provideCallHierarchyOutgoingCalls: t -> fileName:string -> position:float -> ts_CallHierarchyOutgoingCall list [@@js.call "provideCallHierarchyOutgoingCalls"]
    val getOutliningSpans: t -> fileName:string -> ts_OutliningSpan list [@@js.call "getOutliningSpans"]
    val getTodoComments: t -> fileName:string -> descriptors:ts_TodoCommentDescriptor list -> ts_TodoComment list [@@js.call "getTodoComments"]
    val getBraceMatchingAtPosition: t -> fileName:string -> position:float -> ts_TextSpan list [@@js.call "getBraceMatchingAtPosition"]
    val getIndentationAtPosition: t -> fileName:string -> position:float -> options:(([`U_n_0 of ts_EditorOptions  | `U_n_1 of ts_EditorOptions  | `U_n_2 of ts_EditorOptions ] [@js.union on_field "IndentStyle"]), ([`U_n_0 of ts_EditorSettings  | `U_n_1 of ts_EditorSettings  | `U_n_2 of ts_EditorSettings ] [@js.union on_field "indentStyle"])) union2 -> float [@@js.call "getIndentationAtPosition"]
    val getFormattingEditsForRange: t -> fileName:string -> start:float -> end_:float -> options:(([`U_n_0 of ts_FormatCodeOptions  | `U_n_1 of ts_FormatCodeOptions  | `U_n_2 of ts_FormatCodeOptions ] [@js.union on_field "IndentStyle"]), ([`U_n_0 of ts_FormatCodeSettings  | `U_n_1 of ts_FormatCodeSettings  | `U_n_2 of ts_FormatCodeSettings ] [@js.union on_field "indentStyle"])) union2 -> ts_TextChange list [@@js.call "getFormattingEditsForRange"]
    val getFormattingEditsForDocument: t -> fileName:string -> options:(([`U_n_0 of ts_FormatCodeOptions  | `U_n_1 of ts_FormatCodeOptions  | `U_n_2 of ts_FormatCodeOptions ] [@js.union on_field "IndentStyle"]), ([`U_n_0 of ts_FormatCodeSettings  | `U_n_1 of ts_FormatCodeSettings  | `U_n_2 of ts_FormatCodeSettings ] [@js.union on_field "indentStyle"])) union2 -> ts_TextChange list [@@js.call "getFormattingEditsForDocument"]
    val getFormattingEditsAfterKeystroke: t -> fileName:string -> position:float -> key:string -> options:(([`U_n_0 of ts_FormatCodeOptions  | `U_n_1 of ts_FormatCodeOptions  | `U_n_2 of ts_FormatCodeOptions ] [@js.union on_field "IndentStyle"]), ([`U_n_0 of ts_FormatCodeSettings  | `U_n_1 of ts_FormatCodeSettings  | `U_n_2 of ts_FormatCodeSettings ] [@js.union on_field "indentStyle"])) union2 -> ts_TextChange list [@@js.call "getFormattingEditsAfterKeystroke"]
    val getDocCommentTemplateAtPosition: t -> fileName:string -> position:float -> ?options:ts_DocCommentTemplateOptions -> unit -> ts_TextInsertion or_undefined [@@js.call "getDocCommentTemplateAtPosition"]
    val isValidBraceCompletionAtPosition: t -> fileName:string -> position:float -> openingBrace:float -> bool [@@js.call "isValidBraceCompletionAtPosition"]
    (**
      This will return a defined result if the position is after the `>` of the opening tag, or somewhere in the text, of a JSXElement with no closing tag.
      Editors should call this after `>` is typed.
    *)
    val getJsxClosingTagAtPosition: t -> fileName:string -> position:float -> ts_JsxClosingTagInfo or_undefined [@@js.call "getJsxClosingTagAtPosition"]
    val getSpanOfEnclosingComment: t -> fileName:string -> position:float -> onlyMultiLine:bool -> ts_TextSpan or_undefined [@@js.call "getSpanOfEnclosingComment"]
    val toLineColumnOffset: t -> fileName:string -> position:float -> ts_LineAndCharacter [@@js.call "toLineColumnOffset"]
    val getCodeFixesAtPosition: t -> fileName:string -> start:float -> end_:float -> errorCodes:float list -> formatOptions:ts_FormatCodeSettings -> preferences:ts_UserPreferences -> ts_CodeFixAction list [@@js.call "getCodeFixesAtPosition"]
    val getCombinedCodeFix: t -> scope:ts_CombinedCodeFixScope -> fixId:anonymous_interface_0 -> formatOptions:ts_FormatCodeSettings -> preferences:ts_UserPreferences -> ts_CombinedCodeActions [@@js.call "getCombinedCodeFix"]
    val applyCodeActionCommand: t -> action:ts_CodeActionCommand -> ?formatSettings:ts_FormatCodeSettings -> unit -> ts_ApplyCodeActionCommandResult Promise.t_1 [@@js.call "applyCodeActionCommand"]
    val applyCodeActionCommand': t -> action:ts_CodeActionCommand list -> ?formatSettings:ts_FormatCodeSettings -> unit -> ts_ApplyCodeActionCommandResult list Promise.t_1 [@@js.call "applyCodeActionCommand"]
    val applyCodeActionCommand'': t -> action:(ts_CodeActionCommand, ts_CodeActionCommand) or_array -> ?formatSettings:ts_FormatCodeSettings -> unit -> (ts_ApplyCodeActionCommandResult, ts_ApplyCodeActionCommandResult) or_array Promise.t_1 [@@js.call "applyCodeActionCommand"]
    (** @deprecated `fileName` will be ignored *)
    val applyCodeActionCommand''': t -> fileName:string -> action:ts_CodeActionCommand -> ts_ApplyCodeActionCommandResult Promise.t_1 [@@js.call "applyCodeActionCommand"]
    (** @deprecated `fileName` will be ignored *)
    val applyCodeActionCommand'''': t -> fileName:string -> action:ts_CodeActionCommand list -> ts_ApplyCodeActionCommandResult list Promise.t_1 [@@js.call "applyCodeActionCommand"]
    (** @deprecated `fileName` will be ignored *)
    val applyCodeActionCommand''''': t -> fileName:string -> action:(ts_CodeActionCommand, ts_CodeActionCommand) or_array -> (ts_ApplyCodeActionCommandResult, ts_ApplyCodeActionCommandResult) or_array Promise.t_1 [@@js.call "applyCodeActionCommand"]
    val getApplicableRefactors: t -> fileName:string -> positionOrRange:ts_TextRange or_number -> preferences:ts_UserPreferences or_undefined -> ?triggerReason:ts_RefactorTriggerReason -> ?kind:string -> unit -> ts_ApplicableRefactorInfo list [@@js.call "getApplicableRefactors"]
    val getEditsForRefactor: t -> fileName:string -> formatOptions:ts_FormatCodeSettings -> positionOrRange:ts_TextRange or_number -> refactorName:string -> actionName:string -> preferences:ts_UserPreferences or_undefined -> ts_RefactorEditInfo or_undefined [@@js.call "getEditsForRefactor"]
    val organizeImports: t -> scope:ts_OrganizeImportsScope -> formatOptions:ts_FormatCodeSettings -> preferences:ts_UserPreferences or_undefined -> ts_FileTextChanges list [@@js.call "organizeImports"]
    val getEditsForFileRename: t -> oldFilePath:string -> newFilePath:string -> formatOptions:ts_FormatCodeSettings -> preferences:ts_UserPreferences or_undefined -> ts_FileTextChanges list [@@js.call "getEditsForFileRename"]
    val getEmitOutput: t -> fileName:string -> ?emitOnlyDtsFiles:bool -> ?forceDtsEmit:bool -> unit -> ts_EmitOutput [@@js.call "getEmitOutput"]
    val getProgram: t -> ts_Program or_undefined [@@js.call "getProgram"]
    val toggleLineComment: t -> fileName:string -> textRange:ts_TextRange -> ts_TextChange list [@@js.call "toggleLineComment"]
    val toggleMultilineComment: t -> fileName:string -> textRange:ts_TextRange -> ts_TextChange list [@@js.call "toggleMultilineComment"]
    val commentSelection: t -> fileName:string -> textRange:ts_TextRange -> ts_TextChange list [@@js.call "commentSelection"]
    val uncommentSelection: t -> fileName:string -> textRange:ts_TextRange -> ts_TextChange list [@@js.call "uncommentSelection"]
    val dispose: t -> unit [@@js.call "dispose"]
  end
  module[@js.scope "JsxClosingTagInfo"] JsxClosingTagInfo : sig
    type t = ts_JsxClosingTagInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JsxClosingTagInfo]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JsxClosingTagInfo]
    ]
    val get_newText: t -> string [@@js.get "newText"]
  end
  module[@js.scope "CombinedCodeFixScope"] CombinedCodeFixScope : sig
    type t = ts_CombinedCodeFixScope
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CombinedCodeFixScope]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CombinedCodeFixScope]
    ]
    val get_type: t -> ([`L_s76_file[@js "file"]] [@js.enum]) [@@js.get "type"]
    val set_type: t -> ([`L_s76_file] [@js.enum]) -> unit [@@js.set "type"]
    val get_fileName: t -> string [@@js.get "fileName"]
    val set_fileName: t -> string -> unit [@@js.set "fileName"]
  end
  module OrganizeImportsScope : sig
    type t = ts_OrganizeImportsScope
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CombinedCodeFixScope | `Ts_OrganizeImportsScope]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CombinedCodeFixScope | `Ts_OrganizeImportsScope]
    ]
  end
  module CompletionsTriggerCharacter : sig
    type t = ts_CompletionsTriggerCharacter
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CompletionsTriggerCharacter]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CompletionsTriggerCharacter]
    ]
  end
  module[@js.scope "GetCompletionsAtPositionOptions"] GetCompletionsAtPositionOptions : sig
    type t = ts_GetCompletionsAtPositionOptions
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_GetCompletionsAtPositionOptions | `Ts_UserPreferences]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_GetCompletionsAtPositionOptions | `Ts_UserPreferences]
    ]
    (**
      If the editor is asking for completions because a certain character was typed
      (as opposed to when the user explicitly requested them) this should be set.
    *)
    (**
      If the editor is asking for completions because a certain character was typed
      (as opposed to when the user explicitly requested them) this should be set.
    *)
    val get_triggerCharacter: t -> ts_CompletionsTriggerCharacter [@@js.get "triggerCharacter"]
    (**
      If the editor is asking for completions because a certain character was typed
      (as opposed to when the user explicitly requested them) this should be set.
    *)
    val set_triggerCharacter: t -> ts_CompletionsTriggerCharacter -> unit [@@js.set "triggerCharacter"]
    (** @deprecated Use includeCompletionsForModuleExports *)
    (** @deprecated Use includeCompletionsForModuleExports *)
    val get_includeExternalModuleExports: t -> bool [@@js.get "includeExternalModuleExports"]
    (** @deprecated Use includeCompletionsForModuleExports *)
    val set_includeExternalModuleExports: t -> bool -> unit [@@js.set "includeExternalModuleExports"]
    (** @deprecated Use includeCompletionsWithInsertText *)
    (** @deprecated Use includeCompletionsWithInsertText *)
    val get_includeInsertTextCompletions: t -> bool [@@js.get "includeInsertTextCompletions"]
    (** @deprecated Use includeCompletionsWithInsertText *)
    val set_includeInsertTextCompletions: t -> bool -> unit [@@js.set "includeInsertTextCompletions"]
    val cast: t -> ts_UserPreferences [@@js.cast]
  end
  module SignatureHelpTriggerCharacter : sig
    type t = ts_SignatureHelpTriggerCharacter
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SignatureHelpTriggerCharacter]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SignatureHelpTriggerCharacter]
    ]
  end
  module SignatureHelpRetriggerCharacter : sig
    type t = ts_SignatureHelpRetriggerCharacter
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SignatureHelpRetriggerCharacter]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SignatureHelpRetriggerCharacter]
    ]
  end
  module[@js.scope "SignatureHelpItemsOptions"] SignatureHelpItemsOptions : sig
    type t = ts_SignatureHelpItemsOptions
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SignatureHelpItemsOptions]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SignatureHelpItemsOptions]
    ]
    val get_triggerReason: t -> ts_SignatureHelpTriggerReason [@@js.get "triggerReason"]
    val set_triggerReason: t -> ts_SignatureHelpTriggerReason -> unit [@@js.set "triggerReason"]
  end
  module SignatureHelpTriggerReason : sig
    type t = ts_SignatureHelpTriggerReason
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SignatureHelpTriggerReason]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SignatureHelpTriggerReason]
    ]
  end
  (**
    Signals that the user manually requested signature help.
    The language service will unconditionally attempt to provide a result.
  *)
  module[@js.scope "SignatureHelpInvokedReason"] SignatureHelpInvokedReason : sig
    type t = ts_SignatureHelpInvokedReason
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SignatureHelpInvokedReason]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SignatureHelpInvokedReason]
    ]
    val get_kind: t -> ([`L_s88_invoked[@js "invoked"]] [@js.enum]) [@@js.get "kind"]
    val set_kind: t -> ([`L_s88_invoked] [@js.enum]) -> unit [@@js.set "kind"]
    val get_triggerCharacter: t -> never or_undefined [@@js.get "triggerCharacter"]
    val set_triggerCharacter: t -> never or_undefined -> unit [@@js.set "triggerCharacter"]
  end
  (**
    Signals that the signature help request came from a user typing a character.
    Depending on the character and the syntactic context, the request may or may not be served a result.
  *)
  module[@js.scope "SignatureHelpCharacterTypedReason"] SignatureHelpCharacterTypedReason : sig
    type t = ts_SignatureHelpCharacterTypedReason
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SignatureHelpCharacterTypedReason]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SignatureHelpCharacterTypedReason]
    ]
    val get_kind: t -> ([`L_s47_characterTyped[@js "characterTyped"]] [@js.enum]) [@@js.get "kind"]
    val set_kind: t -> ([`L_s47_characterTyped] [@js.enum]) -> unit [@@js.set "kind"]
    (** Character that was responsible for triggering signature help. *)
    (** Character that was responsible for triggering signature help. *)
    val get_triggerCharacter: t -> ts_SignatureHelpTriggerCharacter [@@js.get "triggerCharacter"]
    (** Character that was responsible for triggering signature help. *)
    val set_triggerCharacter: t -> ts_SignatureHelpTriggerCharacter -> unit [@@js.set "triggerCharacter"]
  end
  (**
    Signals that this signature help request came from typing a character or moving the cursor.
    This should only occur if a signature help session was already active and the editor needs to see if it should adjust.
    The language service will unconditionally attempt to provide a result.
    `triggerCharacter` can be `undefined` for a retrigger caused by a cursor move.
  *)
  module[@js.scope "SignatureHelpRetriggeredReason"] SignatureHelpRetriggeredReason : sig
    type t = ts_SignatureHelpRetriggeredReason
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SignatureHelpRetriggeredReason]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SignatureHelpRetriggeredReason]
    ]
    val get_kind: t -> ([`L_s130_retrigger[@js "retrigger"]] [@js.enum]) [@@js.get "kind"]
    val set_kind: t -> ([`L_s130_retrigger] [@js.enum]) -> unit [@@js.set "kind"]
    (** Character that was responsible for triggering signature help. *)
    (** Character that was responsible for triggering signature help. *)
    val get_triggerCharacter: t -> ts_SignatureHelpRetriggerCharacter [@@js.get "triggerCharacter"]
    (** Character that was responsible for triggering signature help. *)
    val set_triggerCharacter: t -> ts_SignatureHelpRetriggerCharacter -> unit [@@js.set "triggerCharacter"]
  end
  module[@js.scope "ApplyCodeActionCommandResult"] ApplyCodeActionCommandResult : sig
    type t = ts_ApplyCodeActionCommandResult
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ApplyCodeActionCommandResult]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ApplyCodeActionCommandResult]
    ]
    val get_successMessage: t -> string [@@js.get "successMessage"]
    val set_successMessage: t -> string -> unit [@@js.set "successMessage"]
  end
  module[@js.scope "Classifications"] Classifications : sig
    type t = ts_Classifications
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Classifications]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Classifications]
    ]
    val get_spans: t -> float list [@@js.get "spans"]
    val set_spans: t -> float list -> unit [@@js.set "spans"]
    val get_endOfLineState: t -> ts_EndOfLineState [@@js.get "endOfLineState"]
    val set_endOfLineState: t -> ts_EndOfLineState -> unit [@@js.set "endOfLineState"]
  end
  module[@js.scope "ClassifiedSpan"] ClassifiedSpan : sig
    type t = ts_ClassifiedSpan
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassifiedSpan]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassifiedSpan]
    ]
    val get_textSpan: t -> ts_TextSpan [@@js.get "textSpan"]
    val set_textSpan: t -> ts_TextSpan -> unit [@@js.set "textSpan"]
    val get_classificationType: t -> ts_ClassificationTypeNames [@@js.get "classificationType"]
    val set_classificationType: t -> ts_ClassificationTypeNames -> unit [@@js.set "classificationType"]
  end
  module[@js.scope "ClassifiedSpan2020"] ClassifiedSpan2020 : sig
    type t = ts_ClassifiedSpan2020
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassifiedSpan2020]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassifiedSpan2020]
    ]
    val get_textSpan: t -> ts_TextSpan [@@js.get "textSpan"]
    val set_textSpan: t -> ts_TextSpan -> unit [@@js.set "textSpan"]
    val get_classificationType: t -> float [@@js.get "classificationType"]
    val set_classificationType: t -> float -> unit [@@js.set "classificationType"]
  end
  (**
    Navigation bar interface designed for visual studio's dual-column layout.
    This does not form a proper tree.
    The navbar is returned as a list of top-level items, each of which has a list of child items.
    Child items always have an empty array for their `childItems`.
  *)
  module[@js.scope "NavigationBarItem"] NavigationBarItem : sig
    type t = ts_NavigationBarItem
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_NavigationBarItem]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_NavigationBarItem]
    ]
    val get_text: t -> string [@@js.get "text"]
    val set_text: t -> string -> unit [@@js.set "text"]
    val get_kind: t -> ts_ScriptElementKind [@@js.get "kind"]
    val set_kind: t -> ts_ScriptElementKind -> unit [@@js.set "kind"]
    val get_kindModifiers: t -> string [@@js.get "kindModifiers"]
    val set_kindModifiers: t -> string -> unit [@@js.set "kindModifiers"]
    val get_spans: t -> ts_TextSpan list [@@js.get "spans"]
    val set_spans: t -> ts_TextSpan list -> unit [@@js.set "spans"]
    val get_childItems: t -> t list [@@js.get "childItems"]
    val set_childItems: t -> t list -> unit [@@js.set "childItems"]
    val get_indent: t -> float [@@js.get "indent"]
    val set_indent: t -> float -> unit [@@js.set "indent"]
    val get_bolded: t -> bool [@@js.get "bolded"]
    val set_bolded: t -> bool -> unit [@@js.set "bolded"]
    val get_grayed: t -> bool [@@js.get "grayed"]
    val set_grayed: t -> bool -> unit [@@js.set "grayed"]
  end
  (**
    Node in a tree of nested declarations in a file.
    The top node is always a script or module node.
  *)
  module[@js.scope "NavigationTree"] NavigationTree : sig
    type t = ts_NavigationTree
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_NavigationTree]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_NavigationTree]
    ]
    (** Name of the declaration, or a short description, e.g. "<class>". *)
    (** Name of the declaration, or a short description, e.g. "<class>". *)
    val get_text: t -> string [@@js.get "text"]
    (** Name of the declaration, or a short description, e.g. "<class>". *)
    val set_text: t -> string -> unit [@@js.set "text"]
    val get_kind: t -> ts_ScriptElementKind [@@js.get "kind"]
    val set_kind: t -> ts_ScriptElementKind -> unit [@@js.set "kind"]
    (** ScriptElementKindModifier separated by commas, e.g. "public,abstract" *)
    (** ScriptElementKindModifier separated by commas, e.g. "public,abstract" *)
    val get_kindModifiers: t -> string [@@js.get "kindModifiers"]
    (** ScriptElementKindModifier separated by commas, e.g. "public,abstract" *)
    val set_kindModifiers: t -> string -> unit [@@js.set "kindModifiers"]
    (**
      Spans of the nodes that generated this declaration.
      There will be more than one if this is the result of merging.
    *)
    (**
      Spans of the nodes that generated this declaration.
      There will be more than one if this is the result of merging.
    *)
    val get_spans: t -> ts_TextSpan list [@@js.get "spans"]
    (**
      Spans of the nodes that generated this declaration.
      There will be more than one if this is the result of merging.
    *)
    val set_spans: t -> ts_TextSpan list -> unit [@@js.set "spans"]
    val get_nameSpan: t -> ts_TextSpan or_undefined [@@js.get "nameSpan"]
    val set_nameSpan: t -> ts_TextSpan or_undefined -> unit [@@js.set "nameSpan"]
    (** Present if non-empty *)
    (** Present if non-empty *)
    val get_childItems: t -> t list [@@js.get "childItems"]
    (** Present if non-empty *)
    val set_childItems: t -> t list -> unit [@@js.set "childItems"]
  end
  module[@js.scope "CallHierarchyItem"] CallHierarchyItem : sig
    type t = ts_CallHierarchyItem
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CallHierarchyItem]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CallHierarchyItem]
    ]
    val get_name: t -> string [@@js.get "name"]
    val set_name: t -> string -> unit [@@js.set "name"]
    val get_kind: t -> ts_ScriptElementKind [@@js.get "kind"]
    val set_kind: t -> ts_ScriptElementKind -> unit [@@js.set "kind"]
    val get_kindModifiers: t -> string [@@js.get "kindModifiers"]
    val set_kindModifiers: t -> string -> unit [@@js.set "kindModifiers"]
    val get_file: t -> string [@@js.get "file"]
    val set_file: t -> string -> unit [@@js.set "file"]
    val get_span: t -> ts_TextSpan [@@js.get "span"]
    val set_span: t -> ts_TextSpan -> unit [@@js.set "span"]
    val get_selectionSpan: t -> ts_TextSpan [@@js.get "selectionSpan"]
    val set_selectionSpan: t -> ts_TextSpan -> unit [@@js.set "selectionSpan"]
    val get_containerName: t -> string [@@js.get "containerName"]
    val set_containerName: t -> string -> unit [@@js.set "containerName"]
  end
  module[@js.scope "CallHierarchyIncomingCall"] CallHierarchyIncomingCall : sig
    type t = ts_CallHierarchyIncomingCall
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CallHierarchyIncomingCall]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CallHierarchyIncomingCall]
    ]
    val get_from: t -> ts_CallHierarchyItem [@@js.get "from"]
    val set_from: t -> ts_CallHierarchyItem -> unit [@@js.set "from"]
    val get_fromSpans: t -> ts_TextSpan list [@@js.get "fromSpans"]
    val set_fromSpans: t -> ts_TextSpan list -> unit [@@js.set "fromSpans"]
  end
  module[@js.scope "CallHierarchyOutgoingCall"] CallHierarchyOutgoingCall : sig
    type t = ts_CallHierarchyOutgoingCall
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CallHierarchyOutgoingCall]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CallHierarchyOutgoingCall]
    ]
    val get_to: t -> ts_CallHierarchyItem [@@js.get "to"]
    val set_to: t -> ts_CallHierarchyItem -> unit [@@js.set "to"]
    val get_fromSpans: t -> ts_TextSpan list [@@js.get "fromSpans"]
    val set_fromSpans: t -> ts_TextSpan list -> unit [@@js.set "fromSpans"]
  end
  module[@js.scope "TodoCommentDescriptor"] TodoCommentDescriptor : sig
    type t = ts_TodoCommentDescriptor
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TodoCommentDescriptor]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TodoCommentDescriptor]
    ]
    val get_text: t -> string [@@js.get "text"]
    val set_text: t -> string -> unit [@@js.set "text"]
    val get_priority: t -> float [@@js.get "priority"]
    val set_priority: t -> float -> unit [@@js.set "priority"]
  end
  module[@js.scope "TodoComment"] TodoComment : sig
    type t = ts_TodoComment
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TodoComment]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TodoComment]
    ]
    val get_descriptor: t -> ts_TodoCommentDescriptor [@@js.get "descriptor"]
    val set_descriptor: t -> ts_TodoCommentDescriptor -> unit [@@js.set "descriptor"]
    val get_message: t -> string [@@js.get "message"]
    val set_message: t -> string -> unit [@@js.set "message"]
    val get_position: t -> float [@@js.get "position"]
    val set_position: t -> float -> unit [@@js.set "position"]
  end
  module[@js.scope "TextChange"] TextChange : sig
    type t = ts_TextChange
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TextChange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TextChange]
    ]
    val get_span: t -> ts_TextSpan [@@js.get "span"]
    val set_span: t -> ts_TextSpan -> unit [@@js.set "span"]
    val get_newText: t -> string [@@js.get "newText"]
    val set_newText: t -> string -> unit [@@js.set "newText"]
  end
  module[@js.scope "FileTextChanges"] FileTextChanges : sig
    type t = ts_FileTextChanges
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_FileTextChanges]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_FileTextChanges]
    ]
    val get_fileName: t -> string [@@js.get "fileName"]
    val set_fileName: t -> string -> unit [@@js.set "fileName"]
    val get_textChanges: t -> ts_TextChange list [@@js.get "textChanges"]
    val set_textChanges: t -> ts_TextChange list -> unit [@@js.set "textChanges"]
    val get_isNewFile: t -> bool [@@js.get "isNewFile"]
    val set_isNewFile: t -> bool -> unit [@@js.set "isNewFile"]
  end
  module[@js.scope "CodeAction"] CodeAction : sig
    type t = ts_CodeAction
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CodeAction]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CodeAction]
    ]
    (** Description of the code action to display in the UI of the editor *)
    (** Description of the code action to display in the UI of the editor *)
    val get_description: t -> string [@@js.get "description"]
    (** Description of the code action to display in the UI of the editor *)
    val set_description: t -> string -> unit [@@js.set "description"]
    (** Text changes to apply to each file as part of the code action *)
    (** Text changes to apply to each file as part of the code action *)
    val get_changes: t -> ts_FileTextChanges list [@@js.get "changes"]
    (** Text changes to apply to each file as part of the code action *)
    val set_changes: t -> ts_FileTextChanges list -> unit [@@js.set "changes"]
    (**
      If the user accepts the code fix, the editor should send the action back in a `applyAction` request.
      This allows the language service to have side effects (e.g. installing dependencies) upon a code fix.
    *)
    (**
      If the user accepts the code fix, the editor should send the action back in a `applyAction` request.
      This allows the language service to have side effects (e.g. installing dependencies) upon a code fix.
    *)
    val get_commands: t -> ts_CodeActionCommand list [@@js.get "commands"]
    (**
      If the user accepts the code fix, the editor should send the action back in a `applyAction` request.
      This allows the language service to have side effects (e.g. installing dependencies) upon a code fix.
    *)
    val set_commands: t -> ts_CodeActionCommand list -> unit [@@js.set "commands"]
  end
  module[@js.scope "CodeFixAction"] CodeFixAction : sig
    type t = ts_CodeFixAction
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CodeAction | `Ts_CodeFixAction]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CodeAction | `Ts_CodeFixAction]
    ]
    (** Short name to identify the fix, for use by telemetry. *)
    (** Short name to identify the fix, for use by telemetry. *)
    val get_fixName: t -> string [@@js.get "fixName"]
    (** Short name to identify the fix, for use by telemetry. *)
    val set_fixName: t -> string -> unit [@@js.set "fixName"]
    (**
      If present, one may call 'getCombinedCodeFix' with this fixId.
      This may be omitted to indicate that the code fix can't be applied in a group.
    *)
    (**
      If present, one may call 'getCombinedCodeFix' with this fixId.
      This may be omitted to indicate that the code fix can't be applied in a group.
    *)
    val get_fixId: t -> anonymous_interface_0 [@@js.get "fixId"]
    (**
      If present, one may call 'getCombinedCodeFix' with this fixId.
      This may be omitted to indicate that the code fix can't be applied in a group.
    *)
    val set_fixId: t -> anonymous_interface_0 -> unit [@@js.set "fixId"]
    val get_fixAllDescription: t -> string [@@js.get "fixAllDescription"]
    val set_fixAllDescription: t -> string -> unit [@@js.set "fixAllDescription"]
    val cast: t -> ts_CodeAction [@@js.cast]
  end
  module[@js.scope "CombinedCodeActions"] CombinedCodeActions : sig
    type t = ts_CombinedCodeActions
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CombinedCodeActions]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CombinedCodeActions]
    ]
    val get_changes: t -> ts_FileTextChanges list [@@js.get "changes"]
    val set_changes: t -> ts_FileTextChanges list -> unit [@@js.set "changes"]
    val get_commands: t -> ts_CodeActionCommand list [@@js.get "commands"]
    val set_commands: t -> ts_CodeActionCommand list -> unit [@@js.set "commands"]
  end
  module CodeActionCommand : sig
    type t = ts_CodeActionCommand
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CodeActionCommand | `Ts_InstallPackageAction]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CodeActionCommand | `Ts_InstallPackageAction]
    ]
  end
  module InstallPackageAction : sig
    type t = ts_InstallPackageAction
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_InstallPackageAction]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_InstallPackageAction]
    ]
  end
  (** A set of one or more available refactoring actions, grouped under a parent refactoring. *)
  module[@js.scope "ApplicableRefactorInfo"] ApplicableRefactorInfo : sig
    type t = ts_ApplicableRefactorInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ApplicableRefactorInfo]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ApplicableRefactorInfo]
    ]
    (** The programmatic name of the refactoring *)
    (** The programmatic name of the refactoring *)
    val get_name: t -> string [@@js.get "name"]
    (** The programmatic name of the refactoring *)
    val set_name: t -> string -> unit [@@js.set "name"]
    (**
      A description of this refactoring category to show to the user.
      If the refactoring gets inlined (see below), this text will not be visible.
    *)
    (**
      A description of this refactoring category to show to the user.
      If the refactoring gets inlined (see below), this text will not be visible.
    *)
    val get_description: t -> string [@@js.get "description"]
    (**
      A description of this refactoring category to show to the user.
      If the refactoring gets inlined (see below), this text will not be visible.
    *)
    val set_description: t -> string -> unit [@@js.set "description"]
    (**
      Inlineable refactorings can have their actions hoisted out to the top level
      of a context menu. Non-inlineanable refactorings should always be shown inside
      their parent grouping.
      
      If not specified, this value is assumed to be 'true'
    *)
    (**
      Inlineable refactorings can have their actions hoisted out to the top level
      of a context menu. Non-inlineanable refactorings should always be shown inside
      their parent grouping.
      
      If not specified, this value is assumed to be 'true'
    *)
    val get_inlineable: t -> bool [@@js.get "inlineable"]
    (**
      Inlineable refactorings can have their actions hoisted out to the top level
      of a context menu. Non-inlineanable refactorings should always be shown inside
      their parent grouping.
      
      If not specified, this value is assumed to be 'true'
    *)
    val set_inlineable: t -> bool -> unit [@@js.set "inlineable"]
    val get_actions: t -> ts_RefactorActionInfo list [@@js.get "actions"]
    val set_actions: t -> ts_RefactorActionInfo list -> unit [@@js.set "actions"]
  end
  (**
    Represents a single refactoring action - for example, the "Extract Method..." refactor might
    offer several actions, each corresponding to a surround class or closure to extract into.
  *)
  module[@js.scope "RefactorActionInfo"] RefactorActionInfo : sig
    type t = ts_RefactorActionInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_RefactorActionInfo]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_RefactorActionInfo]
    ]
    (** The programmatic name of the refactoring action *)
    (** The programmatic name of the refactoring action *)
    val get_name: t -> string [@@js.get "name"]
    (** The programmatic name of the refactoring action *)
    val set_name: t -> string -> unit [@@js.set "name"]
    (**
      A description of this refactoring action to show to the user.
      If the parent refactoring is inlined away, this will be the only text shown,
      so this description should make sense by itself if the parent is inlineable=true
    *)
    (**
      A description of this refactoring action to show to the user.
      If the parent refactoring is inlined away, this will be the only text shown,
      so this description should make sense by itself if the parent is inlineable=true
    *)
    val get_description: t -> string [@@js.get "description"]
    (**
      A description of this refactoring action to show to the user.
      If the parent refactoring is inlined away, this will be the only text shown,
      so this description should make sense by itself if the parent is inlineable=true
    *)
    val set_description: t -> string -> unit [@@js.set "description"]
    (**
      A message to show to the user if the refactoring cannot be applied in
      the current context.
    *)
    (**
      A message to show to the user if the refactoring cannot be applied in
      the current context.
    *)
    val get_notApplicableReason: t -> string [@@js.get "notApplicableReason"]
    (**
      A message to show to the user if the refactoring cannot be applied in
      the current context.
    *)
    val set_notApplicableReason: t -> string -> unit [@@js.set "notApplicableReason"]
    (** The hierarchical dotted name of the refactor action. *)
    (** The hierarchical dotted name of the refactor action. *)
    val get_kind: t -> string [@@js.get "kind"]
    (** The hierarchical dotted name of the refactor action. *)
    val set_kind: t -> string -> unit [@@js.set "kind"]
  end
  (**
    A set of edits to make in response to a refactor action, plus an optional
    location where renaming should be invoked from
  *)
  module[@js.scope "RefactorEditInfo"] RefactorEditInfo : sig
    type t = ts_RefactorEditInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_RefactorEditInfo]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_RefactorEditInfo]
    ]
    val get_edits: t -> ts_FileTextChanges list [@@js.get "edits"]
    val set_edits: t -> ts_FileTextChanges list -> unit [@@js.set "edits"]
    val get_renameFilename: t -> string [@@js.get "renameFilename"]
    val set_renameFilename: t -> string -> unit [@@js.set "renameFilename"]
    val get_renameLocation: t -> float [@@js.get "renameLocation"]
    val set_renameLocation: t -> float -> unit [@@js.set "renameLocation"]
    val get_commands: t -> ts_CodeActionCommand list [@@js.get "commands"]
    val set_commands: t -> ts_CodeActionCommand list -> unit [@@js.set "commands"]
  end
  module RefactorTriggerReason : sig
    type t = ts_RefactorTriggerReason
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_RefactorTriggerReason]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_RefactorTriggerReason]
    ]
  end
  module[@js.scope "TextInsertion"] TextInsertion : sig
    type t = ts_TextInsertion
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TextInsertion]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TextInsertion]
    ]
    val get_newText: t -> string [@@js.get "newText"]
    val set_newText: t -> string -> unit [@@js.set "newText"]
    (** The position in newText the caret should point to after the insertion. *)
    (** The position in newText the caret should point to after the insertion. *)
    val get_caretOffset: t -> float [@@js.get "caretOffset"]
    (** The position in newText the caret should point to after the insertion. *)
    val set_caretOffset: t -> float -> unit [@@js.set "caretOffset"]
  end
  module[@js.scope "DocumentSpan"] DocumentSpan : sig
    type t = ts_DocumentSpan
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DocumentSpan]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DocumentSpan]
    ]
    val get_textSpan: t -> ts_TextSpan [@@js.get "textSpan"]
    val set_textSpan: t -> ts_TextSpan -> unit [@@js.set "textSpan"]
    val get_fileName: t -> string [@@js.get "fileName"]
    val set_fileName: t -> string -> unit [@@js.set "fileName"]
    (**
      If the span represents a location that was remapped (e.g. via a .d.ts.map file),
      then the original filename and span will be specified here
    *)
    (**
      If the span represents a location that was remapped (e.g. via a .d.ts.map file),
      then the original filename and span will be specified here
    *)
    val get_originalTextSpan: t -> ts_TextSpan [@@js.get "originalTextSpan"]
    (**
      If the span represents a location that was remapped (e.g. via a .d.ts.map file),
      then the original filename and span will be specified here
    *)
    val set_originalTextSpan: t -> ts_TextSpan -> unit [@@js.set "originalTextSpan"]
    val get_originalFileName: t -> string [@@js.get "originalFileName"]
    val set_originalFileName: t -> string -> unit [@@js.set "originalFileName"]
    (**
      If DocumentSpan.textSpan is the span for name of the declaration,
      then this is the span for relevant declaration
    *)
    (**
      If DocumentSpan.textSpan is the span for name of the declaration,
      then this is the span for relevant declaration
    *)
    val get_contextSpan: t -> ts_TextSpan [@@js.get "contextSpan"]
    (**
      If DocumentSpan.textSpan is the span for name of the declaration,
      then this is the span for relevant declaration
    *)
    val set_contextSpan: t -> ts_TextSpan -> unit [@@js.set "contextSpan"]
    val get_originalContextSpan: t -> ts_TextSpan [@@js.get "originalContextSpan"]
    val set_originalContextSpan: t -> ts_TextSpan -> unit [@@js.set "originalContextSpan"]
  end
  module[@js.scope "RenameLocation"] RenameLocation : sig
    type t = ts_RenameLocation
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DocumentSpan | `Ts_RenameLocation]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DocumentSpan | `Ts_RenameLocation]
    ]
    val get_prefixText: t -> string [@@js.get "prefixText"]
    val get_suffixText: t -> string [@@js.get "suffixText"]
    val cast: t -> ts_DocumentSpan [@@js.cast]
  end
  module[@js.scope "ReferenceEntry"] ReferenceEntry : sig
    type t = ts_ReferenceEntry
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DocumentSpan | `Ts_ReferenceEntry]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DocumentSpan | `Ts_ReferenceEntry]
    ]
    val get_isWriteAccess: t -> bool [@@js.get "isWriteAccess"]
    val set_isWriteAccess: t -> bool -> unit [@@js.set "isWriteAccess"]
    val get_isDefinition: t -> bool [@@js.get "isDefinition"]
    val set_isDefinition: t -> bool -> unit [@@js.set "isDefinition"]
    val get_isInString: t -> ([`L_b_true[@js true]] [@js.enum]) [@@js.get "isInString"]
    val set_isInString: t -> ([`L_b_true] [@js.enum]) -> unit [@@js.set "isInString"]
    val cast: t -> ts_DocumentSpan [@@js.cast]
  end
  module[@js.scope "ImplementationLocation"] ImplementationLocation : sig
    type t = ts_ImplementationLocation
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DocumentSpan | `Ts_ImplementationLocation]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DocumentSpan | `Ts_ImplementationLocation]
    ]
    val get_kind: t -> ts_ScriptElementKind [@@js.get "kind"]
    val set_kind: t -> ts_ScriptElementKind -> unit [@@js.set "kind"]
    val get_displayParts: t -> ts_SymbolDisplayPart list [@@js.get "displayParts"]
    val set_displayParts: t -> ts_SymbolDisplayPart list -> unit [@@js.set "displayParts"]
    val cast: t -> ts_DocumentSpan [@@js.cast]
  end
  module HighlightSpanKind : sig
    type t = ts_HighlightSpanKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "HighlightSpan"] HighlightSpan : sig
    type t = ts_HighlightSpan
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_HighlightSpan]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_HighlightSpan]
    ]
    val get_fileName: t -> string [@@js.get "fileName"]
    val set_fileName: t -> string -> unit [@@js.set "fileName"]
    val get_isInString: t -> ([`L_b_true[@js true]] [@js.enum]) [@@js.get "isInString"]
    val set_isInString: t -> ([`L_b_true] [@js.enum]) -> unit [@@js.set "isInString"]
    val get_textSpan: t -> ts_TextSpan [@@js.get "textSpan"]
    val set_textSpan: t -> ts_TextSpan -> unit [@@js.set "textSpan"]
    val get_contextSpan: t -> ts_TextSpan [@@js.get "contextSpan"]
    val set_contextSpan: t -> ts_TextSpan -> unit [@@js.set "contextSpan"]
    val get_kind: t -> ts_HighlightSpanKind [@@js.get "kind"]
    val set_kind: t -> ts_HighlightSpanKind -> unit [@@js.set "kind"]
  end
  module[@js.scope "NavigateToItem"] NavigateToItem : sig
    type t = ts_NavigateToItem
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_NavigateToItem]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_NavigateToItem]
    ]
    val get_name: t -> string [@@js.get "name"]
    val set_name: t -> string -> unit [@@js.set "name"]
    val get_kind: t -> ts_ScriptElementKind [@@js.get "kind"]
    val set_kind: t -> ts_ScriptElementKind -> unit [@@js.set "kind"]
    val get_kindModifiers: t -> string [@@js.get "kindModifiers"]
    val set_kindModifiers: t -> string -> unit [@@js.set "kindModifiers"]
    val get_matchKind: t -> ([`L_s46_camelCase[@js "camelCase"] | `L_s72_exact[@js "exact"] | `L_s117_prefix[@js "prefix"] | `L_s137_substring[@js "substring"]] [@js.enum]) [@@js.get "matchKind"]
    val set_matchKind: t -> ([`L_s46_camelCase | `L_s72_exact | `L_s117_prefix | `L_s137_substring] [@js.enum]) -> unit [@@js.set "matchKind"]
    val get_isCaseSensitive: t -> bool [@@js.get "isCaseSensitive"]
    val set_isCaseSensitive: t -> bool -> unit [@@js.set "isCaseSensitive"]
    val get_fileName: t -> string [@@js.get "fileName"]
    val set_fileName: t -> string -> unit [@@js.set "fileName"]
    val get_textSpan: t -> ts_TextSpan [@@js.get "textSpan"]
    val set_textSpan: t -> ts_TextSpan -> unit [@@js.set "textSpan"]
    val get_containerName: t -> string [@@js.get "containerName"]
    val set_containerName: t -> string -> unit [@@js.set "containerName"]
    val get_containerKind: t -> ts_ScriptElementKind [@@js.get "containerKind"]
    val set_containerKind: t -> ts_ScriptElementKind -> unit [@@js.set "containerKind"]
  end
  module IndentStyle : sig
    type t = ts_IndentStyle
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module SemicolonPreference : sig
    type t = ts_SemicolonPreference
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "EditorOptions"] EditorOptions : sig
    type t = ts_EditorOptions
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EditorOptions]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EditorOptions]
    ]
    val get_BaseIndentSize: t -> float [@@js.get "BaseIndentSize"]
    val set_BaseIndentSize: t -> float -> unit [@@js.set "BaseIndentSize"]
    val get_IndentSize: t -> float [@@js.get "IndentSize"]
    val set_IndentSize: t -> float -> unit [@@js.set "IndentSize"]
    val get_TabSize: t -> float [@@js.get "TabSize"]
    val set_TabSize: t -> float -> unit [@@js.set "TabSize"]
    val get_NewLineCharacter: t -> string [@@js.get "NewLineCharacter"]
    val set_NewLineCharacter: t -> string -> unit [@@js.set "NewLineCharacter"]
    val get_ConvertTabsToSpaces: t -> bool [@@js.get "ConvertTabsToSpaces"]
    val set_ConvertTabsToSpaces: t -> bool -> unit [@@js.set "ConvertTabsToSpaces"]
    val get_IndentStyle: t -> ts_IndentStyle [@@js.get "IndentStyle"]
    val set_IndentStyle: t -> ts_IndentStyle -> unit [@@js.set "IndentStyle"]
  end
  module[@js.scope "EditorSettings"] EditorSettings : sig
    type t = ts_EditorSettings
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EditorSettings]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EditorSettings]
    ]
    val get_baseIndentSize: t -> float [@@js.get "baseIndentSize"]
    val set_baseIndentSize: t -> float -> unit [@@js.set "baseIndentSize"]
    val get_indentSize: t -> float [@@js.get "indentSize"]
    val set_indentSize: t -> float -> unit [@@js.set "indentSize"]
    val get_tabSize: t -> float [@@js.get "tabSize"]
    val set_tabSize: t -> float -> unit [@@js.set "tabSize"]
    val get_newLineCharacter: t -> string [@@js.get "newLineCharacter"]
    val set_newLineCharacter: t -> string -> unit [@@js.set "newLineCharacter"]
    val get_convertTabsToSpaces: t -> bool [@@js.get "convertTabsToSpaces"]
    val set_convertTabsToSpaces: t -> bool -> unit [@@js.set "convertTabsToSpaces"]
    val get_indentStyle: t -> ts_IndentStyle [@@js.get "indentStyle"]
    val set_indentStyle: t -> ts_IndentStyle -> unit [@@js.set "indentStyle"]
    val get_trimTrailingWhitespace: t -> bool [@@js.get "trimTrailingWhitespace"]
    val set_trimTrailingWhitespace: t -> bool -> unit [@@js.set "trimTrailingWhitespace"]
  end
  module[@js.scope "FormatCodeOptions"] FormatCodeOptions : sig
    type t = ts_FormatCodeOptions
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EditorOptions | `Ts_FormatCodeOptions]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EditorOptions | `Ts_FormatCodeOptions]
    ]
    val get_InsertSpaceAfterCommaDelimiter: t -> bool [@@js.get "InsertSpaceAfterCommaDelimiter"]
    val set_InsertSpaceAfterCommaDelimiter: t -> bool -> unit [@@js.set "InsertSpaceAfterCommaDelimiter"]
    val get_InsertSpaceAfterSemicolonInForStatements: t -> bool [@@js.get "InsertSpaceAfterSemicolonInForStatements"]
    val set_InsertSpaceAfterSemicolonInForStatements: t -> bool -> unit [@@js.set "InsertSpaceAfterSemicolonInForStatements"]
    val get_InsertSpaceBeforeAndAfterBinaryOperators: t -> bool [@@js.get "InsertSpaceBeforeAndAfterBinaryOperators"]
    val set_InsertSpaceBeforeAndAfterBinaryOperators: t -> bool -> unit [@@js.set "InsertSpaceBeforeAndAfterBinaryOperators"]
    val get_InsertSpaceAfterConstructor: t -> bool [@@js.get "InsertSpaceAfterConstructor"]
    val set_InsertSpaceAfterConstructor: t -> bool -> unit [@@js.set "InsertSpaceAfterConstructor"]
    val get_InsertSpaceAfterKeywordsInControlFlowStatements: t -> bool [@@js.get "InsertSpaceAfterKeywordsInControlFlowStatements"]
    val set_InsertSpaceAfterKeywordsInControlFlowStatements: t -> bool -> unit [@@js.set "InsertSpaceAfterKeywordsInControlFlowStatements"]
    val get_InsertSpaceAfterFunctionKeywordForAnonymousFunctions: t -> bool [@@js.get "InsertSpaceAfterFunctionKeywordForAnonymousFunctions"]
    val set_InsertSpaceAfterFunctionKeywordForAnonymousFunctions: t -> bool -> unit [@@js.set "InsertSpaceAfterFunctionKeywordForAnonymousFunctions"]
    val get_InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: t -> bool [@@js.get "InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis"]
    val set_InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: t -> bool -> unit [@@js.set "InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis"]
    val get_InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: t -> bool [@@js.get "InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets"]
    val set_InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: t -> bool -> unit [@@js.set "InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets"]
    val get_InsertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: t -> bool [@@js.get "InsertSpaceAfterOpeningAndBeforeClosingNonemptyBraces"]
    val set_InsertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: t -> bool -> unit [@@js.set "InsertSpaceAfterOpeningAndBeforeClosingNonemptyBraces"]
    val get_InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: t -> bool [@@js.get "InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces"]
    val set_InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: t -> bool -> unit [@@js.set "InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces"]
    val get_InsertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces: t -> bool [@@js.get "InsertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces"]
    val set_InsertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces: t -> bool -> unit [@@js.set "InsertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces"]
    val get_InsertSpaceAfterTypeAssertion: t -> bool [@@js.get "InsertSpaceAfterTypeAssertion"]
    val set_InsertSpaceAfterTypeAssertion: t -> bool -> unit [@@js.set "InsertSpaceAfterTypeAssertion"]
    val get_InsertSpaceBeforeFunctionParenthesis: t -> bool [@@js.get "InsertSpaceBeforeFunctionParenthesis"]
    val set_InsertSpaceBeforeFunctionParenthesis: t -> bool -> unit [@@js.set "InsertSpaceBeforeFunctionParenthesis"]
    val get_PlaceOpenBraceOnNewLineForFunctions: t -> bool [@@js.get "PlaceOpenBraceOnNewLineForFunctions"]
    val set_PlaceOpenBraceOnNewLineForFunctions: t -> bool -> unit [@@js.set "PlaceOpenBraceOnNewLineForFunctions"]
    val get_PlaceOpenBraceOnNewLineForControlBlocks: t -> bool [@@js.get "PlaceOpenBraceOnNewLineForControlBlocks"]
    val set_PlaceOpenBraceOnNewLineForControlBlocks: t -> bool -> unit [@@js.set "PlaceOpenBraceOnNewLineForControlBlocks"]
    val get_insertSpaceBeforeTypeAnnotation: t -> bool [@@js.get "insertSpaceBeforeTypeAnnotation"]
    val set_insertSpaceBeforeTypeAnnotation: t -> bool -> unit [@@js.set "insertSpaceBeforeTypeAnnotation"]
    val cast: t -> ts_EditorOptions [@@js.cast]
  end
  module[@js.scope "FormatCodeSettings"] FormatCodeSettings : sig
    type t = ts_FormatCodeSettings
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_EditorSettings | `Ts_FormatCodeSettings]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_EditorSettings | `Ts_FormatCodeSettings]
    ]
    val get_insertSpaceAfterCommaDelimiter: t -> bool [@@js.get "insertSpaceAfterCommaDelimiter"]
    val get_insertSpaceAfterSemicolonInForStatements: t -> bool [@@js.get "insertSpaceAfterSemicolonInForStatements"]
    val get_insertSpaceBeforeAndAfterBinaryOperators: t -> bool [@@js.get "insertSpaceBeforeAndAfterBinaryOperators"]
    val get_insertSpaceAfterConstructor: t -> bool [@@js.get "insertSpaceAfterConstructor"]
    val get_insertSpaceAfterKeywordsInControlFlowStatements: t -> bool [@@js.get "insertSpaceAfterKeywordsInControlFlowStatements"]
    val get_insertSpaceAfterFunctionKeywordForAnonymousFunctions: t -> bool [@@js.get "insertSpaceAfterFunctionKeywordForAnonymousFunctions"]
    val get_insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: t -> bool [@@js.get "insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis"]
    val get_insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: t -> bool [@@js.get "insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets"]
    val get_insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces: t -> bool [@@js.get "insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces"]
    val get_insertSpaceAfterOpeningAndBeforeClosingEmptyBraces: t -> bool [@@js.get "insertSpaceAfterOpeningAndBeforeClosingEmptyBraces"]
    val get_insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: t -> bool [@@js.get "insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces"]
    val get_insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces: t -> bool [@@js.get "insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces"]
    val get_insertSpaceAfterTypeAssertion: t -> bool [@@js.get "insertSpaceAfterTypeAssertion"]
    val get_insertSpaceBeforeFunctionParenthesis: t -> bool [@@js.get "insertSpaceBeforeFunctionParenthesis"]
    val get_placeOpenBraceOnNewLineForFunctions: t -> bool [@@js.get "placeOpenBraceOnNewLineForFunctions"]
    val get_placeOpenBraceOnNewLineForControlBlocks: t -> bool [@@js.get "placeOpenBraceOnNewLineForControlBlocks"]
    val get_insertSpaceBeforeTypeAnnotation: t -> bool [@@js.get "insertSpaceBeforeTypeAnnotation"]
    val get_indentMultiLineObjectLiteralBeginningOnBlankLine: t -> bool [@@js.get "indentMultiLineObjectLiteralBeginningOnBlankLine"]
    val get_semicolons: t -> ts_SemicolonPreference [@@js.get "semicolons"]
    val cast: t -> ts_EditorSettings [@@js.cast]
  end
  val getDefaultFormatCodeSettings: ?newLineCharacter:string -> unit -> ts_FormatCodeSettings [@@js.global "getDefaultFormatCodeSettings"]
  module[@js.scope "DefinitionInfo"] DefinitionInfo : sig
    type t = ts_DefinitionInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DefinitionInfo | `Ts_DocumentSpan]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DefinitionInfo | `Ts_DocumentSpan]
    ]
    val get_kind: t -> ts_ScriptElementKind [@@js.get "kind"]
    val set_kind: t -> ts_ScriptElementKind -> unit [@@js.set "kind"]
    val get_name: t -> string [@@js.get "name"]
    val set_name: t -> string -> unit [@@js.set "name"]
    val get_containerKind: t -> ts_ScriptElementKind [@@js.get "containerKind"]
    val set_containerKind: t -> ts_ScriptElementKind -> unit [@@js.set "containerKind"]
    val get_containerName: t -> string [@@js.get "containerName"]
    val set_containerName: t -> string -> unit [@@js.set "containerName"]
    val cast: t -> ts_DocumentSpan [@@js.cast]
  end
  module[@js.scope "DefinitionInfoAndBoundSpan"] DefinitionInfoAndBoundSpan : sig
    type t = ts_DefinitionInfoAndBoundSpan
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DefinitionInfoAndBoundSpan]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DefinitionInfoAndBoundSpan]
    ]
    val get_definitions: t -> ts_DefinitionInfo list [@@js.get "definitions"]
    val set_definitions: t -> ts_DefinitionInfo list -> unit [@@js.set "definitions"]
    val get_textSpan: t -> ts_TextSpan [@@js.get "textSpan"]
    val set_textSpan: t -> ts_TextSpan -> unit [@@js.set "textSpan"]
  end
  module[@js.scope "ReferencedSymbolDefinitionInfo"] ReferencedSymbolDefinitionInfo : sig
    type t = ts_ReferencedSymbolDefinitionInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DefinitionInfo | `Ts_DocumentSpan | `Ts_ReferencedSymbolDefinitionInfo]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DefinitionInfo | `Ts_DocumentSpan | `Ts_ReferencedSymbolDefinitionInfo]
    ]
    val get_displayParts: t -> ts_SymbolDisplayPart list [@@js.get "displayParts"]
    val set_displayParts: t -> ts_SymbolDisplayPart list -> unit [@@js.set "displayParts"]
    val cast: t -> ts_DefinitionInfo [@@js.cast]
  end
  module[@js.scope "ReferencedSymbol"] ReferencedSymbol : sig
    type t = ts_ReferencedSymbol
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ReferencedSymbol]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ReferencedSymbol]
    ]
    val get_definition: t -> ts_ReferencedSymbolDefinitionInfo [@@js.get "definition"]
    val set_definition: t -> ts_ReferencedSymbolDefinitionInfo -> unit [@@js.set "definition"]
    val get_references: t -> ts_ReferenceEntry list [@@js.get "references"]
    val set_references: t -> ts_ReferenceEntry list -> unit [@@js.set "references"]
  end
  module SymbolDisplayPartKind : sig
    type t = ts_SymbolDisplayPartKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "SymbolDisplayPart"] SymbolDisplayPart : sig
    type t = ts_SymbolDisplayPart
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SymbolDisplayPart]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SymbolDisplayPart]
    ]
    val get_text: t -> string [@@js.get "text"]
    val set_text: t -> string -> unit [@@js.set "text"]
    val get_kind: t -> string [@@js.get "kind"]
    val set_kind: t -> string -> unit [@@js.set "kind"]
  end
  module[@js.scope "JSDocTagInfo"] JSDocTagInfo : sig
    type t = ts_JSDocTagInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_JSDocTagInfo]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_JSDocTagInfo]
    ]
    val get_name: t -> string [@@js.get "name"]
    val set_name: t -> string -> unit [@@js.set "name"]
    val get_text: t -> string [@@js.get "text"]
    val set_text: t -> string -> unit [@@js.set "text"]
  end
  module[@js.scope "QuickInfo"] QuickInfo : sig
    type t = ts_QuickInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_QuickInfo]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_QuickInfo]
    ]
    val get_kind: t -> ts_ScriptElementKind [@@js.get "kind"]
    val set_kind: t -> ts_ScriptElementKind -> unit [@@js.set "kind"]
    val get_kindModifiers: t -> string [@@js.get "kindModifiers"]
    val set_kindModifiers: t -> string -> unit [@@js.set "kindModifiers"]
    val get_textSpan: t -> ts_TextSpan [@@js.get "textSpan"]
    val set_textSpan: t -> ts_TextSpan -> unit [@@js.set "textSpan"]
    val get_displayParts: t -> ts_SymbolDisplayPart list [@@js.get "displayParts"]
    val set_displayParts: t -> ts_SymbolDisplayPart list -> unit [@@js.set "displayParts"]
    val get_documentation: t -> ts_SymbolDisplayPart list [@@js.get "documentation"]
    val set_documentation: t -> ts_SymbolDisplayPart list -> unit [@@js.set "documentation"]
    val get_tags: t -> ts_JSDocTagInfo list [@@js.get "tags"]
    val set_tags: t -> ts_JSDocTagInfo list -> unit [@@js.set "tags"]
  end
  module RenameInfo : sig
    type t = ts_RenameInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_RenameInfo]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_RenameInfo]
    ]
  end
  module[@js.scope "RenameInfoSuccess"] RenameInfoSuccess : sig
    type t = ts_RenameInfoSuccess
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_RenameInfoSuccess]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_RenameInfoSuccess]
    ]
    val get_canRename: t -> ([`L_b_true[@js true]] [@js.enum]) [@@js.get "canRename"]
    val set_canRename: t -> ([`L_b_true] [@js.enum]) -> unit [@@js.set "canRename"]
    (**
      File or directory to rename.
      If set, `getEditsForFileRename` should be called instead of `findRenameLocations`.
    *)
    (**
      File or directory to rename.
      If set, `getEditsForFileRename` should be called instead of `findRenameLocations`.
    *)
    val get_fileToRename: t -> string [@@js.get "fileToRename"]
    (**
      File or directory to rename.
      If set, `getEditsForFileRename` should be called instead of `findRenameLocations`.
    *)
    val set_fileToRename: t -> string -> unit [@@js.set "fileToRename"]
    val get_displayName: t -> string [@@js.get "displayName"]
    val set_displayName: t -> string -> unit [@@js.set "displayName"]
    val get_fullDisplayName: t -> string [@@js.get "fullDisplayName"]
    val set_fullDisplayName: t -> string -> unit [@@js.set "fullDisplayName"]
    val get_kind: t -> ts_ScriptElementKind [@@js.get "kind"]
    val set_kind: t -> ts_ScriptElementKind -> unit [@@js.set "kind"]
    val get_kindModifiers: t -> string [@@js.get "kindModifiers"]
    val set_kindModifiers: t -> string -> unit [@@js.set "kindModifiers"]
    val get_triggerSpan: t -> ts_TextSpan [@@js.get "triggerSpan"]
    val set_triggerSpan: t -> ts_TextSpan -> unit [@@js.set "triggerSpan"]
  end
  module[@js.scope "RenameInfoFailure"] RenameInfoFailure : sig
    type t = ts_RenameInfoFailure
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_RenameInfoFailure]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_RenameInfoFailure]
    ]
    val get_canRename: t -> ([`L_b_false[@js false]] [@js.enum]) [@@js.get "canRename"]
    val set_canRename: t -> ([`L_b_false] [@js.enum]) -> unit [@@js.set "canRename"]
    val get_localizedErrorMessage: t -> string [@@js.get "localizedErrorMessage"]
    val set_localizedErrorMessage: t -> string -> unit [@@js.set "localizedErrorMessage"]
  end
  module[@js.scope "RenameInfoOptions"] RenameInfoOptions : sig
    type t = ts_RenameInfoOptions
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_RenameInfoOptions]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_RenameInfoOptions]
    ]
    val get_allowRenameOfImportPath: t -> bool [@@js.get "allowRenameOfImportPath"]
  end
  module[@js.scope "DocCommentTemplateOptions"] DocCommentTemplateOptions : sig
    type t = ts_DocCommentTemplateOptions
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DocCommentTemplateOptions]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DocCommentTemplateOptions]
    ]
    val get_generateReturnInDocTemplate: t -> bool [@@js.get "generateReturnInDocTemplate"]
  end
  module[@js.scope "SignatureHelpParameter"] SignatureHelpParameter : sig
    type t = ts_SignatureHelpParameter
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SignatureHelpParameter]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SignatureHelpParameter]
    ]
    val get_name: t -> string [@@js.get "name"]
    val set_name: t -> string -> unit [@@js.set "name"]
    val get_documentation: t -> ts_SymbolDisplayPart list [@@js.get "documentation"]
    val set_documentation: t -> ts_SymbolDisplayPart list -> unit [@@js.set "documentation"]
    val get_displayParts: t -> ts_SymbolDisplayPart list [@@js.get "displayParts"]
    val set_displayParts: t -> ts_SymbolDisplayPart list -> unit [@@js.set "displayParts"]
    val get_isOptional: t -> bool [@@js.get "isOptional"]
    val set_isOptional: t -> bool -> unit [@@js.set "isOptional"]
    val get_isRest: t -> bool [@@js.get "isRest"]
    val set_isRest: t -> bool -> unit [@@js.set "isRest"]
  end
  module[@js.scope "SelectionRange"] SelectionRange : sig
    type t = ts_SelectionRange
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SelectionRange]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SelectionRange]
    ]
    val get_textSpan: t -> ts_TextSpan [@@js.get "textSpan"]
    val set_textSpan: t -> ts_TextSpan -> unit [@@js.set "textSpan"]
    val get_parent: t -> t [@@js.get "parent"]
    val set_parent: t -> t -> unit [@@js.set "parent"]
  end
  (**
    Represents a single signature to show in signature help.
    The id is used for subsequent calls into the language service to ask questions about the
    signature help item in the context of any documents that have been updated.  i.e. after
    an edit has happened, while signature help is still active, the host can ask important
    questions like 'what parameter is the user currently contained within?'.
  *)
  module[@js.scope "SignatureHelpItem"] SignatureHelpItem : sig
    type t = ts_SignatureHelpItem
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SignatureHelpItem]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SignatureHelpItem]
    ]
    val get_isVariadic: t -> bool [@@js.get "isVariadic"]
    val set_isVariadic: t -> bool -> unit [@@js.set "isVariadic"]
    val get_prefixDisplayParts: t -> ts_SymbolDisplayPart list [@@js.get "prefixDisplayParts"]
    val set_prefixDisplayParts: t -> ts_SymbolDisplayPart list -> unit [@@js.set "prefixDisplayParts"]
    val get_suffixDisplayParts: t -> ts_SymbolDisplayPart list [@@js.get "suffixDisplayParts"]
    val set_suffixDisplayParts: t -> ts_SymbolDisplayPart list -> unit [@@js.set "suffixDisplayParts"]
    val get_separatorDisplayParts: t -> ts_SymbolDisplayPart list [@@js.get "separatorDisplayParts"]
    val set_separatorDisplayParts: t -> ts_SymbolDisplayPart list -> unit [@@js.set "separatorDisplayParts"]
    val get_parameters: t -> ts_SignatureHelpParameter list [@@js.get "parameters"]
    val set_parameters: t -> ts_SignatureHelpParameter list -> unit [@@js.set "parameters"]
    val get_documentation: t -> ts_SymbolDisplayPart list [@@js.get "documentation"]
    val set_documentation: t -> ts_SymbolDisplayPart list -> unit [@@js.set "documentation"]
    val get_tags: t -> ts_JSDocTagInfo list [@@js.get "tags"]
    val set_tags: t -> ts_JSDocTagInfo list -> unit [@@js.set "tags"]
  end
  (** Represents a set of signature help items, and the preferred item that should be selected. *)
  module[@js.scope "SignatureHelpItems"] SignatureHelpItems : sig
    type t = ts_SignatureHelpItems
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_SignatureHelpItems]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_SignatureHelpItems]
    ]
    val get_items: t -> ts_SignatureHelpItem list [@@js.get "items"]
    val set_items: t -> ts_SignatureHelpItem list -> unit [@@js.set "items"]
    val get_applicableSpan: t -> ts_TextSpan [@@js.get "applicableSpan"]
    val set_applicableSpan: t -> ts_TextSpan -> unit [@@js.set "applicableSpan"]
    val get_selectedItemIndex: t -> float [@@js.get "selectedItemIndex"]
    val set_selectedItemIndex: t -> float -> unit [@@js.set "selectedItemIndex"]
    val get_argumentIndex: t -> float [@@js.get "argumentIndex"]
    val set_argumentIndex: t -> float -> unit [@@js.set "argumentIndex"]
    val get_argumentCount: t -> float [@@js.get "argumentCount"]
    val set_argumentCount: t -> float -> unit [@@js.set "argumentCount"]
  end
  module[@js.scope "CompletionInfo"] CompletionInfo : sig
    type t = ts_CompletionInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CompletionInfo]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CompletionInfo]
    ]
    (** Not true for all global completions. This will be true if the enclosing scope matches a few syntax kinds. See `isSnippetScope`. *)
    (** Not true for all global completions. This will be true if the enclosing scope matches a few syntax kinds. See `isSnippetScope`. *)
    val get_isGlobalCompletion: t -> bool [@@js.get "isGlobalCompletion"]
    (** Not true for all global completions. This will be true if the enclosing scope matches a few syntax kinds. See `isSnippetScope`. *)
    val set_isGlobalCompletion: t -> bool -> unit [@@js.set "isGlobalCompletion"]
    val get_isMemberCompletion: t -> bool [@@js.get "isMemberCompletion"]
    val set_isMemberCompletion: t -> bool -> unit [@@js.set "isMemberCompletion"]
    (**
      In the absence of `CompletionEntry\["replacementSpan"\], the editor may choose whether to use
      this span or its default one. If `CompletionEntry\["replacementSpan"\]` is defined, that span
      must be used to commit that completion entry.
    *)
    (**
      In the absence of `CompletionEntry\["replacementSpan"\], the editor may choose whether to use
      this span or its default one. If `CompletionEntry\["replacementSpan"\]` is defined, that span
      must be used to commit that completion entry.
    *)
    val get_optionalReplacementSpan: t -> ts_TextSpan [@@js.get "optionalReplacementSpan"]
    (**
      In the absence of `CompletionEntry\["replacementSpan"\], the editor may choose whether to use
      this span or its default one. If `CompletionEntry\["replacementSpan"\]` is defined, that span
      must be used to commit that completion entry.
    *)
    val set_optionalReplacementSpan: t -> ts_TextSpan -> unit [@@js.set "optionalReplacementSpan"]
    (** true when the current location also allows for a new identifier *)
    (** true when the current location also allows for a new identifier *)
    val get_isNewIdentifierLocation: t -> bool [@@js.get "isNewIdentifierLocation"]
    (** true when the current location also allows for a new identifier *)
    val set_isNewIdentifierLocation: t -> bool -> unit [@@js.set "isNewIdentifierLocation"]
    val get_entries: t -> ts_CompletionEntry list [@@js.get "entries"]
    val set_entries: t -> ts_CompletionEntry list -> unit [@@js.set "entries"]
  end
  module[@js.scope "CompletionEntry"] CompletionEntry : sig
    type t = ts_CompletionEntry
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CompletionEntry]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CompletionEntry]
    ]
    val get_name: t -> string [@@js.get "name"]
    val set_name: t -> string -> unit [@@js.set "name"]
    val get_kind: t -> ts_ScriptElementKind [@@js.get "kind"]
    val set_kind: t -> ts_ScriptElementKind -> unit [@@js.set "kind"]
    val get_kindModifiers: t -> string [@@js.get "kindModifiers"]
    val set_kindModifiers: t -> string -> unit [@@js.set "kindModifiers"]
    val get_sortText: t -> string [@@js.get "sortText"]
    val set_sortText: t -> string -> unit [@@js.set "sortText"]
    val get_insertText: t -> string [@@js.get "insertText"]
    val set_insertText: t -> string -> unit [@@js.set "insertText"]
    (**
      An optional span that indicates the text to be replaced by this completion item.
      If present, this span should be used instead of the default one.
      It will be set if the required span differs from the one generated by the default replacement behavior.
    *)
    (**
      An optional span that indicates the text to be replaced by this completion item.
      If present, this span should be used instead of the default one.
      It will be set if the required span differs from the one generated by the default replacement behavior.
    *)
    val get_replacementSpan: t -> ts_TextSpan [@@js.get "replacementSpan"]
    (**
      An optional span that indicates the text to be replaced by this completion item.
      If present, this span should be used instead of the default one.
      It will be set if the required span differs from the one generated by the default replacement behavior.
    *)
    val set_replacementSpan: t -> ts_TextSpan -> unit [@@js.set "replacementSpan"]
    val get_hasAction: t -> ([`L_b_true[@js true]] [@js.enum]) [@@js.get "hasAction"]
    val set_hasAction: t -> ([`L_b_true] [@js.enum]) -> unit [@@js.set "hasAction"]
    val get_source: t -> string [@@js.get "source"]
    val set_source: t -> string -> unit [@@js.set "source"]
    val get_isRecommended: t -> ([`L_b_true[@js true]] [@js.enum]) [@@js.get "isRecommended"]
    val set_isRecommended: t -> ([`L_b_true] [@js.enum]) -> unit [@@js.set "isRecommended"]
    val get_isFromUncheckedFile: t -> ([`L_b_true[@js true]] [@js.enum]) [@@js.get "isFromUncheckedFile"]
    val set_isFromUncheckedFile: t -> ([`L_b_true] [@js.enum]) -> unit [@@js.set "isFromUncheckedFile"]
    val get_isPackageJsonImport: t -> ([`L_b_true[@js true]] [@js.enum]) [@@js.get "isPackageJsonImport"]
    val set_isPackageJsonImport: t -> ([`L_b_true] [@js.enum]) -> unit [@@js.set "isPackageJsonImport"]
  end
  module[@js.scope "CompletionEntryDetails"] CompletionEntryDetails : sig
    type t = ts_CompletionEntryDetails
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_CompletionEntryDetails]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_CompletionEntryDetails]
    ]
    val get_name: t -> string [@@js.get "name"]
    val set_name: t -> string -> unit [@@js.set "name"]
    val get_kind: t -> ts_ScriptElementKind [@@js.get "kind"]
    val set_kind: t -> ts_ScriptElementKind -> unit [@@js.set "kind"]
    val get_kindModifiers: t -> string [@@js.get "kindModifiers"]
    val set_kindModifiers: t -> string -> unit [@@js.set "kindModifiers"]
    val get_displayParts: t -> ts_SymbolDisplayPart list [@@js.get "displayParts"]
    val set_displayParts: t -> ts_SymbolDisplayPart list -> unit [@@js.set "displayParts"]
    val get_documentation: t -> ts_SymbolDisplayPart list [@@js.get "documentation"]
    val set_documentation: t -> ts_SymbolDisplayPart list -> unit [@@js.set "documentation"]
    val get_tags: t -> ts_JSDocTagInfo list [@@js.get "tags"]
    val set_tags: t -> ts_JSDocTagInfo list -> unit [@@js.set "tags"]
    val get_codeActions: t -> ts_CodeAction list [@@js.get "codeActions"]
    val set_codeActions: t -> ts_CodeAction list -> unit [@@js.set "codeActions"]
    val get_source: t -> ts_SymbolDisplayPart list [@@js.get "source"]
    val set_source: t -> ts_SymbolDisplayPart list -> unit [@@js.set "source"]
  end
  module[@js.scope "OutliningSpan"] OutliningSpan : sig
    type t = ts_OutliningSpan
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_OutliningSpan]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_OutliningSpan]
    ]
    (** The span of the document to actually collapse. *)
    (** The span of the document to actually collapse. *)
    val get_textSpan: t -> ts_TextSpan [@@js.get "textSpan"]
    (** The span of the document to actually collapse. *)
    val set_textSpan: t -> ts_TextSpan -> unit [@@js.set "textSpan"]
    (** The span of the document to display when the user hovers over the collapsed span. *)
    (** The span of the document to display when the user hovers over the collapsed span. *)
    val get_hintSpan: t -> ts_TextSpan [@@js.get "hintSpan"]
    (** The span of the document to display when the user hovers over the collapsed span. *)
    val set_hintSpan: t -> ts_TextSpan -> unit [@@js.set "hintSpan"]
    (** The text to display in the editor for the collapsed region. *)
    (** The text to display in the editor for the collapsed region. *)
    val get_bannerText: t -> string [@@js.get "bannerText"]
    (** The text to display in the editor for the collapsed region. *)
    val set_bannerText: t -> string -> unit [@@js.set "bannerText"]
    (**
      Whether or not this region should be automatically collapsed when
      the 'Collapse to Definitions' command is invoked.
    *)
    (**
      Whether or not this region should be automatically collapsed when
      the 'Collapse to Definitions' command is invoked.
    *)
    val get_autoCollapse: t -> bool [@@js.get "autoCollapse"]
    (**
      Whether or not this region should be automatically collapsed when
      the 'Collapse to Definitions' command is invoked.
    *)
    val set_autoCollapse: t -> bool -> unit [@@js.set "autoCollapse"]
    (** Classification of the contents of the span *)
    (** Classification of the contents of the span *)
    val get_kind: t -> ts_OutliningSpanKind [@@js.get "kind"]
    (** Classification of the contents of the span *)
    val set_kind: t -> ts_OutliningSpanKind -> unit [@@js.set "kind"]
  end
  module OutliningSpanKind : sig
    type t = ts_OutliningSpanKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module OutputFileType : sig
    type t = ts_OutputFileType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module EndOfLineState : sig
    type t = ts_EndOfLineState
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module TokenClass : sig
    type t = ts_TokenClass
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module[@js.scope "ClassificationResult"] ClassificationResult : sig
    type t = ts_ClassificationResult
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassificationResult]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassificationResult]
    ]
    val get_finalLexState: t -> ts_EndOfLineState [@@js.get "finalLexState"]
    val set_finalLexState: t -> ts_EndOfLineState -> unit [@@js.set "finalLexState"]
    val get_entries: t -> ts_ClassificationInfo list [@@js.get "entries"]
    val set_entries: t -> ts_ClassificationInfo list -> unit [@@js.set "entries"]
  end
  module[@js.scope "ClassificationInfo"] ClassificationInfo : sig
    type t = ts_ClassificationInfo
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_ClassificationInfo]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_ClassificationInfo]
    ]
    val get_length: t -> float [@@js.get "length"]
    val set_length: t -> float -> unit [@@js.set "length"]
    val get_classification: t -> ts_TokenClass [@@js.get "classification"]
    val set_classification: t -> ts_TokenClass -> unit [@@js.set "classification"]
  end
  module[@js.scope "Classifier"] Classifier : sig
    type t = ts_Classifier
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_Classifier]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_Classifier]
    ]
    (**
      Gives lexical classifications of tokens on a line without any syntactic context.
      For instance, a token consisting of the text 'string' can be either an identifier
      named 'string' or the keyword 'string', however, because this classifier is not aware,
      it relies on certain heuristics to give acceptable results. For classifications where
      speed trumps accuracy, this function is preferable; however, for true accuracy, the
      syntactic classifier is ideal. In fact, in certain editing scenarios, combining the
      lexical, syntactic, and semantic classifiers may issue the best user experience.
      @param text The text of a line to classify.
      @param lexState The state of the lexical classifier at the end of the previous line.
      @param syntacticClassifierAbsent Whether the client is *not* using a syntactic classifier.
      If there is no syntactic classifier (syntacticClassifierAbsent=true),
      certain heuristics may be used in its place; however, if there is a
      syntactic classifier (syntacticClassifierAbsent=false), certain
      classifications which may be incorrectly categorized will be given
      back as Identifiers in order to allow the syntactic classifier to
      subsume the classification.
      @deprecated Use getLexicalClassifications instead.
    *)
    val getClassificationsForLine: t -> text:string -> lexState:ts_EndOfLineState -> syntacticClassifierAbsent:bool -> ts_ClassificationResult [@@js.call "getClassificationsForLine"]
    val getEncodedLexicalClassifications: t -> text:string -> endOfLineState:ts_EndOfLineState -> syntacticClassifierAbsent:bool -> ts_Classifications [@@js.call "getEncodedLexicalClassifications"]
  end
  module ScriptElementKind : sig
    type t = ts_ScriptElementKind
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module ScriptElementKindModifier : sig
    type t = ts_ScriptElementKindModifier
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module ClassificationTypeNames : sig
    type t = ts_ClassificationTypeNames
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  module ClassificationType : sig
    type t = ts_ClassificationType
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
  end
  (** The classifier is used for syntactic highlighting in editors via the TSServer *)
  val createClassifier: unit -> ts_Classifier [@@js.global "createClassifier"]
  module[@js.scope "DocumentHighlights"] DocumentHighlights : sig
    type t = ts_DocumentHighlights
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DocumentHighlights]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DocumentHighlights]
    ]
    val get_fileName: t -> string [@@js.get "fileName"]
    val set_fileName: t -> string -> unit [@@js.set "fileName"]
    val get_highlightSpans: t -> ts_HighlightSpan list [@@js.get "highlightSpans"]
    val set_highlightSpans: t -> ts_HighlightSpan list -> unit [@@js.set "highlightSpans"]
  end
  (**
    The document registry represents a store of SourceFile objects that can be shared between
    multiple LanguageService instances. A LanguageService instance holds on the SourceFile (AST)
    of files in the context.
    SourceFile objects account for most of the memory usage by the language service. Sharing
    the same DocumentRegistry instance between different instances of LanguageService allow
    for more efficient memory utilization since all projects will share at least the library
    file (lib.d.ts).
    
    A more advanced use of the document registry is to serialize sourceFile objects to disk
    and re-hydrate them when needed.
    
    To create a default DocumentRegistry, use createDocumentRegistry to create one, and pass it
    to all subsequent createLanguageService calls.
  *)
  module[@js.scope "DocumentRegistry"] DocumentRegistry : sig
    type t = ts_DocumentRegistry
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DocumentRegistry]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DocumentRegistry]
    ]
    (**
      Request a stored SourceFile with a given fileName and compilationSettings.
      The first call to acquire will call createLanguageServiceSourceFile to generate
      the SourceFile if was not found in the registry.
      @param fileName The name of the file requested
      @param compilationSettings Some compilation settings like target affects the
      shape of a the resulting SourceFile. This allows the DocumentRegistry to store
      multiple copies of the same file for different compilation settings.
      @param scriptSnapshot Text of the file. Only used if the file was not found
      in the registry and a new one was created.
      @param version Current version of the file. Only used if the file was not found
      in the registry and a new one was created.
    *)
    val acquireDocument: t -> fileName:string -> compilationSettings:ts_CompilerOptions -> scriptSnapshot:ts_IScriptSnapshot -> version:string -> ?scriptKind:ts_ScriptKind -> unit -> ts_SourceFile [@@js.call "acquireDocument"]
    val acquireDocumentWithKey: t -> fileName:string -> path:ts_Path -> compilationSettings:ts_CompilerOptions -> key:ts_DocumentRegistryBucketKey -> scriptSnapshot:ts_IScriptSnapshot -> version:string -> ?scriptKind:ts_ScriptKind -> unit -> ts_SourceFile [@@js.call "acquireDocumentWithKey"]
    (**
      Request an updated version of an already existing SourceFile with a given fileName
      and compilationSettings. The update will in-turn call updateLanguageServiceSourceFile
      to get an updated SourceFile.
      @param fileName The name of the file requested
      @param compilationSettings Some compilation settings like target affects the
      shape of a the resulting SourceFile. This allows the DocumentRegistry to store
      multiple copies of the same file for different compilation settings.
      @param scriptSnapshot Text of the file.
      @param version Current version of the file.
    *)
    val updateDocument: t -> fileName:string -> compilationSettings:ts_CompilerOptions -> scriptSnapshot:ts_IScriptSnapshot -> version:string -> ?scriptKind:ts_ScriptKind -> unit -> ts_SourceFile [@@js.call "updateDocument"]
    val updateDocumentWithKey: t -> fileName:string -> path:ts_Path -> compilationSettings:ts_CompilerOptions -> key:ts_DocumentRegistryBucketKey -> scriptSnapshot:ts_IScriptSnapshot -> version:string -> ?scriptKind:ts_ScriptKind -> unit -> ts_SourceFile [@@js.call "updateDocumentWithKey"]
    val getKeyForCompilationSettings: t -> settings:ts_CompilerOptions -> ts_DocumentRegistryBucketKey [@@js.call "getKeyForCompilationSettings"]
    (**
      Informs the DocumentRegistry that a file is not needed any longer.
      
      Note: It is not allowed to call release on a SourceFile that was not acquired from
      this registry originally.
      @param fileName The name of the file to be released
      @param compilationSettings The compilation settings used to acquire the file
    *)
    val releaseDocument: t -> fileName:string -> compilationSettings:ts_CompilerOptions -> unit [@@js.call "releaseDocument"]
    val releaseDocumentWithKey: t -> path:ts_Path -> key:ts_DocumentRegistryBucketKey -> unit [@@js.call "releaseDocumentWithKey"]
    val reportStats: t -> string [@@js.call "reportStats"]
  end
  module DocumentRegistryBucketKey : sig
    type t = ts_DocumentRegistryBucketKey
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_DocumentRegistryBucketKey]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_DocumentRegistryBucketKey]
    ]
  end
  val createDocumentRegistry: ?useCaseSensitiveFileNames:bool -> ?currentDirectory:string -> unit -> ts_DocumentRegistry [@@js.global "createDocumentRegistry"]
  val preProcessFile: sourceText:string -> ?readImportFiles:bool -> ?detectJavaScriptImports:bool -> unit -> ts_PreProcessedFileInfo [@@js.global "preProcessFile"]
  module[@js.scope "TranspileOptions"] TranspileOptions : sig
    type t = ts_TranspileOptions
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TranspileOptions]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TranspileOptions]
    ]
    val get_compilerOptions: t -> ts_CompilerOptions [@@js.get "compilerOptions"]
    val set_compilerOptions: t -> ts_CompilerOptions -> unit [@@js.set "compilerOptions"]
    val get_fileName: t -> string [@@js.get "fileName"]
    val set_fileName: t -> string -> unit [@@js.set "fileName"]
    val get_reportDiagnostics: t -> bool [@@js.get "reportDiagnostics"]
    val set_reportDiagnostics: t -> bool -> unit [@@js.set "reportDiagnostics"]
    val get_moduleName: t -> string [@@js.get "moduleName"]
    val set_moduleName: t -> string -> unit [@@js.set "moduleName"]
    val get_renamedDependencies: t -> string ts_MapLike [@@js.get "renamedDependencies"]
    val set_renamedDependencies: t -> string ts_MapLike -> unit [@@js.set "renamedDependencies"]
    val get_transformers: t -> ts_CustomTransformers [@@js.get "transformers"]
    val set_transformers: t -> ts_CustomTransformers -> unit [@@js.set "transformers"]
  end
  module[@js.scope "TranspileOutput"] TranspileOutput : sig
    type t = ts_TranspileOutput
    val t_to_js: t -> Ojs.t
    val t_of_js: Ojs.t -> t
    type t_0 = t
    val t_0_to_js: t_0 -> Ojs.t
    val t_0_of_js: Ojs.t -> t_0
    [@@@js.stop]
    type tags = [`Ts_TranspileOutput]
    [@@@js.start]
    [@@@js.implem 
      type tags = [`Ts_TranspileOutput]
    ]
    val get_outputText: t -> string [@@js.get "outputText"]
    val set_outputText: t -> string -> unit [@@js.set "outputText"]
    val get_diagnostics: t -> ts_Diagnostic list [@@js.get "diagnostics"]
    val set_diagnostics: t -> ts_Diagnostic list -> unit [@@js.set "diagnostics"]
    val get_sourceMapText: t -> string [@@js.get "sourceMapText"]
    val set_sourceMapText: t -> string -> unit [@@js.set "sourceMapText"]
  end
  val transpileModule: input:string -> transpileOptions:ts_TranspileOptions -> ts_TranspileOutput [@@js.global "transpileModule"]
  val transpile: input:string -> ?compilerOptions:ts_CompilerOptions -> ?fileName:string -> ?diagnostics:ts_Diagnostic list -> ?moduleName:string -> unit -> string [@@js.global "transpile"]
  (** The version of the language service API *)
  val servicesVersion: string [@@js.global "servicesVersion"]
  val toEditorSettings: options:(([`U_n_0 of ts_EditorOptions  | `U_n_1 of ts_EditorOptions  | `U_n_2 of ts_EditorOptions ] [@js.union on_field "IndentStyle"]), ([`U_n_0 of ts_EditorSettings  | `U_n_1 of ts_EditorSettings  | `U_n_2 of ts_EditorSettings ] [@js.union on_field "indentStyle"])) union2 -> ts_EditorSettings [@@js.global "toEditorSettings"]
  val displayPartsToString: displayParts:ts_SymbolDisplayPart list or_undefined -> string [@@js.global "displayPartsToString"]
  val getDefaultCompilerOptions: unit -> ts_CompilerOptions [@@js.global "getDefaultCompilerOptions"]
  val getSupportedCodeFixes: unit -> string list [@@js.global "getSupportedCodeFixes"]
  val createLanguageServiceSourceFile: fileName:string -> scriptSnapshot:ts_IScriptSnapshot -> scriptTarget:ts_ScriptTarget -> version:string -> setNodeParents:bool -> ?scriptKind:ts_ScriptKind -> unit -> ts_SourceFile [@@js.global "createLanguageServiceSourceFile"]
  val updateLanguageServiceSourceFile: sourceFile:ts_SourceFile -> scriptSnapshot:ts_IScriptSnapshot -> version:string -> textChangeRange:ts_TextChangeRange or_undefined -> ?aggressiveChecks:bool -> unit -> ts_SourceFile [@@js.global "updateLanguageServiceSourceFile"]
  val createLanguageService: host:ts_LanguageServiceHost -> ?documentRegistry:ts_DocumentRegistry -> ?syntaxOnlyOrLanguageServiceMode:ts_LanguageServiceMode or_boolean -> unit -> ts_LanguageService [@@js.global "createLanguageService"]
  (**
    Get the path of the default library files (lib.d.ts) as distributed with the typescript
    node package.
    The functionality is not supported if the ts module is consumed outside of a node module.
  *)
  val getDefaultLibFilePath: options:ts_CompilerOptions -> string [@@js.global "getDefaultLibFilePath"]
  (**
    Transform one or more nodes using the supplied transformers.
    @param source A single `Node` or an array of `Node` objects.
    @param transformers An array of `TransformerFactory` callbacks used to process the transformation.
    @param compilerOptions Optional compiler options.
  *)
  val transform: source:('T, 'T) or_array -> transformers:'T ts_TransformerFactory list -> ?compilerOptions:ts_CompilerOptions -> unit -> 'T ts_TransformationResult [@@js.global "transform"]
  (** @deprecated Use `factory.createNodeArray` or the factory supplied by your transformation context instead. *)
  val createNodeArray: ?elements:'T list or_undefined -> ?hasTrailingComma:bool or_undefined -> unit -> 'T ts_NodeArray [@@js.global "createNodeArray"]
  (** @deprecated Use `factory.createNumericLiteral` or the factory supplied by your transformation context instead. *)
  val createNumericLiteral: value:string or_number -> ?numericLiteralFlags:ts_TokenFlags or_undefined -> unit -> ts_NumericLiteral [@@js.global "createNumericLiteral"]
  (** @deprecated Use `factory.createBigIntLiteral` or the factory supplied by your transformation context instead. *)
  val createBigIntLiteral: value:ts_PseudoBigInt or_string -> ts_BigIntLiteral [@@js.global "createBigIntLiteral"]
  (** @deprecated Use `factory.createStringLiteral` or the factory supplied by your transformation context instead. *)
  val createStringLiteral: anonymous_interface_27 [@@js.global "createStringLiteral"]
  (** @deprecated Use `factory.createStringLiteralFromNode` or the factory supplied by your transformation context instead. *)
  val createStringLiteralFromNode: sourceNode:ts_PropertyNameLiteral -> ?isSingleQuote:bool or_undefined -> unit -> ts_StringLiteral [@@js.global "createStringLiteralFromNode"]
  (** @deprecated Use `factory.createRegularExpressionLiteral` or the factory supplied by your transformation context instead. *)
  val createRegularExpressionLiteral: text:string -> ts_RegularExpressionLiteral [@@js.global "createRegularExpressionLiteral"]
  (** @deprecated Use `factory.createLoopVariable` or the factory supplied by your transformation context instead. *)
  val createLoopVariable: unit -> ts_Identifier [@@js.global "createLoopVariable"]
  (** @deprecated Use `factory.createUniqueName` or the factory supplied by your transformation context instead. *)
  val createUniqueName: text:string -> ?flags:ts_GeneratedIdentifierFlags or_undefined -> unit -> ts_Identifier [@@js.global "createUniqueName"]
  (** @deprecated Use `factory.createPrivateIdentifier` or the factory supplied by your transformation context instead. *)
  val createPrivateIdentifier: text:string -> ts_PrivateIdentifier [@@js.global "createPrivateIdentifier"]
  (** @deprecated Use `factory.createSuper` or the factory supplied by your transformation context instead. *)
  val createSuper: unit -> ts_SuperExpression [@@js.global "createSuper"]
  (** @deprecated Use `factory.createThis` or the factory supplied by your transformation context instead. *)
  val createThis: unit -> ts_ThisExpression [@@js.global "createThis"]
  (** @deprecated Use `factory.createNull` or the factory supplied by your transformation context instead. *)
  val createNull: unit -> ts_NullLiteral [@@js.global "createNull"]
  (** @deprecated Use `factory.createTrue` or the factory supplied by your transformation context instead. *)
  val createTrue: unit -> ts_TrueLiteral [@@js.global "createTrue"]
  (** @deprecated Use `factory.createFalse` or the factory supplied by your transformation context instead. *)
  val createFalse: unit -> ts_FalseLiteral [@@js.global "createFalse"]
  (** @deprecated Use `factory.createModifier` or the factory supplied by your transformation context instead. *)
  val createModifier: kind:'T -> 'T ts_ModifierToken [@@js.global "createModifier"]
  (** @deprecated Use `factory.createModifiersFromModifierFlags` or the factory supplied by your transformation context instead. *)
  val createModifiersFromModifierFlags: flags:ts_ModifierFlags -> ts_Modifier list [@@js.global "createModifiersFromModifierFlags"]
  (** @deprecated Use `factory.createQualifiedName` or the factory supplied by your transformation context instead. *)
  val createQualifiedName: left:ts_EntityName -> right:ts_Identifier or_string -> ts_QualifiedName [@@js.global "createQualifiedName"]
  (** @deprecated Use `factory.updateQualifiedName` or the factory supplied by your transformation context instead. *)
  val updateQualifiedName: node:ts_QualifiedName -> left:ts_EntityName -> right:ts_Identifier -> ts_QualifiedName [@@js.global "updateQualifiedName"]
  (** @deprecated Use `factory.createComputedPropertyName` or the factory supplied by your transformation context instead. *)
  val createComputedPropertyName: expression:ts_Expression -> ts_ComputedPropertyName [@@js.global "createComputedPropertyName"]
  (** @deprecated Use `factory.updateComputedPropertyName` or the factory supplied by your transformation context instead. *)
  val updateComputedPropertyName: node:ts_ComputedPropertyName -> expression:ts_Expression -> ts_ComputedPropertyName [@@js.global "updateComputedPropertyName"]
  (** @deprecated Use `factory.createTypeParameterDeclaration` or the factory supplied by your transformation context instead. *)
  val createTypeParameterDeclaration: name:ts_Identifier or_string -> ?constraint_:ts_TypeNode or_undefined -> ?defaultType:ts_TypeNode or_undefined -> unit -> ts_TypeParameterDeclaration [@@js.global "createTypeParameterDeclaration"]
  (** @deprecated Use `factory.updateTypeParameterDeclaration` or the factory supplied by your transformation context instead. *)
  val updateTypeParameterDeclaration: node:ts_TypeParameterDeclaration -> name:ts_Identifier -> constraint_:ts_TypeNode or_undefined -> defaultType:ts_TypeNode or_undefined -> ts_TypeParameterDeclaration [@@js.global "updateTypeParameterDeclaration"]
  (** @deprecated Use `factory.createParameterDeclaration` or the factory supplied by your transformation context instead. *)
  val createParameter: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> dotDotDotToken:ts_DotDotDotToken or_undefined -> name:ts_BindingName or_string -> ?questionToken:ts_QuestionToken or_undefined -> ?type_:ts_TypeNode or_undefined -> ?initializer_:ts_Expression or_undefined -> unit -> ts_ParameterDeclaration [@@js.global "createParameter"]
  (** @deprecated Use `factory.updateParameterDeclaration` or the factory supplied by your transformation context instead. *)
  val updateParameter: node:ts_ParameterDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> dotDotDotToken:ts_DotDotDotToken or_undefined -> name:ts_BindingName or_string -> questionToken:ts_QuestionToken or_undefined -> type_:ts_TypeNode or_undefined -> initializer_:ts_Expression or_undefined -> ts_ParameterDeclaration [@@js.global "updateParameter"]
  (** @deprecated Use `factory.createDecorator` or the factory supplied by your transformation context instead. *)
  val createDecorator: expression:ts_Expression -> ts_Decorator [@@js.global "createDecorator"]
  (** @deprecated Use `factory.updateDecorator` or the factory supplied by your transformation context instead. *)
  val updateDecorator: node:ts_Decorator -> expression:ts_Expression -> ts_Decorator [@@js.global "updateDecorator"]
  (** @deprecated Use `factory.createPropertyDeclaration` or the factory supplied by your transformation context instead. *)
  val createProperty: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName or_string -> questionOrExclamationToken:([`U_n_53 of ts_ExclamationToken  | `U_n_57 of ts_QuestionToken ] [@js.union on_field "kind"]) or_undefined -> type_:ts_TypeNode or_undefined -> initializer_:ts_Expression or_undefined -> ts_PropertyDeclaration [@@js.global "createProperty"]
  (** @deprecated Use `factory.updatePropertyDeclaration` or the factory supplied by your transformation context instead. *)
  val updateProperty: node:ts_PropertyDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName or_string -> questionOrExclamationToken:([`U_n_53 of ts_ExclamationToken  | `U_n_57 of ts_QuestionToken ] [@js.union on_field "kind"]) or_undefined -> type_:ts_TypeNode or_undefined -> initializer_:ts_Expression or_undefined -> ts_PropertyDeclaration [@@js.global "updateProperty"]
  (** @deprecated Use `factory.createMethodDeclaration` or the factory supplied by your transformation context instead. *)
  val createMethod: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> asteriskToken:ts_AsteriskToken or_undefined -> name:ts_PropertyName or_string -> questionToken:ts_QuestionToken or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_Block or_undefined -> ts_MethodDeclaration [@@js.global "createMethod"]
  (** @deprecated Use `factory.updateMethodDeclaration` or the factory supplied by your transformation context instead. *)
  val updateMethod: node:ts_MethodDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> asteriskToken:ts_AsteriskToken or_undefined -> name:ts_PropertyName -> questionToken:ts_QuestionToken or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_Block or_undefined -> ts_MethodDeclaration [@@js.global "updateMethod"]
  (** @deprecated Use `factory.createConstructorDeclaration` or the factory supplied by your transformation context instead. *)
  val createConstructor: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> parameters:ts_ParameterDeclaration list -> body:ts_Block or_undefined -> ts_ConstructorDeclaration [@@js.global "createConstructor"]
  (** @deprecated Use `factory.updateConstructorDeclaration` or the factory supplied by your transformation context instead. *)
  val updateConstructor: node:ts_ConstructorDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> parameters:ts_ParameterDeclaration list -> body:ts_Block or_undefined -> ts_ConstructorDeclaration [@@js.global "updateConstructor"]
  (** @deprecated Use `factory.createGetAccessorDeclaration` or the factory supplied by your transformation context instead. *)
  val createGetAccessor: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName or_string -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_Block or_undefined -> ts_GetAccessorDeclaration [@@js.global "createGetAccessor"]
  (** @deprecated Use `factory.updateGetAccessorDeclaration` or the factory supplied by your transformation context instead. *)
  val updateGetAccessor: node:ts_GetAccessorDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_Block or_undefined -> ts_GetAccessorDeclaration [@@js.global "updateGetAccessor"]
  (** @deprecated Use `factory.createSetAccessorDeclaration` or the factory supplied by your transformation context instead. *)
  val createSetAccessor: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName or_string -> parameters:ts_ParameterDeclaration list -> body:ts_Block or_undefined -> ts_SetAccessorDeclaration [@@js.global "createSetAccessor"]
  (** @deprecated Use `factory.updateSetAccessorDeclaration` or the factory supplied by your transformation context instead. *)
  val updateSetAccessor: node:ts_SetAccessorDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName -> parameters:ts_ParameterDeclaration list -> body:ts_Block or_undefined -> ts_SetAccessorDeclaration [@@js.global "updateSetAccessor"]
  (** @deprecated Use `factory.createCallSignature` or the factory supplied by your transformation context instead. *)
  val createCallSignature: typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> ts_CallSignatureDeclaration [@@js.global "createCallSignature"]
  (** @deprecated Use `factory.updateCallSignature` or the factory supplied by your transformation context instead. *)
  val updateCallSignature: node:ts_CallSignatureDeclaration -> typeParameters:ts_TypeParameterDeclaration ts_NodeArray or_undefined -> parameters:ts_ParameterDeclaration ts_NodeArray -> type_:ts_TypeNode or_undefined -> ts_CallSignatureDeclaration [@@js.global "updateCallSignature"]
  (** @deprecated Use `factory.createConstructSignature` or the factory supplied by your transformation context instead. *)
  val createConstructSignature: typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> ts_ConstructSignatureDeclaration [@@js.global "createConstructSignature"]
  (** @deprecated Use `factory.updateConstructSignature` or the factory supplied by your transformation context instead. *)
  val updateConstructSignature: node:ts_ConstructSignatureDeclaration -> typeParameters:ts_TypeParameterDeclaration ts_NodeArray or_undefined -> parameters:ts_ParameterDeclaration ts_NodeArray -> type_:ts_TypeNode or_undefined -> ts_ConstructSignatureDeclaration [@@js.global "updateConstructSignature"]
  (** @deprecated Use `factory.updateIndexSignature` or the factory supplied by your transformation context instead. *)
  val updateIndexSignature: node:ts_IndexSignatureDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode -> ts_IndexSignatureDeclaration [@@js.global "updateIndexSignature"]
  (** @deprecated Use `factory.createKeywordTypeNode` or the factory supplied by your transformation context instead. *)
  val createKeywordTypeNode: kind:'TKind -> 'TKind ts_KeywordTypeNode [@@js.global "createKeywordTypeNode"]
  (** @deprecated Use `factory.createTypePredicateNode` or the factory supplied by your transformation context instead. *)
  val createTypePredicateNodeWithModifier: assertsModifier:ts_AssertsKeyword or_undefined -> parameterName:([`U_n_78 of ts_Identifier  | `U_n_187 of ts_ThisTypeNode ] [@js.union on_field "kind"]) or_string -> type_:ts_TypeNode or_undefined -> ts_TypePredicateNode [@@js.global "createTypePredicateNodeWithModifier"]
  (** @deprecated Use `factory.updateTypePredicateNode` or the factory supplied by your transformation context instead. *)
  val updateTypePredicateNodeWithModifier: node:ts_TypePredicateNode -> assertsModifier:ts_AssertsKeyword or_undefined -> parameterName:([`U_n_78 of ts_Identifier  | `U_n_187 of ts_ThisTypeNode ] [@js.union on_field "kind"]) -> type_:ts_TypeNode or_undefined -> ts_TypePredicateNode [@@js.global "updateTypePredicateNodeWithModifier"]
  (** @deprecated Use `factory.createTypeReferenceNode` or the factory supplied by your transformation context instead. *)
  val createTypeReferenceNode: typeName:ts_EntityName or_string -> ?typeArguments:ts_TypeNode list or_undefined -> unit -> ts_TypeReferenceNode [@@js.global "createTypeReferenceNode"]
  (** @deprecated Use `factory.updateTypeReferenceNode` or the factory supplied by your transformation context instead. *)
  val updateTypeReferenceNode: node:ts_TypeReferenceNode -> typeName:ts_EntityName -> typeArguments:ts_TypeNode ts_NodeArray or_undefined -> ts_TypeReferenceNode [@@js.global "updateTypeReferenceNode"]
  (** @deprecated Use `factory.createFunctionTypeNode` or the factory supplied by your transformation context instead. *)
  val createFunctionTypeNode: typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode -> ts_FunctionTypeNode [@@js.global "createFunctionTypeNode"]
  (** @deprecated Use `factory.updateFunctionTypeNode` or the factory supplied by your transformation context instead. *)
  val updateFunctionTypeNode: node:ts_FunctionTypeNode -> typeParameters:ts_TypeParameterDeclaration ts_NodeArray or_undefined -> parameters:ts_ParameterDeclaration ts_NodeArray -> type_:ts_TypeNode -> ts_FunctionTypeNode [@@js.global "updateFunctionTypeNode"]
  (** @deprecated Use `factory.createConstructorTypeNode` or the factory supplied by your transformation context instead. *)
  val createConstructorTypeNode: typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode -> ts_ConstructorTypeNode [@@js.global "createConstructorTypeNode"]
  (** @deprecated Use `factory.updateConstructorTypeNode` or the factory supplied by your transformation context instead. *)
  val updateConstructorTypeNode: node:ts_ConstructorTypeNode -> typeParameters:ts_TypeParameterDeclaration ts_NodeArray or_undefined -> parameters:ts_ParameterDeclaration ts_NodeArray -> type_:ts_TypeNode -> ts_ConstructorTypeNode [@@js.global "updateConstructorTypeNode"]
  (** @deprecated Use `factory.createTypeQueryNode` or the factory supplied by your transformation context instead. *)
  val createTypeQueryNode: exprName:ts_EntityName -> ts_TypeQueryNode [@@js.global "createTypeQueryNode"]
  (** @deprecated Use `factory.updateTypeQueryNode` or the factory supplied by your transformation context instead. *)
  val updateTypeQueryNode: node:ts_TypeQueryNode -> exprName:ts_EntityName -> ts_TypeQueryNode [@@js.global "updateTypeQueryNode"]
  (** @deprecated Use `factory.createTypeLiteralNode` or the factory supplied by your transformation context instead. *)
  val createTypeLiteralNode: members:ts_TypeElement list or_undefined -> ts_TypeLiteralNode [@@js.global "createTypeLiteralNode"]
  (** @deprecated Use `factory.updateTypeLiteralNode` or the factory supplied by your transformation context instead. *)
  val updateTypeLiteralNode: node:ts_TypeLiteralNode -> members:ts_TypeElement ts_NodeArray -> ts_TypeLiteralNode [@@js.global "updateTypeLiteralNode"]
  (** @deprecated Use `factory.createArrayTypeNode` or the factory supplied by your transformation context instead. *)
  val createArrayTypeNode: elementType:ts_TypeNode -> ts_ArrayTypeNode [@@js.global "createArrayTypeNode"]
  (** @deprecated Use `factory.updateArrayTypeNode` or the factory supplied by your transformation context instead. *)
  val updateArrayTypeNode: node:ts_ArrayTypeNode -> elementType:ts_TypeNode -> ts_ArrayTypeNode [@@js.global "updateArrayTypeNode"]
  (** @deprecated Use `factory.createTupleTypeNode` or the factory supplied by your transformation context instead. *)
  val createTupleTypeNode: elements:([`U_n_0 of ts_TypeNode  | `U_n_1 of ts_TypeNode  | `U_n_2 of ts_TypeNode  | `U_n_3 of ts_TypeNode  | `U_n_4 of ts_TypeNode  | `U_n_5 of ts_TypeNode  | `U_n_6 of ts_TypeNode  | `U_n_7 of ts_TypeNode  | `U_n_8 of ts_TypeNode  | `U_n_9 of ts_TypeNode  | `U_n_10 of ts_TypeNode  | `U_n_11 of ts_TypeNode  | `U_n_12 of ts_TypeNode  | `U_n_13 of ts_TypeNode  | `U_n_14 of ts_TypeNode  | `U_n_15 of ts_TypeNode  | `U_n_16 of ts_TypeNode  | `U_n_17 of ts_TypeNode  | `U_n_18 of ts_TypeNode  | `U_n_19 of ts_TypeNode  | `U_n_20 of ts_TypeNode  | `U_n_21 of ts_TypeNode  | `U_n_22 of ts_TypeNode  | `U_n_23 of ts_TypeNode  | `U_n_24 of ts_TypeNode  | `U_n_25 of ts_TypeNode  | `U_n_26 of ts_TypeNode  | `U_n_27 of ts_TypeNode  | `U_n_28 of ts_TypeNode  | `U_n_29 of ts_TypeNode  | `U_n_30 of ts_TypeNode  | `U_n_31 of ts_TypeNode  | `U_n_32 of ts_TypeNode  | `U_n_33 of ts_TypeNode  | `U_n_34 of ts_TypeNode  | `U_n_35 of ts_TypeNode  | `U_n_36 of ts_TypeNode  | `U_n_37 of ts_TypeNode  | `U_n_38 of ts_TypeNode  | `U_n_39 of ts_TypeNode  | `U_n_40 of ts_TypeNode  | `U_n_41 of ts_TypeNode  | `U_n_42 of ts_TypeNode  | `U_n_43 of ts_TypeNode  | `U_n_44 of ts_TypeNode  | `U_n_45 of ts_TypeNode  | `U_n_46 of ts_TypeNode  | `U_n_47 of ts_TypeNode  | `U_n_48 of ts_TypeNode  | `U_n_49 of ts_TypeNode  | `U_n_50 of ts_TypeNode  | `U_n_51 of ts_TypeNode  | `U_n_52 of ts_TypeNode  | `U_n_53 of ts_TypeNode  | `U_n_54 of ts_TypeNode  | `U_n_55 of ts_TypeNode  | `U_n_56 of ts_TypeNode  | `U_n_57 of ts_TypeNode  | `U_n_58 of ts_TypeNode  | `U_n_59 of ts_TypeNode  | `U_n_60 of ts_TypeNode  | `U_n_61 of ts_TypeNode  | `U_n_62 of ts_TypeNode  | `U_n_63 of ts_TypeNode  | `U_n_64 of ts_TypeNode  | `U_n_65 of ts_TypeNode  | `U_n_66 of ts_TypeNode  | `U_n_67 of ts_TypeNode  | `U_n_68 of ts_TypeNode  | `U_n_69 of ts_TypeNode  | `U_n_70 of ts_TypeNode  | `U_n_71 of ts_TypeNode  | `U_n_72 of ts_TypeNode  | `U_n_73 of ts_TypeNode  | `U_n_74 of ts_TypeNode  | `U_n_75 of ts_TypeNode  | `U_n_76 of ts_TypeNode  | `U_n_77 of ts_TypeNode  | `U_n_78 of ts_TypeNode  | `U_n_79 of ts_TypeNode  | `U_n_80 of ts_TypeNode  | `U_n_81 of ts_TypeNode  | `U_n_82 of ts_TypeNode  | `U_n_83 of ts_TypeNode  | `U_n_84 of ts_TypeNode  | `U_n_85 of ts_TypeNode  | `U_n_86 of ts_TypeNode  | `U_n_87 of ts_TypeNode  | `U_n_88 of ts_TypeNode  | `U_n_89 of ts_TypeNode  | `U_n_90 of ts_TypeNode  | `U_n_91 of ts_TypeNode  | `U_n_92 of ts_TypeNode  | `U_n_93 of ts_TypeNode  | `U_n_94 of ts_TypeNode  | `U_n_95 of ts_TypeNode  | `U_n_96 of ts_TypeNode  | `U_n_97 of ts_TypeNode  | `U_n_98 of ts_TypeNode  | `U_n_99 of ts_TypeNode  | `U_n_100 of ts_TypeNode  | `U_n_101 of ts_TypeNode  | `U_n_102 of ts_TypeNode  | `U_n_103 of ts_TypeNode  | `U_n_104 of ts_TypeNode  | `U_n_105 of ts_TypeNode  | `U_n_106 of ts_TypeNode  | `U_n_107 of ts_TypeNode  | `U_n_108 of ts_TypeNode  | `U_n_109 of ts_TypeNode  | `U_n_110 of ts_TypeNode  | `U_n_111 of ts_TypeNode  | `U_n_112 of ts_TypeNode  | `U_n_113 of ts_TypeNode  | `U_n_114 of ts_TypeNode  | `U_n_115 of ts_TypeNode  | `U_n_116 of ts_TypeNode  | `U_n_117 of ts_TypeNode  | `U_n_118 of ts_TypeNode  | `U_n_119 of ts_TypeNode  | `U_n_120 of ts_TypeNode  | `U_n_121 of ts_TypeNode  | `U_n_122 of ts_TypeNode  | `U_n_123 of ts_TypeNode  | `U_n_124 of ts_TypeNode  | `U_n_125 of ts_TypeNode  | `U_n_126 of ts_TypeNode  | `U_n_127 of ts_TypeNode  | `U_n_128 of ts_TypeNode  | `U_n_129 of ts_TypeNode  | `U_n_130 of ts_TypeNode  | `U_n_131 of ts_TypeNode  | `U_n_132 of ts_TypeNode  | `U_n_133 of ts_TypeNode  | `U_n_134 of ts_TypeNode  | `U_n_135 of ts_TypeNode  | `U_n_136 of ts_TypeNode  | `U_n_137 of ts_TypeNode  | `U_n_138 of ts_TypeNode  | `U_n_139 of ts_TypeNode  | `U_n_140 of ts_TypeNode  | `U_n_141 of ts_TypeNode  | `U_n_142 of ts_TypeNode  | `U_n_143 of ts_TypeNode  | `U_n_144 of ts_TypeNode  | `U_n_145 of ts_TypeNode  | `U_n_146 of ts_TypeNode  | `U_n_147 of ts_TypeNode  | `U_n_148 of ts_TypeNode  | `U_n_149 of ts_TypeNode  | `U_n_150 of ts_TypeNode  | `U_n_151 of ts_TypeNode  | `U_n_152 of ts_TypeNode  | `U_n_153 of ts_TypeNode  | `U_n_154 of ts_TypeNode  | `U_n_155 of ts_TypeNode  | `U_n_156 of ts_TypeNode  | `U_n_157 of ts_TypeNode  | `U_n_158 of ts_TypeNode  | `U_n_159 of ts_TypeNode  | `U_n_160 of ts_TypeNode  | `U_n_161 of ts_TypeNode  | `U_n_162 of ts_TypeNode  | `U_n_163 of ts_TypeNode  | `U_n_164 of ts_TypeNode  | `U_n_165 of ts_TypeNode  | `U_n_166 of ts_TypeNode  | `U_n_167 of ts_TypeNode  | `U_n_168 of ts_TypeNode  | `U_n_169 of ts_TypeNode  | `U_n_170 of ts_TypeNode  | `U_n_171 of ts_TypeNode  | `U_n_172 of ts_TypeNode  | `U_n_173 of ts_TypeNode  | `U_n_174 of ts_TypeNode  | `U_n_175 of ts_TypeNode  | `U_n_176 of ts_TypeNode  | `U_n_177 of ts_TypeNode  | `U_n_178 of ts_TypeNode  | `U_n_179 of ts_TypeNode  | `U_n_180 of ts_TypeNode  | `U_n_181 of ts_TypeNode  | `U_n_182 of ts_TypeNode  | `U_n_183 of ts_TypeNode  | `U_n_184 of ts_TypeNode  | `U_n_185 of ts_TypeNode  | `U_n_186 of ts_TypeNode  | `U_n_187 of ts_TypeNode  | `U_n_188 of ts_TypeNode  | `U_n_189 of ts_TypeNode  | `U_n_190 of ts_TypeNode  | `U_n_191 of ts_TypeNode  | `U_n_192 of (ts_TypeNode, ts_NamedTupleMember) union2  | `U_n_193 of ts_TypeNode  | `U_n_194 of ts_TypeNode  | `U_n_195 of ts_TypeNode  | `U_n_196 of ts_TypeNode  | `U_n_197 of ts_TypeNode  | `U_n_198 of ts_TypeNode  | `U_n_199 of ts_TypeNode  | `U_n_200 of ts_TypeNode  | `U_n_201 of ts_TypeNode  | `U_n_202 of ts_TypeNode  | `U_n_203 of ts_TypeNode  | `U_n_204 of ts_TypeNode  | `U_n_205 of ts_TypeNode  | `U_n_206 of ts_TypeNode  | `U_n_207 of ts_TypeNode  | `U_n_208 of ts_TypeNode  | `U_n_209 of ts_TypeNode  | `U_n_210 of ts_TypeNode  | `U_n_211 of ts_TypeNode  | `U_n_212 of ts_TypeNode  | `U_n_213 of ts_TypeNode  | `U_n_214 of ts_TypeNode  | `U_n_215 of ts_TypeNode  | `U_n_216 of ts_TypeNode  | `U_n_217 of ts_TypeNode  | `U_n_218 of ts_TypeNode  | `U_n_219 of ts_TypeNode  | `U_n_220 of ts_TypeNode  | `U_n_221 of ts_TypeNode  | `U_n_222 of ts_TypeNode  | `U_n_223 of ts_TypeNode  | `U_n_224 of ts_TypeNode  | `U_n_225 of ts_TypeNode  | `U_n_226 of ts_TypeNode  | `U_n_227 of ts_TypeNode  | `U_n_228 of ts_TypeNode  | `U_n_229 of ts_TypeNode  | `U_n_230 of ts_TypeNode  | `U_n_231 of ts_TypeNode  | `U_n_232 of ts_TypeNode  | `U_n_233 of ts_TypeNode  | `U_n_234 of ts_TypeNode  | `U_n_235 of ts_TypeNode  | `U_n_236 of ts_TypeNode  | `U_n_237 of ts_TypeNode  | `U_n_238 of ts_TypeNode  | `U_n_239 of ts_TypeNode  | `U_n_240 of ts_TypeNode  | `U_n_241 of ts_TypeNode  | `U_n_242 of ts_TypeNode  | `U_n_243 of ts_TypeNode  | `U_n_244 of ts_TypeNode  | `U_n_245 of ts_TypeNode  | `U_n_246 of ts_TypeNode  | `U_n_247 of ts_TypeNode  | `U_n_248 of ts_TypeNode  | `U_n_249 of ts_TypeNode  | `U_n_250 of ts_TypeNode  | `U_n_251 of ts_TypeNode  | `U_n_252 of ts_TypeNode  | `U_n_253 of ts_TypeNode  | `U_n_254 of ts_TypeNode  | `U_n_255 of ts_TypeNode  | `U_n_256 of ts_TypeNode  | `U_n_257 of ts_TypeNode  | `U_n_258 of ts_TypeNode  | `U_n_259 of ts_TypeNode  | `U_n_260 of ts_TypeNode  | `U_n_261 of ts_TypeNode  | `U_n_262 of ts_TypeNode  | `U_n_263 of ts_TypeNode  | `U_n_264 of ts_TypeNode  | `U_n_265 of ts_TypeNode  | `U_n_266 of ts_TypeNode  | `U_n_267 of ts_TypeNode  | `U_n_268 of ts_TypeNode  | `U_n_269 of ts_TypeNode  | `U_n_270 of ts_TypeNode  | `U_n_271 of ts_TypeNode  | `U_n_272 of ts_TypeNode  | `U_n_273 of ts_TypeNode  | `U_n_274 of ts_TypeNode  | `U_n_275 of ts_TypeNode  | `U_n_276 of ts_TypeNode  | `U_n_277 of ts_TypeNode  | `U_n_278 of ts_TypeNode  | `U_n_279 of ts_TypeNode  | `U_n_280 of ts_TypeNode  | `U_n_281 of ts_TypeNode  | `U_n_282 of ts_TypeNode  | `U_n_283 of ts_TypeNode  | `U_n_284 of ts_TypeNode  | `U_n_285 of ts_TypeNode  | `U_n_286 of ts_TypeNode  | `U_n_287 of ts_TypeNode  | `U_n_288 of ts_TypeNode  | `U_n_289 of ts_TypeNode  | `U_n_290 of ts_TypeNode  | `U_n_291 of ts_TypeNode  | `U_n_292 of ts_TypeNode  | `U_n_293 of ts_TypeNode  | `U_n_294 of ts_TypeNode  | `U_n_295 of ts_TypeNode  | `U_n_296 of ts_TypeNode  | `U_n_297 of ts_TypeNode  | `U_n_298 of ts_TypeNode  | `U_n_299 of ts_TypeNode  | `U_n_300 of ts_TypeNode  | `U_n_301 of ts_TypeNode  | `U_n_302 of ts_TypeNode  | `U_n_303 of ts_TypeNode  | `U_n_304 of ts_TypeNode  | `U_n_305 of ts_TypeNode  | `U_n_306 of ts_TypeNode  | `U_n_307 of ts_TypeNode  | `U_n_308 of ts_TypeNode  | `U_n_309 of ts_TypeNode  | `U_n_310 of ts_TypeNode  | `U_n_311 of ts_TypeNode  | `U_n_312 of ts_TypeNode  | `U_n_313 of ts_TypeNode  | `U_n_314 of ts_TypeNode  | `U_n_315 of ts_TypeNode  | `U_n_316 of ts_TypeNode  | `U_n_317 of ts_TypeNode  | `U_n_318 of ts_TypeNode  | `U_n_319 of ts_TypeNode  | `U_n_320 of ts_TypeNode  | `U_n_321 of ts_TypeNode  | `U_n_322 of ts_TypeNode  | `U_n_323 of ts_TypeNode  | `U_n_324 of ts_TypeNode  | `U_n_325 of ts_TypeNode  | `U_n_326 of ts_TypeNode  | `U_n_327 of ts_TypeNode  | `U_n_328 of ts_TypeNode  | `U_n_329 of ts_TypeNode  | `U_n_330 of ts_TypeNode  | `U_n_331 of ts_TypeNode  | `U_n_332 of ts_TypeNode  | `U_n_333 of ts_TypeNode  | `U_n_334 of ts_TypeNode  | `U_n_335 of ts_TypeNode  | `U_n_336 of ts_TypeNode  | `U_n_337 of ts_TypeNode  | `U_n_338 of ts_TypeNode  | `U_n_339 of ts_TypeNode  | `U_n_340 of ts_TypeNode  | `U_n_341 of ts_TypeNode ] [@js.union on_field "kind"]) list -> ts_TupleTypeNode [@@js.global "createTupleTypeNode"]
  (** @deprecated Use `factory.updateTupleTypeNode` or the factory supplied by your transformation context instead. *)
  val updateTupleTypeNode: node:ts_TupleTypeNode -> elements:([`U_n_0 of ts_TypeNode  | `U_n_1 of ts_TypeNode  | `U_n_2 of ts_TypeNode  | `U_n_3 of ts_TypeNode  | `U_n_4 of ts_TypeNode  | `U_n_5 of ts_TypeNode  | `U_n_6 of ts_TypeNode  | `U_n_7 of ts_TypeNode  | `U_n_8 of ts_TypeNode  | `U_n_9 of ts_TypeNode  | `U_n_10 of ts_TypeNode  | `U_n_11 of ts_TypeNode  | `U_n_12 of ts_TypeNode  | `U_n_13 of ts_TypeNode  | `U_n_14 of ts_TypeNode  | `U_n_15 of ts_TypeNode  | `U_n_16 of ts_TypeNode  | `U_n_17 of ts_TypeNode  | `U_n_18 of ts_TypeNode  | `U_n_19 of ts_TypeNode  | `U_n_20 of ts_TypeNode  | `U_n_21 of ts_TypeNode  | `U_n_22 of ts_TypeNode  | `U_n_23 of ts_TypeNode  | `U_n_24 of ts_TypeNode  | `U_n_25 of ts_TypeNode  | `U_n_26 of ts_TypeNode  | `U_n_27 of ts_TypeNode  | `U_n_28 of ts_TypeNode  | `U_n_29 of ts_TypeNode  | `U_n_30 of ts_TypeNode  | `U_n_31 of ts_TypeNode  | `U_n_32 of ts_TypeNode  | `U_n_33 of ts_TypeNode  | `U_n_34 of ts_TypeNode  | `U_n_35 of ts_TypeNode  | `U_n_36 of ts_TypeNode  | `U_n_37 of ts_TypeNode  | `U_n_38 of ts_TypeNode  | `U_n_39 of ts_TypeNode  | `U_n_40 of ts_TypeNode  | `U_n_41 of ts_TypeNode  | `U_n_42 of ts_TypeNode  | `U_n_43 of ts_TypeNode  | `U_n_44 of ts_TypeNode  | `U_n_45 of ts_TypeNode  | `U_n_46 of ts_TypeNode  | `U_n_47 of ts_TypeNode  | `U_n_48 of ts_TypeNode  | `U_n_49 of ts_TypeNode  | `U_n_50 of ts_TypeNode  | `U_n_51 of ts_TypeNode  | `U_n_52 of ts_TypeNode  | `U_n_53 of ts_TypeNode  | `U_n_54 of ts_TypeNode  | `U_n_55 of ts_TypeNode  | `U_n_56 of ts_TypeNode  | `U_n_57 of ts_TypeNode  | `U_n_58 of ts_TypeNode  | `U_n_59 of ts_TypeNode  | `U_n_60 of ts_TypeNode  | `U_n_61 of ts_TypeNode  | `U_n_62 of ts_TypeNode  | `U_n_63 of ts_TypeNode  | `U_n_64 of ts_TypeNode  | `U_n_65 of ts_TypeNode  | `U_n_66 of ts_TypeNode  | `U_n_67 of ts_TypeNode  | `U_n_68 of ts_TypeNode  | `U_n_69 of ts_TypeNode  | `U_n_70 of ts_TypeNode  | `U_n_71 of ts_TypeNode  | `U_n_72 of ts_TypeNode  | `U_n_73 of ts_TypeNode  | `U_n_74 of ts_TypeNode  | `U_n_75 of ts_TypeNode  | `U_n_76 of ts_TypeNode  | `U_n_77 of ts_TypeNode  | `U_n_78 of ts_TypeNode  | `U_n_79 of ts_TypeNode  | `U_n_80 of ts_TypeNode  | `U_n_81 of ts_TypeNode  | `U_n_82 of ts_TypeNode  | `U_n_83 of ts_TypeNode  | `U_n_84 of ts_TypeNode  | `U_n_85 of ts_TypeNode  | `U_n_86 of ts_TypeNode  | `U_n_87 of ts_TypeNode  | `U_n_88 of ts_TypeNode  | `U_n_89 of ts_TypeNode  | `U_n_90 of ts_TypeNode  | `U_n_91 of ts_TypeNode  | `U_n_92 of ts_TypeNode  | `U_n_93 of ts_TypeNode  | `U_n_94 of ts_TypeNode  | `U_n_95 of ts_TypeNode  | `U_n_96 of ts_TypeNode  | `U_n_97 of ts_TypeNode  | `U_n_98 of ts_TypeNode  | `U_n_99 of ts_TypeNode  | `U_n_100 of ts_TypeNode  | `U_n_101 of ts_TypeNode  | `U_n_102 of ts_TypeNode  | `U_n_103 of ts_TypeNode  | `U_n_104 of ts_TypeNode  | `U_n_105 of ts_TypeNode  | `U_n_106 of ts_TypeNode  | `U_n_107 of ts_TypeNode  | `U_n_108 of ts_TypeNode  | `U_n_109 of ts_TypeNode  | `U_n_110 of ts_TypeNode  | `U_n_111 of ts_TypeNode  | `U_n_112 of ts_TypeNode  | `U_n_113 of ts_TypeNode  | `U_n_114 of ts_TypeNode  | `U_n_115 of ts_TypeNode  | `U_n_116 of ts_TypeNode  | `U_n_117 of ts_TypeNode  | `U_n_118 of ts_TypeNode  | `U_n_119 of ts_TypeNode  | `U_n_120 of ts_TypeNode  | `U_n_121 of ts_TypeNode  | `U_n_122 of ts_TypeNode  | `U_n_123 of ts_TypeNode  | `U_n_124 of ts_TypeNode  | `U_n_125 of ts_TypeNode  | `U_n_126 of ts_TypeNode  | `U_n_127 of ts_TypeNode  | `U_n_128 of ts_TypeNode  | `U_n_129 of ts_TypeNode  | `U_n_130 of ts_TypeNode  | `U_n_131 of ts_TypeNode  | `U_n_132 of ts_TypeNode  | `U_n_133 of ts_TypeNode  | `U_n_134 of ts_TypeNode  | `U_n_135 of ts_TypeNode  | `U_n_136 of ts_TypeNode  | `U_n_137 of ts_TypeNode  | `U_n_138 of ts_TypeNode  | `U_n_139 of ts_TypeNode  | `U_n_140 of ts_TypeNode  | `U_n_141 of ts_TypeNode  | `U_n_142 of ts_TypeNode  | `U_n_143 of ts_TypeNode  | `U_n_144 of ts_TypeNode  | `U_n_145 of ts_TypeNode  | `U_n_146 of ts_TypeNode  | `U_n_147 of ts_TypeNode  | `U_n_148 of ts_TypeNode  | `U_n_149 of ts_TypeNode  | `U_n_150 of ts_TypeNode  | `U_n_151 of ts_TypeNode  | `U_n_152 of ts_TypeNode  | `U_n_153 of ts_TypeNode  | `U_n_154 of ts_TypeNode  | `U_n_155 of ts_TypeNode  | `U_n_156 of ts_TypeNode  | `U_n_157 of ts_TypeNode  | `U_n_158 of ts_TypeNode  | `U_n_159 of ts_TypeNode  | `U_n_160 of ts_TypeNode  | `U_n_161 of ts_TypeNode  | `U_n_162 of ts_TypeNode  | `U_n_163 of ts_TypeNode  | `U_n_164 of ts_TypeNode  | `U_n_165 of ts_TypeNode  | `U_n_166 of ts_TypeNode  | `U_n_167 of ts_TypeNode  | `U_n_168 of ts_TypeNode  | `U_n_169 of ts_TypeNode  | `U_n_170 of ts_TypeNode  | `U_n_171 of ts_TypeNode  | `U_n_172 of ts_TypeNode  | `U_n_173 of ts_TypeNode  | `U_n_174 of ts_TypeNode  | `U_n_175 of ts_TypeNode  | `U_n_176 of ts_TypeNode  | `U_n_177 of ts_TypeNode  | `U_n_178 of ts_TypeNode  | `U_n_179 of ts_TypeNode  | `U_n_180 of ts_TypeNode  | `U_n_181 of ts_TypeNode  | `U_n_182 of ts_TypeNode  | `U_n_183 of ts_TypeNode  | `U_n_184 of ts_TypeNode  | `U_n_185 of ts_TypeNode  | `U_n_186 of ts_TypeNode  | `U_n_187 of ts_TypeNode  | `U_n_188 of ts_TypeNode  | `U_n_189 of ts_TypeNode  | `U_n_190 of ts_TypeNode  | `U_n_191 of ts_TypeNode  | `U_n_192 of (ts_TypeNode, ts_NamedTupleMember) union2  | `U_n_193 of ts_TypeNode  | `U_n_194 of ts_TypeNode  | `U_n_195 of ts_TypeNode  | `U_n_196 of ts_TypeNode  | `U_n_197 of ts_TypeNode  | `U_n_198 of ts_TypeNode  | `U_n_199 of ts_TypeNode  | `U_n_200 of ts_TypeNode  | `U_n_201 of ts_TypeNode  | `U_n_202 of ts_TypeNode  | `U_n_203 of ts_TypeNode  | `U_n_204 of ts_TypeNode  | `U_n_205 of ts_TypeNode  | `U_n_206 of ts_TypeNode  | `U_n_207 of ts_TypeNode  | `U_n_208 of ts_TypeNode  | `U_n_209 of ts_TypeNode  | `U_n_210 of ts_TypeNode  | `U_n_211 of ts_TypeNode  | `U_n_212 of ts_TypeNode  | `U_n_213 of ts_TypeNode  | `U_n_214 of ts_TypeNode  | `U_n_215 of ts_TypeNode  | `U_n_216 of ts_TypeNode  | `U_n_217 of ts_TypeNode  | `U_n_218 of ts_TypeNode  | `U_n_219 of ts_TypeNode  | `U_n_220 of ts_TypeNode  | `U_n_221 of ts_TypeNode  | `U_n_222 of ts_TypeNode  | `U_n_223 of ts_TypeNode  | `U_n_224 of ts_TypeNode  | `U_n_225 of ts_TypeNode  | `U_n_226 of ts_TypeNode  | `U_n_227 of ts_TypeNode  | `U_n_228 of ts_TypeNode  | `U_n_229 of ts_TypeNode  | `U_n_230 of ts_TypeNode  | `U_n_231 of ts_TypeNode  | `U_n_232 of ts_TypeNode  | `U_n_233 of ts_TypeNode  | `U_n_234 of ts_TypeNode  | `U_n_235 of ts_TypeNode  | `U_n_236 of ts_TypeNode  | `U_n_237 of ts_TypeNode  | `U_n_238 of ts_TypeNode  | `U_n_239 of ts_TypeNode  | `U_n_240 of ts_TypeNode  | `U_n_241 of ts_TypeNode  | `U_n_242 of ts_TypeNode  | `U_n_243 of ts_TypeNode  | `U_n_244 of ts_TypeNode  | `U_n_245 of ts_TypeNode  | `U_n_246 of ts_TypeNode  | `U_n_247 of ts_TypeNode  | `U_n_248 of ts_TypeNode  | `U_n_249 of ts_TypeNode  | `U_n_250 of ts_TypeNode  | `U_n_251 of ts_TypeNode  | `U_n_252 of ts_TypeNode  | `U_n_253 of ts_TypeNode  | `U_n_254 of ts_TypeNode  | `U_n_255 of ts_TypeNode  | `U_n_256 of ts_TypeNode  | `U_n_257 of ts_TypeNode  | `U_n_258 of ts_TypeNode  | `U_n_259 of ts_TypeNode  | `U_n_260 of ts_TypeNode  | `U_n_261 of ts_TypeNode  | `U_n_262 of ts_TypeNode  | `U_n_263 of ts_TypeNode  | `U_n_264 of ts_TypeNode  | `U_n_265 of ts_TypeNode  | `U_n_266 of ts_TypeNode  | `U_n_267 of ts_TypeNode  | `U_n_268 of ts_TypeNode  | `U_n_269 of ts_TypeNode  | `U_n_270 of ts_TypeNode  | `U_n_271 of ts_TypeNode  | `U_n_272 of ts_TypeNode  | `U_n_273 of ts_TypeNode  | `U_n_274 of ts_TypeNode  | `U_n_275 of ts_TypeNode  | `U_n_276 of ts_TypeNode  | `U_n_277 of ts_TypeNode  | `U_n_278 of ts_TypeNode  | `U_n_279 of ts_TypeNode  | `U_n_280 of ts_TypeNode  | `U_n_281 of ts_TypeNode  | `U_n_282 of ts_TypeNode  | `U_n_283 of ts_TypeNode  | `U_n_284 of ts_TypeNode  | `U_n_285 of ts_TypeNode  | `U_n_286 of ts_TypeNode  | `U_n_287 of ts_TypeNode  | `U_n_288 of ts_TypeNode  | `U_n_289 of ts_TypeNode  | `U_n_290 of ts_TypeNode  | `U_n_291 of ts_TypeNode  | `U_n_292 of ts_TypeNode  | `U_n_293 of ts_TypeNode  | `U_n_294 of ts_TypeNode  | `U_n_295 of ts_TypeNode  | `U_n_296 of ts_TypeNode  | `U_n_297 of ts_TypeNode  | `U_n_298 of ts_TypeNode  | `U_n_299 of ts_TypeNode  | `U_n_300 of ts_TypeNode  | `U_n_301 of ts_TypeNode  | `U_n_302 of ts_TypeNode  | `U_n_303 of ts_TypeNode  | `U_n_304 of ts_TypeNode  | `U_n_305 of ts_TypeNode  | `U_n_306 of ts_TypeNode  | `U_n_307 of ts_TypeNode  | `U_n_308 of ts_TypeNode  | `U_n_309 of ts_TypeNode  | `U_n_310 of ts_TypeNode  | `U_n_311 of ts_TypeNode  | `U_n_312 of ts_TypeNode  | `U_n_313 of ts_TypeNode  | `U_n_314 of ts_TypeNode  | `U_n_315 of ts_TypeNode  | `U_n_316 of ts_TypeNode  | `U_n_317 of ts_TypeNode  | `U_n_318 of ts_TypeNode  | `U_n_319 of ts_TypeNode  | `U_n_320 of ts_TypeNode  | `U_n_321 of ts_TypeNode  | `U_n_322 of ts_TypeNode  | `U_n_323 of ts_TypeNode  | `U_n_324 of ts_TypeNode  | `U_n_325 of ts_TypeNode  | `U_n_326 of ts_TypeNode  | `U_n_327 of ts_TypeNode  | `U_n_328 of ts_TypeNode  | `U_n_329 of ts_TypeNode  | `U_n_330 of ts_TypeNode  | `U_n_331 of ts_TypeNode  | `U_n_332 of ts_TypeNode  | `U_n_333 of ts_TypeNode  | `U_n_334 of ts_TypeNode  | `U_n_335 of ts_TypeNode  | `U_n_336 of ts_TypeNode  | `U_n_337 of ts_TypeNode  | `U_n_338 of ts_TypeNode  | `U_n_339 of ts_TypeNode  | `U_n_340 of ts_TypeNode  | `U_n_341 of ts_TypeNode ] [@js.union on_field "kind"]) list -> ts_TupleTypeNode [@@js.global "updateTupleTypeNode"]
  (** @deprecated Use `factory.createOptionalTypeNode` or the factory supplied by your transformation context instead. *)
  val createOptionalTypeNode: type_:ts_TypeNode -> ts_OptionalTypeNode [@@js.global "createOptionalTypeNode"]
  (** @deprecated Use `factory.updateOptionalTypeNode` or the factory supplied by your transformation context instead. *)
  val updateOptionalTypeNode: node:ts_OptionalTypeNode -> type_:ts_TypeNode -> ts_OptionalTypeNode [@@js.global "updateOptionalTypeNode"]
  (** @deprecated Use `factory.createRestTypeNode` or the factory supplied by your transformation context instead. *)
  val createRestTypeNode: type_:ts_TypeNode -> ts_RestTypeNode [@@js.global "createRestTypeNode"]
  (** @deprecated Use `factory.updateRestTypeNode` or the factory supplied by your transformation context instead. *)
  val updateRestTypeNode: node:ts_RestTypeNode -> type_:ts_TypeNode -> ts_RestTypeNode [@@js.global "updateRestTypeNode"]
  (** @deprecated Use `factory.createUnionTypeNode` or the factory supplied by your transformation context instead. *)
  val createUnionTypeNode: types:ts_TypeNode list -> ts_UnionTypeNode [@@js.global "createUnionTypeNode"]
  (** @deprecated Use `factory.updateUnionTypeNode` or the factory supplied by your transformation context instead. *)
  val updateUnionTypeNode: node:ts_UnionTypeNode -> types:ts_TypeNode ts_NodeArray -> ts_UnionTypeNode [@@js.global "updateUnionTypeNode"]
  (** @deprecated Use `factory.createIntersectionTypeNode` or the factory supplied by your transformation context instead. *)
  val createIntersectionTypeNode: types:ts_TypeNode list -> ts_IntersectionTypeNode [@@js.global "createIntersectionTypeNode"]
  (** @deprecated Use `factory.updateIntersectionTypeNode` or the factory supplied by your transformation context instead. *)
  val updateIntersectionTypeNode: node:ts_IntersectionTypeNode -> types:ts_TypeNode ts_NodeArray -> ts_IntersectionTypeNode [@@js.global "updateIntersectionTypeNode"]
  (** @deprecated Use `factory.createConditionalTypeNode` or the factory supplied by your transformation context instead. *)
  val createConditionalTypeNode: checkType:ts_TypeNode -> extendsType:ts_TypeNode -> trueType:ts_TypeNode -> falseType:ts_TypeNode -> ts_ConditionalTypeNode [@@js.global "createConditionalTypeNode"]
  (** @deprecated Use `factory.updateConditionalTypeNode` or the factory supplied by your transformation context instead. *)
  val updateConditionalTypeNode: node:ts_ConditionalTypeNode -> checkType:ts_TypeNode -> extendsType:ts_TypeNode -> trueType:ts_TypeNode -> falseType:ts_TypeNode -> ts_ConditionalTypeNode [@@js.global "updateConditionalTypeNode"]
  (** @deprecated Use `factory.createInferTypeNode` or the factory supplied by your transformation context instead. *)
  val createInferTypeNode: typeParameter:ts_TypeParameterDeclaration -> ts_InferTypeNode [@@js.global "createInferTypeNode"]
  (** @deprecated Use `factory.updateInferTypeNode` or the factory supplied by your transformation context instead. *)
  val updateInferTypeNode: node:ts_InferTypeNode -> typeParameter:ts_TypeParameterDeclaration -> ts_InferTypeNode [@@js.global "updateInferTypeNode"]
  (** @deprecated Use `factory.createImportTypeNode` or the factory supplied by your transformation context instead. *)
  val createImportTypeNode: argument:ts_TypeNode -> ?qualifier:ts_EntityName or_undefined -> ?typeArguments:ts_TypeNode list or_undefined -> ?isTypeOf:bool or_undefined -> unit -> ts_ImportTypeNode [@@js.global "createImportTypeNode"]
  (** @deprecated Use `factory.updateImportTypeNode` or the factory supplied by your transformation context instead. *)
  val updateImportTypeNode: node:ts_ImportTypeNode -> argument:ts_TypeNode -> qualifier:ts_EntityName or_undefined -> typeArguments:ts_TypeNode list or_undefined -> ?isTypeOf:bool or_undefined -> unit -> ts_ImportTypeNode [@@js.global "updateImportTypeNode"]
  (** @deprecated Use `factory.createParenthesizedType` or the factory supplied by your transformation context instead. *)
  val createParenthesizedType: type_:ts_TypeNode -> ts_ParenthesizedTypeNode [@@js.global "createParenthesizedType"]
  (** @deprecated Use `factory.updateParenthesizedType` or the factory supplied by your transformation context instead. *)
  val updateParenthesizedType: node:ts_ParenthesizedTypeNode -> type_:ts_TypeNode -> ts_ParenthesizedTypeNode [@@js.global "updateParenthesizedType"]
  (** @deprecated Use `factory.createThisTypeNode` or the factory supplied by your transformation context instead. *)
  val createThisTypeNode: unit -> ts_ThisTypeNode [@@js.global "createThisTypeNode"]
  (** @deprecated Use `factory.updateTypeOperatorNode` or the factory supplied by your transformation context instead. *)
  val updateTypeOperatorNode: node:ts_TypeOperatorNode -> type_:ts_TypeNode -> ts_TypeOperatorNode [@@js.global "updateTypeOperatorNode"]
  (** @deprecated Use `factory.createIndexedAccessTypeNode` or the factory supplied by your transformation context instead. *)
  val createIndexedAccessTypeNode: objectType:ts_TypeNode -> indexType:ts_TypeNode -> ts_IndexedAccessTypeNode [@@js.global "createIndexedAccessTypeNode"]
  (** @deprecated Use `factory.updateIndexedAccessTypeNode` or the factory supplied by your transformation context instead. *)
  val updateIndexedAccessTypeNode: node:ts_IndexedAccessTypeNode -> objectType:ts_TypeNode -> indexType:ts_TypeNode -> ts_IndexedAccessTypeNode [@@js.global "updateIndexedAccessTypeNode"]
  (** @deprecated Use `factory.createMappedTypeNode` or the factory supplied by your transformation context instead. *)
  val createMappedTypeNode: readonlyToken:([`U_n_39 of ts_PlusToken  | `U_n_40 of ts_MinusToken  | `U_n_142 of ts_ReadonlyKeyword ] [@js.union on_field "kind"]) or_undefined -> typeParameter:ts_TypeParameterDeclaration -> nameType:ts_TypeNode or_undefined -> questionToken:([`U_n_39 of ts_PlusToken  | `U_n_40 of ts_MinusToken  | `U_n_57 of ts_QuestionToken ] [@js.union on_field "kind"]) or_undefined -> type_:ts_TypeNode or_undefined -> ts_MappedTypeNode [@@js.global "createMappedTypeNode"]
  (** @deprecated Use `factory.updateMappedTypeNode` or the factory supplied by your transformation context instead. *)
  val updateMappedTypeNode: node:ts_MappedTypeNode -> readonlyToken:([`U_n_39 of ts_PlusToken  | `U_n_40 of ts_MinusToken  | `U_n_142 of ts_ReadonlyKeyword ] [@js.union on_field "kind"]) or_undefined -> typeParameter:ts_TypeParameterDeclaration -> nameType:ts_TypeNode or_undefined -> questionToken:([`U_n_39 of ts_PlusToken  | `U_n_40 of ts_MinusToken  | `U_n_57 of ts_QuestionToken ] [@js.union on_field "kind"]) or_undefined -> type_:ts_TypeNode or_undefined -> ts_MappedTypeNode [@@js.global "updateMappedTypeNode"]
  (** @deprecated Use `factory.createLiteralTypeNode` or the factory supplied by your transformation context instead. *)
  val createLiteralTypeNode: literal:([`U_n_0 of ts_LiteralExpression  | `U_n_1 of ts_LiteralExpression  | `U_n_2 of ts_LiteralExpression  | `U_n_3 of ts_LiteralExpression  | `U_n_4 of ts_LiteralExpression  | `U_n_5 of ts_LiteralExpression  | `U_n_6 of ts_LiteralExpression  | `U_n_7 of ts_LiteralExpression  | `U_n_8 of ts_LiteralExpression  | `U_n_9 of ts_LiteralExpression  | `U_n_10 of ts_LiteralExpression  | `U_n_11 of ts_LiteralExpression  | `U_n_12 of ts_LiteralExpression  | `U_n_13 of ts_LiteralExpression  | `U_n_14 of ts_LiteralExpression  | `U_n_15 of ts_LiteralExpression  | `U_n_16 of ts_LiteralExpression  | `U_n_17 of ts_LiteralExpression  | `U_n_18 of ts_LiteralExpression  | `U_n_19 of ts_LiteralExpression  | `U_n_20 of ts_LiteralExpression  | `U_n_21 of ts_LiteralExpression  | `U_n_22 of ts_LiteralExpression  | `U_n_23 of ts_LiteralExpression  | `U_n_24 of ts_LiteralExpression  | `U_n_25 of ts_LiteralExpression  | `U_n_26 of ts_LiteralExpression  | `U_n_27 of ts_LiteralExpression  | `U_n_28 of ts_LiteralExpression  | `U_n_29 of ts_LiteralExpression  | `U_n_30 of ts_LiteralExpression  | `U_n_31 of ts_LiteralExpression  | `U_n_32 of ts_LiteralExpression  | `U_n_33 of ts_LiteralExpression  | `U_n_34 of ts_LiteralExpression  | `U_n_35 of ts_LiteralExpression  | `U_n_36 of ts_LiteralExpression  | `U_n_37 of ts_LiteralExpression  | `U_n_38 of ts_LiteralExpression  | `U_n_39 of ts_LiteralExpression  | `U_n_40 of ts_LiteralExpression  | `U_n_41 of ts_LiteralExpression  | `U_n_42 of ts_LiteralExpression  | `U_n_43 of ts_LiteralExpression  | `U_n_44 of ts_LiteralExpression  | `U_n_45 of ts_LiteralExpression  | `U_n_46 of ts_LiteralExpression  | `U_n_47 of ts_LiteralExpression  | `U_n_48 of ts_LiteralExpression  | `U_n_49 of ts_LiteralExpression  | `U_n_50 of ts_LiteralExpression  | `U_n_51 of ts_LiteralExpression  | `U_n_52 of ts_LiteralExpression  | `U_n_53 of ts_LiteralExpression  | `U_n_54 of ts_LiteralExpression  | `U_n_55 of ts_LiteralExpression  | `U_n_56 of ts_LiteralExpression  | `U_n_57 of ts_LiteralExpression  | `U_n_58 of ts_LiteralExpression  | `U_n_59 of ts_LiteralExpression  | `U_n_60 of ts_LiteralExpression  | `U_n_61 of ts_LiteralExpression  | `U_n_62 of ts_LiteralExpression  | `U_n_63 of ts_LiteralExpression  | `U_n_64 of ts_LiteralExpression  | `U_n_65 of ts_LiteralExpression  | `U_n_66 of ts_LiteralExpression  | `U_n_67 of ts_LiteralExpression  | `U_n_68 of ts_LiteralExpression  | `U_n_69 of ts_LiteralExpression  | `U_n_70 of ts_LiteralExpression  | `U_n_71 of ts_LiteralExpression  | `U_n_72 of ts_LiteralExpression  | `U_n_73 of ts_LiteralExpression  | `U_n_74 of ts_LiteralExpression  | `U_n_75 of ts_LiteralExpression  | `U_n_76 of ts_LiteralExpression  | `U_n_77 of ts_LiteralExpression  | `U_n_78 of ts_LiteralExpression  | `U_n_79 of ts_LiteralExpression  | `U_n_80 of ts_LiteralExpression  | `U_n_81 of ts_LiteralExpression  | `U_n_82 of ts_LiteralExpression  | `U_n_83 of ts_LiteralExpression  | `U_n_84 of ts_LiteralExpression  | `U_n_85 of ts_LiteralExpression  | `U_n_86 of ts_LiteralExpression  | `U_n_87 of ts_LiteralExpression  | `U_n_88 of ts_LiteralExpression  | `U_n_89 of ts_LiteralExpression  | `U_n_90 of ts_LiteralExpression  | `U_n_91 of ts_LiteralExpression  | `U_n_92 of ts_LiteralExpression  | `U_n_93 of ts_LiteralExpression  | `U_n_94 of (ts_LiteralExpression, ts_BooleanLiteral) union2  | `U_n_95 of ts_LiteralExpression  | `U_n_96 of ts_LiteralExpression  | `U_n_97 of ts_LiteralExpression  | `U_n_98 of ts_LiteralExpression  | `U_n_99 of ts_LiteralExpression  | `U_n_100 of ts_LiteralExpression  | `U_n_101 of ts_LiteralExpression  | `U_n_102 of ts_LiteralExpression  | `U_n_103 of (ts_LiteralExpression, ts_NullLiteral) union2  | `U_n_104 of ts_LiteralExpression  | `U_n_105 of ts_LiteralExpression  | `U_n_106 of ts_LiteralExpression  | `U_n_107 of ts_LiteralExpression  | `U_n_108 of ts_LiteralExpression  | `U_n_109 of (ts_LiteralExpression, ts_BooleanLiteral) union2  | `U_n_110 of ts_LiteralExpression  | `U_n_111 of ts_LiteralExpression  | `U_n_112 of ts_LiteralExpression  | `U_n_113 of ts_LiteralExpression  | `U_n_114 of ts_LiteralExpression  | `U_n_115 of ts_LiteralExpression  | `U_n_116 of ts_LiteralExpression  | `U_n_117 of ts_LiteralExpression  | `U_n_118 of ts_LiteralExpression  | `U_n_119 of ts_LiteralExpression  | `U_n_120 of ts_LiteralExpression  | `U_n_121 of ts_LiteralExpression  | `U_n_122 of ts_LiteralExpression  | `U_n_123 of ts_LiteralExpression  | `U_n_124 of ts_LiteralExpression  | `U_n_125 of ts_LiteralExpression  | `U_n_126 of ts_LiteralExpression  | `U_n_127 of ts_LiteralExpression  | `U_n_128 of ts_LiteralExpression  | `U_n_129 of ts_LiteralExpression  | `U_n_130 of ts_LiteralExpression  | `U_n_131 of ts_LiteralExpression  | `U_n_132 of ts_LiteralExpression  | `U_n_133 of ts_LiteralExpression  | `U_n_134 of ts_LiteralExpression  | `U_n_135 of ts_LiteralExpression  | `U_n_136 of ts_LiteralExpression  | `U_n_137 of ts_LiteralExpression  | `U_n_138 of ts_LiteralExpression  | `U_n_139 of ts_LiteralExpression  | `U_n_140 of ts_LiteralExpression  | `U_n_141 of ts_LiteralExpression  | `U_n_142 of ts_LiteralExpression  | `U_n_143 of ts_LiteralExpression  | `U_n_144 of ts_LiteralExpression  | `U_n_145 of ts_LiteralExpression  | `U_n_146 of ts_LiteralExpression  | `U_n_147 of ts_LiteralExpression  | `U_n_148 of ts_LiteralExpression  | `U_n_149 of ts_LiteralExpression  | `U_n_150 of ts_LiteralExpression  | `U_n_151 of ts_LiteralExpression  | `U_n_152 of ts_LiteralExpression  | `U_n_153 of ts_LiteralExpression  | `U_n_154 of ts_LiteralExpression  | `U_n_155 of ts_LiteralExpression  | `U_n_156 of ts_LiteralExpression  | `U_n_157 of ts_LiteralExpression  | `U_n_158 of ts_LiteralExpression  | `U_n_159 of ts_LiteralExpression  | `U_n_160 of ts_LiteralExpression  | `U_n_161 of ts_LiteralExpression  | `U_n_162 of ts_LiteralExpression  | `U_n_163 of ts_LiteralExpression  | `U_n_164 of ts_LiteralExpression  | `U_n_165 of ts_LiteralExpression  | `U_n_166 of ts_LiteralExpression  | `U_n_167 of ts_LiteralExpression  | `U_n_168 of ts_LiteralExpression  | `U_n_169 of ts_LiteralExpression  | `U_n_170 of ts_LiteralExpression  | `U_n_171 of ts_LiteralExpression  | `U_n_172 of ts_LiteralExpression  | `U_n_173 of ts_LiteralExpression  | `U_n_174 of ts_LiteralExpression  | `U_n_175 of ts_LiteralExpression  | `U_n_176 of ts_LiteralExpression  | `U_n_177 of ts_LiteralExpression  | `U_n_178 of ts_LiteralExpression  | `U_n_179 of ts_LiteralExpression  | `U_n_180 of ts_LiteralExpression  | `U_n_181 of ts_LiteralExpression  | `U_n_182 of ts_LiteralExpression  | `U_n_183 of ts_LiteralExpression  | `U_n_184 of ts_LiteralExpression  | `U_n_185 of ts_LiteralExpression  | `U_n_186 of ts_LiteralExpression  | `U_n_187 of ts_LiteralExpression  | `U_n_188 of ts_LiteralExpression  | `U_n_189 of ts_LiteralExpression  | `U_n_190 of ts_LiteralExpression  | `U_n_191 of ts_LiteralExpression  | `U_n_192 of ts_LiteralExpression  | `U_n_193 of ts_LiteralExpression  | `U_n_194 of ts_LiteralExpression  | `U_n_195 of ts_LiteralExpression  | `U_n_196 of ts_LiteralExpression  | `U_n_197 of ts_LiteralExpression  | `U_n_198 of ts_LiteralExpression  | `U_n_199 of ts_LiteralExpression  | `U_n_200 of ts_LiteralExpression  | `U_n_201 of ts_LiteralExpression  | `U_n_202 of ts_LiteralExpression  | `U_n_203 of ts_LiteralExpression  | `U_n_204 of ts_LiteralExpression  | `U_n_205 of ts_LiteralExpression  | `U_n_206 of ts_LiteralExpression  | `U_n_207 of ts_LiteralExpression  | `U_n_208 of ts_LiteralExpression  | `U_n_209 of ts_LiteralExpression  | `U_n_210 of ts_LiteralExpression  | `U_n_211 of ts_LiteralExpression  | `U_n_212 of ts_LiteralExpression  | `U_n_213 of ts_LiteralExpression  | `U_n_214 of (ts_LiteralExpression, ts_PrefixUnaryExpression) union2  | `U_n_215 of ts_LiteralExpression  | `U_n_216 of ts_LiteralExpression  | `U_n_217 of ts_LiteralExpression  | `U_n_218 of ts_LiteralExpression  | `U_n_219 of ts_LiteralExpression  | `U_n_220 of ts_LiteralExpression  | `U_n_221 of ts_LiteralExpression  | `U_n_222 of ts_LiteralExpression  | `U_n_223 of ts_LiteralExpression  | `U_n_224 of ts_LiteralExpression  | `U_n_225 of ts_LiteralExpression  | `U_n_226 of ts_LiteralExpression  | `U_n_227 of ts_LiteralExpression  | `U_n_228 of ts_LiteralExpression  | `U_n_229 of ts_LiteralExpression  | `U_n_230 of ts_LiteralExpression  | `U_n_231 of ts_LiteralExpression  | `U_n_232 of ts_LiteralExpression  | `U_n_233 of ts_LiteralExpression  | `U_n_234 of ts_LiteralExpression  | `U_n_235 of ts_LiteralExpression  | `U_n_236 of ts_LiteralExpression  | `U_n_237 of ts_LiteralExpression  | `U_n_238 of ts_LiteralExpression  | `U_n_239 of ts_LiteralExpression  | `U_n_240 of ts_LiteralExpression  | `U_n_241 of ts_LiteralExpression  | `U_n_242 of ts_LiteralExpression  | `U_n_243 of ts_LiteralExpression  | `U_n_244 of ts_LiteralExpression  | `U_n_245 of ts_LiteralExpression  | `U_n_246 of ts_LiteralExpression  | `U_n_247 of ts_LiteralExpression  | `U_n_248 of ts_LiteralExpression  | `U_n_249 of ts_LiteralExpression  | `U_n_250 of ts_LiteralExpression  | `U_n_251 of ts_LiteralExpression  | `U_n_252 of ts_LiteralExpression  | `U_n_253 of ts_LiteralExpression  | `U_n_254 of ts_LiteralExpression  | `U_n_255 of ts_LiteralExpression  | `U_n_256 of ts_LiteralExpression  | `U_n_257 of ts_LiteralExpression  | `U_n_258 of ts_LiteralExpression  | `U_n_259 of ts_LiteralExpression  | `U_n_260 of ts_LiteralExpression  | `U_n_261 of ts_LiteralExpression  | `U_n_262 of ts_LiteralExpression  | `U_n_263 of ts_LiteralExpression  | `U_n_264 of ts_LiteralExpression  | `U_n_265 of ts_LiteralExpression  | `U_n_266 of ts_LiteralExpression  | `U_n_267 of ts_LiteralExpression  | `U_n_268 of ts_LiteralExpression  | `U_n_269 of ts_LiteralExpression  | `U_n_270 of ts_LiteralExpression  | `U_n_271 of ts_LiteralExpression  | `U_n_272 of ts_LiteralExpression  | `U_n_273 of ts_LiteralExpression  | `U_n_274 of ts_LiteralExpression  | `U_n_275 of ts_LiteralExpression  | `U_n_276 of ts_LiteralExpression  | `U_n_277 of ts_LiteralExpression  | `U_n_278 of ts_LiteralExpression  | `U_n_279 of ts_LiteralExpression  | `U_n_280 of ts_LiteralExpression  | `U_n_281 of ts_LiteralExpression  | `U_n_282 of ts_LiteralExpression  | `U_n_283 of ts_LiteralExpression  | `U_n_284 of ts_LiteralExpression  | `U_n_285 of ts_LiteralExpression  | `U_n_286 of ts_LiteralExpression  | `U_n_287 of ts_LiteralExpression  | `U_n_288 of ts_LiteralExpression  | `U_n_289 of ts_LiteralExpression  | `U_n_290 of ts_LiteralExpression  | `U_n_291 of ts_LiteralExpression  | `U_n_292 of ts_LiteralExpression  | `U_n_293 of ts_LiteralExpression  | `U_n_294 of ts_LiteralExpression  | `U_n_295 of ts_LiteralExpression  | `U_n_296 of ts_LiteralExpression  | `U_n_297 of ts_LiteralExpression  | `U_n_298 of ts_LiteralExpression  | `U_n_299 of ts_LiteralExpression  | `U_n_300 of ts_LiteralExpression  | `U_n_301 of ts_LiteralExpression  | `U_n_302 of ts_LiteralExpression  | `U_n_303 of ts_LiteralExpression  | `U_n_304 of ts_LiteralExpression  | `U_n_305 of ts_LiteralExpression  | `U_n_306 of ts_LiteralExpression  | `U_n_307 of ts_LiteralExpression  | `U_n_308 of ts_LiteralExpression  | `U_n_309 of ts_LiteralExpression  | `U_n_310 of ts_LiteralExpression  | `U_n_311 of ts_LiteralExpression  | `U_n_312 of ts_LiteralExpression  | `U_n_313 of ts_LiteralExpression  | `U_n_314 of ts_LiteralExpression  | `U_n_315 of ts_LiteralExpression  | `U_n_316 of ts_LiteralExpression  | `U_n_317 of ts_LiteralExpression  | `U_n_318 of ts_LiteralExpression  | `U_n_319 of ts_LiteralExpression  | `U_n_320 of ts_LiteralExpression  | `U_n_321 of ts_LiteralExpression  | `U_n_322 of ts_LiteralExpression  | `U_n_323 of ts_LiteralExpression  | `U_n_324 of ts_LiteralExpression  | `U_n_325 of ts_LiteralExpression  | `U_n_326 of ts_LiteralExpression  | `U_n_327 of ts_LiteralExpression  | `U_n_328 of ts_LiteralExpression  | `U_n_329 of ts_LiteralExpression  | `U_n_330 of ts_LiteralExpression  | `U_n_331 of ts_LiteralExpression  | `U_n_332 of ts_LiteralExpression  | `U_n_333 of ts_LiteralExpression  | `U_n_334 of ts_LiteralExpression  | `U_n_335 of ts_LiteralExpression  | `U_n_336 of ts_LiteralExpression  | `U_n_337 of ts_LiteralExpression  | `U_n_338 of ts_LiteralExpression  | `U_n_339 of ts_LiteralExpression  | `U_n_340 of ts_LiteralExpression  | `U_n_341 of ts_LiteralExpression ] [@js.union on_field "kind"]) -> ts_LiteralTypeNode [@@js.global "createLiteralTypeNode"]
  (** @deprecated Use `factory.updateLiteralTypeNode` or the factory supplied by your transformation context instead. *)
  val updateLiteralTypeNode: node:ts_LiteralTypeNode -> literal:([`U_n_0 of ts_LiteralExpression  | `U_n_1 of ts_LiteralExpression  | `U_n_2 of ts_LiteralExpression  | `U_n_3 of ts_LiteralExpression  | `U_n_4 of ts_LiteralExpression  | `U_n_5 of ts_LiteralExpression  | `U_n_6 of ts_LiteralExpression  | `U_n_7 of ts_LiteralExpression  | `U_n_8 of ts_LiteralExpression  | `U_n_9 of ts_LiteralExpression  | `U_n_10 of ts_LiteralExpression  | `U_n_11 of ts_LiteralExpression  | `U_n_12 of ts_LiteralExpression  | `U_n_13 of ts_LiteralExpression  | `U_n_14 of ts_LiteralExpression  | `U_n_15 of ts_LiteralExpression  | `U_n_16 of ts_LiteralExpression  | `U_n_17 of ts_LiteralExpression  | `U_n_18 of ts_LiteralExpression  | `U_n_19 of ts_LiteralExpression  | `U_n_20 of ts_LiteralExpression  | `U_n_21 of ts_LiteralExpression  | `U_n_22 of ts_LiteralExpression  | `U_n_23 of ts_LiteralExpression  | `U_n_24 of ts_LiteralExpression  | `U_n_25 of ts_LiteralExpression  | `U_n_26 of ts_LiteralExpression  | `U_n_27 of ts_LiteralExpression  | `U_n_28 of ts_LiteralExpression  | `U_n_29 of ts_LiteralExpression  | `U_n_30 of ts_LiteralExpression  | `U_n_31 of ts_LiteralExpression  | `U_n_32 of ts_LiteralExpression  | `U_n_33 of ts_LiteralExpression  | `U_n_34 of ts_LiteralExpression  | `U_n_35 of ts_LiteralExpression  | `U_n_36 of ts_LiteralExpression  | `U_n_37 of ts_LiteralExpression  | `U_n_38 of ts_LiteralExpression  | `U_n_39 of ts_LiteralExpression  | `U_n_40 of ts_LiteralExpression  | `U_n_41 of ts_LiteralExpression  | `U_n_42 of ts_LiteralExpression  | `U_n_43 of ts_LiteralExpression  | `U_n_44 of ts_LiteralExpression  | `U_n_45 of ts_LiteralExpression  | `U_n_46 of ts_LiteralExpression  | `U_n_47 of ts_LiteralExpression  | `U_n_48 of ts_LiteralExpression  | `U_n_49 of ts_LiteralExpression  | `U_n_50 of ts_LiteralExpression  | `U_n_51 of ts_LiteralExpression  | `U_n_52 of ts_LiteralExpression  | `U_n_53 of ts_LiteralExpression  | `U_n_54 of ts_LiteralExpression  | `U_n_55 of ts_LiteralExpression  | `U_n_56 of ts_LiteralExpression  | `U_n_57 of ts_LiteralExpression  | `U_n_58 of ts_LiteralExpression  | `U_n_59 of ts_LiteralExpression  | `U_n_60 of ts_LiteralExpression  | `U_n_61 of ts_LiteralExpression  | `U_n_62 of ts_LiteralExpression  | `U_n_63 of ts_LiteralExpression  | `U_n_64 of ts_LiteralExpression  | `U_n_65 of ts_LiteralExpression  | `U_n_66 of ts_LiteralExpression  | `U_n_67 of ts_LiteralExpression  | `U_n_68 of ts_LiteralExpression  | `U_n_69 of ts_LiteralExpression  | `U_n_70 of ts_LiteralExpression  | `U_n_71 of ts_LiteralExpression  | `U_n_72 of ts_LiteralExpression  | `U_n_73 of ts_LiteralExpression  | `U_n_74 of ts_LiteralExpression  | `U_n_75 of ts_LiteralExpression  | `U_n_76 of ts_LiteralExpression  | `U_n_77 of ts_LiteralExpression  | `U_n_78 of ts_LiteralExpression  | `U_n_79 of ts_LiteralExpression  | `U_n_80 of ts_LiteralExpression  | `U_n_81 of ts_LiteralExpression  | `U_n_82 of ts_LiteralExpression  | `U_n_83 of ts_LiteralExpression  | `U_n_84 of ts_LiteralExpression  | `U_n_85 of ts_LiteralExpression  | `U_n_86 of ts_LiteralExpression  | `U_n_87 of ts_LiteralExpression  | `U_n_88 of ts_LiteralExpression  | `U_n_89 of ts_LiteralExpression  | `U_n_90 of ts_LiteralExpression  | `U_n_91 of ts_LiteralExpression  | `U_n_92 of ts_LiteralExpression  | `U_n_93 of ts_LiteralExpression  | `U_n_94 of (ts_LiteralExpression, ts_BooleanLiteral) union2  | `U_n_95 of ts_LiteralExpression  | `U_n_96 of ts_LiteralExpression  | `U_n_97 of ts_LiteralExpression  | `U_n_98 of ts_LiteralExpression  | `U_n_99 of ts_LiteralExpression  | `U_n_100 of ts_LiteralExpression  | `U_n_101 of ts_LiteralExpression  | `U_n_102 of ts_LiteralExpression  | `U_n_103 of (ts_LiteralExpression, ts_NullLiteral) union2  | `U_n_104 of ts_LiteralExpression  | `U_n_105 of ts_LiteralExpression  | `U_n_106 of ts_LiteralExpression  | `U_n_107 of ts_LiteralExpression  | `U_n_108 of ts_LiteralExpression  | `U_n_109 of (ts_LiteralExpression, ts_BooleanLiteral) union2  | `U_n_110 of ts_LiteralExpression  | `U_n_111 of ts_LiteralExpression  | `U_n_112 of ts_LiteralExpression  | `U_n_113 of ts_LiteralExpression  | `U_n_114 of ts_LiteralExpression  | `U_n_115 of ts_LiteralExpression  | `U_n_116 of ts_LiteralExpression  | `U_n_117 of ts_LiteralExpression  | `U_n_118 of ts_LiteralExpression  | `U_n_119 of ts_LiteralExpression  | `U_n_120 of ts_LiteralExpression  | `U_n_121 of ts_LiteralExpression  | `U_n_122 of ts_LiteralExpression  | `U_n_123 of ts_LiteralExpression  | `U_n_124 of ts_LiteralExpression  | `U_n_125 of ts_LiteralExpression  | `U_n_126 of ts_LiteralExpression  | `U_n_127 of ts_LiteralExpression  | `U_n_128 of ts_LiteralExpression  | `U_n_129 of ts_LiteralExpression  | `U_n_130 of ts_LiteralExpression  | `U_n_131 of ts_LiteralExpression  | `U_n_132 of ts_LiteralExpression  | `U_n_133 of ts_LiteralExpression  | `U_n_134 of ts_LiteralExpression  | `U_n_135 of ts_LiteralExpression  | `U_n_136 of ts_LiteralExpression  | `U_n_137 of ts_LiteralExpression  | `U_n_138 of ts_LiteralExpression  | `U_n_139 of ts_LiteralExpression  | `U_n_140 of ts_LiteralExpression  | `U_n_141 of ts_LiteralExpression  | `U_n_142 of ts_LiteralExpression  | `U_n_143 of ts_LiteralExpression  | `U_n_144 of ts_LiteralExpression  | `U_n_145 of ts_LiteralExpression  | `U_n_146 of ts_LiteralExpression  | `U_n_147 of ts_LiteralExpression  | `U_n_148 of ts_LiteralExpression  | `U_n_149 of ts_LiteralExpression  | `U_n_150 of ts_LiteralExpression  | `U_n_151 of ts_LiteralExpression  | `U_n_152 of ts_LiteralExpression  | `U_n_153 of ts_LiteralExpression  | `U_n_154 of ts_LiteralExpression  | `U_n_155 of ts_LiteralExpression  | `U_n_156 of ts_LiteralExpression  | `U_n_157 of ts_LiteralExpression  | `U_n_158 of ts_LiteralExpression  | `U_n_159 of ts_LiteralExpression  | `U_n_160 of ts_LiteralExpression  | `U_n_161 of ts_LiteralExpression  | `U_n_162 of ts_LiteralExpression  | `U_n_163 of ts_LiteralExpression  | `U_n_164 of ts_LiteralExpression  | `U_n_165 of ts_LiteralExpression  | `U_n_166 of ts_LiteralExpression  | `U_n_167 of ts_LiteralExpression  | `U_n_168 of ts_LiteralExpression  | `U_n_169 of ts_LiteralExpression  | `U_n_170 of ts_LiteralExpression  | `U_n_171 of ts_LiteralExpression  | `U_n_172 of ts_LiteralExpression  | `U_n_173 of ts_LiteralExpression  | `U_n_174 of ts_LiteralExpression  | `U_n_175 of ts_LiteralExpression  | `U_n_176 of ts_LiteralExpression  | `U_n_177 of ts_LiteralExpression  | `U_n_178 of ts_LiteralExpression  | `U_n_179 of ts_LiteralExpression  | `U_n_180 of ts_LiteralExpression  | `U_n_181 of ts_LiteralExpression  | `U_n_182 of ts_LiteralExpression  | `U_n_183 of ts_LiteralExpression  | `U_n_184 of ts_LiteralExpression  | `U_n_185 of ts_LiteralExpression  | `U_n_186 of ts_LiteralExpression  | `U_n_187 of ts_LiteralExpression  | `U_n_188 of ts_LiteralExpression  | `U_n_189 of ts_LiteralExpression  | `U_n_190 of ts_LiteralExpression  | `U_n_191 of ts_LiteralExpression  | `U_n_192 of ts_LiteralExpression  | `U_n_193 of ts_LiteralExpression  | `U_n_194 of ts_LiteralExpression  | `U_n_195 of ts_LiteralExpression  | `U_n_196 of ts_LiteralExpression  | `U_n_197 of ts_LiteralExpression  | `U_n_198 of ts_LiteralExpression  | `U_n_199 of ts_LiteralExpression  | `U_n_200 of ts_LiteralExpression  | `U_n_201 of ts_LiteralExpression  | `U_n_202 of ts_LiteralExpression  | `U_n_203 of ts_LiteralExpression  | `U_n_204 of ts_LiteralExpression  | `U_n_205 of ts_LiteralExpression  | `U_n_206 of ts_LiteralExpression  | `U_n_207 of ts_LiteralExpression  | `U_n_208 of ts_LiteralExpression  | `U_n_209 of ts_LiteralExpression  | `U_n_210 of ts_LiteralExpression  | `U_n_211 of ts_LiteralExpression  | `U_n_212 of ts_LiteralExpression  | `U_n_213 of ts_LiteralExpression  | `U_n_214 of (ts_LiteralExpression, ts_PrefixUnaryExpression) union2  | `U_n_215 of ts_LiteralExpression  | `U_n_216 of ts_LiteralExpression  | `U_n_217 of ts_LiteralExpression  | `U_n_218 of ts_LiteralExpression  | `U_n_219 of ts_LiteralExpression  | `U_n_220 of ts_LiteralExpression  | `U_n_221 of ts_LiteralExpression  | `U_n_222 of ts_LiteralExpression  | `U_n_223 of ts_LiteralExpression  | `U_n_224 of ts_LiteralExpression  | `U_n_225 of ts_LiteralExpression  | `U_n_226 of ts_LiteralExpression  | `U_n_227 of ts_LiteralExpression  | `U_n_228 of ts_LiteralExpression  | `U_n_229 of ts_LiteralExpression  | `U_n_230 of ts_LiteralExpression  | `U_n_231 of ts_LiteralExpression  | `U_n_232 of ts_LiteralExpression  | `U_n_233 of ts_LiteralExpression  | `U_n_234 of ts_LiteralExpression  | `U_n_235 of ts_LiteralExpression  | `U_n_236 of ts_LiteralExpression  | `U_n_237 of ts_LiteralExpression  | `U_n_238 of ts_LiteralExpression  | `U_n_239 of ts_LiteralExpression  | `U_n_240 of ts_LiteralExpression  | `U_n_241 of ts_LiteralExpression  | `U_n_242 of ts_LiteralExpression  | `U_n_243 of ts_LiteralExpression  | `U_n_244 of ts_LiteralExpression  | `U_n_245 of ts_LiteralExpression  | `U_n_246 of ts_LiteralExpression  | `U_n_247 of ts_LiteralExpression  | `U_n_248 of ts_LiteralExpression  | `U_n_249 of ts_LiteralExpression  | `U_n_250 of ts_LiteralExpression  | `U_n_251 of ts_LiteralExpression  | `U_n_252 of ts_LiteralExpression  | `U_n_253 of ts_LiteralExpression  | `U_n_254 of ts_LiteralExpression  | `U_n_255 of ts_LiteralExpression  | `U_n_256 of ts_LiteralExpression  | `U_n_257 of ts_LiteralExpression  | `U_n_258 of ts_LiteralExpression  | `U_n_259 of ts_LiteralExpression  | `U_n_260 of ts_LiteralExpression  | `U_n_261 of ts_LiteralExpression  | `U_n_262 of ts_LiteralExpression  | `U_n_263 of ts_LiteralExpression  | `U_n_264 of ts_LiteralExpression  | `U_n_265 of ts_LiteralExpression  | `U_n_266 of ts_LiteralExpression  | `U_n_267 of ts_LiteralExpression  | `U_n_268 of ts_LiteralExpression  | `U_n_269 of ts_LiteralExpression  | `U_n_270 of ts_LiteralExpression  | `U_n_271 of ts_LiteralExpression  | `U_n_272 of ts_LiteralExpression  | `U_n_273 of ts_LiteralExpression  | `U_n_274 of ts_LiteralExpression  | `U_n_275 of ts_LiteralExpression  | `U_n_276 of ts_LiteralExpression  | `U_n_277 of ts_LiteralExpression  | `U_n_278 of ts_LiteralExpression  | `U_n_279 of ts_LiteralExpression  | `U_n_280 of ts_LiteralExpression  | `U_n_281 of ts_LiteralExpression  | `U_n_282 of ts_LiteralExpression  | `U_n_283 of ts_LiteralExpression  | `U_n_284 of ts_LiteralExpression  | `U_n_285 of ts_LiteralExpression  | `U_n_286 of ts_LiteralExpression  | `U_n_287 of ts_LiteralExpression  | `U_n_288 of ts_LiteralExpression  | `U_n_289 of ts_LiteralExpression  | `U_n_290 of ts_LiteralExpression  | `U_n_291 of ts_LiteralExpression  | `U_n_292 of ts_LiteralExpression  | `U_n_293 of ts_LiteralExpression  | `U_n_294 of ts_LiteralExpression  | `U_n_295 of ts_LiteralExpression  | `U_n_296 of ts_LiteralExpression  | `U_n_297 of ts_LiteralExpression  | `U_n_298 of ts_LiteralExpression  | `U_n_299 of ts_LiteralExpression  | `U_n_300 of ts_LiteralExpression  | `U_n_301 of ts_LiteralExpression  | `U_n_302 of ts_LiteralExpression  | `U_n_303 of ts_LiteralExpression  | `U_n_304 of ts_LiteralExpression  | `U_n_305 of ts_LiteralExpression  | `U_n_306 of ts_LiteralExpression  | `U_n_307 of ts_LiteralExpression  | `U_n_308 of ts_LiteralExpression  | `U_n_309 of ts_LiteralExpression  | `U_n_310 of ts_LiteralExpression  | `U_n_311 of ts_LiteralExpression  | `U_n_312 of ts_LiteralExpression  | `U_n_313 of ts_LiteralExpression  | `U_n_314 of ts_LiteralExpression  | `U_n_315 of ts_LiteralExpression  | `U_n_316 of ts_LiteralExpression  | `U_n_317 of ts_LiteralExpression  | `U_n_318 of ts_LiteralExpression  | `U_n_319 of ts_LiteralExpression  | `U_n_320 of ts_LiteralExpression  | `U_n_321 of ts_LiteralExpression  | `U_n_322 of ts_LiteralExpression  | `U_n_323 of ts_LiteralExpression  | `U_n_324 of ts_LiteralExpression  | `U_n_325 of ts_LiteralExpression  | `U_n_326 of ts_LiteralExpression  | `U_n_327 of ts_LiteralExpression  | `U_n_328 of ts_LiteralExpression  | `U_n_329 of ts_LiteralExpression  | `U_n_330 of ts_LiteralExpression  | `U_n_331 of ts_LiteralExpression  | `U_n_332 of ts_LiteralExpression  | `U_n_333 of ts_LiteralExpression  | `U_n_334 of ts_LiteralExpression  | `U_n_335 of ts_LiteralExpression  | `U_n_336 of ts_LiteralExpression  | `U_n_337 of ts_LiteralExpression  | `U_n_338 of ts_LiteralExpression  | `U_n_339 of ts_LiteralExpression  | `U_n_340 of ts_LiteralExpression  | `U_n_341 of ts_LiteralExpression ] [@js.union on_field "kind"]) -> ts_LiteralTypeNode [@@js.global "updateLiteralTypeNode"]
  (** @deprecated Use `factory.createObjectBindingPattern` or the factory supplied by your transformation context instead. *)
  val createObjectBindingPattern: elements:ts_BindingElement list -> ts_ObjectBindingPattern [@@js.global "createObjectBindingPattern"]
  (** @deprecated Use `factory.updateObjectBindingPattern` or the factory supplied by your transformation context instead. *)
  val updateObjectBindingPattern: node:ts_ObjectBindingPattern -> elements:ts_BindingElement list -> ts_ObjectBindingPattern [@@js.global "updateObjectBindingPattern"]
  (** @deprecated Use `factory.createArrayBindingPattern` or the factory supplied by your transformation context instead. *)
  val createArrayBindingPattern: elements:ts_ArrayBindingElement list -> ts_ArrayBindingPattern [@@js.global "createArrayBindingPattern"]
  (** @deprecated Use `factory.updateArrayBindingPattern` or the factory supplied by your transformation context instead. *)
  val updateArrayBindingPattern: node:ts_ArrayBindingPattern -> elements:ts_ArrayBindingElement list -> ts_ArrayBindingPattern [@@js.global "updateArrayBindingPattern"]
  (** @deprecated Use `factory.createBindingElement` or the factory supplied by your transformation context instead. *)
  val createBindingElement: dotDotDotToken:ts_DotDotDotToken or_undefined -> propertyName:ts_PropertyName or_string or_undefined -> name:ts_BindingName or_string -> ?initializer_:ts_Expression or_undefined -> unit -> ts_BindingElement [@@js.global "createBindingElement"]
  (** @deprecated Use `factory.updateBindingElement` or the factory supplied by your transformation context instead. *)
  val updateBindingElement: node:ts_BindingElement -> dotDotDotToken:ts_DotDotDotToken or_undefined -> propertyName:ts_PropertyName or_undefined -> name:ts_BindingName -> initializer_:ts_Expression or_undefined -> ts_BindingElement [@@js.global "updateBindingElement"]
  (** @deprecated Use `factory.createArrayLiteralExpression` or the factory supplied by your transformation context instead. *)
  val createArrayLiteral: ?elements:ts_Expression list or_undefined -> ?multiLine:bool or_undefined -> unit -> ts_ArrayLiteralExpression [@@js.global "createArrayLiteral"]
  (** @deprecated Use `factory.updateArrayLiteralExpression` or the factory supplied by your transformation context instead. *)
  val updateArrayLiteral: node:ts_ArrayLiteralExpression -> elements:ts_Expression list -> ts_ArrayLiteralExpression [@@js.global "updateArrayLiteral"]
  (** @deprecated Use `factory.createObjectLiteralExpression` or the factory supplied by your transformation context instead. *)
  val createObjectLiteral: ?properties:ts_ObjectLiteralElementLike list or_undefined -> ?multiLine:bool or_undefined -> unit -> ts_ObjectLiteralExpression [@@js.global "createObjectLiteral"]
  (** @deprecated Use `factory.updateObjectLiteralExpression` or the factory supplied by your transformation context instead. *)
  val updateObjectLiteral: node:ts_ObjectLiteralExpression -> properties:ts_ObjectLiteralElementLike list -> ts_ObjectLiteralExpression [@@js.global "updateObjectLiteral"]
  (** @deprecated Use `factory.createPropertyAccessExpression` or the factory supplied by your transformation context instead. *)
  val createPropertyAccess: expression:ts_Expression -> name:([`U_n_78 of ts_Identifier  | `U_n_79 of ts_PrivateIdentifier ] [@js.union on_field "kind"]) or_string -> ts_PropertyAccessExpression [@@js.global "createPropertyAccess"]
  (** @deprecated Use `factory.updatePropertyAccessExpression` or the factory supplied by your transformation context instead. *)
  val updatePropertyAccess: node:ts_PropertyAccessExpression -> expression:ts_Expression -> name:([`U_n_78 of ts_Identifier  | `U_n_79 of ts_PrivateIdentifier ] [@js.union on_field "kind"]) -> ts_PropertyAccessExpression [@@js.global "updatePropertyAccess"]
  (** @deprecated Use `factory.createPropertyAccessChain` or the factory supplied by your transformation context instead. *)
  val createPropertyAccessChain: expression:ts_Expression -> questionDotToken:ts_QuestionDotToken or_undefined -> name:([`U_n_78 of ts_Identifier  | `U_n_79 of ts_PrivateIdentifier ] [@js.union on_field "kind"]) or_string -> ts_PropertyAccessChain [@@js.global "createPropertyAccessChain"]
  (** @deprecated Use `factory.updatePropertyAccessChain` or the factory supplied by your transformation context instead. *)
  val updatePropertyAccessChain: node:ts_PropertyAccessChain -> expression:ts_Expression -> questionDotToken:ts_QuestionDotToken or_undefined -> name:([`U_n_78 of ts_Identifier  | `U_n_79 of ts_PrivateIdentifier ] [@js.union on_field "kind"]) -> ts_PropertyAccessChain [@@js.global "updatePropertyAccessChain"]
  (** @deprecated Use `factory.createElementAccessExpression` or the factory supplied by your transformation context instead. *)
  val createElementAccess: expression:ts_Expression -> index:ts_Expression or_number -> ts_ElementAccessExpression [@@js.global "createElementAccess"]
  (** @deprecated Use `factory.updateElementAccessExpression` or the factory supplied by your transformation context instead. *)
  val updateElementAccess: node:ts_ElementAccessExpression -> expression:ts_Expression -> argumentExpression:ts_Expression -> ts_ElementAccessExpression [@@js.global "updateElementAccess"]
  (** @deprecated Use `factory.createElementAccessChain` or the factory supplied by your transformation context instead. *)
  val createElementAccessChain: expression:ts_Expression -> questionDotToken:ts_QuestionDotToken or_undefined -> index:ts_Expression or_number -> ts_ElementAccessChain [@@js.global "createElementAccessChain"]
  (** @deprecated Use `factory.updateElementAccessChain` or the factory supplied by your transformation context instead. *)
  val updateElementAccessChain: node:ts_ElementAccessChain -> expression:ts_Expression -> questionDotToken:ts_QuestionDotToken or_undefined -> argumentExpression:ts_Expression -> ts_ElementAccessChain [@@js.global "updateElementAccessChain"]
  (** @deprecated Use `factory.createCallExpression` or the factory supplied by your transformation context instead. *)
  val createCall: expression:ts_Expression -> typeArguments:ts_TypeNode list or_undefined -> argumentsArray:ts_Expression list or_undefined -> ts_CallExpression [@@js.global "createCall"]
  (** @deprecated Use `factory.updateCallExpression` or the factory supplied by your transformation context instead. *)
  val updateCall: node:ts_CallExpression -> expression:ts_Expression -> typeArguments:ts_TypeNode list or_undefined -> argumentsArray:ts_Expression list -> ts_CallExpression [@@js.global "updateCall"]
  (** @deprecated Use `factory.createCallChain` or the factory supplied by your transformation context instead. *)
  val createCallChain: expression:ts_Expression -> questionDotToken:ts_QuestionDotToken or_undefined -> typeArguments:ts_TypeNode list or_undefined -> argumentsArray:ts_Expression list or_undefined -> ts_CallChain [@@js.global "createCallChain"]
  (** @deprecated Use `factory.updateCallChain` or the factory supplied by your transformation context instead. *)
  val updateCallChain: node:ts_CallChain -> expression:ts_Expression -> questionDotToken:ts_QuestionDotToken or_undefined -> typeArguments:ts_TypeNode list or_undefined -> argumentsArray:ts_Expression list -> ts_CallChain [@@js.global "updateCallChain"]
  (** @deprecated Use `factory.createNewExpression` or the factory supplied by your transformation context instead. *)
  val createNew: expression:ts_Expression -> typeArguments:ts_TypeNode list or_undefined -> argumentsArray:ts_Expression list or_undefined -> ts_NewExpression [@@js.global "createNew"]
  (** @deprecated Use `factory.updateNewExpression` or the factory supplied by your transformation context instead. *)
  val updateNew: node:ts_NewExpression -> expression:ts_Expression -> typeArguments:ts_TypeNode list or_undefined -> argumentsArray:ts_Expression list or_undefined -> ts_NewExpression [@@js.global "updateNew"]
  (** @deprecated Use `factory.createTypeAssertion` or the factory supplied by your transformation context instead. *)
  val createTypeAssertion: type_:ts_TypeNode -> expression:ts_Expression -> ts_TypeAssertion [@@js.global "createTypeAssertion"]
  (** @deprecated Use `factory.updateTypeAssertion` or the factory supplied by your transformation context instead. *)
  val updateTypeAssertion: node:ts_TypeAssertion -> type_:ts_TypeNode -> expression:ts_Expression -> ts_TypeAssertion [@@js.global "updateTypeAssertion"]
  (** @deprecated Use `factory.createParenthesizedExpression` or the factory supplied by your transformation context instead. *)
  val createParen: expression:ts_Expression -> ts_ParenthesizedExpression [@@js.global "createParen"]
  (** @deprecated Use `factory.updateParenthesizedExpression` or the factory supplied by your transformation context instead. *)
  val updateParen: node:ts_ParenthesizedExpression -> expression:ts_Expression -> ts_ParenthesizedExpression [@@js.global "updateParen"]
  (** @deprecated Use `factory.createFunctionExpression` or the factory supplied by your transformation context instead. *)
  val createFunctionExpression: modifiers:ts_Modifier list or_undefined -> asteriskToken:ts_AsteriskToken or_undefined -> name:ts_Identifier or_string or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list or_undefined -> type_:ts_TypeNode or_undefined -> body:ts_Block -> ts_FunctionExpression [@@js.global "createFunctionExpression"]
  (** @deprecated Use `factory.updateFunctionExpression` or the factory supplied by your transformation context instead. *)
  val updateFunctionExpression: node:ts_FunctionExpression -> modifiers:ts_Modifier list or_undefined -> asteriskToken:ts_AsteriskToken or_undefined -> name:ts_Identifier or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_Block -> ts_FunctionExpression [@@js.global "updateFunctionExpression"]
  (** @deprecated Use `factory.createDeleteExpression` or the factory supplied by your transformation context instead. *)
  val createDelete: expression:ts_Expression -> ts_DeleteExpression [@@js.global "createDelete"]
  (** @deprecated Use `factory.updateDeleteExpression` or the factory supplied by your transformation context instead. *)
  val updateDelete: node:ts_DeleteExpression -> expression:ts_Expression -> ts_DeleteExpression [@@js.global "updateDelete"]
  (** @deprecated Use `factory.createTypeOfExpression` or the factory supplied by your transformation context instead. *)
  val createTypeOf: expression:ts_Expression -> ts_TypeOfExpression [@@js.global "createTypeOf"]
  (** @deprecated Use `factory.updateTypeOfExpression` or the factory supplied by your transformation context instead. *)
  val updateTypeOf: node:ts_TypeOfExpression -> expression:ts_Expression -> ts_TypeOfExpression [@@js.global "updateTypeOf"]
  (** @deprecated Use `factory.createVoidExpression` or the factory supplied by your transformation context instead. *)
  val createVoid: expression:ts_Expression -> ts_VoidExpression [@@js.global "createVoid"]
  (** @deprecated Use `factory.updateVoidExpression` or the factory supplied by your transformation context instead. *)
  val updateVoid: node:ts_VoidExpression -> expression:ts_Expression -> ts_VoidExpression [@@js.global "updateVoid"]
  (** @deprecated Use `factory.createAwaitExpression` or the factory supplied by your transformation context instead. *)
  val createAwait: expression:ts_Expression -> ts_AwaitExpression [@@js.global "createAwait"]
  (** @deprecated Use `factory.updateAwaitExpression` or the factory supplied by your transformation context instead. *)
  val updateAwait: node:ts_AwaitExpression -> expression:ts_Expression -> ts_AwaitExpression [@@js.global "updateAwait"]
  (** @deprecated Use `factory.createPrefixExpression` or the factory supplied by your transformation context instead. *)
  val createPrefix: operator:ts_PrefixUnaryOperator -> operand:ts_Expression -> ts_PrefixUnaryExpression [@@js.global "createPrefix"]
  (** @deprecated Use `factory.updatePrefixExpression` or the factory supplied by your transformation context instead. *)
  val updatePrefix: node:ts_PrefixUnaryExpression -> operand:ts_Expression -> ts_PrefixUnaryExpression [@@js.global "updatePrefix"]
  (** @deprecated Use `factory.createPostfixUnaryExpression` or the factory supplied by your transformation context instead. *)
  val createPostfix: operand:ts_Expression -> operator:ts_PostfixUnaryOperator -> ts_PostfixUnaryExpression [@@js.global "createPostfix"]
  (** @deprecated Use `factory.updatePostfixUnaryExpression` or the factory supplied by your transformation context instead. *)
  val updatePostfix: node:ts_PostfixUnaryExpression -> operand:ts_Expression -> ts_PostfixUnaryExpression [@@js.global "updatePostfix"]
  (** @deprecated Use `factory.createBinaryExpression` or the factory supplied by your transformation context instead. *)
  val createBinary: left:ts_Expression -> operator:((((((((((((((((((((((((((((((((((((((((((((((((((((((((ts_SyntaxKind_PercentEqualsToken, ts_SyntaxKind_PercentToken, ts_SyntaxKind_PlusEqualsToken, ts_SyntaxKind_PlusToken, ts_SyntaxKind_QuestionQuestionEqualsToken, ts_SyntaxKind_QuestionQuestionToken, ts_SyntaxKind_SlashEqualsToken, ts_SyntaxKind_SlashToken) union8, ts_SyntaxKind_MinusToken) or_, ts_SyntaxKind_MinusEqualsToken) or_, ts_SyntaxKind_LessThanToken) or_, ts_SyntaxKind_LessThanLessThanToken) or_, ts_SyntaxKind_LessThanLessThanEqualsToken) or_, ts_SyntaxKind_LessThanEqualsToken) or_, ts_SyntaxKind_InstanceOfKeyword) or_, ts_SyntaxKind_InKeyword) or_, ts_SyntaxKind_GreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsEqualsToken) or_, ts_SyntaxKind_EqualsToken) or_, ts_SyntaxKind_EqualsEqualsToken) or_, ts_SyntaxKind_EqualsEqualsEqualsToken) or_, ts_SyntaxKind_CommaToken) or_, ts_SyntaxKind_CaretToken) or_, ts_SyntaxKind_CaretEqualsToken) or_, ts_SyntaxKind_BarToken) or_, ts_SyntaxKind_BarEqualsToken) or_, ts_SyntaxKind_BarBarToken) or_, ts_SyntaxKind_BarBarEqualsToken) or_, ts_SyntaxKind_AsteriskToken) or_, ts_SyntaxKind_AsteriskEqualsToken) or_, ts_SyntaxKind_AsteriskAsteriskToken) or_, ts_SyntaxKind_AsteriskAsteriskEqualsToken) or_, ts_SyntaxKind_AmpersandToken) or_, ts_SyntaxKind_AmpersandEqualsToken) or_, ts_SyntaxKind_AmpersandAmpersandToken) or_, ts_SyntaxKind_AmpersandAmpersandEqualsToken) or_, ts_ShiftOperatorOrHigher) or_, ts_ShiftOperator) or_, ts_RelationalOperatorOrHigher) or_, ts_RelationalOperator) or_, ts_MultiplicativeOperatorOrHigher) or_, ts_MultiplicativeOperator) or_, ts_LogicalOperatorOrHigher) or_, ts_LogicalOperator) or_, ts_ExponentiationOperator) or_, ts_EqualityOperatorOrHigher) or_, ts_EqualityOperator) or_, ts_CompoundAssignmentOperator) or_, ts_BitwiseOperatorOrHigher) or_, ts_BitwiseOperator) or_, ts_BinaryOperatorToken) or_, ts_BinaryOperator) or_, ts_AssignmentOperatorOrHigher) or_, ts_AssignmentOperator) or_, ts_AdditiveOperatorOrHigher) or_, ts_AdditiveOperator) or_, ([`AmpersandAmpersandEqualsToken | `AmpersandAmpersandToken | `AmpersandEqualsToken | `AmpersandToken | `AsteriskAsteriskEqualsToken | `AsteriskAsteriskToken | `AsteriskEqualsToken | `AsteriskToken | `BarBarEqualsToken | `BarBarToken | `BarEqualsToken | `BarToken | `CaretEqualsToken | `CaretToken | `CommaToken | `EqualsEqualsEqualsToken | `EqualsEqualsToken | `EqualsToken | `ExclamationEqualsEqualsToken | `ExclamationEqualsToken | `GreaterThanEqualsToken | `GreaterThanGreaterThanEqualsToken | `GreaterThanGreaterThanGreaterThanEqualsToken | `GreaterThanGreaterThanGreaterThanToken | `GreaterThanGreaterThanToken | `GreaterThanToken | `InKeyword | `InstanceOfKeyword | `LessThanEqualsToken | `LessThanLessThanEqualsToken | `LessThanLessThanToken | `LessThanToken | `MinusEqualsToken | `MinusToken | `PercentEqualsToken | `PercentToken | `PlusEqualsToken | `PlusToken | `QuestionQuestionEqualsToken | `QuestionQuestionToken | `SlashEqualsToken | `SlashToken] [@js.enum])) or_enum -> right:ts_Expression -> ts_BinaryExpression [@@js.global "createBinary"]
  (** @deprecated Use `factory.updateConditionalExpression` or the factory supplied by your transformation context instead. *)
  val updateConditional: node:ts_ConditionalExpression -> condition:ts_Expression -> questionToken:ts_QuestionToken -> whenTrue:ts_Expression -> colonToken:ts_ColonToken -> whenFalse:ts_Expression -> ts_ConditionalExpression [@@js.global "updateConditional"]
  (** @deprecated Use `factory.createTemplateExpression` or the factory supplied by your transformation context instead. *)
  val createTemplateExpression: head:ts_TemplateHead -> templateSpans:ts_TemplateSpan list -> ts_TemplateExpression [@@js.global "createTemplateExpression"]
  (** @deprecated Use `factory.updateTemplateExpression` or the factory supplied by your transformation context instead. *)
  val updateTemplateExpression: node:ts_TemplateExpression -> head:ts_TemplateHead -> templateSpans:ts_TemplateSpan list -> ts_TemplateExpression [@@js.global "updateTemplateExpression"]
  (** @deprecated Use `factory.createTemplateHead` or the factory supplied by your transformation context instead. *)
  val createTemplateHead: anonymous_interface_29 [@@js.global "createTemplateHead"]
  (** @deprecated Use `factory.createTemplateMiddle` or the factory supplied by your transformation context instead. *)
  val createTemplateMiddle: anonymous_interface_30 [@@js.global "createTemplateMiddle"]
  (** @deprecated Use `factory.createTemplateTail` or the factory supplied by your transformation context instead. *)
  val createTemplateTail: anonymous_interface_31 [@@js.global "createTemplateTail"]
  (** @deprecated Use `factory.createNoSubstitutionTemplateLiteral` or the factory supplied by your transformation context instead. *)
  val createNoSubstitutionTemplateLiteral: anonymous_interface_28 [@@js.global "createNoSubstitutionTemplateLiteral"]
  (** @deprecated Use `factory.updateYieldExpression` or the factory supplied by your transformation context instead. *)
  val updateYield: node:ts_YieldExpression -> asteriskToken:ts_AsteriskToken or_undefined -> expression:ts_Expression or_undefined -> ts_YieldExpression [@@js.global "updateYield"]
  (** @deprecated Use `factory.createSpreadExpression` or the factory supplied by your transformation context instead. *)
  val createSpread: expression:ts_Expression -> ts_SpreadElement [@@js.global "createSpread"]
  (** @deprecated Use `factory.updateSpreadExpression` or the factory supplied by your transformation context instead. *)
  val updateSpread: node:ts_SpreadElement -> expression:ts_Expression -> ts_SpreadElement [@@js.global "updateSpread"]
  (** @deprecated Use `factory.createOmittedExpression` or the factory supplied by your transformation context instead. *)
  val createOmittedExpression: unit -> ts_OmittedExpression [@@js.global "createOmittedExpression"]
  (** @deprecated Use `factory.createAsExpression` or the factory supplied by your transformation context instead. *)
  val createAsExpression: expression:ts_Expression -> type_:ts_TypeNode -> ts_AsExpression [@@js.global "createAsExpression"]
  (** @deprecated Use `factory.updateAsExpression` or the factory supplied by your transformation context instead. *)
  val updateAsExpression: node:ts_AsExpression -> expression:ts_Expression -> type_:ts_TypeNode -> ts_AsExpression [@@js.global "updateAsExpression"]
  (** @deprecated Use `factory.createNonNullExpression` or the factory supplied by your transformation context instead. *)
  val createNonNullExpression: expression:ts_Expression -> ts_NonNullExpression [@@js.global "createNonNullExpression"]
  (** @deprecated Use `factory.updateNonNullExpression` or the factory supplied by your transformation context instead. *)
  val updateNonNullExpression: node:ts_NonNullExpression -> expression:ts_Expression -> ts_NonNullExpression [@@js.global "updateNonNullExpression"]
  (** @deprecated Use `factory.createNonNullChain` or the factory supplied by your transformation context instead. *)
  val createNonNullChain: expression:ts_Expression -> ts_NonNullChain [@@js.global "createNonNullChain"]
  (** @deprecated Use `factory.updateNonNullChain` or the factory supplied by your transformation context instead. *)
  val updateNonNullChain: node:ts_NonNullChain -> expression:ts_Expression -> ts_NonNullChain [@@js.global "updateNonNullChain"]
  (** @deprecated Use `factory.createMetaProperty` or the factory supplied by your transformation context instead. *)
  val createMetaProperty: keywordToken:((ts_SyntaxKind_ImportKeyword, ts_SyntaxKind_NewKeyword) union2, ([`ImportKeyword | `NewKeyword] [@js.enum])) or_enum -> name:ts_Identifier -> ts_MetaProperty [@@js.global "createMetaProperty"]
  (** @deprecated Use `factory.updateMetaProperty` or the factory supplied by your transformation context instead. *)
  val updateMetaProperty: node:ts_MetaProperty -> name:ts_Identifier -> ts_MetaProperty [@@js.global "updateMetaProperty"]
  (** @deprecated Use `factory.createTemplateSpan` or the factory supplied by your transformation context instead. *)
  val createTemplateSpan: expression:ts_Expression -> literal:([`U_n_16 of ts_TemplateMiddle  | `U_n_17 of ts_TemplateTail ] [@js.union on_field "kind"]) -> ts_TemplateSpan [@@js.global "createTemplateSpan"]
  (** @deprecated Use `factory.updateTemplateSpan` or the factory supplied by your transformation context instead. *)
  val updateTemplateSpan: node:ts_TemplateSpan -> expression:ts_Expression -> literal:([`U_n_16 of ts_TemplateMiddle  | `U_n_17 of ts_TemplateTail ] [@js.union on_field "kind"]) -> ts_TemplateSpan [@@js.global "updateTemplateSpan"]
  (** @deprecated Use `factory.createSemicolonClassElement` or the factory supplied by your transformation context instead. *)
  val createSemicolonClassElement: unit -> ts_SemicolonClassElement [@@js.global "createSemicolonClassElement"]
  (** @deprecated Use `factory.createBlock` or the factory supplied by your transformation context instead. *)
  val createBlock: statements:ts_Statement list -> ?multiLine:bool or_undefined -> unit -> ts_Block [@@js.global "createBlock"]
  (** @deprecated Use `factory.updateBlock` or the factory supplied by your transformation context instead. *)
  val updateBlock: node:ts_Block -> statements:ts_Statement list -> ts_Block [@@js.global "updateBlock"]
  (** @deprecated Use `factory.createVariableStatement` or the factory supplied by your transformation context instead. *)
  val createVariableStatement: modifiers:ts_Modifier list or_undefined -> declarationList:(ts_VariableDeclarationList, ts_VariableDeclaration list) union2 -> ts_VariableStatement [@@js.global "createVariableStatement"]
  (** @deprecated Use `factory.updateVariableStatement` or the factory supplied by your transformation context instead. *)
  val updateVariableStatement: node:ts_VariableStatement -> modifiers:ts_Modifier list or_undefined -> declarationList:ts_VariableDeclarationList -> ts_VariableStatement [@@js.global "updateVariableStatement"]
  (** @deprecated Use `factory.createEmptyStatement` or the factory supplied by your transformation context instead. *)
  val createEmptyStatement: unit -> ts_EmptyStatement [@@js.global "createEmptyStatement"]
  (** @deprecated Use `factory.createExpressionStatement` or the factory supplied by your transformation context instead. *)
  val createExpressionStatement: expression:ts_Expression -> ts_ExpressionStatement [@@js.global "createExpressionStatement"]
  (** @deprecated Use `factory.updateExpressionStatement` or the factory supplied by your transformation context instead. *)
  val updateExpressionStatement: node:ts_ExpressionStatement -> expression:ts_Expression -> ts_ExpressionStatement [@@js.global "updateExpressionStatement"]
  (** @deprecated Use `factory.createExpressionStatement` or the factory supplied by your transformation context instead. *)
  val createStatement: expression:ts_Expression -> ts_ExpressionStatement [@@js.global "createStatement"]
  (** @deprecated Use `factory.updateExpressionStatement` or the factory supplied by your transformation context instead. *)
  val updateStatement: node:ts_ExpressionStatement -> expression:ts_Expression -> ts_ExpressionStatement [@@js.global "updateStatement"]
  (** @deprecated Use `factory.createIfStatement` or the factory supplied by your transformation context instead. *)
  val createIf: expression:ts_Expression -> thenStatement:ts_Statement -> ?elseStatement:ts_Statement or_undefined -> unit -> ts_IfStatement [@@js.global "createIf"]
  (** @deprecated Use `factory.updateIfStatement` or the factory supplied by your transformation context instead. *)
  val updateIf: node:ts_IfStatement -> expression:ts_Expression -> thenStatement:ts_Statement -> elseStatement:ts_Statement or_undefined -> ts_IfStatement [@@js.global "updateIf"]
  (** @deprecated Use `factory.createDoStatement` or the factory supplied by your transformation context instead. *)
  val createDo: statement:ts_Statement -> expression:ts_Expression -> ts_DoStatement [@@js.global "createDo"]
  (** @deprecated Use `factory.updateDoStatement` or the factory supplied by your transformation context instead. *)
  val updateDo: node:ts_DoStatement -> statement:ts_Statement -> expression:ts_Expression -> ts_DoStatement [@@js.global "updateDo"]
  (** @deprecated Use `factory.createWhileStatement` or the factory supplied by your transformation context instead. *)
  val createWhile: expression:ts_Expression -> statement:ts_Statement -> ts_WhileStatement [@@js.global "createWhile"]
  (** @deprecated Use `factory.updateWhileStatement` or the factory supplied by your transformation context instead. *)
  val updateWhile: node:ts_WhileStatement -> expression:ts_Expression -> statement:ts_Statement -> ts_WhileStatement [@@js.global "updateWhile"]
  (** @deprecated Use `factory.createForStatement` or the factory supplied by your transformation context instead. *)
  val createFor: initializer_:ts_ForInitializer or_undefined -> condition:ts_Expression or_undefined -> incrementor:ts_Expression or_undefined -> statement:ts_Statement -> ts_ForStatement [@@js.global "createFor"]
  (** @deprecated Use `factory.updateForStatement` or the factory supplied by your transformation context instead. *)
  val updateFor: node:ts_ForStatement -> initializer_:ts_ForInitializer or_undefined -> condition:ts_Expression or_undefined -> incrementor:ts_Expression or_undefined -> statement:ts_Statement -> ts_ForStatement [@@js.global "updateFor"]
  (** @deprecated Use `factory.createForInStatement` or the factory supplied by your transformation context instead. *)
  val createForIn: initializer_:ts_ForInitializer -> expression:ts_Expression -> statement:ts_Statement -> ts_ForInStatement [@@js.global "createForIn"]
  (** @deprecated Use `factory.updateForInStatement` or the factory supplied by your transformation context instead. *)
  val updateForIn: node:ts_ForInStatement -> initializer_:ts_ForInitializer -> expression:ts_Expression -> statement:ts_Statement -> ts_ForInStatement [@@js.global "updateForIn"]
  (** @deprecated Use `factory.createForOfStatement` or the factory supplied by your transformation context instead. *)
  val createForOf: awaitModifier:ts_AwaitKeyword or_undefined -> initializer_:ts_ForInitializer -> expression:ts_Expression -> statement:ts_Statement -> ts_ForOfStatement [@@js.global "createForOf"]
  (** @deprecated Use `factory.updateForOfStatement` or the factory supplied by your transformation context instead. *)
  val updateForOf: node:ts_ForOfStatement -> awaitModifier:ts_AwaitKeyword or_undefined -> initializer_:ts_ForInitializer -> expression:ts_Expression -> statement:ts_Statement -> ts_ForOfStatement [@@js.global "updateForOf"]
  (** @deprecated Use `factory.createContinueStatement` or the factory supplied by your transformation context instead. *)
  val createContinue: ?label:ts_Identifier or_string or_undefined -> unit -> ts_ContinueStatement [@@js.global "createContinue"]
  (** @deprecated Use `factory.updateContinueStatement` or the factory supplied by your transformation context instead. *)
  val updateContinue: node:ts_ContinueStatement -> label:ts_Identifier or_undefined -> ts_ContinueStatement [@@js.global "updateContinue"]
  (** @deprecated Use `factory.createBreakStatement` or the factory supplied by your transformation context instead. *)
  val createBreak: ?label:ts_Identifier or_string or_undefined -> unit -> ts_BreakStatement [@@js.global "createBreak"]
  (** @deprecated Use `factory.updateBreakStatement` or the factory supplied by your transformation context instead. *)
  val updateBreak: node:ts_BreakStatement -> label:ts_Identifier or_undefined -> ts_BreakStatement [@@js.global "updateBreak"]
  (** @deprecated Use `factory.createReturnStatement` or the factory supplied by your transformation context instead. *)
  val createReturn: ?expression:ts_Expression or_undefined -> unit -> ts_ReturnStatement [@@js.global "createReturn"]
  (** @deprecated Use `factory.updateReturnStatement` or the factory supplied by your transformation context instead. *)
  val updateReturn: node:ts_ReturnStatement -> expression:ts_Expression or_undefined -> ts_ReturnStatement [@@js.global "updateReturn"]
  (** @deprecated Use `factory.createWithStatement` or the factory supplied by your transformation context instead. *)
  val createWith: expression:ts_Expression -> statement:ts_Statement -> ts_WithStatement [@@js.global "createWith"]
  (** @deprecated Use `factory.updateWithStatement` or the factory supplied by your transformation context instead. *)
  val updateWith: node:ts_WithStatement -> expression:ts_Expression -> statement:ts_Statement -> ts_WithStatement [@@js.global "updateWith"]
  (** @deprecated Use `factory.createSwitchStatement` or the factory supplied by your transformation context instead. *)
  val createSwitch: expression:ts_Expression -> caseBlock:ts_CaseBlock -> ts_SwitchStatement [@@js.global "createSwitch"]
  (** @deprecated Use `factory.updateSwitchStatement` or the factory supplied by your transformation context instead. *)
  val updateSwitch: node:ts_SwitchStatement -> expression:ts_Expression -> caseBlock:ts_CaseBlock -> ts_SwitchStatement [@@js.global "updateSwitch"]
  (** @deprecated Use `factory.createLabelStatement` or the factory supplied by your transformation context instead. *)
  val createLabel: label:ts_Identifier or_string -> statement:ts_Statement -> ts_LabeledStatement [@@js.global "createLabel"]
  (** @deprecated Use `factory.updateLabelStatement` or the factory supplied by your transformation context instead. *)
  val updateLabel: node:ts_LabeledStatement -> label:ts_Identifier -> statement:ts_Statement -> ts_LabeledStatement [@@js.global "updateLabel"]
  (** @deprecated Use `factory.createThrowStatement` or the factory supplied by your transformation context instead. *)
  val createThrow: expression:ts_Expression -> ts_ThrowStatement [@@js.global "createThrow"]
  (** @deprecated Use `factory.updateThrowStatement` or the factory supplied by your transformation context instead. *)
  val updateThrow: node:ts_ThrowStatement -> expression:ts_Expression -> ts_ThrowStatement [@@js.global "updateThrow"]
  (** @deprecated Use `factory.createTryStatement` or the factory supplied by your transformation context instead. *)
  val createTry: tryBlock:ts_Block -> catchClause:ts_CatchClause or_undefined -> finallyBlock:ts_Block or_undefined -> ts_TryStatement [@@js.global "createTry"]
  (** @deprecated Use `factory.updateTryStatement` or the factory supplied by your transformation context instead. *)
  val updateTry: node:ts_TryStatement -> tryBlock:ts_Block -> catchClause:ts_CatchClause or_undefined -> finallyBlock:ts_Block or_undefined -> ts_TryStatement [@@js.global "updateTry"]
  (** @deprecated Use `factory.createDebuggerStatement` or the factory supplied by your transformation context instead. *)
  val createDebuggerStatement: unit -> ts_DebuggerStatement [@@js.global "createDebuggerStatement"]
  (** @deprecated Use `factory.createVariableDeclarationList` or the factory supplied by your transformation context instead. *)
  val createVariableDeclarationList: declarations:ts_VariableDeclaration list -> ?flags:ts_NodeFlags or_undefined -> unit -> ts_VariableDeclarationList [@@js.global "createVariableDeclarationList"]
  (** @deprecated Use `factory.updateVariableDeclarationList` or the factory supplied by your transformation context instead. *)
  val updateVariableDeclarationList: node:ts_VariableDeclarationList -> declarations:ts_VariableDeclaration list -> ts_VariableDeclarationList [@@js.global "updateVariableDeclarationList"]
  (** @deprecated Use `factory.createFunctionDeclaration` or the factory supplied by your transformation context instead. *)
  val createFunctionDeclaration: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> asteriskToken:ts_AsteriskToken or_undefined -> name:ts_Identifier or_string or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_Block or_undefined -> ts_FunctionDeclaration [@@js.global "createFunctionDeclaration"]
  (** @deprecated Use `factory.updateFunctionDeclaration` or the factory supplied by your transformation context instead. *)
  val updateFunctionDeclaration: node:ts_FunctionDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> asteriskToken:ts_AsteriskToken or_undefined -> name:ts_Identifier or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> body:ts_Block or_undefined -> ts_FunctionDeclaration [@@js.global "updateFunctionDeclaration"]
  (** @deprecated Use `factory.createClassDeclaration` or the factory supplied by your transformation context instead. *)
  val createClassDeclaration: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier or_string or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> heritageClauses:ts_HeritageClause list or_undefined -> members:ts_ClassElement list -> ts_ClassDeclaration [@@js.global "createClassDeclaration"]
  (** @deprecated Use `factory.updateClassDeclaration` or the factory supplied by your transformation context instead. *)
  val updateClassDeclaration: node:ts_ClassDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> heritageClauses:ts_HeritageClause list or_undefined -> members:ts_ClassElement list -> ts_ClassDeclaration [@@js.global "updateClassDeclaration"]
  (** @deprecated Use `factory.createInterfaceDeclaration` or the factory supplied by your transformation context instead. *)
  val createInterfaceDeclaration: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier or_string -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> heritageClauses:ts_HeritageClause list or_undefined -> members:ts_TypeElement list -> ts_InterfaceDeclaration [@@js.global "createInterfaceDeclaration"]
  (** @deprecated Use `factory.updateInterfaceDeclaration` or the factory supplied by your transformation context instead. *)
  val updateInterfaceDeclaration: node:ts_InterfaceDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> heritageClauses:ts_HeritageClause list or_undefined -> members:ts_TypeElement list -> ts_InterfaceDeclaration [@@js.global "updateInterfaceDeclaration"]
  (** @deprecated Use `factory.createTypeAliasDeclaration` or the factory supplied by your transformation context instead. *)
  val createTypeAliasDeclaration: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier or_string -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> type_:ts_TypeNode -> ts_TypeAliasDeclaration [@@js.global "createTypeAliasDeclaration"]
  (** @deprecated Use `factory.updateTypeAliasDeclaration` or the factory supplied by your transformation context instead. *)
  val updateTypeAliasDeclaration: node:ts_TypeAliasDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> type_:ts_TypeNode -> ts_TypeAliasDeclaration [@@js.global "updateTypeAliasDeclaration"]
  (** @deprecated Use `factory.createEnumDeclaration` or the factory supplied by your transformation context instead. *)
  val createEnumDeclaration: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier or_string -> members:ts_EnumMember list -> ts_EnumDeclaration [@@js.global "createEnumDeclaration"]
  (** @deprecated Use `factory.updateEnumDeclaration` or the factory supplied by your transformation context instead. *)
  val updateEnumDeclaration: node:ts_EnumDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier -> members:ts_EnumMember list -> ts_EnumDeclaration [@@js.global "updateEnumDeclaration"]
  (** @deprecated Use `factory.createModuleDeclaration` or the factory supplied by your transformation context instead. *)
  val createModuleDeclaration: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_ModuleName -> body:ts_ModuleBody or_undefined -> ?flags:ts_NodeFlags or_undefined -> unit -> ts_ModuleDeclaration [@@js.global "createModuleDeclaration"]
  (** @deprecated Use `factory.updateModuleDeclaration` or the factory supplied by your transformation context instead. *)
  val updateModuleDeclaration: node:ts_ModuleDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> name:ts_ModuleName -> body:ts_ModuleBody or_undefined -> ts_ModuleDeclaration [@@js.global "updateModuleDeclaration"]
  (** @deprecated Use `factory.createModuleBlock` or the factory supplied by your transformation context instead. *)
  val createModuleBlock: statements:ts_Statement list -> ts_ModuleBlock [@@js.global "createModuleBlock"]
  (** @deprecated Use `factory.updateModuleBlock` or the factory supplied by your transformation context instead. *)
  val updateModuleBlock: node:ts_ModuleBlock -> statements:ts_Statement list -> ts_ModuleBlock [@@js.global "updateModuleBlock"]
  (** @deprecated Use `factory.createCaseBlock` or the factory supplied by your transformation context instead. *)
  val createCaseBlock: clauses:ts_CaseOrDefaultClause list -> ts_CaseBlock [@@js.global "createCaseBlock"]
  (** @deprecated Use `factory.updateCaseBlock` or the factory supplied by your transformation context instead. *)
  val updateCaseBlock: node:ts_CaseBlock -> clauses:ts_CaseOrDefaultClause list -> ts_CaseBlock [@@js.global "updateCaseBlock"]
  (** @deprecated Use `factory.createNamespaceExportDeclaration` or the factory supplied by your transformation context instead. *)
  val createNamespaceExportDeclaration: name:ts_Identifier or_string -> ts_NamespaceExportDeclaration [@@js.global "createNamespaceExportDeclaration"]
  (** @deprecated Use `factory.updateNamespaceExportDeclaration` or the factory supplied by your transformation context instead. *)
  val updateNamespaceExportDeclaration: node:ts_NamespaceExportDeclaration -> name:ts_Identifier -> ts_NamespaceExportDeclaration [@@js.global "updateNamespaceExportDeclaration"]
  (** @deprecated Use `factory.createImportEqualsDeclaration` or the factory supplied by your transformation context instead. *)
  val createImportEqualsDeclaration: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> isTypeOnly:bool -> name:ts_Identifier or_string -> moduleReference:ts_ModuleReference -> ts_ImportEqualsDeclaration [@@js.global "createImportEqualsDeclaration"]
  (** @deprecated Use `factory.updateImportEqualsDeclaration` or the factory supplied by your transformation context instead. *)
  val updateImportEqualsDeclaration: node:ts_ImportEqualsDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> isTypeOnly:bool -> name:ts_Identifier -> moduleReference:ts_ModuleReference -> ts_ImportEqualsDeclaration [@@js.global "updateImportEqualsDeclaration"]
  (** @deprecated Use `factory.createImportDeclaration` or the factory supplied by your transformation context instead. *)
  val createImportDeclaration: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> importClause:ts_ImportClause or_undefined -> moduleSpecifier:ts_Expression -> ts_ImportDeclaration [@@js.global "createImportDeclaration"]
  (** @deprecated Use `factory.updateImportDeclaration` or the factory supplied by your transformation context instead. *)
  val updateImportDeclaration: node:ts_ImportDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> importClause:ts_ImportClause or_undefined -> moduleSpecifier:ts_Expression -> ts_ImportDeclaration [@@js.global "updateImportDeclaration"]
  (** @deprecated Use `factory.createNamespaceImport` or the factory supplied by your transformation context instead. *)
  val createNamespaceImport: name:ts_Identifier -> ts_NamespaceImport [@@js.global "createNamespaceImport"]
  (** @deprecated Use `factory.updateNamespaceImport` or the factory supplied by your transformation context instead. *)
  val updateNamespaceImport: node:ts_NamespaceImport -> name:ts_Identifier -> ts_NamespaceImport [@@js.global "updateNamespaceImport"]
  (** @deprecated Use `factory.createNamedImports` or the factory supplied by your transformation context instead. *)
  val createNamedImports: elements:ts_ImportSpecifier list -> ts_NamedImports [@@js.global "createNamedImports"]
  (** @deprecated Use `factory.updateNamedImports` or the factory supplied by your transformation context instead. *)
  val updateNamedImports: node:ts_NamedImports -> elements:ts_ImportSpecifier list -> ts_NamedImports [@@js.global "updateNamedImports"]
  (** @deprecated Use `factory.createImportSpecifier` or the factory supplied by your transformation context instead. *)
  val createImportSpecifier: propertyName:ts_Identifier or_undefined -> name:ts_Identifier -> ts_ImportSpecifier [@@js.global "createImportSpecifier"]
  (** @deprecated Use `factory.updateImportSpecifier` or the factory supplied by your transformation context instead. *)
  val updateImportSpecifier: node:ts_ImportSpecifier -> propertyName:ts_Identifier or_undefined -> name:ts_Identifier -> ts_ImportSpecifier [@@js.global "updateImportSpecifier"]
  (** @deprecated Use `factory.createExportAssignment` or the factory supplied by your transformation context instead. *)
  val createExportAssignment: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> isExportEquals:bool or_undefined -> expression:ts_Expression -> ts_ExportAssignment [@@js.global "createExportAssignment"]
  (** @deprecated Use `factory.updateExportAssignment` or the factory supplied by your transformation context instead. *)
  val updateExportAssignment: node:ts_ExportAssignment -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> expression:ts_Expression -> ts_ExportAssignment [@@js.global "updateExportAssignment"]
  (** @deprecated Use `factory.createNamedExports` or the factory supplied by your transformation context instead. *)
  val createNamedExports: elements:ts_ExportSpecifier list -> ts_NamedExports [@@js.global "createNamedExports"]
  (** @deprecated Use `factory.updateNamedExports` or the factory supplied by your transformation context instead. *)
  val updateNamedExports: node:ts_NamedExports -> elements:ts_ExportSpecifier list -> ts_NamedExports [@@js.global "updateNamedExports"]
  (** @deprecated Use `factory.createExportSpecifier` or the factory supplied by your transformation context instead. *)
  val createExportSpecifier: propertyName:ts_Identifier or_string or_undefined -> name:ts_Identifier or_string -> ts_ExportSpecifier [@@js.global "createExportSpecifier"]
  (** @deprecated Use `factory.updateExportSpecifier` or the factory supplied by your transformation context instead. *)
  val updateExportSpecifier: node:ts_ExportSpecifier -> propertyName:ts_Identifier or_undefined -> name:ts_Identifier -> ts_ExportSpecifier [@@js.global "updateExportSpecifier"]
  (** @deprecated Use `factory.createExternalModuleReference` or the factory supplied by your transformation context instead. *)
  val createExternalModuleReference: expression:ts_Expression -> ts_ExternalModuleReference [@@js.global "createExternalModuleReference"]
  (** @deprecated Use `factory.updateExternalModuleReference` or the factory supplied by your transformation context instead. *)
  val updateExternalModuleReference: node:ts_ExternalModuleReference -> expression:ts_Expression -> ts_ExternalModuleReference [@@js.global "updateExternalModuleReference"]
  (** @deprecated Use `factory.createJSDocTypeExpression` or the factory supplied by your transformation context instead. *)
  val createJSDocTypeExpression: type_:ts_TypeNode -> ts_JSDocTypeExpression [@@js.global "createJSDocTypeExpression"]
  (** @deprecated Use `factory.createJSDocTypeTag` or the factory supplied by your transformation context instead. *)
  val createJSDocTypeTag: tagName:ts_Identifier or_undefined -> typeExpression:ts_JSDocTypeExpression -> ?comment:string or_undefined -> unit -> ts_JSDocTypeTag [@@js.global "createJSDocTypeTag"]
  (** @deprecated Use `factory.createJSDocReturnTag` or the factory supplied by your transformation context instead. *)
  val createJSDocReturnTag: tagName:ts_Identifier or_undefined -> ?typeExpression:ts_JSDocTypeExpression or_undefined -> ?comment:string or_undefined -> unit -> ts_JSDocReturnTag [@@js.global "createJSDocReturnTag"]
  (** @deprecated Use `factory.createJSDocThisTag` or the factory supplied by your transformation context instead. *)
  val createJSDocThisTag: tagName:ts_Identifier or_undefined -> typeExpression:ts_JSDocTypeExpression -> ?comment:string or_undefined -> unit -> ts_JSDocThisTag [@@js.global "createJSDocThisTag"]
  (** @deprecated Use `factory.createJSDocComment` or the factory supplied by your transformation context instead. *)
  val createJSDocComment: ?comment:string or_undefined -> ?tags:ts_JSDocTag list or_undefined -> unit -> ts_JSDoc [@@js.global "createJSDocComment"]
  (** @deprecated Use `factory.createJSDocParameterTag` or the factory supplied by your transformation context instead. *)
  val createJSDocParameterTag: tagName:ts_Identifier or_undefined -> name:ts_EntityName -> isBracketed:bool -> ?typeExpression:ts_JSDocTypeExpression or_undefined -> ?isNameFirst:bool or_undefined -> ?comment:string or_undefined -> unit -> ts_JSDocParameterTag [@@js.global "createJSDocParameterTag"]
  (** @deprecated Use `factory.createJSDocClassTag` or the factory supplied by your transformation context instead. *)
  val createJSDocClassTag: tagName:ts_Identifier or_undefined -> ?comment:string or_undefined -> unit -> ts_JSDocClassTag [@@js.global "createJSDocClassTag"]
  (** @deprecated Use `factory.createJSDocAugmentsTag` or the factory supplied by your transformation context instead. *)
  val createJSDocAugmentsTag: tagName:ts_Identifier or_undefined -> className:(ts_ExpressionWithTypeArguments, anonymous_interface_7) intersection2 -> ?comment:string or_undefined -> unit -> ts_JSDocAugmentsTag [@@js.global "createJSDocAugmentsTag"]
  (** @deprecated Use `factory.createJSDocEnumTag` or the factory supplied by your transformation context instead. *)
  val createJSDocEnumTag: tagName:ts_Identifier or_undefined -> typeExpression:ts_JSDocTypeExpression -> ?comment:string or_undefined -> unit -> ts_JSDocEnumTag [@@js.global "createJSDocEnumTag"]
  (** @deprecated Use `factory.createJSDocTemplateTag` or the factory supplied by your transformation context instead. *)
  val createJSDocTemplateTag: tagName:ts_Identifier or_undefined -> constraint_:ts_JSDocTypeExpression or_undefined -> typeParameters:ts_TypeParameterDeclaration list -> ?comment:string or_undefined -> unit -> ts_JSDocTemplateTag [@@js.global "createJSDocTemplateTag"]
  (** @deprecated Use `factory.createJSDocTypedefTag` or the factory supplied by your transformation context instead. *)
  val createJSDocTypedefTag: tagName:ts_Identifier or_undefined -> ?typeExpression:([`U_n_301 of ts_JSDocTypeExpression  | `U_n_312 of ts_JSDocTypeLiteral ] [@js.union on_field "kind"]) or_undefined -> ?fullName:([`U_n_78 of ts_Identifier  | `U_n_256 of ts_JSDocNamespaceDeclaration ] [@js.union on_field "kind"]) or_undefined -> ?comment:string or_undefined -> unit -> ts_JSDocTypedefTag [@@js.global "createJSDocTypedefTag"]
  (** @deprecated Use `factory.createJSDocCallbackTag` or the factory supplied by your transformation context instead. *)
  val createJSDocCallbackTag: tagName:ts_Identifier or_undefined -> typeExpression:ts_JSDocSignature -> ?fullName:([`U_n_78 of ts_Identifier  | `U_n_256 of ts_JSDocNamespaceDeclaration ] [@js.union on_field "kind"]) or_undefined -> ?comment:string or_undefined -> unit -> ts_JSDocCallbackTag [@@js.global "createJSDocCallbackTag"]
  (** @deprecated Use `factory.createJSDocSignature` or the factory supplied by your transformation context instead. *)
  val createJSDocSignature: typeParameters:ts_JSDocTemplateTag list or_undefined -> parameters:ts_JSDocParameterTag list -> ?type_:ts_JSDocReturnTag or_undefined -> unit -> ts_JSDocSignature [@@js.global "createJSDocSignature"]
  (** @deprecated Use `factory.createJSDocPropertyTag` or the factory supplied by your transformation context instead. *)
  val createJSDocPropertyTag: tagName:ts_Identifier or_undefined -> name:ts_EntityName -> isBracketed:bool -> ?typeExpression:ts_JSDocTypeExpression or_undefined -> ?isNameFirst:bool or_undefined -> ?comment:string or_undefined -> unit -> ts_JSDocPropertyTag [@@js.global "createJSDocPropertyTag"]
  (** @deprecated Use `factory.createJSDocTypeLiteral` or the factory supplied by your transformation context instead. *)
  val createJSDocTypeLiteral: ?jsDocPropertyTags:ts_JSDocPropertyLikeTag list or_undefined -> ?isArrayType:bool or_undefined -> unit -> ts_JSDocTypeLiteral [@@js.global "createJSDocTypeLiteral"]
  (** @deprecated Use `factory.createJSDocImplementsTag` or the factory supplied by your transformation context instead. *)
  val createJSDocImplementsTag: tagName:ts_Identifier or_undefined -> className:(ts_ExpressionWithTypeArguments, anonymous_interface_7) intersection2 -> ?comment:string or_undefined -> unit -> ts_JSDocImplementsTag [@@js.global "createJSDocImplementsTag"]
  (** @deprecated Use `factory.createJSDocAuthorTag` or the factory supplied by your transformation context instead. *)
  val createJSDocAuthorTag: tagName:ts_Identifier or_undefined -> ?comment:string or_undefined -> unit -> ts_JSDocAuthorTag [@@js.global "createJSDocAuthorTag"]
  (** @deprecated Use `factory.createJSDocPublicTag` or the factory supplied by your transformation context instead. *)
  val createJSDocPublicTag: tagName:ts_Identifier or_undefined -> ?comment:string or_undefined -> unit -> ts_JSDocPublicTag [@@js.global "createJSDocPublicTag"]
  (** @deprecated Use `factory.createJSDocPrivateTag` or the factory supplied by your transformation context instead. *)
  val createJSDocPrivateTag: tagName:ts_Identifier or_undefined -> ?comment:string or_undefined -> unit -> ts_JSDocPrivateTag [@@js.global "createJSDocPrivateTag"]
  (** @deprecated Use `factory.createJSDocProtectedTag` or the factory supplied by your transformation context instead. *)
  val createJSDocProtectedTag: tagName:ts_Identifier or_undefined -> ?comment:string or_undefined -> unit -> ts_JSDocProtectedTag [@@js.global "createJSDocProtectedTag"]
  (** @deprecated Use `factory.createJSDocReadonlyTag` or the factory supplied by your transformation context instead. *)
  val createJSDocReadonlyTag: tagName:ts_Identifier or_undefined -> ?comment:string or_undefined -> unit -> ts_JSDocReadonlyTag [@@js.global "createJSDocReadonlyTag"]
  (** @deprecated Use `factory.createJSDocUnknownTag` or the factory supplied by your transformation context instead. *)
  val createJSDocTag: tagName:ts_Identifier -> ?comment:string or_undefined -> unit -> ts_JSDocUnknownTag [@@js.global "createJSDocTag"]
  (** @deprecated Use `factory.createJsxElement` or the factory supplied by your transformation context instead. *)
  val createJsxElement: openingElement:ts_JsxOpeningElement -> children:ts_JsxChild list -> closingElement:ts_JsxClosingElement -> ts_JsxElement [@@js.global "createJsxElement"]
  (** @deprecated Use `factory.updateJsxElement` or the factory supplied by your transformation context instead. *)
  val updateJsxElement: node:ts_JsxElement -> openingElement:ts_JsxOpeningElement -> children:ts_JsxChild list -> closingElement:ts_JsxClosingElement -> ts_JsxElement [@@js.global "updateJsxElement"]
  (** @deprecated Use `factory.createJsxSelfClosingElement` or the factory supplied by your transformation context instead. *)
  val createJsxSelfClosingElement: tagName:ts_JsxTagNameExpression -> typeArguments:ts_TypeNode list or_undefined -> attributes:ts_JsxAttributes -> ts_JsxSelfClosingElement [@@js.global "createJsxSelfClosingElement"]
  (** @deprecated Use `factory.updateJsxSelfClosingElement` or the factory supplied by your transformation context instead. *)
  val updateJsxSelfClosingElement: node:ts_JsxSelfClosingElement -> tagName:ts_JsxTagNameExpression -> typeArguments:ts_TypeNode list or_undefined -> attributes:ts_JsxAttributes -> ts_JsxSelfClosingElement [@@js.global "updateJsxSelfClosingElement"]
  (** @deprecated Use `factory.createJsxOpeningElement` or the factory supplied by your transformation context instead. *)
  val createJsxOpeningElement: tagName:ts_JsxTagNameExpression -> typeArguments:ts_TypeNode list or_undefined -> attributes:ts_JsxAttributes -> ts_JsxOpeningElement [@@js.global "createJsxOpeningElement"]
  (** @deprecated Use `factory.updateJsxOpeningElement` or the factory supplied by your transformation context instead. *)
  val updateJsxOpeningElement: node:ts_JsxOpeningElement -> tagName:ts_JsxTagNameExpression -> typeArguments:ts_TypeNode list or_undefined -> attributes:ts_JsxAttributes -> ts_JsxOpeningElement [@@js.global "updateJsxOpeningElement"]
  (** @deprecated Use `factory.createJsxClosingElement` or the factory supplied by your transformation context instead. *)
  val createJsxClosingElement: tagName:ts_JsxTagNameExpression -> ts_JsxClosingElement [@@js.global "createJsxClosingElement"]
  (** @deprecated Use `factory.updateJsxClosingElement` or the factory supplied by your transformation context instead. *)
  val updateJsxClosingElement: node:ts_JsxClosingElement -> tagName:ts_JsxTagNameExpression -> ts_JsxClosingElement [@@js.global "updateJsxClosingElement"]
  (** @deprecated Use `factory.createJsxFragment` or the factory supplied by your transformation context instead. *)
  val createJsxFragment: openingFragment:ts_JsxOpeningFragment -> children:ts_JsxChild list -> closingFragment:ts_JsxClosingFragment -> ts_JsxFragment [@@js.global "createJsxFragment"]
  (** @deprecated Use `factory.createJsxText` or the factory supplied by your transformation context instead. *)
  val createJsxText: text:string -> ?containsOnlyTriviaWhiteSpaces:bool or_undefined -> unit -> ts_JsxText [@@js.global "createJsxText"]
  (** @deprecated Use `factory.updateJsxText` or the factory supplied by your transformation context instead. *)
  val updateJsxText: node:ts_JsxText -> text:string -> ?containsOnlyTriviaWhiteSpaces:bool or_undefined -> unit -> ts_JsxText [@@js.global "updateJsxText"]
  (** @deprecated Use `factory.createJsxOpeningFragment` or the factory supplied by your transformation context instead. *)
  val createJsxOpeningFragment: unit -> ts_JsxOpeningFragment [@@js.global "createJsxOpeningFragment"]
  (** @deprecated Use `factory.createJsxJsxClosingFragment` or the factory supplied by your transformation context instead. *)
  val createJsxJsxClosingFragment: unit -> ts_JsxClosingFragment [@@js.global "createJsxJsxClosingFragment"]
  (** @deprecated Use `factory.updateJsxFragment` or the factory supplied by your transformation context instead. *)
  val updateJsxFragment: node:ts_JsxFragment -> openingFragment:ts_JsxOpeningFragment -> children:ts_JsxChild list -> closingFragment:ts_JsxClosingFragment -> ts_JsxFragment [@@js.global "updateJsxFragment"]
  (** @deprecated Use `factory.createJsxAttribute` or the factory supplied by your transformation context instead. *)
  val createJsxAttribute: name:ts_Identifier -> initializer_:([`U_n_10 of ts_StringLiteral  | `U_n_283 of ts_JsxExpression ] [@js.union on_field "kind"]) or_undefined -> ts_JsxAttribute [@@js.global "createJsxAttribute"]
  (** @deprecated Use `factory.updateJsxAttribute` or the factory supplied by your transformation context instead. *)
  val updateJsxAttribute: node:ts_JsxAttribute -> name:ts_Identifier -> initializer_:([`U_n_10 of ts_StringLiteral  | `U_n_283 of ts_JsxExpression ] [@js.union on_field "kind"]) or_undefined -> ts_JsxAttribute [@@js.global "updateJsxAttribute"]
  (** @deprecated Use `factory.createJsxAttributes` or the factory supplied by your transformation context instead. *)
  val createJsxAttributes: properties:ts_JsxAttributeLike list -> ts_JsxAttributes [@@js.global "createJsxAttributes"]
  (** @deprecated Use `factory.updateJsxAttributes` or the factory supplied by your transformation context instead. *)
  val updateJsxAttributes: node:ts_JsxAttributes -> properties:ts_JsxAttributeLike list -> ts_JsxAttributes [@@js.global "updateJsxAttributes"]
  (** @deprecated Use `factory.createJsxSpreadAttribute` or the factory supplied by your transformation context instead. *)
  val createJsxSpreadAttribute: expression:ts_Expression -> ts_JsxSpreadAttribute [@@js.global "createJsxSpreadAttribute"]
  (** @deprecated Use `factory.updateJsxSpreadAttribute` or the factory supplied by your transformation context instead. *)
  val updateJsxSpreadAttribute: node:ts_JsxSpreadAttribute -> expression:ts_Expression -> ts_JsxSpreadAttribute [@@js.global "updateJsxSpreadAttribute"]
  (** @deprecated Use `factory.createJsxExpression` or the factory supplied by your transformation context instead. *)
  val createJsxExpression: dotDotDotToken:ts_DotDotDotToken or_undefined -> expression:ts_Expression or_undefined -> ts_JsxExpression [@@js.global "createJsxExpression"]
  (** @deprecated Use `factory.updateJsxExpression` or the factory supplied by your transformation context instead. *)
  val updateJsxExpression: node:ts_JsxExpression -> expression:ts_Expression or_undefined -> ts_JsxExpression [@@js.global "updateJsxExpression"]
  (** @deprecated Use `factory.createCaseClause` or the factory supplied by your transformation context instead. *)
  val createCaseClause: expression:ts_Expression -> statements:ts_Statement list -> ts_CaseClause [@@js.global "createCaseClause"]
  (** @deprecated Use `factory.updateCaseClause` or the factory supplied by your transformation context instead. *)
  val updateCaseClause: node:ts_CaseClause -> expression:ts_Expression -> statements:ts_Statement list -> ts_CaseClause [@@js.global "updateCaseClause"]
  (** @deprecated Use `factory.createDefaultClause` or the factory supplied by your transformation context instead. *)
  val createDefaultClause: statements:ts_Statement list -> ts_DefaultClause [@@js.global "createDefaultClause"]
  (** @deprecated Use `factory.updateDefaultClause` or the factory supplied by your transformation context instead. *)
  val updateDefaultClause: node:ts_DefaultClause -> statements:ts_Statement list -> ts_DefaultClause [@@js.global "updateDefaultClause"]
  (** @deprecated Use `factory.createHeritageClause` or the factory supplied by your transformation context instead. *)
  val createHeritageClause: token:((ts_SyntaxKind_ExtendsKeyword, ts_SyntaxKind_ImplementsKeyword) union2, ([`ExtendsKeyword | `ImplementsKeyword] [@js.enum])) or_enum -> types:ts_ExpressionWithTypeArguments list -> ts_HeritageClause [@@js.global "createHeritageClause"]
  (** @deprecated Use `factory.updateHeritageClause` or the factory supplied by your transformation context instead. *)
  val updateHeritageClause: node:ts_HeritageClause -> types:ts_ExpressionWithTypeArguments list -> ts_HeritageClause [@@js.global "updateHeritageClause"]
  (** @deprecated Use `factory.createCatchClause` or the factory supplied by your transformation context instead. *)
  val createCatchClause: variableDeclaration:ts_VariableDeclaration or_string or_undefined -> block:ts_Block -> ts_CatchClause [@@js.global "createCatchClause"]
  (** @deprecated Use `factory.updateCatchClause` or the factory supplied by your transformation context instead. *)
  val updateCatchClause: node:ts_CatchClause -> variableDeclaration:ts_VariableDeclaration or_undefined -> block:ts_Block -> ts_CatchClause [@@js.global "updateCatchClause"]
  (** @deprecated Use `factory.createPropertyAssignment` or the factory supplied by your transformation context instead. *)
  val createPropertyAssignment: name:ts_PropertyName or_string -> initializer_:ts_Expression -> ts_PropertyAssignment [@@js.global "createPropertyAssignment"]
  (** @deprecated Use `factory.updatePropertyAssignment` or the factory supplied by your transformation context instead. *)
  val updatePropertyAssignment: node:ts_PropertyAssignment -> name:ts_PropertyName -> initializer_:ts_Expression -> ts_PropertyAssignment [@@js.global "updatePropertyAssignment"]
  (** @deprecated Use `factory.createShorthandPropertyAssignment` or the factory supplied by your transformation context instead. *)
  val createShorthandPropertyAssignment: name:ts_Identifier or_string -> ?objectAssignmentInitializer:ts_Expression or_undefined -> unit -> ts_ShorthandPropertyAssignment [@@js.global "createShorthandPropertyAssignment"]
  (** @deprecated Use `factory.updateShorthandPropertyAssignment` or the factory supplied by your transformation context instead. *)
  val updateShorthandPropertyAssignment: node:ts_ShorthandPropertyAssignment -> name:ts_Identifier -> objectAssignmentInitializer:ts_Expression or_undefined -> ts_ShorthandPropertyAssignment [@@js.global "updateShorthandPropertyAssignment"]
  (** @deprecated Use `factory.createSpreadAssignment` or the factory supplied by your transformation context instead. *)
  val createSpreadAssignment: expression:ts_Expression -> ts_SpreadAssignment [@@js.global "createSpreadAssignment"]
  (** @deprecated Use `factory.updateSpreadAssignment` or the factory supplied by your transformation context instead. *)
  val updateSpreadAssignment: node:ts_SpreadAssignment -> expression:ts_Expression -> ts_SpreadAssignment [@@js.global "updateSpreadAssignment"]
  (** @deprecated Use `factory.createEnumMember` or the factory supplied by your transformation context instead. *)
  val createEnumMember: name:ts_PropertyName or_string -> ?initializer_:ts_Expression or_undefined -> unit -> ts_EnumMember [@@js.global "createEnumMember"]
  (** @deprecated Use `factory.updateEnumMember` or the factory supplied by your transformation context instead. *)
  val updateEnumMember: node:ts_EnumMember -> name:ts_PropertyName -> initializer_:ts_Expression or_undefined -> ts_EnumMember [@@js.global "updateEnumMember"]
  (** @deprecated Use `factory.updateSourceFile` or the factory supplied by your transformation context instead. *)
  val updateSourceFileNode: node:ts_SourceFile -> statements:ts_Statement list -> ?isDeclarationFile:bool or_undefined -> ?referencedFiles:ts_FileReference list or_undefined -> ?typeReferences:ts_FileReference list or_undefined -> ?hasNoDefaultLib:bool or_undefined -> ?libReferences:ts_FileReference list or_undefined -> unit -> ts_SourceFile [@@js.global "updateSourceFileNode"]
  (** @deprecated Use `factory.createNotEmittedStatement` or the factory supplied by your transformation context instead. *)
  val createNotEmittedStatement: original:ts_Node -> ts_NotEmittedStatement [@@js.global "createNotEmittedStatement"]
  (** @deprecated Use `factory.createPartiallyEmittedExpression` or the factory supplied by your transformation context instead. *)
  val createPartiallyEmittedExpression: expression:ts_Expression -> ?original:ts_Node or_undefined -> unit -> ts_PartiallyEmittedExpression [@@js.global "createPartiallyEmittedExpression"]
  (** @deprecated Use `factory.updatePartiallyEmittedExpression` or the factory supplied by your transformation context instead. *)
  val updatePartiallyEmittedExpression: node:ts_PartiallyEmittedExpression -> expression:ts_Expression -> ts_PartiallyEmittedExpression [@@js.global "updatePartiallyEmittedExpression"]
  (** @deprecated Use `factory.createCommaListExpression` or the factory supplied by your transformation context instead. *)
  val createCommaList: elements:ts_Expression list -> ts_CommaListExpression [@@js.global "createCommaList"]
  (** @deprecated Use `factory.updateCommaListExpression` or the factory supplied by your transformation context instead. *)
  val updateCommaList: node:ts_CommaListExpression -> elements:ts_Expression list -> ts_CommaListExpression [@@js.global "updateCommaList"]
  (** @deprecated Use `factory.createBundle` or the factory supplied by your transformation context instead. *)
  val createBundle: sourceFiles:ts_SourceFile list -> ?prepends:([`U_n_299 of ts_UnparsedSource  | `U_n_300 of ts_InputFiles ] [@js.union on_field "kind"]) list or_undefined -> unit -> ts_Bundle [@@js.global "createBundle"]
  (** @deprecated Use `factory.updateBundle` or the factory supplied by your transformation context instead. *)
  val updateBundle: node:ts_Bundle -> sourceFiles:ts_SourceFile list -> ?prepends:([`U_n_299 of ts_UnparsedSource  | `U_n_300 of ts_InputFiles ] [@js.union on_field "kind"]) list or_undefined -> unit -> ts_Bundle [@@js.global "updateBundle"]
  (** @deprecated Use `factory.createImmediatelyInvokedFunctionExpression` or the factory supplied by your transformation context instead. *)
  val createImmediatelyInvokedFunctionExpression: anonymous_interface_25 [@@js.global "createImmediatelyInvokedFunctionExpression"]
  (** @deprecated Use `factory.createImmediatelyInvokedArrowFunction` or the factory supplied by your transformation context instead. *)
  val createImmediatelyInvokedArrowFunction: anonymous_interface_25 [@@js.global "createImmediatelyInvokedArrowFunction"]
  (** @deprecated Use `factory.createVoidZero` or the factory supplied by your transformation context instead. *)
  val createVoidZero: unit -> ts_VoidExpression [@@js.global "createVoidZero"]
  (** @deprecated Use `factory.createExportDefault` or the factory supplied by your transformation context instead. *)
  val createExportDefault: expression:ts_Expression -> ts_ExportAssignment [@@js.global "createExportDefault"]
  (** @deprecated Use `factory.createExternalModuleExport` or the factory supplied by your transformation context instead. *)
  val createExternalModuleExport: exportName:ts_Identifier -> ts_ExportDeclaration [@@js.global "createExternalModuleExport"]
  (** @deprecated Use `factory.createNamespaceExport` or the factory supplied by your transformation context instead. *)
  val createNamespaceExport: name:ts_Identifier -> ts_NamespaceExport [@@js.global "createNamespaceExport"]
  (** @deprecated Use `factory.updateNamespaceExport` or the factory supplied by your transformation context instead. *)
  val updateNamespaceExport: node:ts_NamespaceExport -> name:ts_Identifier -> ts_NamespaceExport [@@js.global "updateNamespaceExport"]
  (** @deprecated Use `factory.createToken` or the factory supplied by your transformation context instead. *)
  val createToken: kind:'TKind -> 'TKind ts_Token [@@js.global "createToken"]
  (** @deprecated Use `factory.createIdentifier` or the factory supplied by your transformation context instead. *)
  val createIdentifier: text:string -> ts_Identifier [@@js.global "createIdentifier"]
  (** @deprecated Use `factory.createTempVariable` or the factory supplied by your transformation context instead. *)
  val createTempVariable: recordTempVariable:(node:ts_Identifier -> unit) or_undefined -> ts_Identifier [@@js.global "createTempVariable"]
  (** @deprecated Use `factory.getGeneratedNameForNode` or the factory supplied by your transformation context instead. *)
  val getGeneratedNameForNode: node:ts_Node or_undefined -> ts_Identifier [@@js.global "getGeneratedNameForNode"]
  (** @deprecated Use `factory.createUniqueName(text, GeneratedIdentifierFlags.Optimistic)` or the factory supplied by your transformation context instead. *)
  val createOptimisticUniqueName: text:string -> ts_Identifier [@@js.global "createOptimisticUniqueName"]
  (** @deprecated Use `factory.createUniqueName(text, GeneratedIdentifierFlags.Optimistic | GeneratedIdentifierFlags.FileLevel)` or the factory supplied by your transformation context instead. *)
  val createFileLevelUniqueName: text:string -> ts_Identifier [@@js.global "createFileLevelUniqueName"]
  (** @deprecated Use `factory.createIndexSignature` or the factory supplied by your transformation context instead. *)
  val createIndexSignature: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode -> ts_IndexSignatureDeclaration [@@js.global "createIndexSignature"]
  (** @deprecated Use `factory.createTypePredicateNode` or the factory supplied by your transformation context instead. *)
  val createTypePredicateNode: parameterName:([`U_n_78 of ts_Identifier  | `U_n_187 of ts_ThisTypeNode ] [@js.union on_field "kind"]) or_string -> type_:ts_TypeNode -> ts_TypePredicateNode [@@js.global "createTypePredicateNode"]
  (** @deprecated Use `factory.updateTypePredicateNode` or the factory supplied by your transformation context instead. *)
  val updateTypePredicateNode: node:ts_TypePredicateNode -> parameterName:([`U_n_78 of ts_Identifier  | `U_n_187 of ts_ThisTypeNode ] [@js.union on_field "kind"]) -> type_:ts_TypeNode -> ts_TypePredicateNode [@@js.global "updateTypePredicateNode"]
  (** @deprecated Use `factory.createStringLiteral`, `factory.createStringLiteralFromNode`, `factory.createNumericLiteral`, `factory.createBigIntLiteral`, `factory.createTrue`, `factory.createFalse`, or the factory supplied by your transformation context instead. *)
  val createLiteral: anonymous_interface_33 [@@js.global "createLiteral"]
  (** @deprecated Use `factory.createMethodSignature` or the factory supplied by your transformation context instead. *)
  val createMethodSignature: typeParameters:ts_TypeParameterDeclaration list or_undefined -> parameters:ts_ParameterDeclaration list -> type_:ts_TypeNode or_undefined -> name:ts_PropertyName or_string -> questionToken:ts_QuestionToken or_undefined -> ts_MethodSignature [@@js.global "createMethodSignature"]
  (** @deprecated Use `factory.updateMethodSignature` or the factory supplied by your transformation context instead. *)
  val updateMethodSignature: node:ts_MethodSignature -> typeParameters:ts_TypeParameterDeclaration ts_NodeArray or_undefined -> parameters:ts_ParameterDeclaration ts_NodeArray -> type_:ts_TypeNode or_undefined -> name:ts_PropertyName -> questionToken:ts_QuestionToken or_undefined -> ts_MethodSignature [@@js.global "updateMethodSignature"]
  (** @deprecated Use `factory.createTypeOperatorNode` or the factory supplied by your transformation context instead. *)
  val createTypeOperatorNode: anonymous_interface_32 [@@js.global "createTypeOperatorNode"]
  (** @deprecated Use `factory.createTaggedTemplate` or the factory supplied by your transformation context instead. *)
  val createTaggedTemplate: anonymous_interface_26 [@@js.global "createTaggedTemplate"]
  (** @deprecated Use `factory.updateTaggedTemplate` or the factory supplied by your transformation context instead. *)
  val updateTaggedTemplate: anonymous_interface_22 [@@js.global "updateTaggedTemplate"]
  (** @deprecated Use `factory.updateBinary` or the factory supplied by your transformation context instead. *)
  val updateBinary: node:ts_BinaryExpression -> left:ts_Expression -> right:ts_Expression -> ?operator:((((((((((((((((((((((((((((((((((((((((((((((((((((((((ts_SyntaxKind_PercentEqualsToken, ts_SyntaxKind_PercentToken, ts_SyntaxKind_PlusEqualsToken, ts_SyntaxKind_PlusToken, ts_SyntaxKind_QuestionQuestionEqualsToken, ts_SyntaxKind_QuestionQuestionToken, ts_SyntaxKind_SlashEqualsToken, ts_SyntaxKind_SlashToken) union8, ts_SyntaxKind_MinusToken) or_, ts_SyntaxKind_MinusEqualsToken) or_, ts_SyntaxKind_LessThanToken) or_, ts_SyntaxKind_LessThanLessThanToken) or_, ts_SyntaxKind_LessThanLessThanEqualsToken) or_, ts_SyntaxKind_LessThanEqualsToken) or_, ts_SyntaxKind_InstanceOfKeyword) or_, ts_SyntaxKind_InKeyword) or_, ts_SyntaxKind_GreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanToken) or_, ts_SyntaxKind_GreaterThanGreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanGreaterThanEqualsToken) or_, ts_SyntaxKind_GreaterThanEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsToken) or_, ts_SyntaxKind_ExclamationEqualsEqualsToken) or_, ts_SyntaxKind_EqualsToken) or_, ts_SyntaxKind_EqualsEqualsToken) or_, ts_SyntaxKind_EqualsEqualsEqualsToken) or_, ts_SyntaxKind_CommaToken) or_, ts_SyntaxKind_CaretToken) or_, ts_SyntaxKind_CaretEqualsToken) or_, ts_SyntaxKind_BarToken) or_, ts_SyntaxKind_BarEqualsToken) or_, ts_SyntaxKind_BarBarToken) or_, ts_SyntaxKind_BarBarEqualsToken) or_, ts_SyntaxKind_AsteriskToken) or_, ts_SyntaxKind_AsteriskEqualsToken) or_, ts_SyntaxKind_AsteriskAsteriskToken) or_, ts_SyntaxKind_AsteriskAsteriskEqualsToken) or_, ts_SyntaxKind_AmpersandToken) or_, ts_SyntaxKind_AmpersandEqualsToken) or_, ts_SyntaxKind_AmpersandAmpersandToken) or_, ts_SyntaxKind_AmpersandAmpersandEqualsToken) or_, ts_ShiftOperatorOrHigher) or_, ts_ShiftOperator) or_, ts_RelationalOperatorOrHigher) or_, ts_RelationalOperator) or_, ts_MultiplicativeOperatorOrHigher) or_, ts_MultiplicativeOperator) or_, ts_LogicalOperatorOrHigher) or_, ts_LogicalOperator) or_, ts_ExponentiationOperator) or_, ts_EqualityOperatorOrHigher) or_, ts_EqualityOperator) or_, ts_CompoundAssignmentOperator) or_, ts_BitwiseOperatorOrHigher) or_, ts_BitwiseOperator) or_, ts_BinaryOperatorToken) or_, ts_BinaryOperator) or_, ts_AssignmentOperatorOrHigher) or_, ts_AssignmentOperator) or_, ts_AdditiveOperatorOrHigher) or_, ts_AdditiveOperator) or_, ([`AmpersandAmpersandEqualsToken | `AmpersandAmpersandToken | `AmpersandEqualsToken | `AmpersandToken | `AsteriskAsteriskEqualsToken | `AsteriskAsteriskToken | `AsteriskEqualsToken | `AsteriskToken | `BarBarEqualsToken | `BarBarToken | `BarEqualsToken | `BarToken | `CaretEqualsToken | `CaretToken | `CommaToken | `EqualsEqualsEqualsToken | `EqualsEqualsToken | `EqualsToken | `ExclamationEqualsEqualsToken | `ExclamationEqualsToken | `GreaterThanEqualsToken | `GreaterThanGreaterThanEqualsToken | `GreaterThanGreaterThanGreaterThanEqualsToken | `GreaterThanGreaterThanGreaterThanToken | `GreaterThanGreaterThanToken | `GreaterThanToken | `InKeyword | `InstanceOfKeyword | `LessThanEqualsToken | `LessThanLessThanEqualsToken | `LessThanLessThanToken | `LessThanToken | `MinusEqualsToken | `MinusToken | `PercentEqualsToken | `PercentToken | `PlusEqualsToken | `PlusToken | `QuestionQuestionEqualsToken | `QuestionQuestionToken | `SlashEqualsToken | `SlashToken] [@js.enum])) or_enum -> unit -> ts_BinaryExpression [@@js.global "updateBinary"]
  (** @deprecated Use `factory.createConditional` or the factory supplied by your transformation context instead. *)
  val createConditional: anonymous_interface_17 [@@js.global "createConditional"]
  (** @deprecated Use `factory.createYield` or the factory supplied by your transformation context instead. *)
  val createYield: anonymous_interface_18 [@@js.global "createYield"]
  (** @deprecated Use `factory.createClassExpression` or the factory supplied by your transformation context instead. *)
  val createClassExpression: modifiers:ts_Modifier list or_undefined -> name:ts_Identifier or_string or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> heritageClauses:ts_HeritageClause list or_undefined -> members:ts_ClassElement list -> ts_ClassExpression [@@js.global "createClassExpression"]
  (** @deprecated Use `factory.updateClassExpression` or the factory supplied by your transformation context instead. *)
  val updateClassExpression: node:ts_ClassExpression -> modifiers:ts_Modifier list or_undefined -> name:ts_Identifier or_undefined -> typeParameters:ts_TypeParameterDeclaration list or_undefined -> heritageClauses:ts_HeritageClause list or_undefined -> members:ts_ClassElement list -> ts_ClassExpression [@@js.global "updateClassExpression"]
  (** @deprecated Use `factory.createPropertySignature` or the factory supplied by your transformation context instead. *)
  val createPropertySignature: modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName or_string -> questionToken:ts_QuestionToken or_undefined -> type_:ts_TypeNode or_undefined -> ?initializer_:ts_Expression or_undefined -> unit -> ts_PropertySignature [@@js.global "createPropertySignature"]
  (** @deprecated Use `factory.updatePropertySignature` or the factory supplied by your transformation context instead. *)
  val updatePropertySignature: node:ts_PropertySignature -> modifiers:ts_Modifier list or_undefined -> name:ts_PropertyName -> questionToken:ts_QuestionToken or_undefined -> type_:ts_TypeNode or_undefined -> initializer_:ts_Expression or_undefined -> ts_PropertySignature [@@js.global "updatePropertySignature"]
  (** @deprecated Use `factory.createExpressionWithTypeArguments` or the factory supplied by your transformation context instead. *)
  val createExpressionWithTypeArguments: typeArguments:ts_TypeNode list or_undefined -> expression:ts_Expression -> ts_ExpressionWithTypeArguments [@@js.global "createExpressionWithTypeArguments"]
  (** @deprecated Use `factory.updateExpressionWithTypeArguments` or the factory supplied by your transformation context instead. *)
  val updateExpressionWithTypeArguments: node:ts_ExpressionWithTypeArguments -> typeArguments:ts_TypeNode list or_undefined -> expression:ts_Expression -> ts_ExpressionWithTypeArguments [@@js.global "updateExpressionWithTypeArguments"]
  (** @deprecated Use `factory.createArrowFunction` or the factory supplied by your transformation context instead. *)
  val createArrowFunction: anonymous_interface_19 [@@js.global "createArrowFunction"]
  (** @deprecated Use `factory.updateArrowFunction` or the factory supplied by your transformation context instead. *)
  val updateArrowFunction: anonymous_interface_21 [@@js.global "updateArrowFunction"]
  (** @deprecated Use `factory.createVariableDeclaration` or the factory supplied by your transformation context instead. *)
  val createVariableDeclaration: anonymous_interface_20 [@@js.global "createVariableDeclaration"]
  (** @deprecated Use `factory.updateVariableDeclaration` or the factory supplied by your transformation context instead. *)
  val updateVariableDeclaration: anonymous_interface_23 [@@js.global "updateVariableDeclaration"]
  (** @deprecated Use `factory.createImportClause` or the factory supplied by your transformation context instead. *)
  val createImportClause: name:ts_Identifier or_undefined -> namedBindings:ts_NamedImportBindings or_undefined -> ?isTypeOnly:any -> unit -> ts_ImportClause [@@js.global "createImportClause"]
  (** @deprecated Use `factory.updateImportClause` or the factory supplied by your transformation context instead. *)
  val updateImportClause: node:ts_ImportClause -> name:ts_Identifier or_undefined -> namedBindings:ts_NamedImportBindings or_undefined -> isTypeOnly:bool -> ts_ImportClause [@@js.global "updateImportClause"]
  (** @deprecated Use `factory.createExportDeclaration` or the factory supplied by your transformation context instead. *)
  val createExportDeclaration: decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> exportClause:ts_NamedExportBindings or_undefined -> ?moduleSpecifier:ts_Expression or_undefined -> ?isTypeOnly:any -> unit -> ts_ExportDeclaration [@@js.global "createExportDeclaration"]
  (** @deprecated Use `factory.updateExportDeclaration` or the factory supplied by your transformation context instead. *)
  val updateExportDeclaration: node:ts_ExportDeclaration -> decorators:ts_Decorator list or_undefined -> modifiers:ts_Modifier list or_undefined -> exportClause:ts_NamedExportBindings or_undefined -> moduleSpecifier:ts_Expression or_undefined -> isTypeOnly:bool -> ts_ExportDeclaration [@@js.global "updateExportDeclaration"]
  (** @deprecated Use `factory.createJSDocParameterTag` or the factory supplied by your transformation context instead. *)
  val createJSDocParamTag: name:ts_EntityName -> isBracketed:bool -> ?typeExpression:ts_JSDocTypeExpression or_undefined -> ?comment:string or_undefined -> unit -> ts_JSDocParameterTag [@@js.global "createJSDocParamTag"]
  (** @deprecated Use `factory.createComma` or the factory supplied by your transformation context instead. *)
  val createComma: left:ts_Expression -> right:ts_Expression -> ts_Expression [@@js.global "createComma"]
  (** @deprecated Use `factory.createLessThan` or the factory supplied by your transformation context instead. *)
  val createLessThan: left:ts_Expression -> right:ts_Expression -> ts_Expression [@@js.global "createLessThan"]
  (** @deprecated Use `factory.createAssignment` or the factory supplied by your transformation context instead. *)
  val createAssignment: left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.global "createAssignment"]
  (** @deprecated Use `factory.createStrictEquality` or the factory supplied by your transformation context instead. *)
  val createStrictEquality: left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.global "createStrictEquality"]
  (** @deprecated Use `factory.createStrictInequality` or the factory supplied by your transformation context instead. *)
  val createStrictInequality: left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.global "createStrictInequality"]
  (** @deprecated Use `factory.createAdd` or the factory supplied by your transformation context instead. *)
  val createAdd: left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.global "createAdd"]
  (** @deprecated Use `factory.createSubtract` or the factory supplied by your transformation context instead. *)
  val createSubtract: left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.global "createSubtract"]
  (** @deprecated Use `factory.createLogicalAnd` or the factory supplied by your transformation context instead. *)
  val createLogicalAnd: left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.global "createLogicalAnd"]
  (** @deprecated Use `factory.createLogicalOr` or the factory supplied by your transformation context instead. *)
  val createLogicalOr: left:ts_Expression -> right:ts_Expression -> ts_BinaryExpression [@@js.global "createLogicalOr"]
  (** @deprecated Use `factory.createPostfixIncrement` or the factory supplied by your transformation context instead. *)
  val createPostfixIncrement: operand:ts_Expression -> ts_PostfixUnaryExpression [@@js.global "createPostfixIncrement"]
  (** @deprecated Use `factory.createLogicalNot` or the factory supplied by your transformation context instead. *)
  val createLogicalNot: operand:ts_Expression -> ts_PrefixUnaryExpression [@@js.global "createLogicalNot"]
  (** @deprecated Use an appropriate `factory` method instead. *)
  val createNode: kind:ts_SyntaxKind -> ?pos:any -> ?end_:any -> unit -> ts_Node [@@js.global "createNode"]
  (**
    Creates a shallow, memberwise clone of a node ~for mutation~ with its `pos`, `end`, and `parent` set.
    
    NOTE: It is unsafe to change any properties of a `Node` that relate to its AST children, as those changes won't be
    captured with respect to transformations.
    @deprecated Use an appropriate `factory.update...` method instead, use `setCommentRange` or `setSourceMapRange`, and avoid setting `parent`.
  *)
  val getMutableClone: node:'T -> 'T [@@js.global "getMutableClone"]
  (** @deprecated Use `isTypeAssertionExpression` instead. *)
  val isTypeAssertion: node:ts_Node -> bool [@@js.global "isTypeAssertion"]
end
val setTimeout: handler:(args:(any list [@js.variadic]) -> unit) -> timeout:float -> any [@@js.global "setTimeout"]
val clearTimeout: handle:any -> unit [@@js.global "clearTimeout"]
(* CommonJsExport ({ name = [ts]
  fullName = [ts]
  loc = line 7222, col 10 of node_modules/typescript/lib/typescript.d.ts }) *)
